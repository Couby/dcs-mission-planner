// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}
// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };
  var nodeFS = require('fs');
  var nodePath = require('path');
  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };
  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };
  Module['load'] = function load(f) {
    globalEval(read(f));
  };
  Module['arguments'] = process['argv'].slice(2);
  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }
  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };
  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  this['Module'] = Module;
  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };
  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  if (typeof console !== 'undefined') {
    Module['print'] = function print(x) {
      console.log(x);
    };
    Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }
  if (ENVIRONMENT_IS_WEB) {
    this['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}
function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***
// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];
// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];
// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// === Auto-generated preamble library stuff ===
//========================================
// Runtime code shared with compiler
//========================================
var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (vararg) return 8;
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func) {
    var table = FUNCTION_TABLE;
    var ret = table.length;
    assert(ret % 2 === 0);
    table.push(func);
    for (var i = 0; i < 2-1; i++) table.push(0);
    return ret;
  },
  removeFunction: function (index) {
    var table = FUNCTION_TABLE;
    table[index] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    return Runtime.asmConstCache[code] = eval('(function(' + args.join(',') + '){ ' + Pointer_stringify(code) + ' })'); // new Function does not allow upvars in node
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;
      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }
      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((low>>>0)+((high>>>0)*4294967296)) : ((low>>>0)+((high|0)*4294967296))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}
//========================================
// Runtime essentials
//========================================
var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};
var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;
var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}
var globalScope = this;
// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;
// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}
// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;
// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;
// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;
var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;
// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var singleType = typeof types === 'string' ? types : null;
  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }
  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }
  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }
  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];
    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later
    setValue(ret+i, curr, type);
    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }
  return ret;
}
Module['allocate'] = allocate;
function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;
  var ret = '';
  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;
// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;
  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;
// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;
  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;
function demangle(func) {
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    var i = 3;
    // params, etc.
    var basicTypes = {
      'v': 'void',
      'b': 'bool',
      'c': 'char',
      's': 'short',
      'i': 'int',
      'l': 'long',
      'f': 'float',
      'd': 'double',
      'w': 'wchar_t',
      'a': 'signed char',
      'h': 'unsigned char',
      't': 'unsigned short',
      'j': 'unsigned int',
      'm': 'unsigned long',
      'x': 'long long',
      'y': 'unsigned long long',
      'z': '...'
    };
    function dump(x) {
      //return;
      if (x) Module.print(x);
      Module.print(func);
      var pre = '';
      for (var a = 0; a < i; a++) pre += ' ';
      Module.print (pre + '^');
    }
    var subs = [];
    function parseNested() {
      i++;
      if (func[i] === 'K') i++; // ignore const
      var parts = [];
      while (func[i] !== 'E') {
        if (func[i] === 'S') { // substitution
          i++;
          var next = func.indexOf('_', i);
          var num = func.substring(i, next) || 0;
          parts.push(subs[num] || '?');
          i = next+1;
          continue;
        }
        if (func[i] === 'C') { // constructor
          parts.push(parts[parts.length-1]);
          i += 2;
          continue;
        }
        var size = parseInt(func.substr(i));
        var pre = size.toString().length;
        if (!size || !pre) { i--; break; } // counter i++ below us
        var curr = func.substr(i + pre, size);
        parts.push(curr);
        subs.push(curr);
        i += pre + size;
      }
      i++; // skip E
      return parts;
    }
    var first = true;
    function parse(rawList, limit, allowVoid) { // main parser
      limit = limit || Infinity;
      var ret = '', list = [];
      function flushList() {
        return '(' + list.join(', ') + ')';
      }
      var name;
      if (func[i] === 'N') {
        // namespaced N-E
        name = parseNested().join('::');
        limit--;
        if (limit === 0) return rawList ? [name] : name;
      } else {
        // not namespaced
        if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
        var size = parseInt(func.substr(i));
        if (size) {
          var pre = size.toString().length;
          name = func.substr(i + pre, size);
          i += pre + size;
        }
      }
      first = false;
      if (func[i] === 'I') {
        i++;
        var iList = parse(true);
        var iRet = parse(true, 1, true);
        ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
      } else {
        ret = name;
      }
      paramLoop: while (i < func.length && limit-- > 0) {
        //dump('paramLoop');
        var c = func[i++];
        if (c in basicTypes) {
          list.push(basicTypes[c]);
        } else {
          switch (c) {
            case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
            case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
            case 'L': { // literal
              i++; // skip basic type
              var end = func.indexOf('E', i);
              var size = end - i;
              list.push(func.substr(i, size));
              i += size + 2; // size + 'EE'
              break;
            }
            case 'A': { // array
              var size = parseInt(func.substr(i));
              i += size.toString().length;
              if (func[i] !== '_') throw '?';
              i++; // skip _
              list.push(parse(true, 1, true)[0] + ' [' + size + ']');
              break;
            }
            case 'E': break paramLoop;
            default: ret += '?' + c; break paramLoop;
          }
        }
      }
      if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
      return rawList ? list : ret + flushList();
    }
    return parse();
  } catch(e) {
    return func;
  }
}
function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}
function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}
// Memory management
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk
function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.
  while (TOTAL_MEMORY <= DYNAMICTOP) { // Simple heuristic. Override enlargeMemory() if your program has something more optimal for it
    TOTAL_MEMORY = alignMemoryPage(2*TOTAL_MEMORY);
  }
  assert(TOTAL_MEMORY <= Math.pow(2, 30)); // 2^30==1GB is a practical maximum - 2^31 is already close to possible negative numbers etc.
  var oldHEAP8 = HEAP8;
  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
  HEAP8.set(oldHEAP8);
}
var TOTAL_STACK = Module['TOTAL_STACK'] || 10485760;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;
// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');
var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');
Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited
var runtimeInitialized = false;
function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}
function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}
function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}
function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;
function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;
function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;
function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;
function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;
// Tools
// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;
function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;
// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;
function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}
if (!Math['imul']) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];
var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;
Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data
var memoryInitializer = null;
// === Body ===
STATIC_BASE = 8;
STATICTOP = STATIC_BASE + 12600;
/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } });
var _stdout;
var _stdout=_stdout=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var _stdin;
var _stdin=_stdin=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var _stderr;
var _stderr=_stderr=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
/* memory initializer */ allocate([117,115,101,114,100,97,116,97,0,0,0,0,0,0,0,0,184,13,0,0,22,1,0,0,176,39,0,0,100,0,0,0,216,30,0,0,32,0,0,0,40,24,0,0,126,0,0,0,24,19,0,0,214,0,0,0,168,15,0,0,78,1,0,0,0,0,0,0,0,0,0,0,64,15,0,0,48,0,0,0,72,40,0,0,72,0,0,0,144,31,0,0,212,0,0,0,112,24,0,0,74,1,0,0,96,19,0,0,40,1,0,0,184,15,0,0,252,0,0,0,104,14,0,0,68,0,0,0,152,12,0,0,20,1,0,0,72,11,0,0,232,0,0,0,72,10,0,0,60,0,0,0,96,46,0,0,132,0,0,0,0,0,0,0,0,0,0,0,56,31,0,0,230,0,0,0,72,24,0,0,58,0,0,0,40,19,0,0,106,0,0,0,176,15,0,0,70,0,0,0,96,14,0,0,142,0,0,0,144,12,0,0,122,0,0,0,64,11,0,0,150,0,0,0,64,10,0,0,14,1,0,0,88,46,0,0,218,0,0,0,200,44,0,0,80,0,0,0,96,43,0,0,130,0,0,0,96,42,0,0,56,0,0,0,168,41,0,0,8,1,0,0,248,40,0,0,102,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,7,7,7,7,7,7,10,9,5,4,3,3,3,3,3,3,3,3,3,3,3,3,2,2,1,1,0,0,0,0,0,0,0,0,36,64,0,0,0,0,0,0,89,64,0,0,0,0,0,136,195,64,0,0,0,0,132,215,151,65,0,128,224,55,121,195,65,67,23,110,5,181,181,184,147,70,245,249,63,233,3,79,56,77,50,29,48,249,72,119,130,90,60,191,115,127,221,79,21,117,64,23,0,0,82,0,0,0,192,22,0,0,216,0,0,0,0,0,0,0,0,0,0,0,112,36,0,0,160,35,0,0,192,34,0,0,160,33,0,0,216,32,0,0,72,10,0,0,0,0,0,0,0,0,0,0,6,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,2,0,0,0,184,31,0,0,36,0,0,0,128,24,0,0,40,0,0,0,112,19,0,0,128,0,0,0,192,15,0,0,164,0,0,0,112,14,0,0,22,0,0,0,160,12,0,0,190,0,0,0,88,11,0,0,70,1,0,0,80,10,0,0,198,0,0,0,104,46,0,0,74,0,0,0,248,44,0,0,98,0,0,0,112,43,0,0,94,0,0,0,112,42,0,0,244,0,0,0,184,41,0,0,188,0,0,0,8,41,0,0,248,0,0,0,0,40,0,0,2,1,0,0,40,39,0,0,228,0,0,0,88,38,0,0,220,0,0,0,144,37,0,0,118,0,0,0,120,36,0,0,170,0,0,0,168,35,0,0,84,0,0,0,200,34,0,0,154,0,0,0,176,33,0,0,234,0,0,0,224,32,0,0,34,0,0,0,16,32,0,0,32,1,0,0,40,31,0,0,68,1,0,0,48,30,0,0,200,0,0,0,152,29,0,0,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,22,22,22,22,22,22,22,22,22,22,4,4,4,4,4,4,4,21,21,21,21,21,21,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,5,4,21,21,21,21,21,21,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,127,64,33,0,0,0,0,0,56,195,32,36,0,0,48,35,0,0,32,34,0,0,72,33,0,0,120,32,0,0,176,31,0,0,176,30,0,0,248,29,0,0,80,29,0,0,136,28,0,0,8,28,0,0,40,27,0,0,72,26,0,0,128,25,0,0,200,24,0,0,120,24,0,0,32,24,0,0,144,23,0,0,56,23,0,0,152,22,0,0,40,22,0,0,120,21,0,0,216,20,0,0,80,20,0,0,192,19,0,0,104,19,0,0,16,19,0,0,160,18,0,0,24,18,0,0,152,17,0,0,88,17,0,0,200,16,0,0,96,16,0,0,0,0,0,0,224,31,0,0,144,43,0,0,208,34,0,0,8,0,0,0,176,26,0,0,8,21,0,0,128,16,0,0,48,15,0,0,8,0,0,0,128,13,0,0,0,12,0,0,232,10,0,0,224,46,0,0,80,45,0,0,0,44,0,0,232,42,0,0,24,42,0,0,72,41,0,0,64,40,0,0,112,39,0,0,176,38,0,0,184,37,0,0,208,36,0,0,0,36,0,0,24,35,0,0,8,34,0,0,32,33,0,0,88,32,0,0,136,31,0,0,0,0,0,0,96,113,65,84,80,80,92,108,60,16,60,84,108,124,124,124,124,124,124,96,96,96,104,34,188,188,188,132,228,84,84,16,98,98,4,98,20,81,80,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,33,0,0,0,0,0,56,195,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,112,20,0,0,0,20,0,0,168,19,0,0,64,19,0,0,216,18,0,0,96,18,0,0,0,18,0,0,120,17,0,0,232,16,0,0,160,16,0,0,56,16,0,0,0,0,0,0,88,39,0,0,26,1,0,0,96,30,0,0,168,0,0,0,248,23,0,0,62,1,0,0,208,18,0,0,58,1,0,0,144,15,0,0,44,0,0,0,200,13,0,0,124,0,0,0,88,12,0,0,86,0,0,0,8,11,0,0,34,1,0,0,32,10,0,0,54,0,0,0,224,45,0,0,186,0,0,0,0,0,0,0,0,0,0,0,0,39,0,0,144,0,0,0,0,0,0,0,0,0,0,0,96,11,0,0,148,0,0,0,88,10,0,0,86,1,0,0,152,24,0,0,44,1,0,0,112,46,0,0,104,0,0,0,64,24,0,0,0,1,0,0,224,23,0,0,202,0,0,0,104,23,0,0,184,0,0,0,0,45,0,0,246,0,0,0,0,23,0,0,66,0,0,0,88,22,0,0,30,1,0,0,200,41,0,0,12,0,0,0,0,0,0,0,0,0,0,0,184,35,0,0,224,34,0,0,200,33,0,0,248,32,0,0,32,32,0,0,0,0,0,0,96,11,0,0,148,0,0,0,88,10,0,0,240,0,0,0,112,46,0,0,46,0,0,0,0,45,0,0,158,0,0,0,152,43,0,0,2,0,0,0,120,42,0,0,90,1,0,0,200,41,0,0,52,0,0,0,16,41,0,0,76,1,0,0,8,40,0,0,10,0,0,0,0,0,0,0,0,0,0,0,176,35,0,0,216,34,0,0,192,33,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,240,32,0,0,24,32,0,0,48,31,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,18,0,0,16,1,0,0,136,41,0,0,88,1,0,0,144,32,0,0,38,0,0,0,208,24,0,0,108,0,0,0,200,19,0,0,50,0,0,0,232,15,0,0,46,1,0,0,152,14,0,0,18,0,0,0,176,12,0,0,134,0,0,0,104,11,0,0,136,0,0,0,96,10,0,0,42,0,0,0,120,46,0,0,38,1,0,0,8,45,0,0,210,0,0,0,160,43,0,0,10,1,0,0,128,42,0,0,110,0,0,0,208,41,0,0,62,0,0,0,24,41,0,0,84,1,0,0,0,0,0,0,0,0,0,0,116,0,0,0,30,0,0,0,56,1,0,0,6,0,0,0,0,0,0,0,0,0,0,0,8,19,0,0,140,0,0,0,160,41,0,0,12,1,0,0,160,32,0,0,162,0,0,0,240,24,0,0,6,1,0,0,216,19,0,0,160,0,0,0,248,15,0,0,208,0,0,0,0,0,0,0,0,0,0,0,208,28,0,0,72,47,0,0,160,19,0,0,80,1,0,0,192,41,0,0,24,0,0,0,232,32,0,0,66,1,0,0,32,25,0,0,16,0,0,0,224,19,0,0,112,0,0,0,0,16,0,0,48,1,0,0,200,14,0,0,176,0,0,0,240,12,0,0,204,0,0,0,152,11,0,0,36,1,0,0,136,10,0,0,114,0,0,0,152,46,0,0,52,1,0,0,24,45,0,0,174,0,0,0,0,0,0,0,0,0,0,0,120,25,0,0,88,0,0,0,64,20,0,0,54,1,0,0,8,16,0,0,224,0,0,0,208,14,0,0,4,1,0,0,248,12,0,0,242,0,0,0,160,11,0,0,24,1,0,0,144,10,0,0,250,0,0,0,160,46,0,0,60,1,0,0,32,45,0,0,28,0,0,0,216,43,0,0,4,0,0,0,192,42,0,0,196,0,0,0,8,42,0,0,254,0,0,0,40,41,0,0,238,0,0,0,56,40,0,0,206,0,0,0,96,39,0,0,72,1,0,0,120,38,0,0,50,1,0,0,168,37,0,0,42,1,0,0,168,36,0,0,18,1,0,0,192,35,0,0,138,0,0,0,232,34,0,0,92,0,0,0,240,33,0,0,8,0,0,0,0,33,0,0,156,0,0,0,0,0,0,0,0,0,0,0,33,0,0,0,0,0,56,195,33,0,0,0,0,0,56,195,43,45,0,0,0,0,0,0,109,97,116,104,0,0,0,0,76,85,65,95,67,80,65,84,72,0,0,0,0,0,0,0,110,0,0,0,0,0,0,0,108,101,110,0,0,0,0,0,116,105,109,101,0,0,0,0,99,111,115,0,0,0,0,0,102,108,117,115,104,0,0,0,117,112,118,97,108,117,101,105,100,0,0,0,0,0,0,0,99,111,114,111,117,116,105,110,101,32,101,120,112,101,99,116,101,100,0,0,0,0,0,0,114,101,112,108,97,99,101,0,108,111,97,100,102,105,108,101,0,0,0,0,0,0,0,0,110,0,0,0,0,0,0,0,99,97,110,110,111,116,32,114,101,115,117,109,101,32,110,111,110,45,115,117,115,112,101,110,100,101,100,32,99,111,114,111,117,116,105,110,101,0,0,0,118,101,114,115,105,111,110,32,109,105,115,109,97,116,99,104,32,105,110,0,0,0,0,0,117,112,118,97,108,0,0,0,115,101,108,102,0,0,0,0,103,108,111,98,97,108,0,0,80,112,0,0,0,0,0,0,98,105,116,51,50,0,0,0,76,85,65,95,67,80,65,84,72,95,53,95,50,0,0,0,116,111,111,32,109,97,110,121,32,114,101,115,117,108,116,115,32,116,111,32,117,110,112,97,99,107,0,0,0,0,0,0,103,115,117,98,0,0,0,0,115,101,116,108,111,99,97,108,101,0,0,0,0,0,0,0,99,111,115,104,0,0,0,0,99,108,111,115,101,0,0,0,117,112,118,97,108,117,101,106,111,105,110,0,0,0,0,0,116,111,111,32,109,97,110,121,32,114,101,115,117,108,116,115,32,116,111,32,114,101,115,117,109,101,0,0,0,0,0,0,108,115,104,105,102,116,0,0,105,112,97,105,114,115,0,0,98,97,100,32,97,114,103,117,109,101,110,116,32,35,37,100,32,40,37,115,41,0,0,0,101,114,114,111,114,32,105,110,32,101,114,114,111,114,32,104,97,110,100,108,105,110,103,0,39,102,111,114,39,32,115,116,101,112,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0,0,0,0,0,110,111,116,32,97,0,0,0,112,114,111,116,111,0,0,0,99,97,110,110,111,116,32,117,115,101,32,39,46,46,46,39,32,111,117,116,115,105,100,101,32,97,32,118,97,114,97,114,103,32,102,117,110,99,116,105,111,110,0,0,0,0,0,0,34,93,0,0,0,0,0,0,95,69,78,86,0,0,0,0,39,37,99,39,0,0,0,0,88,120,0,0,0,0,0,0,115,116,114,105,110,103,0,0,99,112,97,116,104,0,0,0,105,110,118,97,108,105,100,32,111,114,100,101,114,32,102,117,110,99,116,105,111,110,32,102,111,114,32,115,111,114,116,105,110,103,0,0,0,0,0,0,103,109,97,116,99,104,0,0,114,101,110,97,109,101,0,0,99,101,105,108,0,0,0,0,95,95,105,110,100,101,120,0,103,101,116,117,112,118,97,108,117,101,0,0,0,0,0,0,95,80,82,69,76,79,65,68,0,0,0,0,0,0,0,0,99,97,110,110,111,116,32,114,101,115,117,109,101,32,100,101,97,100,32,99,111,114,111,117,116,105,110,101,0,0,0,0,108,114,111,116,97,116,101,0,103,101,116,109,101,116,97,116,97,98,108,101,0,0,0,0,10,9,40,46,46,46,116,97,105,108,32,99,97,108,108,115,46,46,46,41,0,0,0,0,97,116,116,101,109,112,116,32,116,111,32,108,111,97,100,32,97,32,37,115,32,99,104,117,110,107,32,40,109,111,100,101,32,105,115,32,39,37,115,39,41,0,0,0,0,0,0,0,39,102,111,114,39,32,108,105,109,105,116,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0,0,0,0,99,111,114,114,117,112,116,101,100,0,0,0,0,0,0,0,116,104,114,101,97,100,0,0,67,32,108,101,118,101,108,115,0,0,0,0,0,0,0,0,91,115,116,114,105,110,103,32,34,0,0,0,0,0,0,0,95,67,76,73,66,83,0,0,108,111,99,97,108,0,0,0,99,111,110,99,97,116,0,0,69,101,0,0,0,0,0,0,111,115,0,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,104,97,114,101,47,108,117,97,47,53,46,50,47,63,46,108,117,97,59,47,117,115,114,47,108,111,99,97,108,47,115,104,97,114,101,47,108,117,97,47,53,46,50,47,63,47,105,110,105,116,46,108,117,97,59,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,50,47,63,46,108,117,97,59,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,50,47,63,47,105,110,105,116,46,108,117,97,59,46,47,63,46,108,117,97,0,0,0,0,0,0,0,102,111,114,109,97,116,0,0,114,101,109,111,118,101,0,0,97,116,97,110,0,0,0,0,99,97,110,110,111,116,32,99,108,111,115,101,32,115,116,97,110,100,97,114,100,32,102,105,108,101,0,0,0,0,0,0,103,101,116,109,101,116,97,116,97,98,108,101,0,0,0,0,116,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,32,116,111,32,114,101,115,117,109,101,0,0,0,0,101,120,116,114,97,99,116,0,101,114,114,111,114,0,0,0,32,105,110,32,0,0,0,0,39,102,111,114,39,32,105,110,105,116,105,97,108,32,118,97,108,117,101,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0,0,0,0,116,101,120,116,0,0,0,0,37,115,58,32,37,115,32,112,114,101,99,111,109,112,105,108,101,100,32,99,104,117,110,107,0,0,0,0,0,0,0,0,102,117,110,99,116,105,111,110,0,0,0,0,0,0,0,0,99,108,111,99,107,0,0,0,115,121,110,116,97,120,32,101,114,114,111,114,0,0,0,0,46,46,46,0,0,0,0,0,37,115,58,37,100,58,32,37,115,0,0,0,0,0,0,0,110,111,32,109,101,115,115,97,103,101,0,0,0,0,0,0,112,105,0,0,0,0,0,0,46,0,0,0,0,0,0,0,105,111,0,0,0,0,0,0,76,85,65,95,80,65,84,72,0,0,0,0,0,0,0,0,115,111,114,116,0,0,0,0,102,105,110,100,0,0,0,0,103,101,116,101,110,118,0,0,97,116,97,110,50,0,0,0,70,73,76,69,42,0,0,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,33,0,0,0,0,0,0,0,103,101,116,114,101,103,105,115,116,114,121,0,0,0,0,0,121,105,101,108,100,0,0,0,98,116,101,115,116,0,0,0,100,111,102,105,108,101,0,0,37,115,0,0,0,0,0,0,95,73,79,95,105,110,112,117,116,0,0,0,0,0,0,0,37,115,10,0,0,0,0,0,37,100,58,0,0,0,0,0,105,110,99,114,101,109,101,110,116,97,108,0,0,0,0,0,103,101,116,32,108,101,110,103,116,104,32,111,102,0,0,0,98,105,110,97,114,121,0,0,60,115,116,114,105,110,103,62,0,0,0,0,0,0,0,0,116,114,117,110,99,97,116,101,100,0,0,0,0,0,0,0,116,97,98,108,101,0,0,0,61,40,100,101,98,117,103,32,99,111,109,109,97,110,100,41,0,0,0,0,0,0,0,0,103,101,110,101,114,97,116,105,111,110,97,108,0,0,0,0,102,117,110,99,116,105,111,110,32,60,37,115,58,37,100,62,0,0,0,0,0,0,0,0,60,110,97,109,101,62,0,0,37,115,32,101,120,112,101,99,116,101,100,0,0,0,0,0,99,111,110,116,10,0,0,0,105,115,114,117,110,110,105,110,103,0,0,0,0,0,0,0,109,97,105,110,32,99,104,117,110,107,0,0,0,0,0,0,105,110,118,97,108,105,100,32,111,112,116,105,111,110,32,39,37,37,37,99,39,32,116,111,32,39,108,117,97,95,112,117,115,104,102,115,116,114,105,110,103,39,0,0,0,0,0,0,97,116,116,101,109,112,116,32,116,111,32,99,111,109,112,97,114,101,32,37,115,32,119,105,116,104,32,37,115,0,0,0,60,110,117,109,98,101,114,62,0,0,0,0,0,0,0,0,108,117,97,95,100,101,98,117,103,62,32,0,0,0,0,0,115,101,116,109,97,106,111,114,105,110,99,0,0,0,0,0,102,117,110,99,116,105,111,110,32,39,37,115,39,0,0,0,60,101,111,102,62,0,0,0,97,116,116,101,109,112,116,32,116,111,32,37,115,32,37,115,32,39,37,115,39,32,40,97,32,37,115,32,118,97,108,117,101,41,0,0,0,0,0,0,105,110,118,97,108,105,100,32,109,111,100,101,32,39,37,115,39,32,40,115,104,111,117,108,100,32,109,97,116,99,104,32,39,91,114,119,97,93,37,37,43,63,98,63,39,41,0,0,37,115,0,0,0,0,0,0,115,101,116,115,116,101,112,109,117,108,0,0,0,0,0,0,46,0,0,0,0,0,0,0,58,58,0,0,0,0,0,0,97,116,116,101,109,112,116,32,116,111,32,99,111,109,112,97,114,101,32,116,119,111,32,37,115,32,118,97,108,117,101,115,0,0,0,0,0,0,0,0,114,119,97,0,0,0,0,0,101,120,116,101,114,110,97,108,32,104,111,111,107,0,0,0,115,101,116,112,97,117,115,101,0,0,0,0,0,0,0,0,100,101,98,117,103,0,0,0,102,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,108,111,110,103,32,115,116,114,105,110,103,32,100,101,108,105,109,105,116,101,114,0,0,0,126,61,0,0,0,0,0,0,99,97,110,110,111,116,32,111,112,101,110,32,102,105,108,101,32,39,37,115,39,32,40,37,115,41,0,0,0,0,0,0,102,117,110,99,0,0,0,0,116,97,98,108,101,0,0,0,115,116,101,112,0,0,0,0,37,115,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,37,115,0,0,0,0,0,76,85,65,95,80,65,84,72,95,53,95,50,0,0,0,0,99,114,101,97,116,101,0,0,60,61,0,0,0,0,0,0,114,101,109,111,118,101,0,0,119,0,0,0,0,0,0,0,100,117,109,112,0,0,0,0,97,99,116,105,118,101,108,105,110,101,115,0,0,0,0,0,99,111,117,110,116,0,0,0,99,97,110,110,111,116,32,37,115,32,37,115,58,32,37,115,0,0,0,0,0,0,0,0,101,120,105,116,0,0,0,0,62,61,0,0,0,0,0,0,97,115,105,110,0,0,0,0,39,112,111,112,101,110,39,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,105,115,116,97,105,108,99,97,108,108,0,0,0,0,0,0,97,114,115,104,105,102,116,0,99,111,108,108,101,99,116,0,115,116,100,101,114,114,0,0,239,187,191,0,0,0,0,0,61,61,0,0,0,0,0,0,103,101,116,108,111,99,97,108,0,0,0,0,0,0,0,0,119,114,97,112,0,0,0,0,98,120,111,114,0,0,0,0,114,0,0,0,0,0,0,0,110,97,109,101,119,104,97,116,0,0,0,0,0,0,0,0,114,101,115,116,97,114,116,0,80,65,78,73,67,58,32,117,110,112,114,111,116,101,99,116,101,100,32,101,114,114,111,114,32,105,110,32,99,97,108,108,32,116,111,32,76,117,97,32,65,80,73,32,40,37,115,41,10,0,0,0,0,0,0,0,99,111,108,108,101,99,116,103,97,114,98,97,103,101,0,0,46,46,46,0,0,0,0,0,102,105,108,101,0,0,0,0,110,97,109,101,0,0,0,0,10,9,37,115,58,0,0,0,115,116,111,112,0,0,0,0,98,97,100,32,99,111,110,118,101,114,115,105,111,110,32,110,117,109,98,101,114,45,62,105,110,116,59,32,109,117,115,116,32,114,101,99,111,109,112,105,108,101,32,76,117,97,32,119,105,116,104,32,112,114,111,112,101,114,32,115,101,116,116,105,110,103,115,0,0,0,0,0,115,116,114,105,110,103,32,108,101,110,103,116,104,32,111,118,101,114,102,108,111,119,0,0,46,46,0,0,0,0,0,0,25,147,13,10,26,10,0,0,27,76,117,97,0,0,0,0,115,116,114,105,110,103,32,115,108,105,99,101,32,116,111,111,32,108,111,110,103,0,0,0,115,116,114,105,110,103,0,0,99,108,111,115,101,100,32,102,105,108,101,0,0,0,0,0,105,115,118,97,114,97,114,103,0,0,0,0,0,0,0,0,95,95,105,112,97,105,114,115,0,0,0,0,0,0,0,0,118,101,114,115,105,111,110,32,109,105,115,109,97,116,99,104,58,32,97,112,112,46,32,110,101,101,100,115,32,37,102,44,32,76,117,97,32,99,111,114,101,32,112,114,111,118,105,100,101,115,32,37,102,0,0,0,119,104,105,108,101,0,0,0,108,97,98,101,108,115,47,103,111,116,111,115,0,0,0,0,105,110,105,116,0,0,0,0,118,97,108,117,101,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0,0,0,115,116,97,110,100,97,114,100,32,37,115,32,102,105,108,101,32,105,115,32,99,108,111,115,101,100,0,0,0,0,0,0,110,112,97,114,97,109,115,0,114,101,97,100,101,114,32,102,117,110,99,116,105,111,110,32,109,117,115,116,32,114,101,116,117,114,110,32,97,32,115,116,114,105,110,103,0,0,0,0,109,117,108,116,105,112,108,101,32,76,117,97,32,86,77,115,32,100,101,116,101,99,116,101,100,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,117,110,116,105,108,0,0,0,97,98,115,101,110,116,0,0,117,110,97,98,108,101,32,116,111,32,100,117,109,112,32,103,105,118,101,110,32,102,117,110,99,116,105,111,110,0,0,0,116,121,112,101,0,0,0,0,110,117,112,115,0,0,0,0,116,111,111,32,109,97,110,121,32,110,101,115,116,101,100,32,102,117,110,99,116,105,111,110,115,0,0,0,0,0,0,0,95,76,79,65,68,69,68,0,95,71,0,0,0,0,0,0,116,114,117,101,0,0,0,0,99,111,110,116,114,111,108,32,115,116,114,117,99,116,117,114,101,32,116,111,111,32,108,111,110,103,0,0,0,0,0,0,115,101,97,114,99,104,112,97,116,104,0,0,0,0,0,0,105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,40,119,105,100,116,104,32,111,114,32,112,114,101,99,105,115,105,111,110,32,116,111,111,32,108,111,110,103,41,0,0,0,0,116,109,112,102,105,108,101,0,99,117,114,114,101,110,116,108,105,110,101,0,0,0,0,0,61,40,108,111,97,100,41,0,116,111,111,32,109,97,110,121,32,117,112,118,97,108,117,101,115,0,0,0,0,0,0,0,116,104,101,110,0,0,0,0,108,111,97,100,108,105,98,0,105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,40,114,101,112,101,97,116,101,100,32,102,108,97,103,115,41,0,112,111,112,101,110,0,0,0,119,104,97,116,0,0,0,0,98,116,0,0,0,0,0,0,37,115,58,32,37,112,0,0,95,69,78,86,0,0,0,0,114,101,116,117,114,110,0,0,112,101,114,102,111,114,109,32,97,114,105,116,104,109,101,116,105,99,32,111,110,0,0,0,10,9,110,111,32,102,105,101,108,100,32,112,97,99,107,97,103,101,46,112,114,101,108,111,97,100,91,39,37,115,39,93,0,0,0,0,0,0,0,0,45,43,32,35,48,0,0,0,111,117,116,112,117,116,0,0,108,97,115,116,108,105,110,101,100,101,102,105,110,101,100,0,99,111,114,111,117,116,105,110,101,0,0,0,0,0,0,0,95,95,112,97,105,114,115,0,110,105,108,0,0,0,0,0,112,97,116,104,0,0,0,0,114,101,112,101,97,116,0,0,117,110,112,97,99,107,0,0,59,0,0,0,0,0,0,0,92,37,48,51,100,0,0,0,111,112,101,110,0,0,0,0,99,104,97,114,0,0,0,0,108,105,110,101,100,101,102,105,110,101,100,0,0,0,0,0,10,0,0,0,0,0,0,0,102,97,108,115,101,0,0,0,101,120,101,99,117,116,101,0,111,114,0,0,0,0,0,0,97,99,111,115,0,0,0,0,114,0,0,0,0,0,0,0,92,37,100,0,0,0,0,0,105,110,112,117,116,0,0,0,115,104,111,114,116,95,115,114,99,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,115,116,100,111,117,116,0,0,116,114,117,101,0,0,0,0,110,111,116,0,0,0,0,0,103,101,116,105,110,102,111,0,37,115,10,0,0,0,0,0,10,9,110,111,32,102,105,108,101,32,39,37,115,39,0,0,115,116,97,116,117,115,0,0,105,110,118,97,108,105,100,32,111,112,116,105,111,110,32,39,37,37,37,99,39,32,116,111,32,39,102,111,114,109,97,116,39,0,0,0,0,0,0,0,98,111,114,0,0,0,0,0,37,115,0,0,0,0,0,0,115,111,117,114,99,101,0,0,39,116,111,115,116,114,105,110,103,39,32,109,117,115,116,32,114,101,116,117,114,110,32,97,32,115,116,114,105,110,103,32,116,111,32,39,112,114,105,110,116,39,0,0,0,0,0,0,95,95,116,111,115,116,114,105,110,103,0,0,0,0,0,0,97,115,115,101,114,116,0,0,110,105,108,0,0,0,0,0,63,0,0,0,0,0,0,0,110,111,116,32,97,32,110,111,110,45,110,101,103,97,116,105,118,101,32,110,117,109,98,101,114,32,105,110,32,112,114,111,112,101,114,32,114,97,110,103,101,0,0,0,0,0,0,0,102,105,108,101,32,105,115,32,97,108,114,101,97,100,121,32,99,108,111,115,101,100,0,0,105,110,118,97,108,105,100,32,111,112,116,105,111,110,0,0,83,108,110,116,0,0,0,0,116,97,98,108,101,32,111,114,32,115,116,114,105,110,103,32,101,120,112,101,99,116,101,100,0,0,0,0,0,0,0,0,111,98,106,101,99,116,32,108,101,110,103,116,104,32,105,115,32,110,111,116,32,97,32,110,117,109,98,101,114,0,0,0,108,111,111,112,32,105,110,32,115,101,116,116,97,98,108,101,0,0,0,0,0,0,0,0,108,111,99,97,108,0,0,0,50,0,0,0,0,0,0,0,97,116,116,101,109,112,116,32,116,111,32,121,105,101,108,100,32,102,114,111,109,32,111,117,116,115,105,100,101,32,97,32,99,111,114,111,117,116,105,110,101,0,0,0,0,0,0,0,39,112,97,99,107,97,103,101,46,37,115,39,32,109,117,115,116,32,98,101,32,97,32,115,116,114,105,110,103,0,0,0,108,0,0,0,0,0,0,0,110,117,109,98,101,114,0,0,116,111,111,32,109,97,110,121,32,111,112,116,105,111,110,115,0,0,0,0,0,0,0,0,102,117,110,99,116,105,111,110,32,111,114,32,108,101,118,101,108,32,101,120,112,101,99,116,101,100,0,0,0,0,0,0,105,110,100,101,120,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0,0,0,114,101,97,100,0,0,0,0,105,110,118,97,108,105,100,32,107,101,121,32,116,111,32,39,110,101,120,116,39,0,0,0,105,110,0,0,0,0,0,0,98,114,101,97,107,0,0,0,100,121,110,97,109,105,99,32,108,105,98,114,97,114,105,101,115,32,110,111,116,32,101,110,97,98,108,101,100,59,32,99,104,101,99,107,32,121,111,117,114,32,76,117,97,32,105,110,115,116,97,108,108,97,116,105,111,110,0,0,0,0,0,0,110,111,116,32,97,32,110,117,109,98,101,114,32,105,110,32,112,114,111,112,101,114,32,114,97,110,103,101,0,0,0,0,105,110,118,97,108,105,100,32,99,111,110,118,101,114,115,105,111,110,32,115,112,101,99,105,102,105,101,114,32,39,37,37,37,115,39,0,0,0,0,0,37,108,102,0,0,0,0,0,62,37,115,0,0,0,0,0,99,97,110,110,111,116,32,99,104,97,110,103,101,32,97,32,112,114,111,116,101,99,116,101,100,32,109,101,116,97,116,97,98,108,101,0,0,0,0,0,114,101,111,112,101,110,0,0,37,112,0,0,0,0,0,0,105,102,0,0,0,0,0,0,108,117,97,111,112,101,110,95,37,115,0,0,0,0,0,0,37,46,49,52,103,0,0,0,110,111,32,118,97,108,117,101,0,0,0,0,0,0,0,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,102,111,114,109,97,116,0,0,102,108,110,83,116,117,0,0,95,95,109,101,116,97,116,97,98,108,101,0,0,0,0,0,114,98,0,0,0,0,0,0,103,111,116,111,0,0,0,0,111,112,99,111,100,101,115,0,45,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,117,115,101,32,111,102,32,39,37,99,39,32,105,110,32,114,101,112,108,97,99,101,109,101,110,116,32,115,116,114,105,110,103,0,0,0,0,0,0,0,97,65,98,66,99,100,72,73,106,109,77,112,83,85,119,87,120,88,121,89,122,37,0,0,105,110,116,101,114,118,97,108,32,105,115,32,101,109,112,116,121,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,111,112,116,105,111,110,0,0,76,117,97,32,102,117,110,99,116,105,111,110,32,101,120,112,101,99,116,101,100,0,0,0,110,105,108,32,111,114,32,116,97,98,108,101,32,101,120,112,101,99,116,101,100,0,0,0,27,76,117,97,0,0,0,0,27,76,117,97,0,0,0,0,102,117,110,99,116,105,111,110,0,0,0,0,0,0,0,0,95,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,114,101,112,108,97,99,101,109,101,110,116,32,118,97,108,117,101,32,40,97,32,37,115,41,0,0,0,0,0,0,0,0,121,100,97,121,0,0,0,0,116,97,110,0,0,0,0,0,116,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,0,0,0,0,0,0,105,110,118,97,108,105,100,32,117,112,118,97,108,117,101,32,105,110,100,101,120,0,0,0,32,12,10,13,9,11,0,0,111,112,101,110,0,0,0,0,117,112,118,97,108,117,101,115,0,0,0,0,0,0,0,0,39,37,115,39,0,0,0,0,102,111,114,0,0,0,0,0,46,0,0,0,0,0,0,0,115,116,114,105,110,103,47,102,117,110,99,116,105,111,110,47,116,97,98,108,101,32,101,120,112,101,99,116,101,100,0,0,119,100,97,121,0,0,0,0,116,97,110,104,0,0,0,0,110,111,116,32,97,110,32,105,110,116,101,103,101,114,32,105,110,32,112,114,111,112,101,114,32,114,97,110,103,101,0,0,62,117,0,0,0,0,0,0,112,97,99,107,97,103,101,0,98,97,115,101,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0,0,0,0,114,0,0,0,0,0,0,0,37,115,32,101,120,112,101,99,116,101,100,32,40,116,111,32,99,108,111,115,101,32,37,115,32,97,116,32,108,105,110,101,32,37,100,41,0,0,0,0,102,97,108,115,101,0,0,0,115,101,97,114,99,104,101,114,115,0,0,0,0,0,0,0,99,111,110,99,97,116,101,110,97,116,101,0,0,0,0,0,112,97,99,107,0,0,0,0,101,114,114,111,114,32,108,111,97,100,105,110,103,32,109,111,100,117,108,101,32,39,37,115,39,32,102,114,111,109,32,102,105,108,101,32,39,37,115,39,58,10,9,37,115,0,0,0,94,36,42,43,63,46,40,91,37,45,0,0,0,0,0,0,42,116,0,0,0,0,0,0,115,113,114,116,0,0,0,0,101,110,100,0,0,0,0,0,98,121,116,101,0,0,0,0,102,117,108,108,32,117,115,101,114,100,97,116,97,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,108,105,103,104,116,32,117,115,101,114,100,97,116,97,0,0,0,0,0,0,115,116,97,99,107,32,111,118,101,114,102,108,111,119,0,0,64,37,115,0,0,0,0,0,95,95,99,97,108,108,0,0,100,105,102,102,116,105,109,101,0,0,0,0,0,0,0,0,40,102,111,114,32,115,116,101,112,41,0,0,0,0,0,0,101,110,100,0,0,0,0,0,97,98,115,0,0,0,0,0,10,9,110,111,32,109,111,100,117,108,101,32,39,37,115,39,32,105,110,32,102,105,108,101,32,39,37,115,39,0,0,0,110,111,32,118,97,108,117,101,0,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,112,97,116,116,101,114,110,32,99,97,112,116,117,114,101,0,37,99,0,0,0,0,0,0,115,105,110,0,0,0,0,0,99,117,114,0,0,0,0,0,116,97,105,108,32,99,97,108,108,0,0,0,0,0,0,0,118,97,108,117,101,32,101,120,112,101,99,116,101,100,0,0,95,73,79,95,111,117,116,112,117,116,0,0,0,0,0,0,61,115,116,100,105,110,0,0,95,95,99,111,110,99,97,116,0,0,0,0,0,0,0,0,40,102,111,114,32,108,105,109,105,116,41,0,0,0,0,0,101,108,115,101,105,102,0,0,115,116,97,99,107,32,111,118,101,114,102,108,111,119,0,0,103,101,116,104,111,111,107,0,47,0,0,0,0,0,0,0,114,117,110,110,105,110,103,0,109,97,108,102,111,114,109,101,100,32,112,97,116,116,101,114,110,32,40,109,105,115,115,105,110,103,32,97,114,103,117,109,101,110,116,115,32,116,111,32,39,37,37,98,39,41,0,0,110,117,109,101,114,105,99,0,115,105,110,104,0,0,0,0,98,110,111,116,0,0,0,0,115,101,116,0,0,0,0,0,99,111,117,110,116,0,0,0,120,112,99,97,108,108,0,0,98,117,102,102,101,114,32,116,111,111,32,108,97,114,103,101,0,0,0,0,0,0,0,0,95,95,108,101,0,0,0,0,40,102,111,114,32,105,110,100,101,120,41,0,0,0,0,0,40,42,118,97,114,97,114,103,41,0,0,0,0,0,0,0,101,108,115,101,0,0,0,0,95,86,69,82,83,73,79,78,0,0,0,0,0,0,0,0,99,111,110,115,116,97,110,116,115,0,0,0,0,0,0,0,76,85,65,95,78,79,69,78,86,0,0,0,0,0,0,0,109,97,108,102,111,114,109,101,100,32,112,97,116,116,101,114,110,32,40,109,105,115,115,105,110,103,32,39,93,39,41,0,109,111,110,101,116,97,114,121,0,0,0,0,0,0,0,0,114,97,110,100,111,109,115,101,101,100,0,0,0,0,0,0,108,105,110,101,0,0,0,0,108,105,110,101,0,0,0,0,10,9,46,46,46,0,0,0,116,97,98,108,101,32,105,110,100,101,120,32,105,115,32,110,105,108,0,0,0,0,0,0,116,121,112,101,0,0,0,0,118,97,108,117,101,32,101,120,112,101,99,116,101,100,0,0,95,95,108,116,0,0,0,0,40,102,111,114,32,99,111,110,116,114,111,108,41,0,0,0,100,111,0,0,0,0,0,0,108,111,111,112,32,105,110,32,103,101,116,116,97,98,108,101,0,0,0,0,0,0,0,0,40,42,116,101,109,112,111,114,97,114,121,41,0,0,0,0,53,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,97,116,116,101,109,112,116,32,116,111,32,121,105,101,108,100,32,97,99,114,111,115,115,32,109,101,116,97,109,101,116,104,111,100,47,67,45,99,97,108,108,32,98,111,117,110,100,97,114,121,0,0,0,0,0,0,109,97,108,102,111,114,109,101,100,32,112,97,116,116,101,114,110,32,40,101,110,100,115,32,119,105,116,104,32,39,37,37,39,41,0,0,0,0,0,0,99,116,121,112,101,0,0,0,114,97,110,100,111,109,0,0,98,111,111,108,101,97,110,0,102,117,108,108,0,0,0,0,114,101,116,117,114,110,0,0,116,111,115,116,114,105,110,103,0,0,0,0,0,0,0,0,115,116,97,99,107,32,111,118,101,114,102,108,111,119,0,0,116,97,98,108,101,32,111,118,101,114,102,108,111,119,0,0,95,95,117,110,109,0,0,0,40,102,111,114,32,115,116,97,116,101,41,0,0,0,0,0,98,114,101,97,107,0,0,0,76,117,97,0,0,0,0,0,60,103,111,116,111,32,37,115,62,32,97,116,32,108,105,110,101,32,37,100,32,106,117,109,112,115,32,105,110,116,111,32,116,104,101,32,115,99,111,112,101,32,111,102,32,108,111,99,97,108,32,39,37,115,39,0,59,1,59,0,0,0,0,0,105,110,118,97,108,105,100,32,99,97,112,116,117,114,101,32,105,110,100,101,120,32,37,37,37,100,0,0,0,0,0,0,99,111,108,108,97,116,101,0,114,97,100,0,0,0,0,0,110,111,0,0,0,0,0,0,99,97,108,108,0,0,0,0,116,111,110,117,109,98,101,114,0,0,0,0,0,0,0,0,110,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,0,0,0,0,0,0,0,115,116,97,99,107,32,111,118,101,114,102,108,111,119,32,40,37,115,41,0,0,0,0,0,95,95,112,111,119,0,0,0,40,110,117,108,108,41,0,0,40,102,111,114,32,103,101,110,101,114,97,116,111,114,41,0,97,110,100,0,0,0,0,0,109,97,105,110,0,0,0,0,37,115,32,110,101,97,114,32,37,115,0,0,0,0,0,0,59,59,0,0,0,0,0,0,109,105,115,115,105,110,103,32,39,91,39,32,97,102,116,101,114,32,39,37,37,102,39,32,105,110,32,112,97,116,116,101,114,110,0,0,0,0,0,0,97,108,108,0,0,0,0,0,112,111,119,0,0,0,0,0,97,116,116,101,109,112,116,32,116,111,32,117,115,101,32,97,32,99,108,111,115,101,100,32,102,105,108,101,0,0,0,0,95,95,109,111,100,101,0,0,115,101,116,109,101,116,97,116,97,98,108,101,0,0,0,0,105,110,118,97,108,105,100,32,111,112,116,105,111,110,32,39,37,115,39,0,0,0,0,0,95,95,109,111,100,0,0,0,39,61,39,32,111,114,32,39,105,110,39,32,101,120,112,101,99,116,101,100,0,0,0,0,61,63,0,0,0,0,0,0,102,117,110,99,116,105,111,110,32,111,114,32,101,120,112,114,101,115,115,105,111,110,32,116,111,111,32,99,111,109,112,108,101,120,0,0,0,0,0,0,37,115,58,37,100,58,32,37,115,0,0,0,0,0,0,0,109,111,100,117,108,101,32,39,37,115,39,32,110,111,116,32,102,111,117,110,100,58,37,115,0,0,0,0,0,0,0,0,117,110,102,105,110,105,115,104,101,100,32,99,97,112,116,117,114,101,0,0,0,0,0,0,102,105,101,108,100,32,39,37,115,39,32,109,105,115,115,105,110,103,32,105,110,32,100,97,116,101,32,116,97,98,108,101,0,0,0,0,0,0,0,0,109,111,100,102,0,0,0,0,37,46,49,52,103,0,0,0,107,0,0,0,0,0,0,0,115,101,108,101,99,116,0,0,101,120,105,116,0,0,0,0,95,95,100,105,118,0,0,0,108,97,98,101,108,32,39,37,115,39,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,32,111,110,32,108,105,110,101,32,37,100,0,0,0,67,0,0,0,0,0,0,0,99,104,117,110,107,32,104,97,115,32,116,111,111,32,109,97,110,121,32,108,105,110,101,115,0,0,0,0,0,0,0,0,39,112,97,99,107,97,103,101,46,115,101,97,114,99,104,101,114,115,39,32,109,117,115,116,32,98,101,32,97,32,116,97,98,108,101,0,0,0,0,0,105,110,118,97,108,105,100,32,99,97,112,116,117,114,101,32,105,110,100,101,120,0,0,0,105,115,100,115,116,0,0,0,109,105,110,0,0,0,0,0,102,105,108,101,32,40,37,112,41,0,0,0,0,0,0,0,95,72,75,69,89,0,0,0,114,97,119,115,101,116,0,0,37,115,0,0,0,0,0,0,60,37,115,62,32,97,116,32,108,105,110,101,32,37,100,32,110,111,116,32,105,110,115,105,100,101,32,97,32,108,111,111,112,0,0,0,0,0,0,0,95,95,109,117,108,0,0,0,117,110,101,120,112,101,99,116,101,100,32,115,121,109,98,111,108,0,0,0,0,0,0,0,99,104,97,114,40,37,100,41,0,0,0,0,0,0,0,0,61,91,67,93,0,0,0,0,117,110,102,105,110,105,115,104,101,100,32,108,111,110,103,32,99,111,109,109,101,110,116,0,114,101,113,117,105,114,101,0,116,111,111,32,109,97,110,121,32,99,97,112,116,117,114,101,115,0,0,0,0,0,0,0,121,101,97,114,0,0,0,0,109,97,120,0,0,0,0,0,102,105,108,101,32,40,99,108,111,115,101,100,41,0,0,0,108,101,118,101,108,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0,0,0,95,71,0,0,0,0,0,0,114,97,119,103,101,116,0,0,37,115,58,32,37,115,0,0,95,95,115,117,98,0,0,0,102,117,110,99,116,105,111,110,32,97,114,103,117,109,101,110,116,115,32,101,120,112,101,99,116,101,100,0,0,0,0,0,95,95,103,99,0,0,0,0,109,101,116,97,109,101,116,104,111,100,0,0,0,0,0,0,105,110,115,101,114,116,0,0,117,110,102,105,110,105,115,104,101,100,32,108,111,110,103,32,115,116,114,105,110,103,0,0,112,114,101,108,111,97,100,0,114,101,115,117,108,116,105,110,103,32,115,116,114,105,110,103,32,116,111,111,32,108,97,114,103,101,0,0,0,0,0,0,109,111,110,116,104,0,0,0,108,111,103,0,0,0,0,0].concat([95,95,116,111,115,116,114,105,110,103,0,0,0,0,0,0,95,95,105,110,100,101,120,0,110,105,108,32,111,114,32,116,97,98,108,101,32,101,120,112,101,99,116,101,100,0,0,0,114,97,119,108,101,110,0,0,95,95,97,100,100,0,0,0,100,97,116,101,0,0,0,0,116,111,111,32,109,97,110,121,32,37,115,32,40,108,105,109,105,116,32,105,115,32,37,100,41,32,105,110,32,37,115,0,102,111,114,32,105,116,101,114,97,116,111,114,0,0,0,0,101,114,114,111,114,32,105,110,32,95,95,103,99,32,109,101,116,97,109,101,116,104,111,100,32,40,37,115,41,0,0,0,97,116,116,101,109,112,116,32,116,111,32,37,115,32,97,32,37,115,32,118,97,108,117,101,0,0,0,0,0,0,0,0,104,101,120,97,100,101,99,105,109,97,108,32,100,105,103,105,116,32,101,120,112,101,99,116,101,100,0,0,0,0,0,0,104,117,103,101,0,0,0,0,95,80,82,69,76,79,65,68,0,0,0,0,0,0,0,0,117,112,112,101,114,0,0,0,100,97,121,0,0,0,0,0,108,100,101,120,112,0,0,0,95,95,103,99,0,0,0,0,116,114,97,99,101,98,97,99,107,0,0,0,0,0,0,0,114,97,119,101,113,117,97,108,0,0,0,0,0,0,0,0,115,116,100,105,110,0,0,0,37,115,58,37,100,58,32,0,95,95,101,113,0,0,0,0,102,117,110,99,116,105,111,110,32,97,116,32,108,105,110,101,32,37,100,0,0,0,0,0,100,101,99,105,109,97,108,32,101,115,99,97,112,101,32,116,111,111,32,108,97,114,103,101,0,0,0,0,0,0,0,0,103,101,116,117,115,101,114,118,97,108,117,101,0,0,0,0,108,111,97,100,101,100,0,0,114,101,115,117,109,101,0,0,115,117,98,0,0,0,0,0,104,111,117,114,0,0,0,0,102,114,101,120,112,0,0,0,98,97,110,100,0,0,0,0,119,114,105,116,101,0,0,0,115,101,116,117,112,118,97,108,117,101,0,0,0,0,0,0,116,114,121,105,110,103,32,116,111,32,97,99,99,101,115,115,32,110,111,110,45,101,120,105,115,116,101,110,116,32,98,105,116,115,0,0,0,0,0,0,112,114,105,110,116,0,0,0,83,108,0,0,0,0,0,0,95,95,108,101,110,0,0,0,109,97,105,110,32,102,117,110,99,116,105,111,110,0,0,0,76,117,97,32,53,46,50,0,63,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,101,115,99,97,112,101,32,115,101,113,117,101,110,99,101,0,95,76,79,65,68,69,68,0,114,101,118,101,114,115,101,0,109,105,110,0,0,0,0,0,102,109,111,100,0,0,0,0,115,101,116,118,98,117,102,0,115,101,116,109,101,116,97,116,97,98,108,101,0,0,0,0,115,116,97,99,107,32,116,114,97,99,101,98,97,99,107,58,0,0,0,0,0,0,0,0,119,105,100,116,104,32,109,117,115,116,32,98,101,32,112,111,115,105,116,105,118,101,0,0,112,99,97,108,108,0,0,0,98,97,100,32,97,114,103,117,109,101,110,116,32,35,37,100,32,116,111,32,39,37,115,39,32,40,37,115,41,0,0,0,95,95,109,111,100,101,0,0,105,116,101,109,115,32,105,110,32,97,32,99,111,110,115,116,114,117,99,116,111,114,0,0,109,101,116,104,111,100,0,0,105,110,100,101,120,0,0,0,99,111,110,115,116,114,117,99,116,111,114,32,116,111,111,32,108,111,110,103,0,0,0,0,98,105,110,97,114,121,32,115,116,114,105,110,103,0,0,0,117,110,102,105,110,105,115,104,101,100,32,115,116,114,105,110,103,0,0,0,0,0,0,0,99,111,110,102,105,103,0,0,114,101,112,0,0,0,0,0,115,101,99,0,0,0,0,0,102,108,111,111,114,0,0,0,67,32,115,116,97,99,107,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,0,110,105,108,0,0,0,0,0,115,101,101,107,0,0,0,0,115,101,116,108,111,99,97,108,0,0,0,0,0,0,0,0,100,101,97,100,0,0,0,0,102,105,101,108,100,32,99,97,110,110,111,116,32,98,101,32,110,101,103,97,116,105,118,101,0,0,0,0,0,0,0,0,112,97,105,114,115,0,0,0,63,0,0,0,0,0,0,0,116,97,98,108,101,32,105,110,100,101,120,32,105,115,32,78,97,78,0,0,0,0,0,0,95,95,103,99,0,0,0,0,102,117,110,99,116,105,111,110,115,0,0,0,0,0,0,0,110,78,0,0,0,0,0,0,99,111,110,115,116,97,110,116,0,0,0,0,0,0,0,0,108,101,120,105,99,97,108,32,101,108,101,109,101,110,116,32,116,111,111,32,108,111,110,103,0,0,0,0,0,0,0,0,110,111,32,118,105,115,105,98,108,101,32,108,97,98,101,108,32,39,37,115,39,32,102,111,114,32,60,103,111,116,111,62,32,97,116,32,108,105,110,101,32,37,100,0,0,0,0,0,47,10,59,10,63,10,33,10,45,10,0,0,0,0,0,0,105,110,118,97,108,105,100,32,118,97,108,117,101,32,40,37,115,41,32,97,116,32,105,110,100,101,120,32,37,100,32,105,110,32,116,97,98,108,101,32,102,111,114,32,39,99,111,110,99,97,116,39,0,0,0,0,109,97,116,99,104,0,0,0,117,110,97,98,108,101,32,116,111,32,103,101,110,101,114,97,116,101,32,97,32,117,110,105,113,117,101,32,102,105,108,101,110,97,109,101,0,0,0,0,101,120,112,0,0,0,0,0,114,101,97,100,0,0,0,0,115,101,116,104,111,111,107,0,110,111,114,109,97,108,0,0,114,115,104,105,102,116,0,0,110,101,120,116,0,0,0,0,99,97,108,108,0,0,0,0,99,97,108,108,105,110,103,32,39,37,115,39,32,111,110,32,98,97,100,32,115,101,108,102,0,0,0,0,0,0,0,0,95,95,110,101,119,105,110,100,101,120,0,0,0,0,0,0,120,88,0,0,0,0,0,0,108,111,99,97,108,32,118,97,114,105,97,98,108,101,115,0,109,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,101,114,114,111,114,58,32,98,108,111,99,107,32,116,111,111,32,98,105,103,0,0,116,111,111,32,109,97,110,121,32,37,115,32,40,108,105,109,105,116,32,105,115,32,37,100,41,0,0,0,0,0,0,0,117,112,118,97,108,117,101,0,109,97,108,102,111,114,109,101,100,32,110,117,109,98,101,114,0,0,0,0,0,0,0,0,100,101,98,117,103,0,0,0,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,50,47,63,46,115,111,59,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,50,47,108,111,97,100,97,108,108,46,115,111,59,46,47,63,46,115,111,0,0,0,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,116,111,32,39,105,110,115,101,114,116,39,0,0,0,108,111,119,101,114,0,0,0,116,109,112,110,97,109,101,0,100,101,103,0,0,0,0,0,108,105,110,101,115,0,0,0,115,101,116,117,115,101,114,118,97,108,117,101,0,0,0,0,115,117,115,112,101,110,100,101,100,0,0,0,0,0,0,0,114,114,111,116,97,116,101,0,108,111,97,100,0,0,0,0,109,101,116,104,111,100,0,0,99,97,110,110,111,116,32,114,101,115,117,109,101,32,100,101,97,100,32,99,111,114,111,117,116,105,110,101,0,0,0,0,105,110,99,111,109,112,97,116,105,98,108,101,0,0,0,0,95,95,105,110,100,101,120,0,60,110,97,109,101,62,32,111,114,32,39,46,46,46,39,32,101,120,112,101,99,116,101,100,0,0,0,0,0,0,0,0,102,105,101,108,100,0,0,0,63,0,0,0,0,0,0,0])
, "i8", ALLOC_NONE, Runtime.GLOBAL_BASE)
function runPostSets() {
}
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;
  var _llvm_va_start=undefined;
  function _llvm_va_end() {}
  var _abs=Math_abs;
  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }
  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[(((px)+(i))|0)];
        var y = HEAPU8[(((py)+(i))|0)];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }
  function _longjmp(env, value) {
      throw { longjmp: true, id: HEAP32[((env)>>2)], value: value || 1 };
    }
  function _abort() {
      Module['abort']();
    }
  var _setjmp=undefined;
  function _localeconv() {
      // %struct.timeval = type { char* decimal point, other stuff... }
      // var indexes = Runtime.calculateStructAlignment({ fields: ['i32', 'i32'] });
      var me = _localeconv;
      if (!me.ret) {
        me.ret = allocate([allocate(intArrayFromString('.'), 'i8', ALLOC_NORMAL)], 'i8*', ALLOC_NORMAL); // just decimal point, for now
      }
      return me.ret;
    }
  var _floor=Math_floor;
  var _pow=Math_pow;
  function _strpbrk(ptr1, ptr2) {
      var curr;
      var searchSet = {};
      while (1) {
        var curr = HEAP8[((ptr2++)|0)];
        if (!curr) break;
        searchSet[curr] = 1;
      }
      while (1) {
        curr = HEAP8[(ptr1)];
        if (!curr) break;
        if (curr in searchSet) return ptr1;
        ptr1++;
      }
      return 0;
    }
  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+8))>>2)]];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
          // Handle precision.
          var precisionSet = false;
          if (next == 46) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          } else {
            var precision = 6; // Standard default.
          }
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }
  function _ldexp(x, exp_) {
      return x * Math.pow(2, exp_);
    }
  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }
  function _memcmp(p1, p2, num) {
      p1 = p1|0; p2 = p2|0; num = num|0;
      var i = 0, v1 = 0, v2 = 0;
      while ((i|0) < (num|0)) {
        v1 = HEAPU8[(((p1)+(i))|0)];
        v2 = HEAPU8[(((p2)+(i))|0)];
        if ((v1|0) != (v2|0)) return ((v1|0) > (v2|0) ? 1 : -1)|0;
        i = (i+1)|0;
      }
      return 0;
    }
  var _strcoll=_strcmp;
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value
      return value;
    }function ___errno_location() {
      return ___errno_state;
    }
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 0777, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 0777 | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },reconcile:function (src, dst, callback) {
        var total = 0;
        var create = {};
        for (var key in src.files) {
          if (!src.files.hasOwnProperty(key)) continue;
          var e = src.files[key];
          var e2 = dst.files[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create[key] = e;
            total++;
          }
        }
        var remove = {};
        for (var key in dst.files) {
          if (!dst.files.hasOwnProperty(key)) continue;
          var e = dst.files[key];
          var e2 = src.files[key];
          if (!e2) {
            remove[key] = e;
            total++;
          }
        }
        if (!total) {
          // early out
          return callback(null);
        }
        var completed = 0;
        function done(err) {
          if (err) return callback(err);
          if (++completed >= total) {
            return callback(null);
          }
        };
        // create a single transaction to handle and IDB reads / writes we'll need to do
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        transaction.onerror = function transaction_onerror() { callback(this.error); };
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
        for (var path in create) {
          if (!create.hasOwnProperty(path)) continue;
          var entry = create[path];
          if (dst.type === 'local') {
            // save file to local
            try {
              if (FS.isDir(entry.mode)) {
                FS.mkdir(path, entry.mode);
              } else if (FS.isFile(entry.mode)) {
                var stream = FS.open(path, 'w+', 0666);
                FS.write(stream, entry.contents, 0, entry.contents.length, 0, true /* canOwn */);
                FS.close(stream);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // save file to IDB
            var req = store.put(entry, path);
            req.onsuccess = function req_onsuccess() { done(null); };
            req.onerror = function req_onerror() { done(this.error); };
          }
        }
        for (var path in remove) {
          if (!remove.hasOwnProperty(path)) continue;
          var entry = remove[path];
          if (dst.type === 'local') {
            // delete file from local
            try {
              if (FS.isDir(entry.mode)) {
                // TODO recursive delete?
                FS.rmdir(path);
              } else if (FS.isFile(entry.mode)) {
                FS.unlink(path);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // delete file from IDB
            var req = store.delete(path);
            req.onsuccess = function req_onsuccess() { done(null); };
            req.onerror = function req_onerror() { done(this.error); };
          }
        }
      },getLocalSet:function (mount, callback) {
        var files = {};
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
        var check = FS.readdir(mount.mountpoint)
          .filter(isRealDir)
          .map(toAbsolute(mount.mountpoint));
        while (check.length) {
          var path = check.pop();
          var stat, node;
          try {
            var lookup = FS.lookupPath(path);
            node = lookup.node;
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path)
              .filter(isRealDir)
              .map(toAbsolute(path)));
            files[path] = { mode: stat.mode, timestamp: stat.mtime };
          } else if (FS.isFile(stat.mode)) {
            files[path] = { contents: node.contents, mode: stat.mode, timestamp: stat.mtime };
          } else {
            return callback(new Error('node type not supported'));
          }
        }
        return callback(null, { type: 'local', files: files });
      },getDB:function (name, callback) {
        // look it up in the cache
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        req.onupgradeneeded = function req_onupgradeneeded() {
          db = req.result;
          db.createObjectStore(IDBFS.DB_STORE_NAME);
        };
        req.onsuccess = function req_onsuccess() {
          db = req.result;
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function req_onerror() {
          callback(this.error);
        };
      },getRemoteSet:function (mount, callback) {
        var files = {};
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function transaction_onerror() { callback(this.error); };
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          store.openCursor().onsuccess = function store_openCursor_onsuccess(event) {
            var cursor = event.target.result;
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, files: files });
            }
            files[cursor.key] = cursor.value;
            cursor.continue();
          };
        });
      }};
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.position = position;
          return position;
        }}};
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[null],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || { recurse_count: 0 };
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
        // start at the root
        var current = FS.root;
        var current_path = '/';
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            current = current.mount.root;
          }
          // follow symlinks
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
            this.parent = null;
            this.mount = null;
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            FS.hashAddNode(this);
          };
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
          FS.FSNode.prototype = {};
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
        return new FS.FSNode(parent, name, mode, rdev);
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 1;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        if (stream.__proto__) {
          // reuse the object
          stream.__proto__ = FS.FSStream.prototype;
        } else {
          var newStream = new FS.FSStream();
          for (var p in stream) {
            newStream[p] = stream[p];
          }
          stream = newStream;
        }
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
        var completed = 0;
        var total = FS.mounts.length;
        function done(err) {
          if (err) {
            return callback(err);
          }
          if (++completed >= total) {
            callback(null);
          }
        };
        // sync all mounts
        for (var i = 0; i < FS.mounts.length; i++) {
          var mount = FS.mounts[i];
          if (!mount.type.syncfs) {
            done(null);
            continue;
          }
          mount.type.syncfs(mount, populate, done);
        }
      },mount:function (type, opts, mountpoint) {
        var lookup;
        if (mountpoint) {
          lookup = FS.lookupPath(mountpoint, { follow: false });
          mountpoint = lookup.path;  // use the absolute path
        }
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          root: null
        };
        // create a root node for the fs
        var root = type.mount(mount);
        root.mount = mount;
        mount.root = root;
        // assign the mount info to the mountpoint's node
        if (lookup) {
          lookup.node.mount = mount;
          lookup.node.mounted = true;
          // compatibility update FS.root if we mount to /
          if (mountpoint === '/') {
            FS.root = mount.root;
          }
        }
        // add to our cached list of mounts
        FS.mounts.push(mount);
        return root;
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 0666;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 0777;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 0666;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path, { follow: false });
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 0666 : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0);
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=stdin.fd;
        assert(stdin.fd === 1, 'invalid handle for stdin (' + stdin.fd + ')');
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=stdout.fd;
        assert(stdout.fd === 2, 'invalid handle for stdout (' + stdout.fd + ')');
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=stderr.fd;
        assert(stderr.fd === 3, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
          this.stack = stackTrace();
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
        FS.nameTable = new Array(4096);
        FS.root = FS.createNode(null, '/', 16384 | 0777, 0);
        FS.mount(MEMFS, {}, '/');
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
        FS.ensureErrnoError();
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          function LazyUint8Array() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
              if (!hasByteServing) chunkSize = datalength;
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }function _freopen(filename, mode, stream) {
      // FILE *freopen(const char *restrict filename, const char *restrict mode, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/freopen.html
      if (!filename) {
        var streamObj = FS.getStream(stream);
        if (!streamObj) {
          ___setErrNo(ERRNO_CODES.EBADF);
          return 0;
        }
        if (_freopen.buffer) _free(_freopen.buffer);
        filename = intArrayFromString(streamObj.path);
        filename = allocate(filename, 'i8', ALLOC_NORMAL);
      }
      _fclose(stream);
      return _fopen(filename, mode);
    }
  function _ferror(stream) {
      // int ferror(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ferror.html
      stream = FS.getStream(stream);
      return Number(stream && stream.error);
    }
  function _strstr(ptr1, ptr2) {
      var check = 0, start;
      do {
        if (!check) {
          start = ptr1;
          check = ptr2;
        }
        var curr1 = HEAP8[((ptr1++)|0)];
        var curr2 = HEAP8[((check++)|0)];
        if (curr2 == 0) return start;
        if (curr2 != curr1) {
          // rewind to one character after start, to find ez in eeez
          ptr1 = start + 1;
          check = 0;
        }
      } while (curr1);
      return 0;
    }
  var _mkport=undefined;var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 0777, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              var url = 'ws://' + addr + ':' + port;
              // the node ws library API is slightly different than the browser's
              var opts = ENVIRONMENT_IS_NODE ? {headers: {'websocket-protocol': ['binary']}} : ['binary'];
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStream(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }
  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      stream = FS.getStream(stream);
      return Number(stream && stream.eof);
    }
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStream(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop()
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(stream, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }
  function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStream(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }var _getc=_fgetc;
  function _strspn(pstr, pset) {
      var str = pstr, set, strcurr, setcurr;
      while (1) {
        strcurr = HEAP8[(str)];
        if (!strcurr) return str - pstr;
        set = pset;
        while (1) {
          setcurr = HEAP8[(set)];
          if (!setcurr || setcurr == strcurr) break;
          set++;
        }
        if (!setcurr) return str - pstr;
        str++;
      }
    }
  function _isalnum(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 122) ||
             (chr >= 65 && chr <= 90);
    }
  function _isdigit(chr) {
      return chr >= 48 && chr <= 57;
    }
  function _toupper(chr) {
      if (chr >= 97 && chr <= 122) {
        return chr - 97 + 65;
      } else {
        return chr;
      }
    }
  function _fgets(s, n, stream) {
      // char *fgets(char *restrict s, int n, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
      var streamObj = FS.getStream(stream);
      if (!streamObj) return 0;
      if (streamObj.error || streamObj.eof) return 0;
      var byte_;
      for (var i = 0; i < n - 1 && byte_ != 10; i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
          if (streamObj.error || (streamObj.eof && i == 0)) return 0;
          else if (streamObj.eof) break;
        }
        HEAP8[(((s)+(i))|0)]=byte_
      }
      HEAP8[(((s)+(i))|0)]=0
      return s;
    }
  function _setvbuf(stream, buf, type, size) {
      // int setvbuf(FILE *restrict stream, char *restrict buf, int type, size_t size);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/setvbuf.html
      // TODO: Implement custom buffering.
      return 0;
    }
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var ret = _lseek(stream, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStream(stream);
      stream.eof = false;
      return 0;
    }
  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStream(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }
  function _clearerr(stream) {
      // void clearerr(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/clearerr.html
      stream = FS.getStream(stream);
      if (!stream) {
        return;
      }
      stream.eof = false;
      stream.error = false;
    }
  function __getFloat(text) {
      return /^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?/.exec(text);
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[11] = 1;
        __scanString.whiteSpace[12] = 1;
        __scanString.whiteSpace[13] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function get() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function unget() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
        if (format[formatIndex] === '%') {
          var nextC = format.indexOf('c', formatIndex+1);
          if (nextC > 0) {
            var maxx = 1;
            if (nextC > formatIndex+1) {
              var sub = format.substring(formatIndex+1, nextC);
              maxx = parseInt(sub);
              if (maxx != sub) maxx = 0;
            }
            if (maxx) {
              var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
              argIndex += Runtime.getAlignSize('void*', null, true);
              fields++;
              for (var i = 0; i < maxx; i++) {
                next = get();
                HEAP8[((argPtr++)|0)]=next;
              }
              formatIndex += nextC - formatIndex + 1;
              continue;
            }
          }
        }
        // handle %[...]
        if (format[formatIndex] === '%' && format.indexOf('[', formatIndex+1) > 0) {
          var match = /\%([0-9]*)\[(\^)?(\]?[^\]]*)\]/.exec(format.substring(formatIndex));
          if (match) {
            var maxNumCharacters = parseInt(match[1]) || Infinity;
            var negateScanList = (match[2] === '^');
            var scanList = match[3];
            // expand "middle" dashs into character sets
            var middleDashMatch;
            while ((middleDashMatch = /([^\-])\-([^\-])/.exec(scanList))) {
              var rangeStartCharCode = middleDashMatch[1].charCodeAt(0);
              var rangeEndCharCode = middleDashMatch[2].charCodeAt(0);
              for (var expanded = ''; rangeStartCharCode <= rangeEndCharCode; expanded += String.fromCharCode(rangeStartCharCode++));
              scanList = scanList.replace(middleDashMatch[1] + '-' + middleDashMatch[2], expanded);
            }
            var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
            argIndex += Runtime.getAlignSize('void*', null, true);
            fields++;
            for (var i = 0; i < maxNumCharacters; i++) {
              next = get();
              if (negateScanList) {
                if (scanList.indexOf(String.fromCharCode(next)) < 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              } else {
                if (scanList.indexOf(String.fromCharCode(next)) >= 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              }
            }
            // write out null-terminating character
            HEAP8[((argPtr++)|0)]=0;
            formatIndex += match[0].length;
            continue;
          }
        }      
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if (format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' ||
              type == 'F' || type == 'E' || type == 'G') {
            next = get();
            while (next > 0 && (!(next in __scanString.whiteSpace)))  {
              buffer.push(String.fromCharCode(next));
              next = get();
            }
            var m = __getFloat(buffer.join(''));
            var last = m ? m[0].length : 0;
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            // Strip the optional 0x prefix for %x.
            if ((type == 'x' || type == 'X') && (next == 48)) {
              var peek = get();
              if (peek == 120 || peek == 88) {
                next = get();
              } else {
                unget();
              }
            }
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          if (suppressAssignment) continue;
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if (longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,(tempDouble=parseInt(text, 10),Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'X':
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16)
              break;
            case 'F':
            case 'f':
            case 'E':
            case 'e':
            case 'G':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                HEAPF64[((argPtr)>>3)]=parseFloat(text)
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text)
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))|0)]=array[j]
              }
              break;
          }
          fields++;
        } else if (format[formatIndex].charCodeAt(0) in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }
  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStream(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }function _fscanf(stream, format, varargs) {
      // int fscanf(FILE *restrict stream, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var streamObj = FS.getStream(stream);
      if (!streamObj) {
        return -1;
      }
      var buffer = [];
      function get() {
        var c = _fgetc(stream);
        buffer.push(c);
        return c;
      };
      function unget() {
        _ungetc(buffer.pop(), stream);
      };
      return __scanString(format, get, unget, varargs);
    }
  function _tmpnam(s, dir, prefix) {
      // char *tmpnam(char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpnam.html
      // NOTE: The dir and prefix arguments are for internal use only.
      var folder = FS.findObject(dir || '/tmp');
      if (!folder || !folder.isFolder) {
        dir = '/tmp';
        folder = FS.findObject(dir);
        if (!folder || !folder.isFolder) return 0;
      }
      var name = prefix || 'file';
      do {
        name += String.fromCharCode(65 + Math.floor(Math.random() * 25));
      } while (name in folder.contents);
      var result = dir + '/' + name;
      if (!_tmpnam.buffer) _tmpnam.buffer = _malloc(256);
      if (!s) s = _tmpnam.buffer;
      writeAsciiToMemory(result, s);
      return s;
    }function _tmpfile() {
      // FILE *tmpfile(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpfile.html
      // TODO: Delete the created file on closing.
      if (_tmpfile.mode) {
        _tmpfile.mode = allocate(intArrayFromString('w+'), 'i8', ALLOC_NORMAL);
      }
      return _fopen(_tmpnam(0), _tmpfile.mode);
    }
  var _tan=Math_tan;
  function _sinh(x) {
      var p = Math.pow(Math.E, x);
      return (p - (1 / p)) / 2;
    }
  function _cosh(x) {
      var p = Math.pow(Math.E, x);
      return (p + (1 / p)) / 2;
    }function _tanh(x) {
      return _sinh(x) / _cosh(x);
    }
  var _sqrt=Math_sqrt;
  var _sin=Math_sin;
  function _srand(seed) {}
  function _rand() {
      return Math.floor(Math.random()*0x80000000);
    }
  function _modf(x, intpart) {
      HEAPF64[((intpart)>>3)]=Math.floor(x)
      return x - HEAPF64[((intpart)>>3)];
    }
  var _log=Math_log;
  function _log10(x) {
      return Math.log(x) / Math.LN10;
    }
  function _frexp(x, exp_addr) {
      var sig = 0, exp_ = 0;
      if (x !== 0) {
        var sign = 1;
        if (x < 0) {
          x = -x;
          sign = -1;
        }
        var raw_exp = Math.log(x)/Math.log(2);
        exp_ = Math.ceil(raw_exp);
        if (exp_ === raw_exp) exp_ += 1;
        sig = sign*x/Math.pow(2, exp_);
      }
      HEAP32[((exp_addr)>>2)]=exp_
      return sig;
    }
  function _fmod(x, y) {
      return x % y;
    }
  var _exp=Math_exp;
  var _cos=Math_cos;
  var _ceil=Math_ceil;
  var _atan=Math_atan;
  var _atan2=Math_atan2;
  var _asin=Math_asin;
  var _acos=Math_acos;
  var _fabs=Math_abs;
  var _tzname=allocate(8, "i32*", ALLOC_STATIC);
  var _daylight=allocate(1, "i32*", ALLOC_STATIC);
  var _timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset())
      var winterName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | winter.toString().match(/\(([A-Z]+)\)/)[1];
      var summerName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | summer.toString().match(/\(([A-Z]+)\)/)[1];
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      HEAP32[((_tzname)>>2)]=winterNamePtr
      HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr
    }function _mktime(tmPtr) {
      _tzset();
      var year = HEAP32[(((tmPtr)+(20))>>2)];
      var timestamp = new Date(year >= 1900 ? year : year + 1900,
                               HEAP32[(((tmPtr)+(16))>>2)],
                               HEAP32[(((tmPtr)+(12))>>2)],
                               HEAP32[(((tmPtr)+(8))>>2)],
                               HEAP32[(((tmPtr)+(4))>>2)],
                               HEAP32[((tmPtr)>>2)],
                               0).getTime() / 1000;
      HEAP32[(((tmPtr)+(24))>>2)]=new Date(timestamp).getDay()
      var yday = Math.round((timestamp - (new Date(year, 0, 1)).getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(28))>>2)]=yday
      return timestamp;
    }
  function _setlocale(category, locale) {
      if (!_setlocale.ret) _setlocale.ret = allocate([0], 'i8', ALLOC_NORMAL);
      return _setlocale.ret;
    }
  function _rename(old_path, new_path) {
      // int rename(const char *old, const char *new);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rename.html
      old_path = Pointer_stringify(old_path);
      new_path = Pointer_stringify(new_path);
      try {
        FS.rename(old_path, new_path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  function _unlink(path) {
      // int unlink(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
      path = Pointer_stringify(path);
      try {
        FS.unlink(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  function _rmdir(path) {
      // int rmdir(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rmdir.html
      path = Pointer_stringify(path);
      try {
        FS.rmdir(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _remove(path) {
      // int remove(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/remove.html
      var ret = _unlink(path);
      if (ret == -1) ret = _rmdir(path);
      return ret;
    }
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'root';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/emscripten';
        ENV['LANG'] = 'en_US.UTF-8';
        ENV['_'] = './this.program';
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }
  function _system(command) {
      // int system(const char *command);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/system.html
      // Can't call external programs.
      ___setErrNo(ERRNO_CODES.EAGAIN);
      return -1;
    }
  function _difftime(time1, time0) {
      return time1 - time0;
    }
  var ___tm_current=allocate(44, "i8", ALLOC_STATIC);
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);function _gmtime_r(time, tmPtr) {
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getUTCSeconds()
      HEAP32[(((tmPtr)+(4))>>2)]=date.getUTCMinutes()
      HEAP32[(((tmPtr)+(8))>>2)]=date.getUTCHours()
      HEAP32[(((tmPtr)+(12))>>2)]=date.getUTCDate()
      HEAP32[(((tmPtr)+(16))>>2)]=date.getUTCMonth()
      HEAP32[(((tmPtr)+(20))>>2)]=date.getUTCFullYear()-1900
      HEAP32[(((tmPtr)+(24))>>2)]=date.getUTCDay()
      HEAP32[(((tmPtr)+(36))>>2)]=0
      HEAP32[(((tmPtr)+(32))>>2)]=0
      var start = new Date(date); // define date using UTC, start from Jan 01 00:00:00 UTC
      start.setUTCDate(1);
      start.setUTCMonth(0);
      start.setUTCHours(0);
      start.setUTCMinutes(0);
      start.setUTCSeconds(0);
      start.setUTCMilliseconds(0);
      var yday = Math.floor((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(28))>>2)]=yday
      HEAP32[(((tmPtr)+(40))>>2)]=___tm_timezone
      return tmPtr;
    }function _gmtime(time) {
      return _gmtime_r(time, ___tm_current);
    }
  function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds()
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes()
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours()
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate()
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth()
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay()
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.floor((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(28))>>2)]=yday
      HEAP32[(((tmPtr)+(36))>>2)]=start.getTimezoneOffset() * 60
      var dst = Number(start.getTimezoneOffset() != date.getTimezoneOffset());
      HEAP32[(((tmPtr)+(32))>>2)]=dst
      HEAP32[(((tmPtr)+(40))>>2)]=___tm_timezone
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)]
      };
      var pattern = Pointer_stringify(format);
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls(Math.floor(year/100),2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ),
          // or by no characters if no timezone is determinable. 
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich). 
          // If tm_isdst is zero, the standard time offset is used. 
          // If tm_isdst is greater than zero, the daylight savings time offset is used. 
          // If tm_isdst is negative, no characters are returned. 
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%Z': function(date) {
          // Replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists. [ tm_isdst]
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }
  function _clock() {
      if (_clock.start === undefined) _clock.start = Date.now();
      return Math.floor((Date.now() - _clock.start) * (1000000/1000));
    }
  function _tolower(chr) {
      chr = chr|0;
      if ((chr|0) < 65) return chr|0;
      if ((chr|0) > 90) return chr|0;
      return (chr - 65 + 97)|0;
    }
  function _isalpha(chr) {
      return (chr >= 97 && chr <= 122) ||
             (chr >= 65 && chr <= 90);
    }
  function _iscntrl(chr) {
      return (0 <= chr && chr <= 0x1F) || chr === 0x7F;
    }
  function _isgraph(chr) {
      return 0x20 < chr && chr < 0x7F;
    }
  function _islower(chr) {
      return chr >= 97 && chr <= 122;
    }
  function _ispunct(chr) {
      return (chr >= 33 && chr <= 47) ||
             (chr >= 58 && chr <= 64) ||
             (chr >= 91 && chr <= 96) ||
             (chr >= 123 && chr <= 126);
    }
  function _isspace(chr) {
      return (chr == 32) || (chr >= 9 && chr <= 13);
    }
  function _isupper(chr) {
      return chr >= 65 && chr <= 90;
    }
  function _isxdigit(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 102) ||
             (chr >= 65 && chr <= 70);
    }
  function _memchr(ptr, chr, num) {
      chr = unSign(chr);
      for (var i = 0; i < num; i++) {
        if (HEAP8[(ptr)] == chr) return ptr;
        ptr++;
      }
      return 0;
    }
  function _strcpy(pdest, psrc) {
      pdest = pdest|0; psrc = psrc|0;
      var i = 0;
      do {
        HEAP8[(((pdest+i)|0)|0)]=HEAP8[(((psrc+i)|0)|0)];
        i = (i+1)|0;
      } while (HEAP8[(((psrc)+(i-1))|0)]);
      return pdest|0;
    }
  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }
  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if ((num|0) >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        value = value & 0xff;
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
      return (ptr-num)|0;
    }
  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
        // Canvas event setup
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
            var errorInfo = '?';
            function onContextCreationError(event) {
              errorInfo = event.statusMessage || errorInfo;
            }
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x, y;
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          if (event.type == 'touchstart' ||
              event.type == 'touchend' ||
              event.type == 'touchmove') {
            var t = event.touches.item(0);
            if (t) {
              x = t.pageX - (scrollX + rect.left);
              y = t.pageY - (scrollY + rect.top);
            } else {
              return;
            }
          } else {
            x = event.pageX - (scrollX + rect.left);
            y = event.pageY - (scrollY + rect.top);
          }
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      }};
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
___buildEnvironment(ENV);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = true; // seal the static portion of memory
STACK_MAX = STACK_BASE + 10485760;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");
var FUNCTION_TABLE = [0,0,_f_seek,0,_luaB_pairs,0,_searcher_Croot,0,_luaB_type,0,_f_tostring,0,_io_write,0,_gctm,0,_b_or,0,_db_getmetatable,0,_dothecall,0,_math_atan,0,_b_and,0,_pcallcont,0,_luaB_next,0,_searcher_Lua,0,_pack,0,_math_sinh,0,_math_abs,0,_db_gethook,0,_math_acos,0,_db_upvalueid,0,_luaopen_io,0,_f_lines,0,_os_clock,0,_db_getlocal,0,_f_write,0,_luaopen_math,0,_str_reverse,0,_str_char,0,_os_time,0,_db_setupvalue,0,_f_call,0,_io_tmpfile,0,_os_remove,0,_str_find,0,_os_date,0,_math_deg,0,_luaB_auxwrap,0,_writer,0,_str_match,0,_ll_loadlib,0,_math_rad,0,_luaopen_string,0,_luaB_assert,0,_f_luaopen,0,_luaB_tostring,0,_math_floor,0,_panic,0,_math_exp,0,_tinsert,0,_str_upper,0,_io_lines,0,_str_dump,0,_db_getinfo,0,_db_setmetatable,0,_b_xor,0,_b_replace,0,_searcher_preload,0,_math_modf,0,_f_parser,0,_gmatch,0,_luaopen_os,0,_unpack,0,_math_asin,0,_str_rep,0,_os_tmpname,0,_db_getupvalue,0,_db_upvaluejoin,0,_luaB_tonumber,0,_luaB_cocreate,0,_str_format,0,_ll_require,0,_hookf,0,_io_close,0,_str_gsub,0,_resume,0,_math_random,0,_luaB_xpcall,0,_f_read,0,_luaB_cowrap,0,_luaB_corunning,0,_math_atan2,0,_io_readline,0,_luaopen_package,0,_math_pow,0,_io_noclose,0,_b_rshift,0,_b_extract,0,_ipairsaux,0,_math_tan,0,_gmatch_aux,0,_io_popen,0,_luaopen_debug,0,_math_frexp,0,_math_ceil,0,_l_alloc,0,_dofilecont,0,_luaB_pcall,0,_math_cos,0,_math_tanh,0,_io_output,0,_b_lrot,0,_luaB_rawlen,0,_luaB_yield,0,_db_sethook,0,_os_difftime,0,_tremove,0,_ll_searchpath,0,_str_lower,0,_math_min,0,_lua_newstate,0,_luaB_dofile,0,_growstack,0,_math_max,0,_str_byte,0,_os_setlocale,0,_math_randomseed,0,_unroll,0,_luaB_rawequal,0,_f_flush,0,_luaB_getmetatable,0,_math_fmod,0,_io_read,0,_math_ldexp,0,_luaB_loadfile,0,_os_getenv,0,_luaB_print,0,_io_open,0,_math_log,0,_luaB_error,0,_luaB_costatus,0,_str_sub,0,_db_setlocal,0,_luaB_coresume,0,_str_len,0,_db_debug,0,_luaB_setmetatable,0,_os_rename,0,_tconcat,0,_luaB_ipairs,0,_luaopen_base,0,_io_fclose,0,_io_type,0,_math_sin,0,_luaopen_bit32,0,_b_lshift,0,_db_setuservalue,0,_os_exit,0,_luaB_select,0,_io_input,0,_db_getregistry,0,_b_test,0,_luaB_rawset,0,_b_rrot,0,_luaB_collectgarbage,0,_searcher_C,0,_luaopen_table,0,_luaB_load,0,_luaopen_coroutine,0,_io_pclose,0,_b_not,0,_math_sqrt,0,_math_cosh,0,_luaB_rawget,0,_os_execute,0,_f_gc,0,_sort,0,_b_arshift,0,_getS,0,_db_traceback,0,_io_flush,0,_db_getuservalue,0,_f_setvbuf,0,_getF,0,_generic_reader,0];
// EMSCRIPTEN_START_FUNCS
/**
 * @param {number} $L
 * @param {number} $size
 * @return {number}
 */
function _lua_checkstack($L,$size){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2=sp;
 /** @type {number} */ var $res;
 /** @type {number} */ var $ci;
 /** @type {number} */ var $inuse;
 $1=$L;
 HEAP32[(($2)>>2)]=$size;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+16)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $ci=$5;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+24)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=(($9+8)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=$8;
 /** @type {number} */ var $13=$11;
 /** @type {number} */ var $14=((($12)-($13))|0);
 /** @type {number} */ var $15=(((($14|0))/(16))&-1);
 /** @type {number} */ var $16=HEAP32[(($2)>>2)];
 /** @type {number} */ var $17=($15|0)>($16|0);
 if($17){label=2;break;}else{label=3;break;}
 case 2: 
 $res=1;
 label=7;break;
 case 3: 
 /** @type {number} */ var $20=$1;
 /** @type {number} */ var $21=(($20+8)|0);
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 /** @type {number} */ var $23=$1;
 /** @type {number} */ var $24=(($23+28)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=$22;
 /** @type {number} */ var $27=$25;
 /** @type {number} */ var $28=((($26)-($27))|0);
 /** @type {number} */ var $29=(((($28|0))/(16))&-1);
 /** @type {number} */ var $30=((($29)+(5))|0);
 $inuse=$30;
 /** @type {number} */ var $31=$inuse;
 /** @type {number} */ var $32=HEAP32[(($2)>>2)];
 /** @type {number} */ var $33=(((1000000)-($32))|0);
 /** @type {number} */ var $34=($31|0)>($33|0);
 if($34){label=4;break;}else{label=5;break;}
 case 4: 
 $res=0;
 label=6;break;
 case 5: 
 /** @type {number} */ var $37=$1;
 /** @type {number} */ var $38=$2;
 /** @type {number} */ var $39=_luaD_rawrunprotected($37,226,$38);
 /** @type {number} */ var $40=($39|0)==0;
 /** @type {number} */ var $41=($40&1);
 $res=$41;
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 /** @type {number} */ var $44=$res;
 /** @type {number} */ var $45=($44|0)!=0;
 if($45){label=8;break;}else{label=10;break;}
 case 8: 
 /** @type {number} */ var $47=$ci;
 /** @type {number} */ var $48=(($47+4)|0);
 /** @type {number} */ var $49=HEAP32[(($48)>>2)];
 /** @type {number} */ var $50=$1;
 /** @type {number} */ var $51=(($50+8)|0);
 /** @type {number} */ var $52=HEAP32[(($51)>>2)];
 /** @type {number} */ var $53=HEAP32[(($2)>>2)];
 /** @type {number} */ var $54=(($52+($53<<4))|0);
 /** @type {number} */ var $55=($49>>>0)<($54>>>0);
 if($55){label=9;break;}else{label=10;break;}
 case 9: 
 /** @type {number} */ var $57=$1;
 /** @type {number} */ var $58=(($57+8)|0);
 /** @type {number} */ var $59=HEAP32[(($58)>>2)];
 /** @type {number} */ var $60=HEAP32[(($2)>>2)];
 /** @type {number} */ var $61=(($59+($60<<4))|0);
 /** @type {number} */ var $62=$ci;
 /** @type {number} */ var $63=(($62+4)|0);
 HEAP32[(($63)>>2)]=$61;
 label=10;break;
 case 10: 
 /** @type {number} */ var $65=$res;
 STACKTOP=sp;return $65;
 }
}
/**
 * @param {number} $L
 * @param {number} $ud
 * @return {number}
 */
function _growstack($L,$ud){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $size;
 $1=$L;
 $2=$ud;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $size=$5;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=$size;
 _luaD_growstack($6,$7);
 STACKTOP=sp;return;
}
/**
 * @param {number} $from
 * @param {number} $to
 * @param {number} $n
 * @return {number}
 */
function _lua_xmove($from,$to,$n){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $i;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io1;
 $1=$from;
 $2=$to;
 $3=$n;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=($4|0)==($5|0);
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 label=7;break;
 case 3: 
 /** @type {number} */ var $9=$3;
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=(($10+8)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=(((-$9))|0);
 /** @type {number} */ var $14=(($12+($13<<4))|0);
 HEAP32[(($11)>>2)]=$14;
 $i=0;
 label=4;break;
 case 4: 
 /** @type {number} */ var $16=$i;
 /** @type {number} */ var $17=$3;
 /** @type {number} */ var $18=($16|0)<($17|0);
 if($18){label=5;break;}else{label=7;break;}
 case 5: 
 /** @type {number} */ var $20=$1;
 /** @type {number} */ var $21=(($20+8)|0);
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 /** @type {number} */ var $23=$i;
 /** @type {number} */ var $24=(($22+($23<<4))|0);
 $io2=$24;
 /** @type {number} */ var $25=$2;
 /** @type {number} */ var $26=(($25+8)|0);
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=(($27+16)|0);
 HEAP32[(($26)>>2)]=$28;
 $io1=$27;
 /** @type {number} */ var $29=$io1;
 /** @type {number} */ var $30=(($29)|0);
 /** @type {number} */ var $31=$io2;
 /** @type {number} */ var $32=(($31)|0);
 /** @type {number} */ var $33=$30;
 /** @type {number} */ var $34=$32;
 HEAP32[(($33)>>2)]=HEAP32[(($34)>>2)];HEAP32[((($33)+(4))>>2)]=HEAP32[((($34)+(4))>>2)];
 /** @type {number} */ var $35=$io2;
 /** @type {number} */ var $36=(($35+8)|0);
 /** @type {number} */ var $37=HEAP32[(($36)>>2)];
 /** @type {number} */ var $38=$io1;
 /** @type {number} */ var $39=(($38+8)|0);
 HEAP32[(($39)>>2)]=$37;
 label=6;break;
 case 6: 
 /** @type {number} */ var $41=$i;
 /** @type {number} */ var $42=((($41)+(1))|0);
 $i=$42;
 label=4;break;
 case 7: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $panicf
 * @return {number}
 */
function _lua_atpanic($L,$panicf){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $old;
 $1=$L;
 $2=$panicf;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+12)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=(($5+168)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 $old=$7;
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=(($9+12)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=(($11+168)|0);
 HEAP32[(($12)>>2)]=$8;
 /** @type {number} */ var $13=$old;
 STACKTOP=sp;return $13;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _lua_version($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $2=$L;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=($3|0)==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 $1=968;
 label=4;break;
 case 3: 
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=(($7+12)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=(($9+176)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 $1=$11;
 label=4;break;
 case 4: 
 /** @type {number} */ var $13=$1;
 STACKTOP=sp;return $13;
 }
}
/**
 * @param {number} $L
 * @param {number} $idx
 * @return {number}
 */
function _lua_absindex($L,$idx){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$L;
 $2=$idx;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=($3|0)>0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=($6|0)<=-1001000;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $9=$2;
 var $26=$9;label=5;break;
 case 4: 
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=(($11+8)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=(($14+16)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=(($16)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=$13;
 /** @type {number} */ var $20=$18;
 /** @type {number} */ var $21=((($19)-($20))|0);
 /** @type {number} */ var $22=(((($21|0))/(16))&-1);
 /** @type {number} */ var $23=$2;
 /** @type {number} */ var $24=((($22)+($23))|0);
 var $26=$24;label=5;break;
 case 5: 
 var $26;
 STACKTOP=sp;return $26;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _lua_gettop($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+8)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($5+16)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=(($7)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=(($9+16)|0);
 /** @type {number} */ var $11=$4;
 /** @type {number} */ var $12=$10;
 /** @type {number} */ var $13=((($11)-($12))|0);
 /** @type {number} */ var $14=(((($13|0))/(16))&-1);
 STACKTOP=sp;return $14;
}
Module["_lua_gettop"] = _lua_gettop;
/**
 * @param {number} $L
 * @param {number} $idx
 * @return {number}
 */
function _lua_settop($L,$idx){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $func;
 $1=$L;
 $2=$idx;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+16)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=(($5)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 $func=$7;
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=($8|0)>=0;
 if($9){label=2;break;}else{label=6;break;}
 case 2: 
 label=3;break;
 case 3: 
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=(($12+8)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=$func;
 /** @type {number} */ var $16=(($15+16)|0);
 /** @type {number} */ var $17=$2;
 /** @type {number} */ var $18=(($16+($17<<4))|0);
 /** @type {number} */ var $19=($14>>>0)<($18>>>0);
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=(($21+8)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 /** @type {number} */ var $24=(($23+16)|0);
 HEAP32[(($22)>>2)]=$24;
 /** @type {number} */ var $25=(($23+8)|0);
 HEAP32[(($25)>>2)]=0;
 label=3;break;
 case 5: 
 /** @type {number} */ var $27=$func;
 /** @type {number} */ var $28=(($27+16)|0);
 /** @type {number} */ var $29=$2;
 /** @type {number} */ var $30=(($28+($29<<4))|0);
 /** @type {number} */ var $31=$1;
 /** @type {number} */ var $32=(($31+8)|0);
 HEAP32[(($32)>>2)]=$30;
 label=7;break;
 case 6: 
 /** @type {number} */ var $34=$2;
 /** @type {number} */ var $35=((($34)+(1))|0);
 /** @type {number} */ var $36=$1;
 /** @type {number} */ var $37=(($36+8)|0);
 /** @type {number} */ var $38=HEAP32[(($37)>>2)];
 /** @type {number} */ var $39=(($38+($35<<4))|0);
 HEAP32[(($37)>>2)]=$39;
 label=7;break;
 case 7: 
 STACKTOP=sp;return;
 }
}
Module["_lua_settop"] = _lua_settop;
/**
 * @param {number} $L
 * @param {number} $idx
 * @return {number}
 */
function _lua_remove($L,$idx){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $p;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io1;
 $1=$L;
 $2=$idx;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_index2addr($3,$4);
 $p=$5;
 label=2;break;
 case 2: 
 /** @type {number} */ var $7=$p;
 /** @type {number} */ var $8=(($7+16)|0);
 $p=$8;
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=(($9+8)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=($8>>>0)<($11>>>0);
 if($12){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $14=$p;
 $io2=$14;
 /** @type {number} */ var $15=$p;
 /** @type {number} */ var $16=((($15)-(16))|0);
 $io1=$16;
 /** @type {number} */ var $17=$io1;
 /** @type {number} */ var $18=(($17)|0);
 /** @type {number} */ var $19=$io2;
 /** @type {number} */ var $20=(($19)|0);
 /** @type {number} */ var $21=$18;
 /** @type {number} */ var $22=$20;
 HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];
 /** @type {number} */ var $23=$io2;
 /** @type {number} */ var $24=(($23+8)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=$io1;
 /** @type {number} */ var $27=(($26+8)|0);
 HEAP32[(($27)>>2)]=$25;
 label=2;break;
 case 4: 
 /** @type {number} */ var $29=$1;
 /** @type {number} */ var $30=(($29+8)|0);
 /** @type {number} */ var $31=HEAP32[(($30)>>2)];
 /** @type {number} */ var $32=((($31)-(16))|0);
 HEAP32[(($30)>>2)]=$32;
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $idx
 * @return {number}
 */
function _index2addr($L,$idx){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $ci;
 /** @type {number} */ var $o;
 /** @type {number} */ var $func;
 $2=$L;
 $3=$idx;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=(($4+16)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 $ci=$6;
 /** @type {number} */ var $7=$3;
 /** @type {number} */ var $8=($7|0)>0;
 if($8){label=2;break;}else{label=5;break;}
 case 2: 
 /** @type {number} */ var $10=$ci;
 /** @type {number} */ var $11=(($10)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=$3;
 /** @type {number} */ var $14=(($12+($13<<4))|0);
 $o=$14;
 /** @type {number} */ var $15=$o;
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=(($16+8)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=($15>>>0)>=($18>>>0);
 if($19){label=3;break;}else{label=4;break;}
 case 3: 
 $1=1280;
 label=15;break;
 case 4: 
 /** @type {number} */ var $22=$o;
 $1=$22;
 label=15;break;
 case 5: 
 /** @type {number} */ var $24=$3;
 /** @type {number} */ var $25=($24|0)>-1001000;
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $27=$2;
 /** @type {number} */ var $28=(($27+8)|0);
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 /** @type {number} */ var $30=$3;
 /** @type {number} */ var $31=(($29+($30<<4))|0);
 $1=$31;
 label=15;break;
 case 7: 
 /** @type {number} */ var $33=$3;
 /** @type {number} */ var $34=($33|0)==-1001000;
 if($34){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $36=$2;
 /** @type {number} */ var $37=(($36+12)|0);
 /** @type {number} */ var $38=HEAP32[(($37)>>2)];
 /** @type {number} */ var $39=(($38+40)|0);
 $1=$39;
 label=15;break;
 case 9: 
 /** @type {number} */ var $41=$3;
 /** @type {number} */ var $42=(((-1001000)-($41))|0);
 $3=$42;
 /** @type {number} */ var $43=$ci;
 /** @type {number} */ var $44=(($43)|0);
 /** @type {number} */ var $45=HEAP32[(($44)>>2)];
 /** @type {number} */ var $46=(($45+8)|0);
 /** @type {number} */ var $47=HEAP32[(($46)>>2)];
 /** @type {number} */ var $48=($47|0)==22;
 if($48){label=10;break;}else{label=11;break;}
 case 10: 
 $1=1280;
 label=15;break;
 case 11: 
 /** @type {number} */ var $51=$ci;
 /** @type {number} */ var $52=(($51)|0);
 /** @type {number} */ var $53=HEAP32[(($52)>>2)];
 /** @type {number} */ var $54=(($53)|0);
 /** @type {number} */ var $55=$54;
 /** @type {number} */ var $56=HEAP32[(($55)>>2)];
 /** @type {number} */ var $57=$56;
 /** @type {number} */ var $58=$57;
 $func=$58;
 /** @type {number} */ var $59=$3;
 /** @type {number} */ var $60=$func;
 /** @type {number} */ var $61=(($60+6)|0);
 /** @type {number} */ var $62=HEAP8[($61)];
 /** @type {number} */ var $63=($62&255);
 /** @type {number} */ var $64=($59|0)<=($63|0);
 if($64){label=12;break;}else{label=13;break;}
 case 12: 
 /** @type {number} */ var $66=$3;
 /** @type {number} */ var $67=((($66)-(1))|0);
 /** @type {number} */ var $68=$func;
 /** @type {number} */ var $69=(($68+16)|0);
 /** @type {number} */ var $70=(($69+($67<<4))|0);
 var $73=$70;label=14;break;
 case 13: 
 var $73=1280;label=14;break;
 case 14: 
 var $73;
 $1=$73;
 label=15;break;
 case 15: 
 /** @type {number} */ var $75=$1;
 STACKTOP=sp;return $75;
 }
}
/**
 * @param {number} $L
 * @param {number} $idx
 * @return {number}
 */
function _lua_insert($L,$idx){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $p;
 /** @type {number} */ var $q;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io1;
 /** @type {number} */ var $io21;
 /** @type {number} */ var $io12;
 $1=$L;
 $2=$idx;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_index2addr($3,$4);
 $p=$5;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+8)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 $q=$8;
 label=2;break;
 case 2: 
 /** @type {number} */ var $10=$q;
 /** @type {number} */ var $11=$p;
 /** @type {number} */ var $12=($10>>>0)>($11>>>0);
 if($12){label=3;break;}else{label=5;break;}
 case 3: 
 /** @type {number} */ var $14=$q;
 /** @type {number} */ var $15=((($14)-(16))|0);
 $io2=$15;
 /** @type {number} */ var $16=$q;
 $io1=$16;
 /** @type {number} */ var $17=$io1;
 /** @type {number} */ var $18=(($17)|0);
 /** @type {number} */ var $19=$io2;
 /** @type {number} */ var $20=(($19)|0);
 /** @type {number} */ var $21=$18;
 /** @type {number} */ var $22=$20;
 HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];
 /** @type {number} */ var $23=$io2;
 /** @type {number} */ var $24=(($23+8)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=$io1;
 /** @type {number} */ var $27=(($26+8)|0);
 HEAP32[(($27)>>2)]=$25;
 label=4;break;
 case 4: 
 /** @type {number} */ var $29=$q;
 /** @type {number} */ var $30=((($29)-(16))|0);
 $q=$30;
 label=2;break;
 case 5: 
 /** @type {number} */ var $32=$1;
 /** @type {number} */ var $33=(($32+8)|0);
 /** @type {number} */ var $34=HEAP32[(($33)>>2)];
 $io21=$34;
 /** @type {number} */ var $35=$p;
 $io12=$35;
 /** @type {number} */ var $36=$io12;
 /** @type {number} */ var $37=(($36)|0);
 /** @type {number} */ var $38=$io21;
 /** @type {number} */ var $39=(($38)|0);
 /** @type {number} */ var $40=$37;
 /** @type {number} */ var $41=$39;
 HEAP32[(($40)>>2)]=HEAP32[(($41)>>2)];HEAP32[((($40)+(4))>>2)]=HEAP32[((($41)+(4))>>2)];
 /** @type {number} */ var $42=$io21;
 /** @type {number} */ var $43=(($42+8)|0);
 /** @type {number} */ var $44=HEAP32[(($43)>>2)];
 /** @type {number} */ var $45=$io12;
 /** @type {number} */ var $46=(($45+8)|0);
 HEAP32[(($46)>>2)]=$44;
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $idx
 * @return {number}
 */
function _lua_replace($L,$idx){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$L;
 $2=$idx;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+8)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=((($6)-(16))|0);
 /** @type {number} */ var $8=$2;
 _moveto($3,$7,$8);
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=(($9+8)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=((($11)-(16))|0);
 HEAP32[(($10)>>2)]=$12;
 STACKTOP=sp;return;
}
/**
 * @param {number} $L
 * @param {number} $fr
 * @param {number} $idx
 * @return {number}
 */
function _moveto($L,$fr,$idx){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $to;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io1;
 $1=$L;
 $2=$fr;
 $3=$idx;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=_index2addr($4,$5);
 $to=$6;
 /** @type {number} */ var $7=$2;
 $io2=$7;
 /** @type {number} */ var $8=$to;
 $io1=$8;
 /** @type {number} */ var $9=$io1;
 /** @type {number} */ var $10=(($9)|0);
 /** @type {number} */ var $11=$io2;
 /** @type {number} */ var $12=(($11)|0);
 /** @type {number} */ var $13=$10;
 /** @type {number} */ var $14=$12;
 HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];
 /** @type {number} */ var $15=$io2;
 /** @type {number} */ var $16=(($15+8)|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=$io1;
 /** @type {number} */ var $19=(($18+8)|0);
 HEAP32[(($19)>>2)]=$17;
 /** @type {number} */ var $20=$3;
 /** @type {number} */ var $21=($20|0)<-1001000;
 if($21){label=2;break;}else{label=7;break;}
 case 2: 
 /** @type {number} */ var $23=$2;
 /** @type {number} */ var $24=(($23+8)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=$25&64;
 /** @type {number} */ var $27=($26|0)!=0;
 if($27){label=3;break;}else{label=6;break;}
 case 3: 
 /** @type {number} */ var $29=$2;
 /** @type {number} */ var $30=(($29)|0);
 /** @type {number} */ var $31=$30;
 /** @type {number} */ var $32=HEAP32[(($31)>>2)];
 /** @type {number} */ var $33=$32;
 /** @type {number} */ var $34=(($33+5)|0);
 /** @type {number} */ var $35=HEAP8[($34)];
 /** @type {number} */ var $36=($35&255);
 /** @type {number} */ var $37=$36&3;
 /** @type {number} */ var $38=($37|0)!=0;
 if($38){label=4;break;}else{label=6;break;}
 case 4: 
 /** @type {number} */ var $40=$1;
 /** @type {number} */ var $41=(($40+16)|0);
 /** @type {number} */ var $42=HEAP32[(($41)>>2)];
 /** @type {number} */ var $43=(($42)|0);
 /** @type {number} */ var $44=HEAP32[(($43)>>2)];
 /** @type {number} */ var $45=(($44)|0);
 /** @type {number} */ var $46=$45;
 /** @type {number} */ var $47=HEAP32[(($46)>>2)];
 /** @type {number} */ var $48=$47;
 /** @type {number} */ var $49=$48;
 /** @type {number} */ var $50=$49;
 /** @type {number} */ var $51=$50;
 /** @type {number} */ var $52=(($51+5)|0);
 /** @type {number} */ var $53=HEAP8[($52)];
 /** @type {number} */ var $54=($53&255);
 /** @type {number} */ var $55=$54&4;
 /** @type {number} */ var $56=($55|0)!=0;
 if($56){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $58=$1;
 /** @type {number} */ var $59=$1;
 /** @type {number} */ var $60=(($59+16)|0);
 /** @type {number} */ var $61=HEAP32[(($60)>>2)];
 /** @type {number} */ var $62=(($61)|0);
 /** @type {number} */ var $63=HEAP32[(($62)>>2)];
 /** @type {number} */ var $64=(($63)|0);
 /** @type {number} */ var $65=$64;
 /** @type {number} */ var $66=HEAP32[(($65)>>2)];
 /** @type {number} */ var $67=$66;
 /** @type {number} */ var $68=$67;
 /** @type {number} */ var $69=$68;
 /** @type {number} */ var $70=$2;
 /** @type {number} */ var $71=(($70)|0);
 /** @type {number} */ var $72=$71;
 /** @type {number} */ var $73=HEAP32[(($72)>>2)];
 _luaC_barrier_($58,$69,$73);
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $fromidx
 * @param {number} $toidx
 * @return {number}
 */
function _lua_copy($L,$fromidx,$toidx){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $fr;
 $1=$L;
 $2=$fromidx;
 $3=$toidx;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=_index2addr($4,$5);
 $fr=$6;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=$fr;
 /** @type {number} */ var $9=$3;
 _moveto($7,$8,$9);
 STACKTOP=sp;return;
}
/**
 * @param {number} $L
 * @param {number} $idx
 * @return {number}
 */
function _lua_pushvalue($L,$idx){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io1;
 $1=$L;
 $2=$idx;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_index2addr($3,$4);
 $io2=$5;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+8)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 $io1=$8;
 /** @type {number} */ var $9=$io1;
 /** @type {number} */ var $10=(($9)|0);
 /** @type {number} */ var $11=$io2;
 /** @type {number} */ var $12=(($11)|0);
 /** @type {number} */ var $13=$10;
 /** @type {number} */ var $14=$12;
 HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];
 /** @type {number} */ var $15=$io2;
 /** @type {number} */ var $16=(($15+8)|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=$io1;
 /** @type {number} */ var $19=(($18+8)|0);
 HEAP32[(($19)>>2)]=$17;
 /** @type {number} */ var $20=$1;
 /** @type {number} */ var $21=(($20+8)|0);
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 /** @type {number} */ var $23=(($22+16)|0);
 HEAP32[(($21)>>2)]=$23;
 STACKTOP=sp;return;
}
Module["_lua_pushvalue"] = _lua_pushvalue;
/**
 * @param {number} $L
 * @param {number} $idx
 * @return {number}
 */
function _lua_type($L,$idx){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $o;
 $1=$L;
 $2=$idx;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_index2addr($3,$4);
 $o=$5;
 /** @type {number} */ var $6=$o;
 /** @type {number} */ var $7=($6|0)!=1280;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $9=$o;
 /** @type {number} */ var $10=(($9+8)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=$11&15;
 var $15=$12;label=4;break;
 case 3: 
 var $15=-1;label=4;break;
 case 4: 
 var $15;
 STACKTOP=sp;return $15;
 }
}
Module["_lua_type"] = _lua_type;
/**
 * @param {number} $L
 * @param {number} $t
 * @return {number}
 */
function _lua_typename($L,$t){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$L;
 $2=$t;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=((($4)+(1))|0);
 /** @type {number} */ var $6=((1120+($5<<2))|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 STACKTOP=sp;return $7;
}
Module["_lua_typename"] = _lua_typename;
/**
 * @param {number} $L
 * @param {number} $idx
 * @return {number}
 */
function _lua_iscfunction($L,$idx){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $o;
 $1=$L;
 $2=$idx;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_index2addr($3,$4);
 $o=$5;
 /** @type {number} */ var $6=$o;
 /** @type {number} */ var $7=(($6+8)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=($8|0)==22;
 if($9){var $16=1;label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $11=$o;
 /** @type {number} */ var $12=(($11+8)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=($13|0)==102;
 var $16=$14;label=3;break;
 case 3: 
 var $16;
 /** @type {number} */ var $17=($16&1);
 STACKTOP=sp;return $17;
 }
}
Module["_lua_iscfunction"] = _lua_iscfunction;
/**
 * @param {number} $L
 * @param {number} $idx
 * @return {number}
 */
function _lua_isnumber($L,$idx){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $n=sp;
 /** @type {number} */ var $o;
 $1=$L;
 $2=$idx;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_index2addr($3,$4);
 $o=$5;
 /** @type {number} */ var $6=$o;
 /** @type {number} */ var $7=(($6+8)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=($8|0)==3;
 if($9){var $15=1;label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $11=$o;
 /** @type {number} */ var $12=_luaV_tonumber($11,$n);
 $o=$12;
 /** @type {number} */ var $13=($12|0)!=0;
 var $15=$13;label=3;break;
 case 3: 
 var $15;
 /** @type {number} */ var $16=($15&1);
 STACKTOP=sp;return $16;
 }
}
/**
 * @param {number} $L
 * @param {number} $idx
 * @return {number}
 */
function _lua_isstring($L,$idx){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $t;
 $1=$L;
 $2=$idx;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_lua_type($3,$4);
 $t=$5;
 /** @type {number} */ var $6=$t;
 /** @type {number} */ var $7=($6|0)==4;
 if($7){var $12=1;label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $9=$t;
 /** @type {number} */ var $10=($9|0)==3;
 var $12=$10;label=3;break;
 case 3: 
 var $12;
 /** @type {number} */ var $13=($12&1);
 STACKTOP=sp;return $13;
 }
}
/**
 * @param {number} $L
 * @param {number} $index1
 * @param {number} $index2
 * @return {number}
 */
function _lua_rawequal($L,$index1,$index2){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $o1;
 /** @type {number} */ var $o2;
 $1=$L;
 $2=$index1;
 $3=$index2;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=_index2addr($4,$5);
 $o1=$6;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=$3;
 /** @type {number} */ var $9=_index2addr($7,$8);
 $o2=$9;
 /** @type {number} */ var $10=$o1;
 /** @type {number} */ var $11=($10|0)!=1280;
 if($11){label=2;break;}else{label=6;break;}
 case 2: 
 /** @type {number} */ var $13=$o2;
 /** @type {number} */ var $14=($13|0)!=1280;
 if($14){label=3;break;}else{label=6;break;}
 case 3: 
 /** @type {number} */ var $16=$o1;
 /** @type {number} */ var $17=(($16+8)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=$o2;
 /** @type {number} */ var $20=(($19+8)|0);
 /** @type {number} */ var $21=HEAP32[(($20)>>2)];
 /** @type {number} */ var $22=($18|0)==($21|0);
 if($22){label=4;break;}else{var $29=0;label=5;break;}
 case 4: 
 /** @type {number} */ var $24=$o1;
 /** @type {number} */ var $25=$o2;
 /** @type {number} */ var $26=_luaV_equalobj_(0,$24,$25);
 /** @type {number} */ var $27=($26|0)!=0;
 var $29=$27;label=5;break;
 case 5: 
 var $29;
 /** @type {number} */ var $30=($29&1);
 var $33=$30;label=7;break;
 case 6: 
 var $33=0;label=7;break;
 case 7: 
 var $33;
 STACKTOP=sp;return $33;
 }
}
/**
 * @param {number} $L
 * @param {number} $index1
 * @param {number} $index2
 * @param {number} $op
 * @return {number}
 */
function _lua_compare($L,$index1,$index2,$op){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $o1;
 /** @type {number} */ var $o2;
 /** @type {number} */ var $i;
 $1=$L;
 $2=$index1;
 $3=$index2;
 $4=$op;
 $i=0;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=_index2addr($5,$6);
 $o1=$7;
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=$3;
 /** @type {number} */ var $10=_index2addr($8,$9);
 $o2=$10;
 /** @type {number} */ var $11=$o1;
 /** @type {number} */ var $12=($11|0)!=1280;
 if($12){label=2;break;}else{label=11;break;}
 case 2: 
 /** @type {number} */ var $14=$o2;
 /** @type {number} */ var $15=($14|0)!=1280;
 if($15){label=3;break;}else{label=11;break;}
 case 3: 
 /** @type {number} */ var $17=$4;
 if(($17|0)==0){ label=4;break;}else if(($17|0)==1){ label=7;break;}else if(($17|0)==2){ label=8;break;}else{label=9;break;}
 case 4: 
 /** @type {number} */ var $19=$o1;
 /** @type {number} */ var $20=(($19+8)|0);
 /** @type {number} */ var $21=HEAP32[(($20)>>2)];
 /** @type {number} */ var $22=$o2;
 /** @type {number} */ var $23=(($22+8)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=($21|0)==($24|0);
 if($25){label=5;break;}else{var $33=0;label=6;break;}
 case 5: 
 /** @type {number} */ var $27=$1;
 /** @type {number} */ var $28=$o1;
 /** @type {number} */ var $29=$o2;
 /** @type {number} */ var $30=_luaV_equalobj_($27,$28,$29);
 /** @type {number} */ var $31=($30|0)!=0;
 var $33=$31;label=6;break;
 case 6: 
 var $33;
 /** @type {number} */ var $34=($33&1);
 $i=$34;
 label=10;break;
 case 7: 
 /** @type {number} */ var $36=$1;
 /** @type {number} */ var $37=$o1;
 /** @type {number} */ var $38=$o2;
 /** @type {number} */ var $39=_luaV_lessthan($36,$37,$38);
 $i=$39;
 label=10;break;
 case 8: 
 /** @type {number} */ var $41=$1;
 /** @type {number} */ var $42=$o1;
 /** @type {number} */ var $43=$o2;
 /** @type {number} */ var $44=_luaV_lessequal($41,$42,$43);
 $i=$44;
 label=10;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 /** @type {number} */ var $48=$i;
 STACKTOP=sp;return $48;
 }
}
/**
 * @param {number} $L
 * @param {number} $idx
 * @param {number} $isnum
 * @return {number}
 */
function _lua_tonumberx($L,$idx,$isnum){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $n=sp;
 /** @type {number} */ var $o;
 $2=$L;
 $3=$idx;
 $4=$isnum;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$3;
 /** @type {number} */ var $7=_index2addr($5,$6);
 $o=$7;
 /** @type {number} */ var $8=$o;
 /** @type {number} */ var $9=(($8+8)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=($10|0)==3;
 if($11){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $13=$o;
 /** @type {number} */ var $14=_luaV_tonumber($13,$n);
 $o=$14;
 /** @type {number} */ var $15=($14|0)!=0;
 if($15){label=3;break;}else{label=6;break;}
 case 3: 
 /** @type {number} */ var $17=$4;
 /** @type {number} */ var $18=($17|0)!=0;
 if($18){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $20=$4;
 HEAP32[(($20)>>2)]=1;
 label=5;break;
 case 5: 
 /** @type {number} */ var $22=$o;
 /** @type {number} */ var $23=(($22)|0);
 /** @type {number} */ var $24=$23;
 /** @type {number} */ var $25=HEAPF64[(($24)>>3)];
 $1=$25;
 label=9;break;
 case 6: 
 /** @type {number} */ var $27=$4;
 /** @type {number} */ var $28=($27|0)!=0;
 if($28){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $30=$4;
 HEAP32[(($30)>>2)]=0;
 label=8;break;
 case 8: 
 $1=0;
 label=9;break;
 case 9: 
 /** @type {number} */ var $33=$1;
 STACKTOP=sp;return $33;
 }
}
Module["_lua_tonumberx"] = _lua_tonumberx;
/**
 * @param {number} $L
 * @param {number} $idx
 * @param {number} $isnum
 * @return {number}
 */
function _lua_tointegerx($L,$idx,$isnum){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $n=sp;
 /** @type {number} */ var $o;
 /** @type {number} */ var $res;
 /** @type {number} */ var $num;
 $2=$L;
 $3=$idx;
 $4=$isnum;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$3;
 /** @type {number} */ var $7=_index2addr($5,$6);
 $o=$7;
 /** @type {number} */ var $8=$o;
 /** @type {number} */ var $9=(($8+8)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=($10|0)==3;
 if($11){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $13=$o;
 /** @type {number} */ var $14=_luaV_tonumber($13,$n);
 $o=$14;
 /** @type {number} */ var $15=($14|0)!=0;
 if($15){label=3;break;}else{label=6;break;}
 case 3: 
 /** @type {number} */ var $17=$o;
 /** @type {number} */ var $18=(($17)|0);
 /** @type {number} */ var $19=$18;
 /** @type {number} */ var $20=HEAPF64[(($19)>>3)];
 $num=$20;
 /** @type {number} */ var $21=$num;
 /** @type {number} */ var $22=(($21)&-1);
 $res=$22;
 /** @type {number} */ var $23=$4;
 /** @type {number} */ var $24=($23|0)!=0;
 if($24){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $26=$4;
 HEAP32[(($26)>>2)]=1;
 label=5;break;
 case 5: 
 /** @type {number} */ var $28=$res;
 $1=$28;
 label=9;break;
 case 6: 
 /** @type {number} */ var $30=$4;
 /** @type {number} */ var $31=($30|0)!=0;
 if($31){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $33=$4;
 HEAP32[(($33)>>2)]=0;
 label=8;break;
 case 8: 
 $1=0;
 label=9;break;
 case 9: 
 /** @type {number} */ var $36=$1;
 STACKTOP=sp;return $36;
 }
}
/**
 * @param {number} $L
 * @param {number} $idx
 * @param {number} $isnum
 * @return {number}
 */
function _lua_tounsignedx($L,$idx,$isnum){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $n=sp;
 /** @type {number} */ var $o;
 /** @type {number} */ var $res;
 /** @type {number} */ var $num;
 /** @type {number} */ var $u=(sp)+(16);
 $2=$L;
 $3=$idx;
 $4=$isnum;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$3;
 /** @type {number} */ var $7=_index2addr($5,$6);
 $o=$7;
 /** @type {number} */ var $8=$o;
 /** @type {number} */ var $9=(($8+8)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=($10|0)==3;
 if($11){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $13=$o;
 /** @type {number} */ var $14=_luaV_tonumber($13,$n);
 $o=$14;
 /** @type {number} */ var $15=($14|0)!=0;
 if($15){label=3;break;}else{label=6;break;}
 case 3: 
 /** @type {number} */ var $17=$o;
 /** @type {number} */ var $18=(($17)|0);
 /** @type {number} */ var $19=$18;
 /** @type {number} */ var $20=HEAPF64[(($19)>>3)];
 $num=$20;
 /** @type {number} */ var $21=$num;
 /** @type {number} */ var $22=($21)+(6755399441055744);
 /** @type {number} */ var $23=$u;
 HEAPF64[(($23)>>3)]=$22;
 /** @type {number} */ var $24=HEAP32[((980)>>2)];
 /** @type {number} */ var $25=($24|0)==33;
 /** @type {number} */ var $26=($25&1);
 /** @type {number} */ var $27=$u;
 /** @type {number} */ var $28=(($27+($26<<2))|0);
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 $res=$29;
 /** @type {number} */ var $30=$4;
 /** @type {number} */ var $31=($30|0)!=0;
 if($31){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $33=$4;
 HEAP32[(($33)>>2)]=1;
 label=5;break;
 case 5: 
 /** @type {number} */ var $35=$res;
 $1=$35;
 label=9;break;
 case 6: 
 /** @type {number} */ var $37=$4;
 /** @type {number} */ var $38=($37|0)!=0;
 if($38){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $40=$4;
 HEAP32[(($40)>>2)]=0;
 label=8;break;
 case 8: 
 $1=0;
 label=9;break;
 case 9: 
 /** @type {number} */ var $43=$1;
 STACKTOP=sp;return $43;
 }
}
/**
 * @param {number} $L
 * @param {number} $idx
 * @return {number}
 */
function _lua_toboolean($L,$idx){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $o;
 $1=$L;
 $2=$idx;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_index2addr($3,$4);
 $o=$5;
 /** @type {number} */ var $6=$o;
 /** @type {number} */ var $7=(($6+8)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=($8|0)==0;
 if($9){var $24=1;label=5;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $11=$o;
 /** @type {number} */ var $12=(($11+8)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=($13|0)==1;
 if($14){label=3;break;}else{var $22=0;label=4;break;}
 case 3: 
 /** @type {number} */ var $16=$o;
 /** @type {number} */ var $17=(($16)|0);
 /** @type {number} */ var $18=$17;
 /** @type {number} */ var $19=HEAP32[(($18)>>2)];
 /** @type {number} */ var $20=($19|0)==0;
 var $22=$20;label=4;break;
 case 4: 
 var $22;
 var $24=$22;label=5;break;
 case 5: 
 var $24;
 /** @type {number} */ var $25=$24^1;
 /** @type {number} */ var $26=($25&1);
 STACKTOP=sp;return $26;
 }
}
Module["_lua_toboolean"] = _lua_toboolean;
/**
 * @param {number} $L
 * @param {number} $idx
 * @param {number} $len
 * @return {number}
 */
function _lua_tolstring($L,$idx,$len){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $o;
 $2=$L;
 $3=$idx;
 $4=$len;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$3;
 /** @type {number} */ var $7=_index2addr($5,$6);
 $o=$7;
 /** @type {number} */ var $8=$o;
 /** @type {number} */ var $9=(($8+8)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=$10&15;
 /** @type {number} */ var $12=($11|0)==4;
 if($12){label=9;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=$o;
 /** @type {number} */ var $16=_luaV_tostring($14,$15);
 /** @type {number} */ var $17=($16|0)!=0;
 if($17){label=6;break;}else{label=3;break;}
 case 3: 
 /** @type {number} */ var $19=$4;
 /** @type {number} */ var $20=($19|0)!=0;
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $22=$4;
 HEAP32[(($22)>>2)]=0;
 label=5;break;
 case 5: 
 $1=0;
 label=12;break;
 case 6: 
 /** @type {number} */ var $25=$2;
 /** @type {number} */ var $26=(($25+12)|0);
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=(($27+12)|0);
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 /** @type {number} */ var $30=($29|0)>0;
 if($30){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $32=$2;
 _luaC_step($32);
 label=8;break;
 case 8: 
 /** @type {number} */ var $34=$2;
 /** @type {number} */ var $35=$3;
 /** @type {number} */ var $36=_index2addr($34,$35);
 $o=$36;
 label=9;break;
 case 9: 
 /** @type {number} */ var $38=$4;
 /** @type {number} */ var $39=($38|0)!=0;
 if($39){label=10;break;}else{label=11;break;}
 case 10: 
 /** @type {number} */ var $41=$o;
 /** @type {number} */ var $42=(($41)|0);
 /** @type {number} */ var $43=$42;
 /** @type {number} */ var $44=HEAP32[(($43)>>2)];
 /** @type {number} */ var $45=$44;
 /** @type {number} */ var $46=$45;
 /** @type {number} */ var $47=(($46+12)|0);
 /** @type {number} */ var $48=HEAP32[(($47)>>2)];
 /** @type {number} */ var $49=$4;
 HEAP32[(($49)>>2)]=$48;
 label=11;break;
 case 11: 
 /** @type {number} */ var $51=$o;
 /** @type {number} */ var $52=(($51)|0);
 /** @type {number} */ var $53=$52;
 /** @type {number} */ var $54=HEAP32[(($53)>>2)];
 /** @type {number} */ var $55=$54;
 /** @type {number} */ var $56=(($55+16)|0);
 /** @type {number} */ var $57=$56;
 $1=$57;
 label=12;break;
 case 12: 
 /** @type {number} */ var $59=$1;
 STACKTOP=sp;return $59;
 }
}
Module["_lua_tolstring"] = _lua_tolstring;
/**
 * @param {number} $L
 * @param {number} $idx
 * @return {number}
 */
function _lua_rawlen($L,$idx){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $o;
 $2=$L;
 $3=$idx;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=_index2addr($4,$5);
 $o=$6;
 /** @type {number} */ var $7=$o;
 /** @type {number} */ var $8=(($7+8)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=$9&15;
 if(($10|0)==4){ label=2;break;}else if(($10|0)==7){ label=3;break;}else if(($10|0)==5){ label=4;break;}else{label=5;break;}
 case 2: 
 /** @type {number} */ var $12=$o;
 /** @type {number} */ var $13=(($12)|0);
 /** @type {number} */ var $14=$13;
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=$15;
 /** @type {number} */ var $17=$16;
 /** @type {number} */ var $18=(($17+12)|0);
 /** @type {number} */ var $19=HEAP32[(($18)>>2)];
 $1=$19;
 label=6;break;
 case 3: 
 /** @type {number} */ var $21=$o;
 /** @type {number} */ var $22=(($21)|0);
 /** @type {number} */ var $23=$22;
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=$24;
 /** @type {number} */ var $26=$25;
 /** @type {number} */ var $27=(($26+16)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 $1=$28;
 label=6;break;
 case 4: 
 /** @type {number} */ var $30=$o;
 /** @type {number} */ var $31=(($30)|0);
 /** @type {number} */ var $32=$31;
 /** @type {number} */ var $33=HEAP32[(($32)>>2)];
 /** @type {number} */ var $34=$33;
 /** @type {number} */ var $35=_luaH_getn($34);
 $1=$35;
 label=6;break;
 case 5: 
 $1=0;
 label=6;break;
 case 6: 
 /** @type {number} */ var $38=$1;
 STACKTOP=sp;return $38;
 }
}
Module["_lua_rawlen"] = _lua_rawlen;
/**
 * @param {number} $L
 * @param {number} $idx
 * @return {number}
 */
function _lua_touserdata($L,$idx){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $o;
 $2=$L;
 $3=$idx;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=_index2addr($4,$5);
 $o=$6;
 /** @type {number} */ var $7=$o;
 /** @type {number} */ var $8=(($7+8)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=$9&15;
 if(($10|0)==7){ label=2;break;}else if(($10|0)==2){ label=3;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $12=$o;
 /** @type {number} */ var $13=(($12)|0);
 /** @type {number} */ var $14=$13;
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=$15;
 /** @type {number} */ var $17=(($16+24)|0);
 /** @type {number} */ var $18=$17;
 $1=$18;
 label=5;break;
 case 3: 
 /** @type {number} */ var $20=$o;
 /** @type {number} */ var $21=(($20)|0);
 /** @type {number} */ var $22=$21;
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 $1=$23;
 label=5;break;
 case 4: 
 $1=0;
 label=5;break;
 case 5: 
 /** @type {number} */ var $26=$1;
 STACKTOP=sp;return $26;
 }
}
/**
 * @param {number} $L
 * @param {number} $idx
 * @return {number}
 */
function _lua_tothread($L,$idx){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $o;
 $1=$L;
 $2=$idx;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_index2addr($3,$4);
 $o=$5;
 /** @type {number} */ var $6=$o;
 /** @type {number} */ var $7=(($6+8)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=($8|0)==72;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $18=0;label=4;break;
 case 3: 
 /** @type {number} */ var $12=$o;
 /** @type {number} */ var $13=(($12)|0);
 /** @type {number} */ var $14=$13;
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=$15;
 var $18=$16;label=4;break;
 case 4: 
 var $18;
 STACKTOP=sp;return $18;
 }
}
/**
 * @param {number} $L
 * @param {number} $idx
 * @return {number}
 */
function _lua_topointer($L,$idx){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $o;
 $2=$L;
 $3=$idx;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=_index2addr($4,$5);
 $o=$6;
 /** @type {number} */ var $7=$o;
 /** @type {number} */ var $8=(($7+8)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=$9&63;
 switch(($10|0)){case 5:{ label=2;break;}case 6:{ label=3;break;}case 38:{ label=4;break;}case 22:{ label=5;break;}case 8:{ label=6;break;}case 7:case 2:{ label=7;break;}default:{label=8;break;}}break;
 case 2: 
 /** @type {number} */ var $12=$o;
 /** @type {number} */ var $13=(($12)|0);
 /** @type {number} */ var $14=$13;
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=$15;
 /** @type {number} */ var $17=$16;
 $1=$17;
 label=9;break;
 case 3: 
 /** @type {number} */ var $19=$o;
 /** @type {number} */ var $20=(($19)|0);
 /** @type {number} */ var $21=$20;
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 /** @type {number} */ var $23=$22;
 /** @type {number} */ var $24=$23;
 /** @type {number} */ var $25=$24;
 $1=$25;
 label=9;break;
 case 4: 
 /** @type {number} */ var $27=$o;
 /** @type {number} */ var $28=(($27)|0);
 /** @type {number} */ var $29=$28;
 /** @type {number} */ var $30=HEAP32[(($29)>>2)];
 /** @type {number} */ var $31=$30;
 /** @type {number} */ var $32=$31;
 /** @type {number} */ var $33=$32;
 $1=$33;
 label=9;break;
 case 5: 
 /** @type {number} */ var $35=$o;
 /** @type {number} */ var $36=(($35)|0);
 /** @type {number} */ var $37=$36;
 /** @type {number} */ var $38=HEAP32[(($37)>>2)];
 /** @type {number} */ var $39=$38;
 /** @type {number} */ var $40=$39;
 $1=$40;
 label=9;break;
 case 6: 
 /** @type {number} */ var $42=$o;
 /** @type {number} */ var $43=(($42)|0);
 /** @type {number} */ var $44=$43;
 /** @type {number} */ var $45=HEAP32[(($44)>>2)];
 /** @type {number} */ var $46=$45;
 /** @type {number} */ var $47=$46;
 $1=$47;
 label=9;break;
 case 7: 
 /** @type {number} */ var $49=$2;
 /** @type {number} */ var $50=$3;
 /** @type {number} */ var $51=_lua_touserdata($49,$50);
 $1=$51;
 label=9;break;
 case 8: 
 $1=0;
 label=9;break;
 case 9: 
 /** @type {number} */ var $54=$1;
 STACKTOP=sp;return $54;
 }
}
Module["_lua_topointer"] = _lua_topointer;
/**
 * @param {number} $L
 * @return {number}
 */
function _lua_pushnil($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+8)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 /** @type {number} */ var $5=(($4+8)|0);
 HEAP32[(($5)>>2)]=0;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+8)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=(($8+16)|0);
 HEAP32[(($7)>>2)]=$9;
 STACKTOP=sp;return;
}
Module["_lua_pushnil"] = _lua_pushnil;
/**
 * @param {number} $L
 * @param {number} $n
 * @return {number}
 */
function _lua_pushnumber($L,$n){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $io;
 $1=$L;
 $2=$n;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+8)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $io=$5;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=$io;
 /** @type {number} */ var $8=(($7)|0);
 /** @type {number} */ var $9=$8;
 HEAPF64[(($9)>>3)]=$6;
 /** @type {number} */ var $10=$io;
 /** @type {number} */ var $11=(($10+8)|0);
 HEAP32[(($11)>>2)]=3;
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=(($12+8)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=(($14+16)|0);
 HEAP32[(($13)>>2)]=$15;
 STACKTOP=sp;return;
}
Module["_lua_pushnumber"] = _lua_pushnumber;
/**
 * @param {number} $L
 * @param {number} $n
 * @return {number}
 */
function _lua_pushinteger($L,$n){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $io;
 $1=$L;
 $2=$n;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+8)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $io=$5;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=($6|0);
 /** @type {number} */ var $8=$io;
 /** @type {number} */ var $9=(($8)|0);
 /** @type {number} */ var $10=$9;
 HEAPF64[(($10)>>3)]=$7;
 /** @type {number} */ var $11=$io;
 /** @type {number} */ var $12=(($11+8)|0);
 HEAP32[(($12)>>2)]=3;
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=(($13+8)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=(($15+16)|0);
 HEAP32[(($14)>>2)]=$16;
 STACKTOP=sp;return;
}
/**
 * @param {number} $L
 * @param {number} $u
 * @return {number}
 */
function _lua_pushunsigned($L,$u){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $n;
 /** @type {number} */ var $io;
 $1=$L;
 $2=$u;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=($3>>>0)<=2147483647;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=($6|0);
 var $12=$7;label=4;break;
 case 3: 
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=($9>>>0);
 var $12=$10;label=4;break;
 case 4: 
 var $12;
 $n=$12;
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=(($13+8)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 $io=$15;
 /** @type {number} */ var $16=$n;
 /** @type {number} */ var $17=$io;
 /** @type {number} */ var $18=(($17)|0);
 /** @type {number} */ var $19=$18;
 HEAPF64[(($19)>>3)]=$16;
 /** @type {number} */ var $20=$io;
 /** @type {number} */ var $21=(($20+8)|0);
 HEAP32[(($21)>>2)]=3;
 /** @type {number} */ var $22=$1;
 /** @type {number} */ var $23=(($22+8)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=(($24+16)|0);
 HEAP32[(($23)>>2)]=$25;
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $s
 * @param {number} $len
 * @return {number}
 */
function _lua_pushlstring($L,$s,$len){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $ts;
 /** @type {number} */ var $io;
 /** @type {number} */ var $x_;
 $1=$L;
 $2=$s;
 $3=$len;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+12)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=(($6+12)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=($8|0)>0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $11=$1;
 _luaC_step($11);
 label=3;break;
 case 3: 
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=$3;
 /** @type {number} */ var $16=_luaS_newlstr($13,$14,$15);
 $ts=$16;
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=(($17+8)|0);
 /** @type {number} */ var $19=HEAP32[(($18)>>2)];
 $io=$19;
 /** @type {number} */ var $20=$ts;
 $x_=$20;
 /** @type {number} */ var $21=$x_;
 /** @type {number} */ var $22=$21;
 /** @type {number} */ var $23=$io;
 /** @type {number} */ var $24=(($23)|0);
 /** @type {number} */ var $25=$24;
 HEAP32[(($25)>>2)]=$22;
 /** @type {number} */ var $26=$x_;
 /** @type {number} */ var $27=$26;
 /** @type {number} */ var $28=(($27+4)|0);
 /** @type {number} */ var $29=HEAP8[($28)];
 /** @type {number} */ var $30=($29&255);
 /** @type {number} */ var $31=$30|64;
 /** @type {number} */ var $32=$io;
 /** @type {number} */ var $33=(($32+8)|0);
 HEAP32[(($33)>>2)]=$31;
 /** @type {number} */ var $34=$1;
 /** @type {number} */ var $35=(($34+8)|0);
 /** @type {number} */ var $36=HEAP32[(($35)>>2)];
 /** @type {number} */ var $37=(($36+16)|0);
 HEAP32[(($35)>>2)]=$37;
 /** @type {number} */ var $38=$ts;
 /** @type {number} */ var $39=(($38+16)|0);
 /** @type {number} */ var $40=$39;
 STACKTOP=sp;return $40;
 }
}
/**
 * @param {number} $L
 * @param {number} $s
 * @return {number}
 */
function _lua_pushstring($L,$s){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $ts;
 /** @type {number} */ var $io;
 /** @type {number} */ var $x_;
 $2=$L;
 $3=$s;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $7=$2;
 _lua_pushnil($7);
 $1=0;
 label=6;break;
 case 3: 
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=(($9+12)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=(($11+12)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=($13|0)>0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $16=$2;
 _luaC_step($16);
 label=5;break;
 case 5: 
 /** @type {number} */ var $18=$2;
 /** @type {number} */ var $19=$3;
 /** @type {number} */ var $20=_luaS_new($18,$19);
 $ts=$20;
 /** @type {number} */ var $21=$2;
 /** @type {number} */ var $22=(($21+8)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 $io=$23;
 /** @type {number} */ var $24=$ts;
 $x_=$24;
 /** @type {number} */ var $25=$x_;
 /** @type {number} */ var $26=$25;
 /** @type {number} */ var $27=$io;
 /** @type {number} */ var $28=(($27)|0);
 /** @type {number} */ var $29=$28;
 HEAP32[(($29)>>2)]=$26;
 /** @type {number} */ var $30=$x_;
 /** @type {number} */ var $31=$30;
 /** @type {number} */ var $32=(($31+4)|0);
 /** @type {number} */ var $33=HEAP8[($32)];
 /** @type {number} */ var $34=($33&255);
 /** @type {number} */ var $35=$34|64;
 /** @type {number} */ var $36=$io;
 /** @type {number} */ var $37=(($36+8)|0);
 HEAP32[(($37)>>2)]=$35;
 /** @type {number} */ var $38=$2;
 /** @type {number} */ var $39=(($38+8)|0);
 /** @type {number} */ var $40=HEAP32[(($39)>>2)];
 /** @type {number} */ var $41=(($40+16)|0);
 HEAP32[(($39)>>2)]=$41;
 /** @type {number} */ var $42=$ts;
 /** @type {number} */ var $43=(($42+16)|0);
 /** @type {number} */ var $44=$43;
 $1=$44;
 label=6;break;
 case 6: 
 /** @type {number} */ var $46=$1;
 STACKTOP=sp;return $46;
 }
}
Module["_lua_pushstring"] = _lua_pushstring;
/**
 * @param {number} $L
 * @param {number} $fmt
 * @param {number} $argp
 * @return {number}
 */
function _lua_pushvfstring($L,$fmt,$argp){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $ret;
 $1=$L;
 $2=$fmt;
 $3=$argp;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+12)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=(($6+12)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=($8|0)>0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $11=$1;
 _luaC_step($11);
 label=3;break;
 case 3: 
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=$3;
 /** @type {number} */ var $16=_luaO_pushvfstring($13,$14,$15);
 $ret=$16;
 /** @type {number} */ var $17=$ret;
 STACKTOP=sp;return $17;
 }
}
/**
 * @param {number} $L
 * @param {number} $fmt
 * @param {number} varrp
 * @return {number}
 */
function _lua_pushfstring($L,$fmt,varrp){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $ret;
 /** @type {number} */ var $argp=sp;
 $1=$L;
 $2=$fmt;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+12)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=(($5+12)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=($7|0)>0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $10=$1;
 _luaC_step($10);
 label=3;break;
 case 3: 
 /** @type {number} */ var $12=(($argp)|0);
 /** @type {number} */ var $13=$12;
 HEAP32[(($13)>>2)]=varrp;HEAP32[((($13)+(4))>>2)]=0;
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=$2;
 /** @type {number} */ var $16=(($argp)|0);
 /** @type {number} */ var $17=_luaO_pushvfstring($14,$15,$16);
 $ret=$17;
 /** @type {number} */ var $18=(($argp)|0);
 /** @type {number} */ var $19=$18;
 /** @type {number} */ var $20=$ret;
 STACKTOP=sp;return $20;
 }
}
/**
 * @param {number} $L
 * @param {number} $fn
 * @param {number} $n
 * @return {number}
 */
function _lua_pushcclosure($L,$fn,$n){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $io;
 /** @type {number} */ var $cl;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io1;
 /** @type {number} */ var $io3;
 $1=$L;
 $2=$fn;
 $3=$n;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=(($7+8)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 $io=$9;
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=$io;
 /** @type {number} */ var $12=(($11)|0);
 /** @type {number} */ var $13=$12;
 HEAP32[(($13)>>2)]=$10;
 /** @type {number} */ var $14=$io;
 /** @type {number} */ var $15=(($14+8)|0);
 HEAP32[(($15)>>2)]=22;
 label=9;break;
 case 3: 
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=(($17+12)|0);
 /** @type {number} */ var $19=HEAP32[(($18)>>2)];
 /** @type {number} */ var $20=(($19+12)|0);
 /** @type {number} */ var $21=HEAP32[(($20)>>2)];
 /** @type {number} */ var $22=($21|0)>0;
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $24=$1;
 _luaC_step($24);
 label=5;break;
 case 5: 
 /** @type {number} */ var $26=$1;
 /** @type {number} */ var $27=$3;
 /** @type {number} */ var $28=_luaF_newCclosure($26,$27);
 $cl=$28;
 /** @type {number} */ var $29=$2;
 /** @type {number} */ var $30=$cl;
 /** @type {number} */ var $31=$30;
 /** @type {number} */ var $32=(($31+12)|0);
 HEAP32[(($32)>>2)]=$29;
 /** @type {number} */ var $33=$3;
 /** @type {number} */ var $34=$1;
 /** @type {number} */ var $35=(($34+8)|0);
 /** @type {number} */ var $36=HEAP32[(($35)>>2)];
 /** @type {number} */ var $37=(((-$33))|0);
 /** @type {number} */ var $38=(($36+($37<<4))|0);
 HEAP32[(($35)>>2)]=$38;
 label=6;break;
 case 6: 
 /** @type {number} */ var $40=$3;
 /** @type {number} */ var $41=((($40)-(1))|0);
 $3=$41;
 /** @type {number} */ var $42=($40|0)!=0;
 if($42){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $44=$1;
 /** @type {number} */ var $45=(($44+8)|0);
 /** @type {number} */ var $46=HEAP32[(($45)>>2)];
 /** @type {number} */ var $47=$3;
 /** @type {number} */ var $48=(($46+($47<<4))|0);
 $io2=$48;
 /** @type {number} */ var $49=$3;
 /** @type {number} */ var $50=$cl;
 /** @type {number} */ var $51=$50;
 /** @type {number} */ var $52=(($51+16)|0);
 /** @type {number} */ var $53=(($52+($49<<4))|0);
 $io1=$53;
 /** @type {number} */ var $54=$io1;
 /** @type {number} */ var $55=(($54)|0);
 /** @type {number} */ var $56=$io2;
 /** @type {number} */ var $57=(($56)|0);
 /** @type {number} */ var $58=$55;
 /** @type {number} */ var $59=$57;
 HEAP32[(($58)>>2)]=HEAP32[(($59)>>2)];HEAP32[((($58)+(4))>>2)]=HEAP32[((($59)+(4))>>2)];
 /** @type {number} */ var $60=$io2;
 /** @type {number} */ var $61=(($60+8)|0);
 /** @type {number} */ var $62=HEAP32[(($61)>>2)];
 /** @type {number} */ var $63=$io1;
 /** @type {number} */ var $64=(($63+8)|0);
 HEAP32[(($64)>>2)]=$62;
 label=6;break;
 case 8: 
 /** @type {number} */ var $66=$1;
 /** @type {number} */ var $67=(($66+8)|0);
 /** @type {number} */ var $68=HEAP32[(($67)>>2)];
 $io3=$68;
 /** @type {number} */ var $69=$cl;
 /** @type {number} */ var $70=$69;
 /** @type {number} */ var $71=$io3;
 /** @type {number} */ var $72=(($71)|0);
 /** @type {number} */ var $73=$72;
 HEAP32[(($73)>>2)]=$70;
 /** @type {number} */ var $74=$io3;
 /** @type {number} */ var $75=(($74+8)|0);
 HEAP32[(($75)>>2)]=102;
 label=9;break;
 case 9: 
 /** @type {number} */ var $77=$1;
 /** @type {number} */ var $78=(($77+8)|0);
 /** @type {number} */ var $79=HEAP32[(($78)>>2)];
 /** @type {number} */ var $80=(($79+16)|0);
 HEAP32[(($78)>>2)]=$80;
 STACKTOP=sp;return;
 }
}
Module["_lua_pushcclosure"] = _lua_pushcclosure;
/**
 * @param {number} $L
 * @param {number} $b
 * @return {number}
 */
function _lua_pushboolean($L,$b){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $io;
 $1=$L;
 $2=$b;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+8)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $io=$5;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=($6|0)!=0;
 /** @type {number} */ var $8=($7&1);
 /** @type {number} */ var $9=$io;
 /** @type {number} */ var $10=(($9)|0);
 /** @type {number} */ var $11=$10;
 HEAP32[(($11)>>2)]=$8;
 /** @type {number} */ var $12=$io;
 /** @type {number} */ var $13=(($12+8)|0);
 HEAP32[(($13)>>2)]=1;
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=(($14+8)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=(($16+16)|0);
 HEAP32[(($15)>>2)]=$17;
 STACKTOP=sp;return;
}
Module["_lua_pushboolean"] = _lua_pushboolean;
/**
 * @param {number} $L
 * @param {number} $p
 * @return {number}
 */
function _lua_pushlightuserdata($L,$p){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $io;
 $1=$L;
 $2=$p;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+8)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $io=$5;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=$io;
 /** @type {number} */ var $8=(($7)|0);
 /** @type {number} */ var $9=$8;
 HEAP32[(($9)>>2)]=$6;
 /** @type {number} */ var $10=$io;
 /** @type {number} */ var $11=(($10+8)|0);
 HEAP32[(($11)>>2)]=2;
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=(($12+8)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=(($14+16)|0);
 HEAP32[(($13)>>2)]=$15;
 STACKTOP=sp;return;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _lua_pushthread($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $io;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+8)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $io=$4;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=$5;
 /** @type {number} */ var $7=$io;
 /** @type {number} */ var $8=(($7)|0);
 /** @type {number} */ var $9=$8;
 HEAP32[(($9)>>2)]=$6;
 /** @type {number} */ var $10=$io;
 /** @type {number} */ var $11=(($10+8)|0);
 HEAP32[(($11)>>2)]=72;
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=(($12+8)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=(($14+16)|0);
 HEAP32[(($13)>>2)]=$15;
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=(($16+12)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=(($18+172)|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=($20|0)==($21|0);
 /** @type {number} */ var $23=($22&1);
 STACKTOP=sp;return $23;
}
/**
 * @param {number} $L
 * @param {number} $var
 * @return {number}
 */
function _lua_getglobal($L,$var){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $reg;
 /** @type {number} */ var $gt;
 /** @type {number} */ var $io;
 /** @type {number} */ var $x_;
 $1=$L;
 $2=$var;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+12)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=(($5+40)|0);
 /** @type {number} */ var $7=(($6)|0);
 /** @type {number} */ var $8=$7;
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=$9;
 $reg=$10;
 /** @type {number} */ var $11=$reg;
 /** @type {number} */ var $12=_luaH_getint($11,2);
 $gt=$12;
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=(($13+8)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=(($15+16)|0);
 HEAP32[(($14)>>2)]=$16;
 $io=$15;
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=$2;
 /** @type {number} */ var $19=_luaS_new($17,$18);
 $x_=$19;
 /** @type {number} */ var $20=$x_;
 /** @type {number} */ var $21=$20;
 /** @type {number} */ var $22=$io;
 /** @type {number} */ var $23=(($22)|0);
 /** @type {number} */ var $24=$23;
 HEAP32[(($24)>>2)]=$21;
 /** @type {number} */ var $25=$x_;
 /** @type {number} */ var $26=$25;
 /** @type {number} */ var $27=(($26+4)|0);
 /** @type {number} */ var $28=HEAP8[($27)];
 /** @type {number} */ var $29=($28&255);
 /** @type {number} */ var $30=$29|64;
 /** @type {number} */ var $31=$io;
 /** @type {number} */ var $32=(($31+8)|0);
 HEAP32[(($32)>>2)]=$30;
 /** @type {number} */ var $33=$1;
 /** @type {number} */ var $34=$gt;
 /** @type {number} */ var $35=$1;
 /** @type {number} */ var $36=(($35+8)|0);
 /** @type {number} */ var $37=HEAP32[(($36)>>2)];
 /** @type {number} */ var $38=((($37)-(16))|0);
 /** @type {number} */ var $39=$1;
 /** @type {number} */ var $40=(($39+8)|0);
 /** @type {number} */ var $41=HEAP32[(($40)>>2)];
 /** @type {number} */ var $42=((($41)-(16))|0);
 _luaV_gettable($33,$34,$38,$42);
 STACKTOP=sp;return;
}
Module["_lua_getglobal"] = _lua_getglobal;
/**
 * @param {number} $L
 * @param {number} $idx
 * @return {number}
 */
function _lua_gettable($L,$idx){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $t;
 $1=$L;
 $2=$idx;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_index2addr($3,$4);
 $t=$5;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=$t;
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=(($8+8)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=((($10)-(16))|0);
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=(($12+8)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=((($14)-(16))|0);
 _luaV_gettable($6,$7,$11,$15);
 STACKTOP=sp;return;
}
/**
 * @param {number} $L
 * @param {number} $idx
 * @param {number} $k
 * @return {number}
 */
function _lua_getfield($L,$idx,$k){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $t;
 /** @type {number} */ var $io;
 /** @type {number} */ var $x_;
 $1=$L;
 $2=$idx;
 $3=$k;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=_index2addr($4,$5);
 $t=$6;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=(($7+8)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 $io=$9;
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=$3;
 /** @type {number} */ var $12=_luaS_new($10,$11);
 $x_=$12;
 /** @type {number} */ var $13=$x_;
 /** @type {number} */ var $14=$13;
 /** @type {number} */ var $15=$io;
 /** @type {number} */ var $16=(($15)|0);
 /** @type {number} */ var $17=$16;
 HEAP32[(($17)>>2)]=$14;
 /** @type {number} */ var $18=$x_;
 /** @type {number} */ var $19=$18;
 /** @type {number} */ var $20=(($19+4)|0);
 /** @type {number} */ var $21=HEAP8[($20)];
 /** @type {number} */ var $22=($21&255);
 /** @type {number} */ var $23=$22|64;
 /** @type {number} */ var $24=$io;
 /** @type {number} */ var $25=(($24+8)|0);
 HEAP32[(($25)>>2)]=$23;
 /** @type {number} */ var $26=$1;
 /** @type {number} */ var $27=(($26+8)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=(($28+16)|0);
 HEAP32[(($27)>>2)]=$29;
 /** @type {number} */ var $30=$1;
 /** @type {number} */ var $31=$t;
 /** @type {number} */ var $32=$1;
 /** @type {number} */ var $33=(($32+8)|0);
 /** @type {number} */ var $34=HEAP32[(($33)>>2)];
 /** @type {number} */ var $35=((($34)-(16))|0);
 /** @type {number} */ var $36=$1;
 /** @type {number} */ var $37=(($36+8)|0);
 /** @type {number} */ var $38=HEAP32[(($37)>>2)];
 /** @type {number} */ var $39=((($38)-(16))|0);
 _luaV_gettable($30,$31,$35,$39);
 STACKTOP=sp;return;
}
/**
 * @param {number} $L
 * @param {number} $idx
 * @return {number}
 */
function _lua_rawget($L,$idx){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $t;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io1;
 $1=$L;
 $2=$idx;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_index2addr($3,$4);
 $t=$5;
 /** @type {number} */ var $6=$t;
 /** @type {number} */ var $7=(($6)|0);
 /** @type {number} */ var $8=$7;
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=$9;
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=(($11+8)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=((($13)-(16))|0);
 /** @type {number} */ var $15=_luaH_get($10,$14);
 $io2=$15;
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=(($16+8)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=((($18)-(16))|0);
 $io1=$19;
 /** @type {number} */ var $20=$io1;
 /** @type {number} */ var $21=(($20)|0);
 /** @type {number} */ var $22=$io2;
 /** @type {number} */ var $23=(($22)|0);
 /** @type {number} */ var $24=$21;
 /** @type {number} */ var $25=$23;
 HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];
 /** @type {number} */ var $26=$io2;
 /** @type {number} */ var $27=(($26+8)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=$io1;
 /** @type {number} */ var $30=(($29+8)|0);
 HEAP32[(($30)>>2)]=$28;
 STACKTOP=sp;return;
}
Module["_lua_rawget"] = _lua_rawget;
/**
 * @param {number} $L
 * @param {number} $idx
 * @param {number} $n
 * @return {number}
 */
function _lua_rawgeti($L,$idx,$n){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $t;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io1;
 $1=$L;
 $2=$idx;
 $3=$n;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=_index2addr($4,$5);
 $t=$6;
 /** @type {number} */ var $7=$t;
 /** @type {number} */ var $8=(($7)|0);
 /** @type {number} */ var $9=$8;
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=$10;
 /** @type {number} */ var $12=$3;
 /** @type {number} */ var $13=_luaH_getint($11,$12);
 $io2=$13;
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=(($14+8)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 $io1=$16;
 /** @type {number} */ var $17=$io1;
 /** @type {number} */ var $18=(($17)|0);
 /** @type {number} */ var $19=$io2;
 /** @type {number} */ var $20=(($19)|0);
 /** @type {number} */ var $21=$18;
 /** @type {number} */ var $22=$20;
 HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];
 /** @type {number} */ var $23=$io2;
 /** @type {number} */ var $24=(($23+8)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=$io1;
 /** @type {number} */ var $27=(($26+8)|0);
 HEAP32[(($27)>>2)]=$25;
 /** @type {number} */ var $28=$1;
 /** @type {number} */ var $29=(($28+8)|0);
 /** @type {number} */ var $30=HEAP32[(($29)>>2)];
 /** @type {number} */ var $31=(($30+16)|0);
 HEAP32[(($29)>>2)]=$31;
 STACKTOP=sp;return;
}
/**
 * @param {number} $L
 * @param {number} $narray
 * @param {number} $nrec
 * @return {number}
 */
function _lua_createtable($L,$narray,$nrec){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $t;
 /** @type {number} */ var $io;
 $1=$L;
 $2=$narray;
 $3=$nrec;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+12)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=(($6+12)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=($8|0)>0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $11=$1;
 _luaC_step($11);
 label=3;break;
 case 3: 
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=_luaH_new($13);
 $t=$14;
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=(($15+8)|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 $io=$17;
 /** @type {number} */ var $18=$t;
 /** @type {number} */ var $19=$18;
 /** @type {number} */ var $20=$io;
 /** @type {number} */ var $21=(($20)|0);
 /** @type {number} */ var $22=$21;
 HEAP32[(($22)>>2)]=$19;
 /** @type {number} */ var $23=$io;
 /** @type {number} */ var $24=(($23+8)|0);
 HEAP32[(($24)>>2)]=69;
 /** @type {number} */ var $25=$1;
 /** @type {number} */ var $26=(($25+8)|0);
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=(($27+16)|0);
 HEAP32[(($26)>>2)]=$28;
 /** @type {number} */ var $29=$2;
 /** @type {number} */ var $30=($29|0)>0;
 if($30){label=5;break;}else{label=4;break;}
 case 4: 
 /** @type {number} */ var $32=$3;
 /** @type {number} */ var $33=($32|0)>0;
 if($33){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $35=$1;
 /** @type {number} */ var $36=$t;
 /** @type {number} */ var $37=$2;
 /** @type {number} */ var $38=$3;
 _luaH_resize($35,$36,$37,$38);
 label=6;break;
 case 6: 
 STACKTOP=sp;return;
 }
}
Module["_lua_createtable"] = _lua_createtable;
/**
 * @param {number} $L
 * @param {number} $objindex
 * @return {number}
 */
function _lua_getmetatable($L,$objindex){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $obj;
 /** @type {number} */ var $mt;
 /** @type {number} */ var $res;
 /** @type {number} */ var $io;
 $1=$L;
 $2=$objindex;
 $mt=0;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_index2addr($3,$4);
 $obj=$5;
 /** @type {number} */ var $6=$obj;
 /** @type {number} */ var $7=(($6+8)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=$8&15;
 if(($9|0)==5){ label=2;break;}else if(($9|0)==7){ label=3;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $11=$obj;
 /** @type {number} */ var $12=(($11)|0);
 /** @type {number} */ var $13=$12;
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=$14;
 /** @type {number} */ var $16=(($15+8)|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 $mt=$17;
 label=5;break;
 case 3: 
 /** @type {number} */ var $19=$obj;
 /** @type {number} */ var $20=(($19)|0);
 /** @type {number} */ var $21=$20;
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 /** @type {number} */ var $23=$22;
 /** @type {number} */ var $24=$23;
 /** @type {number} */ var $25=(($24+8)|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 $mt=$26;
 label=5;break;
 case 4: 
 /** @type {number} */ var $28=$obj;
 /** @type {number} */ var $29=(($28+8)|0);
 /** @type {number} */ var $30=HEAP32[(($29)>>2)];
 /** @type {number} */ var $31=$30&15;
 /** @type {number} */ var $32=$1;
 /** @type {number} */ var $33=(($32+12)|0);
 /** @type {number} */ var $34=HEAP32[(($33)>>2)];
 /** @type {number} */ var $35=(($34+252)|0);
 /** @type {number} */ var $36=(($35+($31<<2))|0);
 /** @type {number} */ var $37=HEAP32[(($36)>>2)];
 $mt=$37;
 label=5;break;
 case 5: 
 /** @type {number} */ var $39=$mt;
 /** @type {number} */ var $40=($39|0)==0;
 if($40){label=6;break;}else{label=7;break;}
 case 6: 
 $res=0;
 label=8;break;
 case 7: 
 /** @type {number} */ var $43=$1;
 /** @type {number} */ var $44=(($43+8)|0);
 /** @type {number} */ var $45=HEAP32[(($44)>>2)];
 $io=$45;
 /** @type {number} */ var $46=$mt;
 /** @type {number} */ var $47=$46;
 /** @type {number} */ var $48=$io;
 /** @type {number} */ var $49=(($48)|0);
 /** @type {number} */ var $50=$49;
 HEAP32[(($50)>>2)]=$47;
 /** @type {number} */ var $51=$io;
 /** @type {number} */ var $52=(($51+8)|0);
 HEAP32[(($52)>>2)]=69;
 /** @type {number} */ var $53=$1;
 /** @type {number} */ var $54=(($53+8)|0);
 /** @type {number} */ var $55=HEAP32[(($54)>>2)];
 /** @type {number} */ var $56=(($55+16)|0);
 HEAP32[(($54)>>2)]=$56;
 $res=1;
 label=8;break;
 case 8: 
 /** @type {number} */ var $58=$res;
 STACKTOP=sp;return $58;
 }
}
/**
 * @param {number} $L
 * @param {number} $idx
 * @return {number}
 */
function _lua_getuservalue($L,$idx){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $o;
 /** @type {number} */ var $io;
 $1=$L;
 $2=$idx;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_index2addr($3,$4);
 $o=$5;
 /** @type {number} */ var $6=$o;
 /** @type {number} */ var $7=(($6)|0);
 /** @type {number} */ var $8=$7;
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=$9;
 /** @type {number} */ var $11=$10;
 /** @type {number} */ var $12=(($11+12)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=($13|0)!=0;
 if($14){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=(($16+8)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 $io=$18;
 /** @type {number} */ var $19=$o;
 /** @type {number} */ var $20=(($19)|0);
 /** @type {number} */ var $21=$20;
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 /** @type {number} */ var $23=$22;
 /** @type {number} */ var $24=$23;
 /** @type {number} */ var $25=(($24+12)|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 /** @type {number} */ var $27=$26;
 /** @type {number} */ var $28=$io;
 /** @type {number} */ var $29=(($28)|0);
 /** @type {number} */ var $30=$29;
 HEAP32[(($30)>>2)]=$27;
 /** @type {number} */ var $31=$io;
 /** @type {number} */ var $32=(($31+8)|0);
 HEAP32[(($32)>>2)]=69;
 label=4;break;
 case 3: 
 /** @type {number} */ var $34=$1;
 /** @type {number} */ var $35=(($34+8)|0);
 /** @type {number} */ var $36=HEAP32[(($35)>>2)];
 /** @type {number} */ var $37=(($36+8)|0);
 HEAP32[(($37)>>2)]=0;
 label=4;break;
 case 4: 
 /** @type {number} */ var $39=$1;
 /** @type {number} */ var $40=(($39+8)|0);
 /** @type {number} */ var $41=HEAP32[(($40)>>2)];
 /** @type {number} */ var $42=(($41+16)|0);
 HEAP32[(($40)>>2)]=$42;
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $var
 * @return {number}
 */
function _lua_setglobal($L,$var){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $reg;
 /** @type {number} */ var $gt;
 /** @type {number} */ var $io;
 /** @type {number} */ var $x_;
 $1=$L;
 $2=$var;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+12)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=(($5+40)|0);
 /** @type {number} */ var $7=(($6)|0);
 /** @type {number} */ var $8=$7;
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=$9;
 $reg=$10;
 /** @type {number} */ var $11=$reg;
 /** @type {number} */ var $12=_luaH_getint($11,2);
 $gt=$12;
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=(($13+8)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=(($15+16)|0);
 HEAP32[(($14)>>2)]=$16;
 $io=$15;
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=$2;
 /** @type {number} */ var $19=_luaS_new($17,$18);
 $x_=$19;
 /** @type {number} */ var $20=$x_;
 /** @type {number} */ var $21=$20;
 /** @type {number} */ var $22=$io;
 /** @type {number} */ var $23=(($22)|0);
 /** @type {number} */ var $24=$23;
 HEAP32[(($24)>>2)]=$21;
 /** @type {number} */ var $25=$x_;
 /** @type {number} */ var $26=$25;
 /** @type {number} */ var $27=(($26+4)|0);
 /** @type {number} */ var $28=HEAP8[($27)];
 /** @type {number} */ var $29=($28&255);
 /** @type {number} */ var $30=$29|64;
 /** @type {number} */ var $31=$io;
 /** @type {number} */ var $32=(($31+8)|0);
 HEAP32[(($32)>>2)]=$30;
 /** @type {number} */ var $33=$1;
 /** @type {number} */ var $34=$gt;
 /** @type {number} */ var $35=$1;
 /** @type {number} */ var $36=(($35+8)|0);
 /** @type {number} */ var $37=HEAP32[(($36)>>2)];
 /** @type {number} */ var $38=((($37)-(16))|0);
 /** @type {number} */ var $39=$1;
 /** @type {number} */ var $40=(($39+8)|0);
 /** @type {number} */ var $41=HEAP32[(($40)>>2)];
 /** @type {number} */ var $42=((($41)-(32))|0);
 _luaV_settable($33,$34,$38,$42);
 /** @type {number} */ var $43=$1;
 /** @type {number} */ var $44=(($43+8)|0);
 /** @type {number} */ var $45=HEAP32[(($44)>>2)];
 /** @type {number} */ var $46=((($45)-(32))|0);
 HEAP32[(($44)>>2)]=$46;
 STACKTOP=sp;return;
}
Module["_lua_setglobal"] = _lua_setglobal;
/**
 * @param {number} $L
 * @param {number} $idx
 * @param {number} $k
 * @return {number}
 */
function _lua_setfield($L,$idx,$k){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $t;
 /** @type {number} */ var $io;
 /** @type {number} */ var $x_;
 $1=$L;
 $2=$idx;
 $3=$k;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=_index2addr($4,$5);
 $t=$6;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=(($7+8)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=(($9+16)|0);
 HEAP32[(($8)>>2)]=$10;
 $io=$9;
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=$3;
 /** @type {number} */ var $13=_luaS_new($11,$12);
 $x_=$13;
 /** @type {number} */ var $14=$x_;
 /** @type {number} */ var $15=$14;
 /** @type {number} */ var $16=$io;
 /** @type {number} */ var $17=(($16)|0);
 /** @type {number} */ var $18=$17;
 HEAP32[(($18)>>2)]=$15;
 /** @type {number} */ var $19=$x_;
 /** @type {number} */ var $20=$19;
 /** @type {number} */ var $21=(($20+4)|0);
 /** @type {number} */ var $22=HEAP8[($21)];
 /** @type {number} */ var $23=($22&255);
 /** @type {number} */ var $24=$23|64;
 /** @type {number} */ var $25=$io;
 /** @type {number} */ var $26=(($25+8)|0);
 HEAP32[(($26)>>2)]=$24;
 /** @type {number} */ var $27=$1;
 /** @type {number} */ var $28=$t;
 /** @type {number} */ var $29=$1;
 /** @type {number} */ var $30=(($29+8)|0);
 /** @type {number} */ var $31=HEAP32[(($30)>>2)];
 /** @type {number} */ var $32=((($31)-(16))|0);
 /** @type {number} */ var $33=$1;
 /** @type {number} */ var $34=(($33+8)|0);
 /** @type {number} */ var $35=HEAP32[(($34)>>2)];
 /** @type {number} */ var $36=((($35)-(32))|0);
 _luaV_settable($27,$28,$32,$36);
 /** @type {number} */ var $37=$1;
 /** @type {number} */ var $38=(($37+8)|0);
 /** @type {number} */ var $39=HEAP32[(($38)>>2)];
 /** @type {number} */ var $40=((($39)-(32))|0);
 HEAP32[(($38)>>2)]=$40;
 STACKTOP=sp;return;
}
/**
 * @param {number} $L
 * @param {number} $idx
 * @return {number}
 */
function _lua_rawset($L,$idx){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $t;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io1;
 $1=$L;
 $2=$idx;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_index2addr($3,$4);
 $t=$5;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+8)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=((($8)-(16))|0);
 $io2=$9;
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=$t;
 /** @type {number} */ var $12=(($11)|0);
 /** @type {number} */ var $13=$12;
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=$14;
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=(($16+8)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=((($18)-(32))|0);
 /** @type {number} */ var $20=_luaH_set($10,$15,$19);
 $io1=$20;
 /** @type {number} */ var $21=$io1;
 /** @type {number} */ var $22=(($21)|0);
 /** @type {number} */ var $23=$io2;
 /** @type {number} */ var $24=(($23)|0);
 /** @type {number} */ var $25=$22;
 /** @type {number} */ var $26=$24;
 HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];
 /** @type {number} */ var $27=$io2;
 /** @type {number} */ var $28=(($27+8)|0);
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 /** @type {number} */ var $30=$io1;
 /** @type {number} */ var $31=(($30+8)|0);
 HEAP32[(($31)>>2)]=$29;
 /** @type {number} */ var $32=$t;
 /** @type {number} */ var $33=(($32)|0);
 /** @type {number} */ var $34=$33;
 /** @type {number} */ var $35=HEAP32[(($34)>>2)];
 /** @type {number} */ var $36=$35;
 /** @type {number} */ var $37=(($36+6)|0);
 HEAP8[($37)]=0;
 /** @type {number} */ var $38=$1;
 /** @type {number} */ var $39=(($38+8)|0);
 /** @type {number} */ var $40=HEAP32[(($39)>>2)];
 /** @type {number} */ var $41=((($40)-(16))|0);
 /** @type {number} */ var $42=(($41+8)|0);
 /** @type {number} */ var $43=HEAP32[(($42)>>2)];
 /** @type {number} */ var $44=$43&64;
 /** @type {number} */ var $45=($44|0)!=0;
 if($45){label=2;break;}else{label=5;break;}
 case 2: 
 /** @type {number} */ var $47=$1;
 /** @type {number} */ var $48=(($47+8)|0);
 /** @type {number} */ var $49=HEAP32[(($48)>>2)];
 /** @type {number} */ var $50=((($49)-(16))|0);
 /** @type {number} */ var $51=(($50)|0);
 /** @type {number} */ var $52=$51;
 /** @type {number} */ var $53=HEAP32[(($52)>>2)];
 /** @type {number} */ var $54=$53;
 /** @type {number} */ var $55=(($54+5)|0);
 /** @type {number} */ var $56=HEAP8[($55)];
 /** @type {number} */ var $57=($56&255);
 /** @type {number} */ var $58=$57&3;
 /** @type {number} */ var $59=($58|0)!=0;
 if($59){label=3;break;}else{label=5;break;}
 case 3: 
 /** @type {number} */ var $61=$t;
 /** @type {number} */ var $62=(($61)|0);
 /** @type {number} */ var $63=$62;
 /** @type {number} */ var $64=HEAP32[(($63)>>2)];
 /** @type {number} */ var $65=$64;
 /** @type {number} */ var $66=(($65+5)|0);
 /** @type {number} */ var $67=HEAP8[($66)];
 /** @type {number} */ var $68=($67&255);
 /** @type {number} */ var $69=$68&4;
 /** @type {number} */ var $70=($69|0)!=0;
 if($70){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $72=$1;
 /** @type {number} */ var $73=$t;
 /** @type {number} */ var $74=(($73)|0);
 /** @type {number} */ var $75=$74;
 /** @type {number} */ var $76=HEAP32[(($75)>>2)];
 _luaC_barrierback_($72,$76);
 label=5;break;
 case 5: 
 /** @type {number} */ var $78=$1;
 /** @type {number} */ var $79=(($78+8)|0);
 /** @type {number} */ var $80=HEAP32[(($79)>>2)];
 /** @type {number} */ var $81=((($80)-(32))|0);
 HEAP32[(($79)>>2)]=$81;
 STACKTOP=sp;return;
 }
}
Module["_lua_rawset"] = _lua_rawset;
/**
 * @param {number} $L
 * @param {number} $idx
 * @param {number} $n
 * @return {number}
 */
function _lua_rawseti($L,$idx,$n){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $t;
 $1=$L;
 $2=$idx;
 $3=$n;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=_index2addr($4,$5);
 $t=$6;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=$t;
 /** @type {number} */ var $9=(($8)|0);
 /** @type {number} */ var $10=$9;
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=$11;
 /** @type {number} */ var $13=$3;
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=(($14+8)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=((($16)-(16))|0);
 _luaH_setint($7,$12,$13,$17);
 /** @type {number} */ var $18=$1;
 /** @type {number} */ var $19=(($18+8)|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=((($20)-(16))|0);
 /** @type {number} */ var $22=(($21+8)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 /** @type {number} */ var $24=$23&64;
 /** @type {number} */ var $25=($24|0)!=0;
 if($25){label=2;break;}else{label=5;break;}
 case 2: 
 /** @type {number} */ var $27=$1;
 /** @type {number} */ var $28=(($27+8)|0);
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 /** @type {number} */ var $30=((($29)-(16))|0);
 /** @type {number} */ var $31=(($30)|0);
 /** @type {number} */ var $32=$31;
 /** @type {number} */ var $33=HEAP32[(($32)>>2)];
 /** @type {number} */ var $34=$33;
 /** @type {number} */ var $35=(($34+5)|0);
 /** @type {number} */ var $36=HEAP8[($35)];
 /** @type {number} */ var $37=($36&255);
 /** @type {number} */ var $38=$37&3;
 /** @type {number} */ var $39=($38|0)!=0;
 if($39){label=3;break;}else{label=5;break;}
 case 3: 
 /** @type {number} */ var $41=$t;
 /** @type {number} */ var $42=(($41)|0);
 /** @type {number} */ var $43=$42;
 /** @type {number} */ var $44=HEAP32[(($43)>>2)];
 /** @type {number} */ var $45=$44;
 /** @type {number} */ var $46=(($45+5)|0);
 /** @type {number} */ var $47=HEAP8[($46)];
 /** @type {number} */ var $48=($47&255);
 /** @type {number} */ var $49=$48&4;
 /** @type {number} */ var $50=($49|0)!=0;
 if($50){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $52=$1;
 /** @type {number} */ var $53=$t;
 /** @type {number} */ var $54=(($53)|0);
 /** @type {number} */ var $55=$54;
 /** @type {number} */ var $56=HEAP32[(($55)>>2)];
 _luaC_barrierback_($52,$56);
 label=5;break;
 case 5: 
 /** @type {number} */ var $58=$1;
 /** @type {number} */ var $59=(($58+8)|0);
 /** @type {number} */ var $60=HEAP32[(($59)>>2)];
 /** @type {number} */ var $61=((($60)-(16))|0);
 HEAP32[(($59)>>2)]=$61;
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $objindex
 * @return {number}
 */
function _lua_setmetatable($L,$objindex){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $obj;
 /** @type {number} */ var $mt;
 $1=$L;
 $2=$objindex;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_index2addr($3,$4);
 $obj=$5;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+8)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=((($8)-(16))|0);
 /** @type {number} */ var $10=(($9+8)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=($11|0)==0;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 $mt=0;
 label=4;break;
 case 3: 
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=(($15+8)|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=((($17)-(16))|0);
 /** @type {number} */ var $19=(($18)|0);
 /** @type {number} */ var $20=$19;
 /** @type {number} */ var $21=HEAP32[(($20)>>2)];
 /** @type {number} */ var $22=$21;
 $mt=$22;
 label=4;break;
 case 4: 
 /** @type {number} */ var $24=$obj;
 /** @type {number} */ var $25=(($24+8)|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 /** @type {number} */ var $27=$26&15;
 if(($27|0)==7){ label=11;break;}else if(($27|0)==5){ label=5;break;}else{label=17;break;}
 case 5: 
 /** @type {number} */ var $29=$mt;
 /** @type {number} */ var $30=$obj;
 /** @type {number} */ var $31=(($30)|0);
 /** @type {number} */ var $32=$31;
 /** @type {number} */ var $33=HEAP32[(($32)>>2)];
 /** @type {number} */ var $34=$33;
 /** @type {number} */ var $35=(($34+8)|0);
 HEAP32[(($35)>>2)]=$29;
 /** @type {number} */ var $36=$mt;
 /** @type {number} */ var $37=($36|0)!=0;
 if($37){label=6;break;}else{label=10;break;}
 case 6: 
 /** @type {number} */ var $39=$mt;
 /** @type {number} */ var $40=$39;
 /** @type {number} */ var $41=$40;
 /** @type {number} */ var $42=(($41+5)|0);
 /** @type {number} */ var $43=HEAP8[($42)];
 /** @type {number} */ var $44=($43&255);
 /** @type {number} */ var $45=$44&3;
 /** @type {number} */ var $46=($45|0)!=0;
 if($46){label=7;break;}else{label=9;break;}
 case 7: 
 /** @type {number} */ var $48=$obj;
 /** @type {number} */ var $49=(($48)|0);
 /** @type {number} */ var $50=$49;
 /** @type {number} */ var $51=HEAP32[(($50)>>2)];
 /** @type {number} */ var $52=$51;
 /** @type {number} */ var $53=(($52+5)|0);
 /** @type {number} */ var $54=HEAP8[($53)];
 /** @type {number} */ var $55=($54&255);
 /** @type {number} */ var $56=$55&4;
 /** @type {number} */ var $57=($56|0)!=0;
 if($57){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $59=$1;
 /** @type {number} */ var $60=$obj;
 /** @type {number} */ var $61=(($60)|0);
 /** @type {number} */ var $62=$61;
 /** @type {number} */ var $63=HEAP32[(($62)>>2)];
 _luaC_barrierback_($59,$63);
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 /** @type {number} */ var $66=$1;
 /** @type {number} */ var $67=$obj;
 /** @type {number} */ var $68=(($67)|0);
 /** @type {number} */ var $69=$68;
 /** @type {number} */ var $70=HEAP32[(($69)>>2)];
 /** @type {number} */ var $71=$mt;
 _luaC_checkfinalizer($66,$70,$71);
 label=18;break;
 case 11: 
 /** @type {number} */ var $73=$mt;
 /** @type {number} */ var $74=$obj;
 /** @type {number} */ var $75=(($74)|0);
 /** @type {number} */ var $76=$75;
 /** @type {number} */ var $77=HEAP32[(($76)>>2)];
 /** @type {number} */ var $78=$77;
 /** @type {number} */ var $79=$78;
 /** @type {number} */ var $80=(($79+8)|0);
 HEAP32[(($80)>>2)]=$73;
 /** @type {number} */ var $81=$mt;
 /** @type {number} */ var $82=($81|0)!=0;
 if($82){label=12;break;}else{label=16;break;}
 case 12: 
 /** @type {number} */ var $84=$mt;
 /** @type {number} */ var $85=$84;
 /** @type {number} */ var $86=$85;
 /** @type {number} */ var $87=(($86+5)|0);
 /** @type {number} */ var $88=HEAP8[($87)];
 /** @type {number} */ var $89=($88&255);
 /** @type {number} */ var $90=$89&3;
 /** @type {number} */ var $91=($90|0)!=0;
 if($91){label=13;break;}else{label=15;break;}
 case 13: 
 /** @type {number} */ var $93=$obj;
 /** @type {number} */ var $94=(($93)|0);
 /** @type {number} */ var $95=$94;
 /** @type {number} */ var $96=HEAP32[(($95)>>2)];
 /** @type {number} */ var $97=$96;
 /** @type {number} */ var $98=$97;
 /** @type {number} */ var $99=$98;
 /** @type {number} */ var $100=(($99+5)|0);
 /** @type {number} */ var $101=HEAP8[($100)];
 /** @type {number} */ var $102=($101&255);
 /** @type {number} */ var $103=$102&4;
 /** @type {number} */ var $104=($103|0)!=0;
 if($104){label=14;break;}else{label=15;break;}
 case 14: 
 /** @type {number} */ var $106=$1;
 /** @type {number} */ var $107=$obj;
 /** @type {number} */ var $108=(($107)|0);
 /** @type {number} */ var $109=$108;
 /** @type {number} */ var $110=HEAP32[(($109)>>2)];
 /** @type {number} */ var $111=$110;
 /** @type {number} */ var $112=$111;
 /** @type {number} */ var $113=$mt;
 /** @type {number} */ var $114=$113;
 _luaC_barrier_($106,$112,$114);
 label=15;break;
 case 15: 
 /** @type {number} */ var $116=$1;
 /** @type {number} */ var $117=$obj;
 /** @type {number} */ var $118=(($117)|0);
 /** @type {number} */ var $119=$118;
 /** @type {number} */ var $120=HEAP32[(($119)>>2)];
 /** @type {number} */ var $121=$mt;
 _luaC_checkfinalizer($116,$120,$121);
 label=16;break;
 case 16: 
 label=18;break;
 case 17: 
 /** @type {number} */ var $124=$mt;
 /** @type {number} */ var $125=$obj;
 /** @type {number} */ var $126=(($125+8)|0);
 /** @type {number} */ var $127=HEAP32[(($126)>>2)];
 /** @type {number} */ var $128=$127&15;
 /** @type {number} */ var $129=$1;
 /** @type {number} */ var $130=(($129+12)|0);
 /** @type {number} */ var $131=HEAP32[(($130)>>2)];
 /** @type {number} */ var $132=(($131+252)|0);
 /** @type {number} */ var $133=(($132+($128<<2))|0);
 HEAP32[(($133)>>2)]=$124;
 label=18;break;
 case 18: 
 /** @type {number} */ var $135=$1;
 /** @type {number} */ var $136=(($135+8)|0);
 /** @type {number} */ var $137=HEAP32[(($136)>>2)];
 /** @type {number} */ var $138=((($137)-(16))|0);
 HEAP32[(($136)>>2)]=$138;
 STACKTOP=sp;return 1;
 }
}
Module["_lua_setmetatable"] = _lua_setmetatable;
/**
 * @param {number} $L
 * @param {number} $idx
 * @return {number}
 */
function _lua_setuservalue($L,$idx){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $o;
 $1=$L;
 $2=$idx;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_index2addr($3,$4);
 $o=$5;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+8)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=((($8)-(16))|0);
 /** @type {number} */ var $10=(($9+8)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=($11|0)==0;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $14=$o;
 /** @type {number} */ var $15=(($14)|0);
 /** @type {number} */ var $16=$15;
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=$17;
 /** @type {number} */ var $19=$18;
 /** @type {number} */ var $20=(($19+12)|0);
 HEAP32[(($20)>>2)]=0;
 label=7;break;
 case 3: 
 /** @type {number} */ var $22=$1;
 /** @type {number} */ var $23=(($22+8)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=((($24)-(16))|0);
 /** @type {number} */ var $26=(($25)|0);
 /** @type {number} */ var $27=$26;
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=$28;
 /** @type {number} */ var $30=$o;
 /** @type {number} */ var $31=(($30)|0);
 /** @type {number} */ var $32=$31;
 /** @type {number} */ var $33=HEAP32[(($32)>>2)];
 /** @type {number} */ var $34=$33;
 /** @type {number} */ var $35=$34;
 /** @type {number} */ var $36=(($35+12)|0);
 HEAP32[(($36)>>2)]=$29;
 /** @type {number} */ var $37=$1;
 /** @type {number} */ var $38=(($37+8)|0);
 /** @type {number} */ var $39=HEAP32[(($38)>>2)];
 /** @type {number} */ var $40=((($39)-(16))|0);
 /** @type {number} */ var $41=(($40)|0);
 /** @type {number} */ var $42=$41;
 /** @type {number} */ var $43=HEAP32[(($42)>>2)];
 /** @type {number} */ var $44=$43;
 /** @type {number} */ var $45=$44;
 /** @type {number} */ var $46=$45;
 /** @type {number} */ var $47=(($46+5)|0);
 /** @type {number} */ var $48=HEAP8[($47)];
 /** @type {number} */ var $49=($48&255);
 /** @type {number} */ var $50=$49&3;
 /** @type {number} */ var $51=($50|0)!=0;
 if($51){label=4;break;}else{label=6;break;}
 case 4: 
 /** @type {number} */ var $53=$o;
 /** @type {number} */ var $54=(($53)|0);
 /** @type {number} */ var $55=$54;
 /** @type {number} */ var $56=HEAP32[(($55)>>2)];
 /** @type {number} */ var $57=$56;
 /** @type {number} */ var $58=(($57+5)|0);
 /** @type {number} */ var $59=HEAP8[($58)];
 /** @type {number} */ var $60=($59&255);
 /** @type {number} */ var $61=$60&4;
 /** @type {number} */ var $62=($61|0)!=0;
 if($62){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $64=$1;
 /** @type {number} */ var $65=$o;
 /** @type {number} */ var $66=(($65)|0);
 /** @type {number} */ var $67=$66;
 /** @type {number} */ var $68=HEAP32[(($67)>>2)];
 /** @type {number} */ var $69=$1;
 /** @type {number} */ var $70=(($69+8)|0);
 /** @type {number} */ var $71=HEAP32[(($70)>>2)];
 /** @type {number} */ var $72=((($71)-(16))|0);
 /** @type {number} */ var $73=(($72)|0);
 /** @type {number} */ var $74=$73;
 /** @type {number} */ var $75=HEAP32[(($74)>>2)];
 /** @type {number} */ var $76=$75;
 /** @type {number} */ var $77=$76;
 _luaC_barrier_($64,$68,$77);
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 /** @type {number} */ var $80=$1;
 /** @type {number} */ var $81=(($80+8)|0);
 /** @type {number} */ var $82=HEAP32[(($81)>>2)];
 /** @type {number} */ var $83=((($82)-(16))|0);
 HEAP32[(($81)>>2)]=$83;
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $ctx
 * @return {number}
 */
function _lua_getctx($L,$ctx){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $2=$L;
 $3=$ctx;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=(($4+16)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=(($6+18)|0);
 /** @type {number} */ var $8=HEAP8[($7)];
 /** @type {number} */ var $9=($8&255);
 /** @type {number} */ var $10=$9&8;
 /** @type {number} */ var $11=($10|0)!=0;
 if($11){label=2;break;}else{label=5;break;}
 case 2: 
 /** @type {number} */ var $13=$3;
 /** @type {number} */ var $14=($13|0)!=0;
 if($14){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=(($16+16)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=(($18+24)|0);
 /** @type {number} */ var $20=$19;
 /** @type {number} */ var $21=(($20)|0);
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 /** @type {number} */ var $23=$3;
 HEAP32[(($23)>>2)]=$22;
 label=4;break;
 case 4: 
 /** @type {number} */ var $25=$2;
 /** @type {number} */ var $26=(($25+16)|0);
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=(($27+24)|0);
 /** @type {number} */ var $29=$28;
 /** @type {number} */ var $30=(($29+13)|0);
 /** @type {number} */ var $31=HEAP8[($30)];
 /** @type {number} */ var $32=($31&255);
 $1=$32;
 label=6;break;
 case 5: 
 $1=0;
 label=6;break;
 case 6: 
 /** @type {number} */ var $35=$1;
 STACKTOP=sp;return $35;
 }
}
/**
 * @param {number} $L
 * @param {number} $nargs
 * @param {number} $nresults
 * @param {number} $ctx
 * @param {number} $k
 * @return {number}
 */
function _lua_callk($L,$nargs,$nresults,$ctx,$k){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 /** @type {number} */ var $func;
 $1=$L;
 $2=$nargs;
 $3=$nresults;
 $4=$ctx;
 $5=$k;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+8)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=((($9)+(1))|0);
 /** @type {number} */ var $11=(((-$10))|0);
 /** @type {number} */ var $12=(($8+($11<<4))|0);
 $func=$12;
 /** @type {number} */ var $13=$5;
 /** @type {number} */ var $14=($13|0)!=0;
 if($14){label=2;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=(($16+36)|0);
 /** @type {number} */ var $18=HEAP16[(($17)>>1)];
 /** @type {number} */ var $19=($18&65535);
 /** @type {number} */ var $20=($19|0)==0;
 if($20){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $22=$5;
 /** @type {number} */ var $23=$1;
 /** @type {number} */ var $24=(($23+16)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=(($25+24)|0);
 /** @type {number} */ var $27=$26;
 /** @type {number} */ var $28=(($27+4)|0);
 HEAP32[(($28)>>2)]=$22;
 /** @type {number} */ var $29=$4;
 /** @type {number} */ var $30=$1;
 /** @type {number} */ var $31=(($30+16)|0);
 /** @type {number} */ var $32=HEAP32[(($31)>>2)];
 /** @type {number} */ var $33=(($32+24)|0);
 /** @type {number} */ var $34=$33;
 /** @type {number} */ var $35=(($34)|0);
 HEAP32[(($35)>>2)]=$29;
 /** @type {number} */ var $36=$1;
 /** @type {number} */ var $37=$func;
 /** @type {number} */ var $38=$3;
 _luaD_call($36,$37,$38,1);
 label=5;break;
 case 4: 
 /** @type {number} */ var $40=$1;
 /** @type {number} */ var $41=$func;
 /** @type {number} */ var $42=$3;
 _luaD_call($40,$41,$42,0);
 label=5;break;
 case 5: 
 /** @type {number} */ var $44=$3;
 /** @type {number} */ var $45=($44|0)==-1;
 if($45){label=6;break;}else{label=8;break;}
 case 6: 
 /** @type {number} */ var $47=$1;
 /** @type {number} */ var $48=(($47+16)|0);
 /** @type {number} */ var $49=HEAP32[(($48)>>2)];
 /** @type {number} */ var $50=(($49+4)|0);
 /** @type {number} */ var $51=HEAP32[(($50)>>2)];
 /** @type {number} */ var $52=$1;
 /** @type {number} */ var $53=(($52+8)|0);
 /** @type {number} */ var $54=HEAP32[(($53)>>2)];
 /** @type {number} */ var $55=($51>>>0)<($54>>>0);
 if($55){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $57=$1;
 /** @type {number} */ var $58=(($57+8)|0);
 /** @type {number} */ var $59=HEAP32[(($58)>>2)];
 /** @type {number} */ var $60=$1;
 /** @type {number} */ var $61=(($60+16)|0);
 /** @type {number} */ var $62=HEAP32[(($61)>>2)];
 /** @type {number} */ var $63=(($62+4)|0);
 HEAP32[(($63)>>2)]=$59;
 label=8;break;
 case 8: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $nargs
 * @param {number} $nresults
 * @param {number} $errfunc
 * @param {number} $ctx
 * @param {number} $k
 * @return {number}
 */
function _lua_pcallk($L,$nargs,$nresults,$errfunc,$ctx,$k){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 /** @type {number} */ var $6;
 /** @type {number} */ var $c=sp;
 /** @type {number} */ var $status;
 /** @type {number} */ var $func;
 /** @type {number} */ var $o;
 /** @type {number} */ var $ci;
 $1=$L;
 $2=$nargs;
 $3=$nresults;
 $4=$errfunc;
 $5=$ctx;
 $6=$k;
 /** @type {number} */ var $7=$4;
 /** @type {number} */ var $8=($7|0)==0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $func=0;
 label=4;break;
 case 3: 
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=$4;
 /** @type {number} */ var $13=_index2addr($11,$12);
 $o=$13;
 /** @type {number} */ var $14=$o;
 /** @type {number} */ var $15=$14;
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=(($16+28)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=$18;
 /** @type {number} */ var $20=$15;
 /** @type {number} */ var $21=$19;
 /** @type {number} */ var $22=((($20)-($21))|0);
 $func=$22;
 label=4;break;
 case 4: 
 /** @type {number} */ var $24=$1;
 /** @type {number} */ var $25=(($24+8)|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 /** @type {number} */ var $27=$2;
 /** @type {number} */ var $28=((($27)+(1))|0);
 /** @type {number} */ var $29=(((-$28))|0);
 /** @type {number} */ var $30=(($26+($29<<4))|0);
 /** @type {number} */ var $31=(($c)|0);
 HEAP32[(($31)>>2)]=$30;
 /** @type {number} */ var $32=$6;
 /** @type {number} */ var $33=($32|0)==0;
 if($33){label=6;break;}else{label=5;break;}
 case 5: 
 /** @type {number} */ var $35=$1;
 /** @type {number} */ var $36=(($35+36)|0);
 /** @type {number} */ var $37=HEAP16[(($36)>>1)];
 /** @type {number} */ var $38=($37&65535);
 /** @type {number} */ var $39=($38|0)>0;
 if($39){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $41=$3;
 /** @type {number} */ var $42=(($c+4)|0);
 HEAP32[(($42)>>2)]=$41;
 /** @type {number} */ var $43=$1;
 /** @type {number} */ var $44=$c;
 /** @type {number} */ var $45=(($c)|0);
 /** @type {number} */ var $46=HEAP32[(($45)>>2)];
 /** @type {number} */ var $47=$46;
 /** @type {number} */ var $48=$1;
 /** @type {number} */ var $49=(($48+28)|0);
 /** @type {number} */ var $50=HEAP32[(($49)>>2)];
 /** @type {number} */ var $51=$50;
 /** @type {number} */ var $52=$47;
 /** @type {number} */ var $53=$51;
 /** @type {number} */ var $54=((($52)-($53))|0);
 /** @type {number} */ var $55=$func;
 /** @type {number} */ var $56=_luaD_pcall($43,64,$44,$54,$55);
 $status=$56;
 label=8;break;
 case 7: 
 /** @type {number} */ var $58=$1;
 /** @type {number} */ var $59=(($58+16)|0);
 /** @type {number} */ var $60=HEAP32[(($59)>>2)];
 $ci=$60;
 /** @type {number} */ var $61=$6;
 /** @type {number} */ var $62=$ci;
 /** @type {number} */ var $63=(($62+24)|0);
 /** @type {number} */ var $64=$63;
 /** @type {number} */ var $65=(($64+4)|0);
 HEAP32[(($65)>>2)]=$61;
 /** @type {number} */ var $66=$5;
 /** @type {number} */ var $67=$ci;
 /** @type {number} */ var $68=(($67+24)|0);
 /** @type {number} */ var $69=$68;
 /** @type {number} */ var $70=(($69)|0);
 HEAP32[(($70)>>2)]=$66;
 /** @type {number} */ var $71=(($c)|0);
 /** @type {number} */ var $72=HEAP32[(($71)>>2)];
 /** @type {number} */ var $73=$72;
 /** @type {number} */ var $74=$1;
 /** @type {number} */ var $75=(($74+28)|0);
 /** @type {number} */ var $76=HEAP32[(($75)>>2)];
 /** @type {number} */ var $77=$76;
 /** @type {number} */ var $78=$73;
 /** @type {number} */ var $79=$77;
 /** @type {number} */ var $80=((($78)-($79))|0);
 /** @type {number} */ var $81=$ci;
 /** @type {number} */ var $82=(($81+20)|0);
 HEAP32[(($82)>>2)]=$80;
 /** @type {number} */ var $83=$1;
 /** @type {number} */ var $84=(($83+41)|0);
 /** @type {number} */ var $85=HEAP8[($84)];
 /** @type {number} */ var $86=$ci;
 /** @type {number} */ var $87=(($86+24)|0);
 /** @type {number} */ var $88=$87;
 /** @type {number} */ var $89=(($88+12)|0);
 HEAP8[($89)]=$85;
 /** @type {number} */ var $90=$1;
 /** @type {number} */ var $91=(($90+68)|0);
 /** @type {number} */ var $92=HEAP32[(($91)>>2)];
 /** @type {number} */ var $93=$ci;
 /** @type {number} */ var $94=(($93+24)|0);
 /** @type {number} */ var $95=$94;
 /** @type {number} */ var $96=(($95+8)|0);
 HEAP32[(($96)>>2)]=$92;
 /** @type {number} */ var $97=$func;
 /** @type {number} */ var $98=$1;
 /** @type {number} */ var $99=(($98+68)|0);
 HEAP32[(($99)>>2)]=$97;
 /** @type {number} */ var $100=$ci;
 /** @type {number} */ var $101=(($100+18)|0);
 /** @type {number} */ var $102=HEAP8[($101)];
 /** @type {number} */ var $103=($102&255);
 /** @type {number} */ var $104=$103|16;
 /** @type {number} */ var $105=(($104)&255);
 HEAP8[($101)]=$105;
 /** @type {number} */ var $106=$1;
 /** @type {number} */ var $107=(($c)|0);
 /** @type {number} */ var $108=HEAP32[(($107)>>2)];
 /** @type {number} */ var $109=$3;
 _luaD_call($106,$108,$109,1);
 /** @type {number} */ var $110=$ci;
 /** @type {number} */ var $111=(($110+18)|0);
 /** @type {number} */ var $112=HEAP8[($111)];
 /** @type {number} */ var $113=($112&255);
 /** @type {number} */ var $114=$113&-17;
 /** @type {number} */ var $115=(($114)&255);
 HEAP8[($111)]=$115;
 /** @type {number} */ var $116=$ci;
 /** @type {number} */ var $117=(($116+24)|0);
 /** @type {number} */ var $118=$117;
 /** @type {number} */ var $119=(($118+8)|0);
 /** @type {number} */ var $120=HEAP32[(($119)>>2)];
 /** @type {number} */ var $121=$1;
 /** @type {number} */ var $122=(($121+68)|0);
 HEAP32[(($122)>>2)]=$120;
 $status=0;
 label=8;break;
 case 8: 
 /** @type {number} */ var $124=$3;
 /** @type {number} */ var $125=($124|0)==-1;
 if($125){label=9;break;}else{label=11;break;}
 case 9: 
 /** @type {number} */ var $127=$1;
 /** @type {number} */ var $128=(($127+16)|0);
 /** @type {number} */ var $129=HEAP32[(($128)>>2)];
 /** @type {number} */ var $130=(($129+4)|0);
 /** @type {number} */ var $131=HEAP32[(($130)>>2)];
 /** @type {number} */ var $132=$1;
 /** @type {number} */ var $133=(($132+8)|0);
 /** @type {number} */ var $134=HEAP32[(($133)>>2)];
 /** @type {number} */ var $135=($131>>>0)<($134>>>0);
 if($135){label=10;break;}else{label=11;break;}
 case 10: 
 /** @type {number} */ var $137=$1;
 /** @type {number} */ var $138=(($137+8)|0);
 /** @type {number} */ var $139=HEAP32[(($138)>>2)];
 /** @type {number} */ var $140=$1;
 /** @type {number} */ var $141=(($140+16)|0);
 /** @type {number} */ var $142=HEAP32[(($141)>>2)];
 /** @type {number} */ var $143=(($142+4)|0);
 HEAP32[(($143)>>2)]=$139;
 label=11;break;
 case 11: 
 /** @type {number} */ var $145=$status;
 STACKTOP=sp;return $145;
 }
}
Module["_lua_pcallk"] = _lua_pcallk;
/**
 * @param {number} $L
 * @param {number} $ud
 * @return {number}
 */
function _f_call($L,$ud){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $c;
 $1=$L;
 $2=$ud;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=$3;
 $c=$4;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=$c;
 /** @type {number} */ var $7=(($6)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=$c;
 /** @type {number} */ var $10=(($9+4)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 _luaD_call($5,$8,$11,0);
 STACKTOP=sp;return;
}
/**
 * @param {number} $L
 * @param {number} $reader
 * @param {number} $data
 * @param {number} $chunkname
 * @param {number} $mode
 * @return {number}
 */
function _lua_load($L,$reader,$data,$chunkname,$mode){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 /** @type {number} */ var $z=sp;
 /** @type {number} */ var $status;
 /** @type {number} */ var $f;
 /** @type {number} */ var $reg;
 /** @type {number} */ var $gt;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io1;
 $1=$L;
 $2=$reader;
 $3=$data;
 $4=$chunkname;
 $5=$mode;
 /** @type {number} */ var $6=$4;
 /** @type {number} */ var $7=($6|0)!=0;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 $4=12048;
 label=3;break;
 case 3: 
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=$2;
 /** @type {number} */ var $12=$3;
 _luaZ_init($10,$z,$11,$12);
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=$4;
 /** @type {number} */ var $15=$5;
 /** @type {number} */ var $16=_luaD_protectedparser($13,$z,$14,$15);
 $status=$16;
 /** @type {number} */ var $17=$status;
 /** @type {number} */ var $18=($17|0)==0;
 if($18){label=4;break;}else{label=11;break;}
 case 4: 
 /** @type {number} */ var $20=$1;
 /** @type {number} */ var $21=(($20+8)|0);
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 /** @type {number} */ var $23=((($22)-(16))|0);
 /** @type {number} */ var $24=(($23)|0);
 /** @type {number} */ var $25=$24;
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 /** @type {number} */ var $27=$26;
 /** @type {number} */ var $28=$27;
 $f=$28;
 /** @type {number} */ var $29=$f;
 /** @type {number} */ var $30=(($29+6)|0);
 /** @type {number} */ var $31=HEAP8[($30)];
 /** @type {number} */ var $32=($31&255);
 /** @type {number} */ var $33=($32|0)==1;
 if($33){label=5;break;}else{label=10;break;}
 case 5: 
 /** @type {number} */ var $35=$1;
 /** @type {number} */ var $36=(($35+12)|0);
 /** @type {number} */ var $37=HEAP32[(($36)>>2)];
 /** @type {number} */ var $38=(($37+40)|0);
 /** @type {number} */ var $39=(($38)|0);
 /** @type {number} */ var $40=$39;
 /** @type {number} */ var $41=HEAP32[(($40)>>2)];
 /** @type {number} */ var $42=$41;
 $reg=$42;
 /** @type {number} */ var $43=$reg;
 /** @type {number} */ var $44=_luaH_getint($43,2);
 $gt=$44;
 /** @type {number} */ var $45=$gt;
 $io2=$45;
 /** @type {number} */ var $46=$f;
 /** @type {number} */ var $47=(($46+16)|0);
 /** @type {number} */ var $48=(($47)|0);
 /** @type {number} */ var $49=HEAP32[(($48)>>2)];
 /** @type {number} */ var $50=(($49+8)|0);
 /** @type {number} */ var $51=HEAP32[(($50)>>2)];
 $io1=$51;
 /** @type {number} */ var $52=$io1;
 /** @type {number} */ var $53=(($52)|0);
 /** @type {number} */ var $54=$io2;
 /** @type {number} */ var $55=(($54)|0);
 /** @type {number} */ var $56=$53;
 /** @type {number} */ var $57=$55;
 HEAP32[(($56)>>2)]=HEAP32[(($57)>>2)];HEAP32[((($56)+(4))>>2)]=HEAP32[((($57)+(4))>>2)];
 /** @type {number} */ var $58=$io2;
 /** @type {number} */ var $59=(($58+8)|0);
 /** @type {number} */ var $60=HEAP32[(($59)>>2)];
 /** @type {number} */ var $61=$io1;
 /** @type {number} */ var $62=(($61+8)|0);
 HEAP32[(($62)>>2)]=$60;
 /** @type {number} */ var $63=$gt;
 /** @type {number} */ var $64=(($63+8)|0);
 /** @type {number} */ var $65=HEAP32[(($64)>>2)];
 /** @type {number} */ var $66=$65&64;
 /** @type {number} */ var $67=($66|0)!=0;
 if($67){label=6;break;}else{label=9;break;}
 case 6: 
 /** @type {number} */ var $69=$gt;
 /** @type {number} */ var $70=(($69)|0);
 /** @type {number} */ var $71=$70;
 /** @type {number} */ var $72=HEAP32[(($71)>>2)];
 /** @type {number} */ var $73=$72;
 /** @type {number} */ var $74=(($73+5)|0);
 /** @type {number} */ var $75=HEAP8[($74)];
 /** @type {number} */ var $76=($75&255);
 /** @type {number} */ var $77=$76&3;
 /** @type {number} */ var $78=($77|0)!=0;
 if($78){label=7;break;}else{label=9;break;}
 case 7: 
 /** @type {number} */ var $80=$f;
 /** @type {number} */ var $81=(($80+16)|0);
 /** @type {number} */ var $82=(($81)|0);
 /** @type {number} */ var $83=HEAP32[(($82)>>2)];
 /** @type {number} */ var $84=$83;
 /** @type {number} */ var $85=$84;
 /** @type {number} */ var $86=(($85+5)|0);
 /** @type {number} */ var $87=HEAP8[($86)];
 /** @type {number} */ var $88=($87&255);
 /** @type {number} */ var $89=$88&4;
 /** @type {number} */ var $90=($89|0)!=0;
 if($90){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $92=$1;
 /** @type {number} */ var $93=$f;
 /** @type {number} */ var $94=(($93+16)|0);
 /** @type {number} */ var $95=(($94)|0);
 /** @type {number} */ var $96=HEAP32[(($95)>>2)];
 /** @type {number} */ var $97=$96;
 /** @type {number} */ var $98=$gt;
 /** @type {number} */ var $99=(($98)|0);
 /** @type {number} */ var $100=$99;
 /** @type {number} */ var $101=HEAP32[(($100)>>2)];
 _luaC_barrier_($92,$97,$101);
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 /** @type {number} */ var $105=$status;
 STACKTOP=sp;return $105;
 }
}
/**
 * @param {number} $L
 * @param {number} $writer
 * @param {number} $data
 * @return {number}
 */
function _lua_dump($L,$writer,$data){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $status;
 /** @type {number} */ var $o;
 $1=$L;
 $2=$writer;
 $3=$data;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+8)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=((($6)-(16))|0);
 $o=$7;
 /** @type {number} */ var $8=$o;
 /** @type {number} */ var $9=(($8+8)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=($10|0)==70;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=$o;
 /** @type {number} */ var $15=(($14)|0);
 /** @type {number} */ var $16=$15;
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=$17;
 /** @type {number} */ var $19=$18;
 /** @type {number} */ var $20=(($19+12)|0);
 /** @type {number} */ var $21=HEAP32[(($20)>>2)];
 /** @type {number} */ var $22=$2;
 /** @type {number} */ var $23=$3;
 /** @type {number} */ var $24=_luaU_dump($13,$21,$22,$23,0);
 $status=$24;
 label=4;break;
 case 3: 
 $status=1;
 label=4;break;
 case 4: 
 /** @type {number} */ var $27=$status;
 STACKTOP=sp;return $27;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _lua_status($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+6)|0);
 /** @type {number} */ var $4=HEAP8[($3)];
 /** @type {number} */ var $5=($4&255);
 STACKTOP=sp;return $5;
}
/**
 * @param {number} $L
 * @param {number} $what
 * @param {number} $data
 * @return {number}
 */
function _lua_gc($L,$what,$data){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $res;
 /** @type {number} */ var $g;
 /** @type {number} */ var $debt;
 $1=$L;
 $2=$what;
 $3=$data;
 $res=0;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+12)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 $g=$6;
 /** @type {number} */ var $7=$2;
 switch(($7|0)){case 6:{ label=15;break;}case 8:{ label=16;break;}case 7:{ label=17;break;}case 9:{ label=18;break;}case 10:{ label=19;break;}case 0:{ label=2;break;}case 11:{ label=20;break;}case 1:{ label=3;break;}case 2:{ label=4;break;}case 3:{ label=5;break;}case 4:{ label=6;break;}case 5:{ label=7;break;}default:{label=21;break;}}break;
 case 2: 
 /** @type {number} */ var $9=$g;
 /** @type {number} */ var $10=(($9+63)|0);
 HEAP8[($10)]=0;
 label=22;break;
 case 3: 
 /** @type {number} */ var $12=$g;
 _luaE_setdebt($12,0);
 /** @type {number} */ var $13=$g;
 /** @type {number} */ var $14=(($13+63)|0);
 HEAP8[($14)]=1;
 label=22;break;
 case 4: 
 /** @type {number} */ var $16=$1;
 _luaC_fullgc($16,0);
 label=22;break;
 case 5: 
 /** @type {number} */ var $18=$g;
 /** @type {number} */ var $19=(($18+8)|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=$g;
 /** @type {number} */ var $22=(($21+12)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 /** @type {number} */ var $24=((($20)+($23))|0);
 /** @type {number} */ var $25=$24>>>10;
 $res=$25;
 label=22;break;
 case 6: 
 /** @type {number} */ var $27=$g;
 /** @type {number} */ var $28=(($27+8)|0);
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 /** @type {number} */ var $30=$g;
 /** @type {number} */ var $31=(($30+12)|0);
 /** @type {number} */ var $32=HEAP32[(($31)>>2)];
 /** @type {number} */ var $33=((($29)+($32))|0);
 /** @type {number} */ var $34=$33&1023;
 $res=$34;
 label=22;break;
 case 7: 
 /** @type {number} */ var $36=$g;
 /** @type {number} */ var $37=(($36+62)|0);
 /** @type {number} */ var $38=HEAP8[($37)];
 /** @type {number} */ var $39=($38&255);
 /** @type {number} */ var $40=($39|0)==2;
 if($40){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $42=$g;
 /** @type {number} */ var $43=(($42+20)|0);
 /** @type {number} */ var $44=HEAP32[(($43)>>2)];
 /** @type {number} */ var $45=($44|0)==0;
 /** @type {number} */ var $46=($45&1);
 $res=$46;
 /** @type {number} */ var $47=$1;
 _luaC_forcestep($47);
 label=14;break;
 case 9: 
 /** @type {number} */ var $49=$3;
 /** @type {number} */ var $50=($49<<10);
 /** @type {number} */ var $51=((($50)-(1600))|0);
 $debt=$51;
 /** @type {number} */ var $52=$g;
 /** @type {number} */ var $53=(($52+63)|0);
 /** @type {number} */ var $54=HEAP8[($53)];
 /** @type {number} */ var $55=(($54<<24)>>24)!=0;
 if($55){label=10;break;}else{label=11;break;}
 case 10: 
 /** @type {number} */ var $57=$g;
 /** @type {number} */ var $58=(($57+12)|0);
 /** @type {number} */ var $59=HEAP32[(($58)>>2)];
 /** @type {number} */ var $60=$debt;
 /** @type {number} */ var $61=((($60)+($59))|0);
 $debt=$61;
 label=11;break;
 case 11: 
 /** @type {number} */ var $63=$g;
 /** @type {number} */ var $64=$debt;
 _luaE_setdebt($63,$64);
 /** @type {number} */ var $65=$1;
 _luaC_forcestep($65);
 /** @type {number} */ var $66=$g;
 /** @type {number} */ var $67=(($66+61)|0);
 /** @type {number} */ var $68=HEAP8[($67)];
 /** @type {number} */ var $69=($68&255);
 /** @type {number} */ var $70=($69|0)==5;
 if($70){label=12;break;}else{label=13;break;}
 case 12: 
 $res=1;
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 label=22;break;
 case 15: 
 /** @type {number} */ var $75=$g;
 /** @type {number} */ var $76=(($75+156)|0);
 /** @type {number} */ var $77=HEAP32[(($76)>>2)];
 $res=$77;
 /** @type {number} */ var $78=$3;
 /** @type {number} */ var $79=$g;
 /** @type {number} */ var $80=(($79+156)|0);
 HEAP32[(($80)>>2)]=$78;
 label=22;break;
 case 16: 
 /** @type {number} */ var $82=$g;
 /** @type {number} */ var $83=(($82+160)|0);
 /** @type {number} */ var $84=HEAP32[(($83)>>2)];
 $res=$84;
 /** @type {number} */ var $85=$3;
 /** @type {number} */ var $86=$g;
 /** @type {number} */ var $87=(($86+160)|0);
 HEAP32[(($87)>>2)]=$85;
 label=22;break;
 case 17: 
 /** @type {number} */ var $89=$g;
 /** @type {number} */ var $90=(($89+164)|0);
 /** @type {number} */ var $91=HEAP32[(($90)>>2)];
 $res=$91;
 /** @type {number} */ var $92=$3;
 /** @type {number} */ var $93=$g;
 /** @type {number} */ var $94=(($93+164)|0);
 HEAP32[(($94)>>2)]=$92;
 label=22;break;
 case 18: 
 /** @type {number} */ var $96=$g;
 /** @type {number} */ var $97=(($96+63)|0);
 /** @type {number} */ var $98=HEAP8[($97)];
 /** @type {number} */ var $99=($98&255);
 $res=$99;
 label=22;break;
 case 19: 
 /** @type {number} */ var $101=$1;
 _luaC_changemode($101,2);
 label=22;break;
 case 20: 
 /** @type {number} */ var $103=$1;
 _luaC_changemode($103,0);
 label=22;break;
 case 21: 
 $res=-1;
 label=22;break;
 case 22: 
 /** @type {number} */ var $106=$res;
 STACKTOP=sp;return $106;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _lua_error($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $2=$L;
 /** @type {number} */ var $3=$2;
 _luaG_errormsg($3);
 /** @type {number} */ var $5=$1;
 STACKTOP=sp;return $5;
}
/**
 * @param {number} $L
 * @param {number} $idx
 * @return {number}
 */
function _lua_next($L,$idx){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $t;
 /** @type {number} */ var $more;
 $1=$L;
 $2=$idx;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_index2addr($3,$4);
 $t=$5;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=$t;
 /** @type {number} */ var $8=(($7)|0);
 /** @type {number} */ var $9=$8;
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=$10;
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=(($12+8)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=((($14)-(16))|0);
 /** @type {number} */ var $16=_luaH_next($6,$11,$15);
 $more=$16;
 /** @type {number} */ var $17=$more;
 /** @type {number} */ var $18=($17|0)!=0;
 if($18){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $20=$1;
 /** @type {number} */ var $21=(($20+8)|0);
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 /** @type {number} */ var $23=(($22+16)|0);
 HEAP32[(($21)>>2)]=$23;
 label=4;break;
 case 3: 
 /** @type {number} */ var $25=$1;
 /** @type {number} */ var $26=(($25+8)|0);
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=((($27)-(16))|0);
 HEAP32[(($26)>>2)]=$28;
 label=4;break;
 case 4: 
 /** @type {number} */ var $30=$more;
 STACKTOP=sp;return $30;
 }
}
Module["_lua_next"] = _lua_next;
/**
 * @param {number} $L
 * @param {number} $n
 * @return {number}
 */
function _lua_concat($L,$n){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $io;
 /** @type {number} */ var $x_;
 $1=$L;
 $2=$n;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=($3|0)>=2;
 if($4){label=2;break;}else{label=5;break;}
 case 2: 
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+12)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=(($8+12)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=($10|0)>0;
 if($11){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $13=$1;
 _luaC_step($13);
 label=4;break;
 case 4: 
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=$2;
 _luaV_concat($15,$16);
 label=8;break;
 case 5: 
 /** @type {number} */ var $18=$2;
 /** @type {number} */ var $19=($18|0)==0;
 if($19){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=(($21+8)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 $io=$23;
 /** @type {number} */ var $24=$1;
 /** @type {number} */ var $25=_luaS_newlstr($24,12128,0);
 $x_=$25;
 /** @type {number} */ var $26=$x_;
 /** @type {number} */ var $27=$26;
 /** @type {number} */ var $28=$io;
 /** @type {number} */ var $29=(($28)|0);
 /** @type {number} */ var $30=$29;
 HEAP32[(($30)>>2)]=$27;
 /** @type {number} */ var $31=$x_;
 /** @type {number} */ var $32=$31;
 /** @type {number} */ var $33=(($32+4)|0);
 /** @type {number} */ var $34=HEAP8[($33)];
 /** @type {number} */ var $35=($34&255);
 /** @type {number} */ var $36=$35|64;
 /** @type {number} */ var $37=$io;
 /** @type {number} */ var $38=(($37+8)|0);
 HEAP32[(($38)>>2)]=$36;
 /** @type {number} */ var $39=$1;
 /** @type {number} */ var $40=(($39+8)|0);
 /** @type {number} */ var $41=HEAP32[(($40)>>2)];
 /** @type {number} */ var $42=(($41+16)|0);
 HEAP32[(($40)>>2)]=$42;
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $idx
 * @return {number}
 */
function _lua_len($L,$idx){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $t;
 $1=$L;
 $2=$idx;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_index2addr($3,$4);
 $t=$5;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=(($7+8)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=$t;
 _luaV_objlen($6,$9,$10);
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=(($11+8)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=(($13+16)|0);
 HEAP32[(($12)>>2)]=$14;
 STACKTOP=sp;return;
}
/**
 * @param {number} $L
 * @param {number} $size
 * @return {number}
 */
function _lua_newuserdata($L,$size){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $u;
 /** @type {number} */ var $io;
 $1=$L;
 $2=$size;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+12)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=(($5+12)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=($7|0)>0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $10=$1;
 _luaC_step($10);
 label=3;break;
 case 3: 
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=$2;
 /** @type {number} */ var $14=_luaS_newudata($12,$13,0);
 $u=$14;
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=(($15+8)|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 $io=$17;
 /** @type {number} */ var $18=$u;
 /** @type {number} */ var $19=$18;
 /** @type {number} */ var $20=$io;
 /** @type {number} */ var $21=(($20)|0);
 /** @type {number} */ var $22=$21;
 HEAP32[(($22)>>2)]=$19;
 /** @type {number} */ var $23=$io;
 /** @type {number} */ var $24=(($23+8)|0);
 HEAP32[(($24)>>2)]=71;
 /** @type {number} */ var $25=$1;
 /** @type {number} */ var $26=(($25+8)|0);
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=(($27+16)|0);
 HEAP32[(($26)>>2)]=$28;
 /** @type {number} */ var $29=$u;
 /** @type {number} */ var $30=(($29+24)|0);
 /** @type {number} */ var $31=$30;
 STACKTOP=sp;return $31;
 }
}
/**
 * @param {number} $L
 * @param {number} $funcindex
 * @param {number} $n
 * @return {number}
 */
function _lua_getupvalue($L,$funcindex,$n){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $name;
 /** @type {number} */ var $val=sp;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io1;
 $1=$L;
 $2=$funcindex;
 $3=$n;
 HEAP32[(($val)>>2)]=0;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=_index2addr($4,$5);
 /** @type {number} */ var $7=$3;
 /** @type {number} */ var $8=_aux_upvalue($6,$7,$val,0);
 $name=$8;
 /** @type {number} */ var $9=$name;
 /** @type {number} */ var $10=($9|0)!=0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $12=HEAP32[(($val)>>2)];
 $io2=$12;
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=(($13+8)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 $io1=$15;
 /** @type {number} */ var $16=$io1;
 /** @type {number} */ var $17=(($16)|0);
 /** @type {number} */ var $18=$io2;
 /** @type {number} */ var $19=(($18)|0);
 /** @type {number} */ var $20=$17;
 /** @type {number} */ var $21=$19;
 HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];
 /** @type {number} */ var $22=$io2;
 /** @type {number} */ var $23=(($22+8)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=$io1;
 /** @type {number} */ var $26=(($25+8)|0);
 HEAP32[(($26)>>2)]=$24;
 /** @type {number} */ var $27=$1;
 /** @type {number} */ var $28=(($27+8)|0);
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 /** @type {number} */ var $30=(($29+16)|0);
 HEAP32[(($28)>>2)]=$30;
 label=3;break;
 case 3: 
 /** @type {number} */ var $32=$name;
 STACKTOP=sp;return $32;
 }
}
/**
 * @param {number} $fi
 * @param {number} $n
 * @param {number} $val
 * @param {number} $owner
 * @return {number}
 */
function _aux_upvalue($fi,$n,$val,$owner){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 /** @type {number} */ var $f;
 /** @type {number} */ var $f1;
 /** @type {number} */ var $name;
 /** @type {number} */ var $p;
 $2=$fi;
 $3=$n;
 $4=$val;
 $5=$owner;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=(($6+8)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=$8&63;
 if(($9|0)==38){ label=2;break;}else if(($9|0)==6){ label=8;break;}else{label=17;break;}
 case 2: 
 /** @type {number} */ var $11=$2;
 /** @type {number} */ var $12=(($11)|0);
 /** @type {number} */ var $13=$12;
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=$14;
 /** @type {number} */ var $16=$15;
 $f=$16;
 /** @type {number} */ var $17=$3;
 /** @type {number} */ var $18=1<=($17|0);
 if($18){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $20=$3;
 /** @type {number} */ var $21=$f;
 /** @type {number} */ var $22=(($21+6)|0);
 /** @type {number} */ var $23=HEAP8[($22)];
 /** @type {number} */ var $24=($23&255);
 /** @type {number} */ var $25=($20|0)<=($24|0);
 if($25){label=5;break;}else{label=4;break;}
 case 4: 
 $1=0;
 label=18;break;
 case 5: 
 /** @type {number} */ var $28=$3;
 /** @type {number} */ var $29=((($28)-(1))|0);
 /** @type {number} */ var $30=$f;
 /** @type {number} */ var $31=(($30+16)|0);
 /** @type {number} */ var $32=(($31+($29<<4))|0);
 /** @type {number} */ var $33=$4;
 HEAP32[(($33)>>2)]=$32;
 /** @type {number} */ var $34=$5;
 /** @type {number} */ var $35=($34|0)!=0;
 if($35){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $37=$f;
 /** @type {number} */ var $38=$37;
 /** @type {number} */ var $39=$5;
 HEAP32[(($39)>>2)]=$38;
 label=7;break;
 case 7: 
 $1=12128;
 label=18;break;
 case 8: 
 /** @type {number} */ var $42=$2;
 /** @type {number} */ var $43=(($42)|0);
 /** @type {number} */ var $44=$43;
 /** @type {number} */ var $45=HEAP32[(($44)>>2)];
 /** @type {number} */ var $46=$45;
 /** @type {number} */ var $47=$46;
 $f1=$47;
 /** @type {number} */ var $48=$f1;
 /** @type {number} */ var $49=(($48+12)|0);
 /** @type {number} */ var $50=HEAP32[(($49)>>2)];
 $p=$50;
 /** @type {number} */ var $51=$3;
 /** @type {number} */ var $52=1<=($51|0);
 if($52){label=9;break;}else{label=10;break;}
 case 9: 
 /** @type {number} */ var $54=$3;
 /** @type {number} */ var $55=$p;
 /** @type {number} */ var $56=(($55+40)|0);
 /** @type {number} */ var $57=HEAP32[(($56)>>2)];
 /** @type {number} */ var $58=($54|0)<=($57|0);
 if($58){label=11;break;}else{label=10;break;}
 case 10: 
 $1=0;
 label=18;break;
 case 11: 
 /** @type {number} */ var $61=$3;
 /** @type {number} */ var $62=((($61)-(1))|0);
 /** @type {number} */ var $63=$f1;
 /** @type {number} */ var $64=(($63+16)|0);
 /** @type {number} */ var $65=(($64+($62<<2))|0);
 /** @type {number} */ var $66=HEAP32[(($65)>>2)];
 /** @type {number} */ var $67=(($66+8)|0);
 /** @type {number} */ var $68=HEAP32[(($67)>>2)];
 /** @type {number} */ var $69=$4;
 HEAP32[(($69)>>2)]=$68;
 /** @type {number} */ var $70=$5;
 /** @type {number} */ var $71=($70|0)!=0;
 if($71){label=12;break;}else{label=13;break;}
 case 12: 
 /** @type {number} */ var $73=$3;
 /** @type {number} */ var $74=((($73)-(1))|0);
 /** @type {number} */ var $75=$f1;
 /** @type {number} */ var $76=(($75+16)|0);
 /** @type {number} */ var $77=(($76+($74<<2))|0);
 /** @type {number} */ var $78=HEAP32[(($77)>>2)];
 /** @type {number} */ var $79=$78;
 /** @type {number} */ var $80=$5;
 HEAP32[(($80)>>2)]=$79;
 label=13;break;
 case 13: 
 /** @type {number} */ var $82=$3;
 /** @type {number} */ var $83=((($82)-(1))|0);
 /** @type {number} */ var $84=$p;
 /** @type {number} */ var $85=(($84+28)|0);
 /** @type {number} */ var $86=HEAP32[(($85)>>2)];
 /** @type {number} */ var $87=(($86+($83<<3))|0);
 /** @type {number} */ var $88=(($87)|0);
 /** @type {number} */ var $89=HEAP32[(($88)>>2)];
 $name=$89;
 /** @type {number} */ var $90=$name;
 /** @type {number} */ var $91=($90|0)==0;
 if($91){label=14;break;}else{label=15;break;}
 case 14: 
 var $98=12128;label=16;break;
 case 15: 
 /** @type {number} */ var $94=$name;
 /** @type {number} */ var $95=(($94+16)|0);
 /** @type {number} */ var $96=$95;
 var $98=$96;label=16;break;
 case 16: 
 var $98;
 $1=$98;
 label=18;break;
 case 17: 
 $1=0;
 label=18;break;
 case 18: 
 /** @type {number} */ var $101=$1;
 STACKTOP=sp;return $101;
 }
}
/**
 * @param {number} $L
 * @param {number} $funcindex
 * @param {number} $n
 * @return {number}
 */
function _lua_setupvalue($L,$funcindex,$n){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $name;
 /** @type {number} */ var $val=sp;
 /** @type {number} */ var $owner=(sp)+(8);
 /** @type {number} */ var $fi;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io1;
 $1=$L;
 $2=$funcindex;
 $3=$n;
 HEAP32[(($val)>>2)]=0;
 HEAP32[(($owner)>>2)]=0;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=_index2addr($4,$5);
 $fi=$6;
 /** @type {number} */ var $7=$fi;
 /** @type {number} */ var $8=$3;
 /** @type {number} */ var $9=_aux_upvalue($7,$8,$val,$owner);
 $name=$9;
 /** @type {number} */ var $10=$name;
 /** @type {number} */ var $11=($10|0)!=0;
 if($11){label=2;break;}else{label=7;break;}
 case 2: 
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=(($13+8)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=((($15)-(16))|0);
 HEAP32[(($14)>>2)]=$16;
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=(($17+8)|0);
 /** @type {number} */ var $19=HEAP32[(($18)>>2)];
 $io2=$19;
 /** @type {number} */ var $20=HEAP32[(($val)>>2)];
 $io1=$20;
 /** @type {number} */ var $21=$io1;
 /** @type {number} */ var $22=(($21)|0);
 /** @type {number} */ var $23=$io2;
 /** @type {number} */ var $24=(($23)|0);
 /** @type {number} */ var $25=$22;
 /** @type {number} */ var $26=$24;
 HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];
 /** @type {number} */ var $27=$io2;
 /** @type {number} */ var $28=(($27+8)|0);
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 /** @type {number} */ var $30=$io1;
 /** @type {number} */ var $31=(($30+8)|0);
 HEAP32[(($31)>>2)]=$29;
 /** @type {number} */ var $32=$1;
 /** @type {number} */ var $33=(($32+8)|0);
 /** @type {number} */ var $34=HEAP32[(($33)>>2)];
 /** @type {number} */ var $35=(($34+8)|0);
 /** @type {number} */ var $36=HEAP32[(($35)>>2)];
 /** @type {number} */ var $37=$36&64;
 /** @type {number} */ var $38=($37|0)!=0;
 if($38){label=3;break;}else{label=6;break;}
 case 3: 
 /** @type {number} */ var $40=$1;
 /** @type {number} */ var $41=(($40+8)|0);
 /** @type {number} */ var $42=HEAP32[(($41)>>2)];
 /** @type {number} */ var $43=(($42)|0);
 /** @type {number} */ var $44=$43;
 /** @type {number} */ var $45=HEAP32[(($44)>>2)];
 /** @type {number} */ var $46=$45;
 /** @type {number} */ var $47=(($46+5)|0);
 /** @type {number} */ var $48=HEAP8[($47)];
 /** @type {number} */ var $49=($48&255);
 /** @type {number} */ var $50=$49&3;
 /** @type {number} */ var $51=($50|0)!=0;
 if($51){label=4;break;}else{label=6;break;}
 case 4: 
 /** @type {number} */ var $53=HEAP32[(($owner)>>2)];
 /** @type {number} */ var $54=$53;
 /** @type {number} */ var $55=(($54+5)|0);
 /** @type {number} */ var $56=HEAP8[($55)];
 /** @type {number} */ var $57=($56&255);
 /** @type {number} */ var $58=$57&4;
 /** @type {number} */ var $59=($58|0)!=0;
 if($59){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $61=$1;
 /** @type {number} */ var $62=HEAP32[(($owner)>>2)];
 /** @type {number} */ var $63=$1;
 /** @type {number} */ var $64=(($63+8)|0);
 /** @type {number} */ var $65=HEAP32[(($64)>>2)];
 /** @type {number} */ var $66=(($65)|0);
 /** @type {number} */ var $67=$66;
 /** @type {number} */ var $68=HEAP32[(($67)>>2)];
 _luaC_barrier_($61,$62,$68);
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 /** @type {number} */ var $71=$name;
 STACKTOP=sp;return $71;
 }
}
/**
 * @param {number} $L
 * @param {number} $fidx
 * @param {number} $n
 * @return {number}
 */
function _lua_upvalueid($L,$fidx,$n){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $fi;
 /** @type {number} */ var $f;
 $2=$L;
 $3=$fidx;
 $4=$n;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$3;
 /** @type {number} */ var $7=_index2addr($5,$6);
 $fi=$7;
 /** @type {number} */ var $8=$fi;
 /** @type {number} */ var $9=(($8+8)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=$10&63;
 if(($11|0)==6){ label=2;break;}else if(($11|0)==38){ label=3;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $13=$2;
 /** @type {number} */ var $14=$3;
 /** @type {number} */ var $15=$4;
 /** @type {number} */ var $16=_getupvalref($13,$14,$15,0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=$17;
 $1=$18;
 label=5;break;
 case 3: 
 /** @type {number} */ var $20=$fi;
 /** @type {number} */ var $21=(($20)|0);
 /** @type {number} */ var $22=$21;
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 /** @type {number} */ var $24=$23;
 /** @type {number} */ var $25=$24;
 $f=$25;
 /** @type {number} */ var $26=$4;
 /** @type {number} */ var $27=((($26)-(1))|0);
 /** @type {number} */ var $28=$f;
 /** @type {number} */ var $29=(($28+16)|0);
 /** @type {number} */ var $30=(($29+($27<<4))|0);
 /** @type {number} */ var $31=$30;
 $1=$31;
 label=5;break;
 case 4: 
 $1=0;
 label=5;break;
 case 5: 
 /** @type {number} */ var $34=$1;
 STACKTOP=sp;return $34;
 }
}
/**
 * @param {number} $L
 * @param {number} $fidx
 * @param {number} $n
 * @param {number} $pf
 * @return {number}
 */
function _getupvalref($L,$fidx,$n,$pf){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $f;
 /** @type {number} */ var $fi;
 $1=$L;
 $2=$fidx;
 $3=$n;
 $4=$pf;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=_index2addr($5,$6);
 $fi=$7;
 /** @type {number} */ var $8=$fi;
 /** @type {number} */ var $9=(($8)|0);
 /** @type {number} */ var $10=$9;
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=$11;
 /** @type {number} */ var $13=$12;
 $f=$13;
 /** @type {number} */ var $14=$4;
 /** @type {number} */ var $15=($14|0)!=0;
 if($15){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $17=$f;
 /** @type {number} */ var $18=$4;
 HEAP32[(($18)>>2)]=$17;
 label=3;break;
 case 3: 
 /** @type {number} */ var $20=$3;
 /** @type {number} */ var $21=((($20)-(1))|0);
 /** @type {number} */ var $22=$f;
 /** @type {number} */ var $23=(($22+16)|0);
 /** @type {number} */ var $24=(($23+($21<<2))|0);
 STACKTOP=sp;return $24;
 }
}
/**
 * @param {number} $L
 * @param {number} $fidx1
 * @param {number} $n1
 * @param {number} $fidx2
 * @param {number} $n2
 * @return {number}
 */
function _lua_upvaluejoin($L,$fidx1,$n1,$fidx2,$n2){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 /** @type {number} */ var $f1=sp;
 /** @type {number} */ var $up1;
 /** @type {number} */ var $up2;
 $1=$L;
 $2=$fidx1;
 $3=$n1;
 $4=$fidx2;
 $5=$n2;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=$3;
 /** @type {number} */ var $9=_getupvalref($6,$7,$8,$f1);
 $up1=$9;
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=$4;
 /** @type {number} */ var $12=$5;
 /** @type {number} */ var $13=_getupvalref($10,$11,$12,0);
 $up2=$13;
 /** @type {number} */ var $14=$up2;
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=$up1;
 HEAP32[(($16)>>2)]=$15;
 /** @type {number} */ var $17=$up2;
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=$18;
 /** @type {number} */ var $20=$19;
 /** @type {number} */ var $21=(($20+5)|0);
 /** @type {number} */ var $22=HEAP8[($21)];
 /** @type {number} */ var $23=($22&255);
 /** @type {number} */ var $24=$23&3;
 /** @type {number} */ var $25=($24|0)!=0;
 if($25){label=2;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $27=HEAP32[(($f1)>>2)];
 /** @type {number} */ var $28=$27;
 /** @type {number} */ var $29=$28;
 /** @type {number} */ var $30=(($29+5)|0);
 /** @type {number} */ var $31=HEAP8[($30)];
 /** @type {number} */ var $32=($31&255);
 /** @type {number} */ var $33=$32&4;
 /** @type {number} */ var $34=($33|0)!=0;
 if($34){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $36=$1;
 /** @type {number} */ var $37=HEAP32[(($f1)>>2)];
 /** @type {number} */ var $38=$37;
 /** @type {number} */ var $39=$up2;
 /** @type {number} */ var $40=HEAP32[(($39)>>2)];
 /** @type {number} */ var $41=$40;
 _luaC_barrier_($36,$38,$41);
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @param {number} $from
 * @param {number} $n
 * @return {number}
 */
function _luaK_nil($fs,$from,$n){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $previous;
 /** @type {number} */ var $l;
 /** @type {number} */ var $pfrom;
 /** @type {number} */ var $pl;
 $1=$fs;
 $2=$from;
 $3=$n;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=((($4)+($5))|0);
 /** @type {number} */ var $7=((($6)-(1))|0);
 $l=$7;
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=(($8+20)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=(($11+24)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=($10|0)>($13|0);
 if($14){label=2;break;}else{label=14;break;}
 case 2: 
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=(($16+20)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=((($18)-(1))|0);
 /** @type {number} */ var $20=$1;
 /** @type {number} */ var $21=(($20)|0);
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 /** @type {number} */ var $23=(($22+12)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=(($24+($19<<2))|0);
 $previous=$25;
 /** @type {number} */ var $26=$previous;
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=$27>>>0;
 /** @type {number} */ var $29=$28&63;
 /** @type {number} */ var $30=($29|0)==4;
 if($30){label=3;break;}else{label=13;break;}
 case 3: 
 /** @type {number} */ var $32=$previous;
 /** @type {number} */ var $33=HEAP32[(($32)>>2)];
 /** @type {number} */ var $34=$33>>>6;
 /** @type {number} */ var $35=$34&255;
 $pfrom=$35;
 /** @type {number} */ var $36=$pfrom;
 /** @type {number} */ var $37=$previous;
 /** @type {number} */ var $38=HEAP32[(($37)>>2)];
 /** @type {number} */ var $39=$38>>>23;
 /** @type {number} */ var $40=$39&511;
 /** @type {number} */ var $41=((($36)+($40))|0);
 $pl=$41;
 /** @type {number} */ var $42=$pfrom;
 /** @type {number} */ var $43=$2;
 /** @type {number} */ var $44=($42|0)<=($43|0);
 if($44){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $46=$2;
 /** @type {number} */ var $47=$pl;
 /** @type {number} */ var $48=((($47)+(1))|0);
 /** @type {number} */ var $49=($46|0)<=($48|0);
 if($49){label=7;break;}else{label=5;break;}
 case 5: 
 /** @type {number} */ var $51=$2;
 /** @type {number} */ var $52=$pfrom;
 /** @type {number} */ var $53=($51|0)<=($52|0);
 if($53){label=6;break;}else{label=12;break;}
 case 6: 
 /** @type {number} */ var $55=$pfrom;
 /** @type {number} */ var $56=$l;
 /** @type {number} */ var $57=((($56)+(1))|0);
 /** @type {number} */ var $58=($55|0)<=($57|0);
 if($58){label=7;break;}else{label=12;break;}
 case 7: 
 /** @type {number} */ var $60=$pfrom;
 /** @type {number} */ var $61=$2;
 /** @type {number} */ var $62=($60|0)<($61|0);
 if($62){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $64=$pfrom;
 $2=$64;
 label=9;break;
 case 9: 
 /** @type {number} */ var $66=$pl;
 /** @type {number} */ var $67=$l;
 /** @type {number} */ var $68=($66|0)>($67|0);
 if($68){label=10;break;}else{label=11;break;}
 case 10: 
 /** @type {number} */ var $70=$pl;
 $l=$70;
 label=11;break;
 case 11: 
 /** @type {number} */ var $72=$previous;
 /** @type {number} */ var $73=HEAP32[(($72)>>2)];
 /** @type {number} */ var $74=$73&-16321;
 /** @type {number} */ var $75=$2;
 /** @type {number} */ var $76=$75<<6;
 /** @type {number} */ var $77=$76&16320;
 /** @type {number} */ var $78=$74|$77;
 /** @type {number} */ var $79=$previous;
 HEAP32[(($79)>>2)]=$78;
 /** @type {number} */ var $80=$previous;
 /** @type {number} */ var $81=HEAP32[(($80)>>2)];
 /** @type {number} */ var $82=$81&8388607;
 /** @type {number} */ var $83=$l;
 /** @type {number} */ var $84=$2;
 /** @type {number} */ var $85=((($83)-($84))|0);
 /** @type {number} */ var $86=$85<<23;
 /** @type {number} */ var $87=$86&-8388608;
 /** @type {number} */ var $88=$82|$87;
 /** @type {number} */ var $89=$previous;
 HEAP32[(($89)>>2)]=$88;
 label=15;break;
 case 12: 
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 /** @type {number} */ var $93=$1;
 /** @type {number} */ var $94=$2;
 /** @type {number} */ var $95=$3;
 /** @type {number} */ var $96=((($95)-(1))|0);
 /** @type {number} */ var $97=_luaK_codeABC($93,4,$94,$96,0);
 label=15;break;
 case 15: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @param {number} $o
 * @param {number} $a
 * @param {number} $b
 * @param {number} $c
 * @return {number}
 */
function _luaK_codeABC($fs,$o,$a,$b,$c){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 $1=$fs;
 $2=$o;
 $3=$a;
 $4=$b;
 $5=$c;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=$7<<0;
 /** @type {number} */ var $9=$3;
 /** @type {number} */ var $10=$9<<6;
 /** @type {number} */ var $11=$8|$10;
 /** @type {number} */ var $12=$4;
 /** @type {number} */ var $13=$12<<23;
 /** @type {number} */ var $14=$11|$13;
 /** @type {number} */ var $15=$5;
 /** @type {number} */ var $16=$15<<14;
 /** @type {number} */ var $17=$14|$16;
 /** @type {number} */ var $18=_luaK_code($6,$17);
 STACKTOP=sp;return $18;
}
/**
 * @param {number} $fs
 * @return {number}
 */
function _luaK_jump($fs){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 /** @type {number} */ var $1;
 /** @type {number} */ var $jpc;
 /** @type {number} */ var $j=sp;
 $1=$fs;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+28)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $jpc=$4;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($5+28)|0);
 HEAP32[(($6)>>2)]=-1;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=_luaK_codeABx($7,23,0,131070);
 HEAP32[(($j)>>2)]=$8;
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=$jpc;
 _luaK_concat($9,$j,$10);
 /** @type {number} */ var $11=HEAP32[(($j)>>2)];
 STACKTOP=sp;return $11;
}
/**
 * @param {number} $fs
 * @param {number} $o
 * @param {number} $a
 * @param {number} $bc
 * @return {number}
 */
function _luaK_codeABx($fs,$o,$a,$bc){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 $1=$fs;
 $2=$o;
 $3=$a;
 $4=$bc;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=$6<<0;
 /** @type {number} */ var $8=$3;
 /** @type {number} */ var $9=$8<<6;
 /** @type {number} */ var $10=$7|$9;
 /** @type {number} */ var $11=$4;
 /** @type {number} */ var $12=$11<<14;
 /** @type {number} */ var $13=$10|$12;
 /** @type {number} */ var $14=_luaK_code($5,$13);
 STACKTOP=sp;return $14;
}
/**
 * @param {number} $fs
 * @param {number} $l1
 * @param {number} $l2
 * @return {number}
 */
function _luaK_concat($fs,$l1,$l2){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $list;
 /** @type {number} */ var $next;
 $1=$fs;
 $2=$l1;
 $3=$l2;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=($4|0)==-1;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 label=10;break;
 case 3: 
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=($9|0)==-1;
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $12=$3;
 /** @type {number} */ var $13=$2;
 HEAP32[(($13)>>2)]=$12;
 label=9;break;
 case 5: 
 /** @type {number} */ var $15=$2;
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 $list=$16;
 label=6;break;
 case 6: 
 /** @type {number} */ var $18=$1;
 /** @type {number} */ var $19=$list;
 /** @type {number} */ var $20=_getjump($18,$19);
 $next=$20;
 /** @type {number} */ var $21=($20|0)!=-1;
 if($21){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $23=$next;
 $list=$23;
 label=6;break;
 case 8: 
 /** @type {number} */ var $25=$1;
 /** @type {number} */ var $26=$list;
 /** @type {number} */ var $27=$3;
 _fixjump($25,$26,$27);
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @param {number} $first
 * @param {number} $nret
 * @return {number}
 */
function _luaK_ret($fs,$first,$nret){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$fs;
 $2=$first;
 $3=$nret;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$3;
 /** @type {number} */ var $7=((($6)+(1))|0);
 /** @type {number} */ var $8=_luaK_codeABC($4,31,$5,$7,0);
 STACKTOP=sp;return;
}
/**
 * @param {number} $fs
 * @return {number}
 */
function _luaK_getlabel($fs){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$fs;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+20)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($5+24)|0);
 HEAP32[(($6)>>2)]=$4;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=(($7+20)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 STACKTOP=sp;return $9;
}
/**
 * @param {number} $fs
 * @param {number} $list
 * @param {number} $target
 * @return {number}
 */
function _luaK_patchlist($fs,$list,$target){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$fs;
 $2=$list;
 $3=$target;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($5+20)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=($4|0)==($7|0);
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=$2;
 _luaK_patchtohere($10,$11);
 label=4;break;
 case 3: 
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=$3;
 /** @type {number} */ var $16=$3;
 _patchlistaux($13,$14,$15,255,$16);
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @param {number} $list
 * @return {number}
 */
function _luaK_patchtohere($fs,$list){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$fs;
 $2=$list;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaK_getlabel($3);
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+28)|0);
 /** @type {number} */ var $8=$2;
 _luaK_concat($5,$7,$8);
 STACKTOP=sp;return;
}
/**
 * @param {number} $fs
 * @param {number} $list
 * @param {number} $level
 * @return {number}
 */
function _luaK_patchclose($fs,$list,$level){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $next;
 $1=$fs;
 $2=$list;
 $3=$level;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=((($4)+(1))|0);
 $3=$5;
 label=2;break;
 case 2: 
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=($7|0)!=-1;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=$2;
 /** @type {number} */ var $12=_getjump($10,$11);
 $next=$12;
 /** @type {number} */ var $13=$2;
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=(($14)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=(($16+12)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=(($18+($13<<2))|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=$20&-16321;
 /** @type {number} */ var $22=$3;
 /** @type {number} */ var $23=$22<<6;
 /** @type {number} */ var $24=$23&16320;
 /** @type {number} */ var $25=$21|$24;
 /** @type {number} */ var $26=$2;
 /** @type {number} */ var $27=$1;
 /** @type {number} */ var $28=(($27)|0);
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 /** @type {number} */ var $30=(($29+12)|0);
 /** @type {number} */ var $31=HEAP32[(($30)>>2)];
 /** @type {number} */ var $32=(($31+($26<<2))|0);
 HEAP32[(($32)>>2)]=$25;
 /** @type {number} */ var $33=$next;
 $2=$33;
 label=2;break;
 case 4: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @param {number} $reg
 * @param {number} $k
 * @return {number}
 */
function _luaK_codek($fs,$reg,$k){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $p;
 $2=$fs;
 $3=$reg;
 $4=$k;
 /** @type {number} */ var $5=$4;
 /** @type {number} */ var $6=($5|0)<=262143;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=$3;
 /** @type {number} */ var $10=$4;
 /** @type {number} */ var $11=_luaK_codeABx($8,1,$9,$10);
 $1=$11;
 label=4;break;
 case 3: 
 /** @type {number} */ var $13=$2;
 /** @type {number} */ var $14=$3;
 /** @type {number} */ var $15=_luaK_codeABx($13,2,$14,0);
 $p=$15;
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=$4;
 /** @type {number} */ var $18=_codeextraarg($16,$17);
 /** @type {number} */ var $19=$p;
 $1=$19;
 label=4;break;
 case 4: 
 /** @type {number} */ var $21=$1;
 STACKTOP=sp;return $21;
 }
}
/**
 * @param {number} $fs
 * @param {number} $n
 * @return {number}
 */
function _luaK_checkstack($fs,$n){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $newstack;
 $1=$fs;
 $2=$n;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+48)|0);
 /** @type {number} */ var $5=HEAP8[($4)];
 /** @type {number} */ var $6=($5&255);
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=((($6)+($7))|0);
 $newstack=$8;
 /** @type {number} */ var $9=$newstack;
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=(($10)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=(($12+78)|0);
 /** @type {number} */ var $14=HEAP8[($13)];
 /** @type {number} */ var $15=($14&255);
 /** @type {number} */ var $16=($9|0)>($15|0);
 if($16){label=2;break;}else{label=5;break;}
 case 2: 
 /** @type {number} */ var $18=$newstack;
 /** @type {number} */ var $19=($18|0)>=250;
 if($19){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=(($21+12)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 _luaX_syntaxerror($23,9464);
 case 4: 
 /** @type {number} */ var $25=$newstack;
 /** @type {number} */ var $26=(($25)&255);
 /** @type {number} */ var $27=$1;
 /** @type {number} */ var $28=(($27)|0);
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 /** @type {number} */ var $30=(($29+78)|0);
 HEAP8[($30)]=$26;
 label=5;break;
 case 5: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @param {number} $n
 * @return {number}
 */
function _luaK_reserveregs($fs,$n){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$fs;
 $2=$n;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 _luaK_checkstack($3,$4);
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+48)|0);
 /** @type {number} */ var $8=HEAP8[($7)];
 /** @type {number} */ var $9=($8&255);
 /** @type {number} */ var $10=((($9)+($5))|0);
 /** @type {number} */ var $11=(($10)&255);
 HEAP8[($7)]=$11;
 STACKTOP=sp;return;
}
/**
 * @param {number} $fs
 * @param {number} $s
 * @return {number}
 */
function _luaK_stringK($fs,$s){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $o=sp;
 /** @type {number} */ var $io;
 /** @type {number} */ var $x_;
 $1=$fs;
 $2=$s;
 $io=$o;
 /** @type {number} */ var $3=$2;
 $x_=$3;
 /** @type {number} */ var $4=$x_;
 /** @type {number} */ var $5=$4;
 /** @type {number} */ var $6=$io;
 /** @type {number} */ var $7=(($6)|0);
 /** @type {number} */ var $8=$7;
 HEAP32[(($8)>>2)]=$5;
 /** @type {number} */ var $9=$x_;
 /** @type {number} */ var $10=$9;
 /** @type {number} */ var $11=(($10+4)|0);
 /** @type {number} */ var $12=HEAP8[($11)];
 /** @type {number} */ var $13=($12&255);
 /** @type {number} */ var $14=$13|64;
 /** @type {number} */ var $15=$io;
 /** @type {number} */ var $16=(($15+8)|0);
 HEAP32[(($16)>>2)]=$14;
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=_addk($17,$o,$o);
 STACKTOP=sp;return $18;
}
/**
 * @param {number} $fs
 * @param {number} $r
 * @return {number}
 */
function _luaK_numberK($fs,$r){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2=sp;
 /** @type {number} */ var $n;
 /** @type {number} */ var $L;
 /** @type {number} */ var $o=(sp)+(8);
 /** @type {number} */ var $io;
 /** @type {number} */ var $io1;
 /** @type {number} */ var $x_;
 $1=$fs;
 HEAPF64[(($2)>>3)]=$r;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+12)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=(($5+52)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 $L=$7;
 $io=$o;
 /** @type {number} */ var $8=HEAPF64[(($2)>>3)];
 /** @type {number} */ var $9=$io;
 /** @type {number} */ var $10=(($9)|0);
 /** @type {number} */ var $11=$10;
 HEAPF64[(($11)>>3)]=$8;
 /** @type {number} */ var $12=$io;
 /** @type {number} */ var $13=(($12+8)|0);
 HEAP32[(($13)>>2)]=3;
 /** @type {number} */ var $14=HEAPF64[(($2)>>3)];
 /** @type {number} */ var $15=$14==0;
 if($15){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $17=HEAPF64[(($2)>>3)];
 /** @type {number} */ var $18=HEAPF64[(($2)>>3)];
 /** @type {number} */ var $19=$17==$18;
 if($19){label=7;break;}else{label=3;break;}
 case 3: 
 /** @type {number} */ var $21=$L;
 /** @type {number} */ var $22=(($21+8)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 $io1=$23;
 /** @type {number} */ var $24=$L;
 /** @type {number} */ var $25=$2;
 /** @type {number} */ var $26=_luaS_newlstr($24,$25,8);
 $x_=$26;
 /** @type {number} */ var $27=$x_;
 /** @type {number} */ var $28=$27;
 /** @type {number} */ var $29=$io1;
 /** @type {number} */ var $30=(($29)|0);
 /** @type {number} */ var $31=$30;
 HEAP32[(($31)>>2)]=$28;
 /** @type {number} */ var $32=$x_;
 /** @type {number} */ var $33=$32;
 /** @type {number} */ var $34=(($33+4)|0);
 /** @type {number} */ var $35=HEAP8[($34)];
 /** @type {number} */ var $36=($35&255);
 /** @type {number} */ var $37=$36|64;
 /** @type {number} */ var $38=$io1;
 /** @type {number} */ var $39=(($38+8)|0);
 HEAP32[(($39)>>2)]=$37;
 /** @type {number} */ var $40=$L;
 /** @type {number} */ var $41=(($40+8)|0);
 /** @type {number} */ var $42=HEAP32[(($41)>>2)];
 /** @type {number} */ var $43=(($42+16)|0);
 HEAP32[(($41)>>2)]=$43;
 /** @type {number} */ var $44=$L;
 /** @type {number} */ var $45=(($44+24)|0);
 /** @type {number} */ var $46=HEAP32[(($45)>>2)];
 /** @type {number} */ var $47=$L;
 /** @type {number} */ var $48=(($47+8)|0);
 /** @type {number} */ var $49=HEAP32[(($48)>>2)];
 /** @type {number} */ var $50=$46;
 /** @type {number} */ var $51=$49;
 /** @type {number} */ var $52=((($50)-($51))|0);
 /** @type {number} */ var $53=(((($52|0))/(16))&-1);
 /** @type {number} */ var $54=($53|0)<=0;
 if($54){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $56=$L;
 _luaD_growstack($56,0);
 label=6;break;
 case 5: 
 label=6;break;
 case 6: 
 /** @type {number} */ var $59=$1;
 /** @type {number} */ var $60=$L;
 /** @type {number} */ var $61=(($60+8)|0);
 /** @type {number} */ var $62=HEAP32[(($61)>>2)];
 /** @type {number} */ var $63=((($62)-(16))|0);
 /** @type {number} */ var $64=_addk($59,$63,$o);
 $n=$64;
 /** @type {number} */ var $65=$L;
 /** @type {number} */ var $66=(($65+8)|0);
 /** @type {number} */ var $67=HEAP32[(($66)>>2)];
 /** @type {number} */ var $68=((($67)-(16))|0);
 HEAP32[(($66)>>2)]=$68;
 label=8;break;
 case 7: 
 /** @type {number} */ var $70=$1;
 /** @type {number} */ var $71=_addk($70,$o,$o);
 $n=$71;
 label=8;break;
 case 8: 
 /** @type {number} */ var $73=$n;
 STACKTOP=sp;return $73;
 }
}
/**
 * @param {number} $fs
 * @param {number} $e
 * @param {number} $nresults
 * @return {number}
 */
function _luaK_setreturns($fs,$e,$nresults){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$fs;
 $2=$e;
 $3=$nresults;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=(($4)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=($6|0)==12;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=(($9+8)|0);
 /** @type {number} */ var $11=$10;
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=(($13)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=(($15+12)|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=(($17+($12<<2))|0);
 /** @type {number} */ var $19=HEAP32[(($18)>>2)];
 /** @type {number} */ var $20=$19&-8372225;
 /** @type {number} */ var $21=$3;
 /** @type {number} */ var $22=((($21)+(1))|0);
 /** @type {number} */ var $23=$22<<14;
 /** @type {number} */ var $24=$23&8372224;
 /** @type {number} */ var $25=$20|$24;
 /** @type {number} */ var $26=$2;
 /** @type {number} */ var $27=(($26+8)|0);
 /** @type {number} */ var $28=$27;
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 /** @type {number} */ var $30=$1;
 /** @type {number} */ var $31=(($30)|0);
 /** @type {number} */ var $32=HEAP32[(($31)>>2)];
 /** @type {number} */ var $33=(($32+12)|0);
 /** @type {number} */ var $34=HEAP32[(($33)>>2)];
 /** @type {number} */ var $35=(($34+($29<<2))|0);
 HEAP32[(($35)>>2)]=$25;
 label=6;break;
 case 3: 
 /** @type {number} */ var $37=$2;
 /** @type {number} */ var $38=(($37)|0);
 /** @type {number} */ var $39=HEAP32[(($38)>>2)];
 /** @type {number} */ var $40=($39|0)==13;
 if($40){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $42=$2;
 /** @type {number} */ var $43=(($42+8)|0);
 /** @type {number} */ var $44=$43;
 /** @type {number} */ var $45=HEAP32[(($44)>>2)];
 /** @type {number} */ var $46=$1;
 /** @type {number} */ var $47=(($46)|0);
 /** @type {number} */ var $48=HEAP32[(($47)>>2)];
 /** @type {number} */ var $49=(($48+12)|0);
 /** @type {number} */ var $50=HEAP32[(($49)>>2)];
 /** @type {number} */ var $51=(($50+($45<<2))|0);
 /** @type {number} */ var $52=HEAP32[(($51)>>2)];
 /** @type {number} */ var $53=$52&8388607;
 /** @type {number} */ var $54=$3;
 /** @type {number} */ var $55=((($54)+(1))|0);
 /** @type {number} */ var $56=$55<<23;
 /** @type {number} */ var $57=$56&-8388608;
 /** @type {number} */ var $58=$53|$57;
 /** @type {number} */ var $59=$2;
 /** @type {number} */ var $60=(($59+8)|0);
 /** @type {number} */ var $61=$60;
 /** @type {number} */ var $62=HEAP32[(($61)>>2)];
 /** @type {number} */ var $63=$1;
 /** @type {number} */ var $64=(($63)|0);
 /** @type {number} */ var $65=HEAP32[(($64)>>2)];
 /** @type {number} */ var $66=(($65+12)|0);
 /** @type {number} */ var $67=HEAP32[(($66)>>2)];
 /** @type {number} */ var $68=(($67+($62<<2))|0);
 HEAP32[(($68)>>2)]=$58;
 /** @type {number} */ var $69=$2;
 /** @type {number} */ var $70=(($69+8)|0);
 /** @type {number} */ var $71=$70;
 /** @type {number} */ var $72=HEAP32[(($71)>>2)];
 /** @type {number} */ var $73=$1;
 /** @type {number} */ var $74=(($73)|0);
 /** @type {number} */ var $75=HEAP32[(($74)>>2)];
 /** @type {number} */ var $76=(($75+12)|0);
 /** @type {number} */ var $77=HEAP32[(($76)>>2)];
 /** @type {number} */ var $78=(($77+($72<<2))|0);
 /** @type {number} */ var $79=HEAP32[(($78)>>2)];
 /** @type {number} */ var $80=$79&-16321;
 /** @type {number} */ var $81=$1;
 /** @type {number} */ var $82=(($81+48)|0);
 /** @type {number} */ var $83=HEAP8[($82)];
 /** @type {number} */ var $84=($83&255);
 /** @type {number} */ var $85=$84<<6;
 /** @type {number} */ var $86=$85&16320;
 /** @type {number} */ var $87=$80|$86;
 /** @type {number} */ var $88=$2;
 /** @type {number} */ var $89=(($88+8)|0);
 /** @type {number} */ var $90=$89;
 /** @type {number} */ var $91=HEAP32[(($90)>>2)];
 /** @type {number} */ var $92=$1;
 /** @type {number} */ var $93=(($92)|0);
 /** @type {number} */ var $94=HEAP32[(($93)>>2)];
 /** @type {number} */ var $95=(($94+12)|0);
 /** @type {number} */ var $96=HEAP32[(($95)>>2)];
 /** @type {number} */ var $97=(($96+($91<<2))|0);
 HEAP32[(($97)>>2)]=$87;
 /** @type {number} */ var $98=$1;
 _luaK_reserveregs($98,1);
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @param {number} $e
 * @return {number}
 */
function _luaK_setoneret($fs,$e){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$fs;
 $2=$e;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=(($3)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=($5|0)==12;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=(($8)|0);
 HEAP32[(($9)>>2)]=6;
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=(($10+8)|0);
 /** @type {number} */ var $12=$11;
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=(($14)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=(($16+12)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=(($18+($13<<2))|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=$20>>>6;
 /** @type {number} */ var $22=$21&255;
 /** @type {number} */ var $23=$2;
 /** @type {number} */ var $24=(($23+8)|0);
 /** @type {number} */ var $25=$24;
 HEAP32[(($25)>>2)]=$22;
 label=6;break;
 case 3: 
 /** @type {number} */ var $27=$2;
 /** @type {number} */ var $28=(($27)|0);
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 /** @type {number} */ var $30=($29|0)==13;
 if($30){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $32=$2;
 /** @type {number} */ var $33=(($32+8)|0);
 /** @type {number} */ var $34=$33;
 /** @type {number} */ var $35=HEAP32[(($34)>>2)];
 /** @type {number} */ var $36=$1;
 /** @type {number} */ var $37=(($36)|0);
 /** @type {number} */ var $38=HEAP32[(($37)>>2)];
 /** @type {number} */ var $39=(($38+12)|0);
 /** @type {number} */ var $40=HEAP32[(($39)>>2)];
 /** @type {number} */ var $41=(($40+($35<<2))|0);
 /** @type {number} */ var $42=HEAP32[(($41)>>2)];
 /** @type {number} */ var $43=$42&8388607;
 /** @type {number} */ var $44=$43|16777216;
 /** @type {number} */ var $45=$2;
 /** @type {number} */ var $46=(($45+8)|0);
 /** @type {number} */ var $47=$46;
 /** @type {number} */ var $48=HEAP32[(($47)>>2)];
 /** @type {number} */ var $49=$1;
 /** @type {number} */ var $50=(($49)|0);
 /** @type {number} */ var $51=HEAP32[(($50)>>2)];
 /** @type {number} */ var $52=(($51+12)|0);
 /** @type {number} */ var $53=HEAP32[(($52)>>2)];
 /** @type {number} */ var $54=(($53+($48<<2))|0);
 HEAP32[(($54)>>2)]=$44;
 /** @type {number} */ var $55=$2;
 /** @type {number} */ var $56=(($55)|0);
 HEAP32[(($56)>>2)]=11;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @param {number} $e
 * @return {number}
 */
function _luaK_dischargevars($fs,$e){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $op;
 $1=$fs;
 $2=$e;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=(($3)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 switch(($5|0)){case 7:{ label=2;break;}case 8:{ label=3;break;}case 9:{ label=4;break;}case 13:case 12:{ label=7;break;}default:{label=8;break;}}break;
 case 2: 
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=(($7)|0);
 HEAP32[(($8)>>2)]=6;
 label=9;break;
 case 3: 
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=$2;
 /** @type {number} */ var $12=(($11+8)|0);
 /** @type {number} */ var $13=$12;
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=_luaK_codeABC($10,5,0,$14,0);
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=(($16+8)|0);
 /** @type {number} */ var $18=$17;
 HEAP32[(($18)>>2)]=$15;
 /** @type {number} */ var $19=$2;
 /** @type {number} */ var $20=(($19)|0);
 HEAP32[(($20)>>2)]=11;
 label=9;break;
 case 4: 
 $op=6;
 /** @type {number} */ var $22=$1;
 /** @type {number} */ var $23=$2;
 /** @type {number} */ var $24=(($23+8)|0);
 /** @type {number} */ var $25=$24;
 /** @type {number} */ var $26=(($25)|0);
 /** @type {number} */ var $27=HEAP16[(($26)>>1)];
 /** @type {number} */ var $28=(($27<<16)>>16);
 _freereg($22,$28);
 /** @type {number} */ var $29=$2;
 /** @type {number} */ var $30=(($29+8)|0);
 /** @type {number} */ var $31=$30;
 /** @type {number} */ var $32=(($31+3)|0);
 /** @type {number} */ var $33=HEAP8[($32)];
 /** @type {number} */ var $34=($33&255);
 /** @type {number} */ var $35=($34|0)==7;
 if($35){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $37=$1;
 /** @type {number} */ var $38=$2;
 /** @type {number} */ var $39=(($38+8)|0);
 /** @type {number} */ var $40=$39;
 /** @type {number} */ var $41=(($40+2)|0);
 /** @type {number} */ var $42=HEAP8[($41)];
 /** @type {number} */ var $43=($42&255);
 _freereg($37,$43);
 $op=7;
 label=6;break;
 case 6: 
 /** @type {number} */ var $45=$1;
 /** @type {number} */ var $46=$op;
 /** @type {number} */ var $47=$2;
 /** @type {number} */ var $48=(($47+8)|0);
 /** @type {number} */ var $49=$48;
 /** @type {number} */ var $50=(($49+2)|0);
 /** @type {number} */ var $51=HEAP8[($50)];
 /** @type {number} */ var $52=($51&255);
 /** @type {number} */ var $53=$2;
 /** @type {number} */ var $54=(($53+8)|0);
 /** @type {number} */ var $55=$54;
 /** @type {number} */ var $56=(($55)|0);
 /** @type {number} */ var $57=HEAP16[(($56)>>1)];
 /** @type {number} */ var $58=(($57<<16)>>16);
 /** @type {number} */ var $59=_luaK_codeABC($45,$46,0,$52,$58);
 /** @type {number} */ var $60=$2;
 /** @type {number} */ var $61=(($60+8)|0);
 /** @type {number} */ var $62=$61;
 HEAP32[(($62)>>2)]=$59;
 /** @type {number} */ var $63=$2;
 /** @type {number} */ var $64=(($63)|0);
 HEAP32[(($64)>>2)]=11;
 label=9;break;
 case 7: 
 /** @type {number} */ var $66=$1;
 /** @type {number} */ var $67=$2;
 _luaK_setoneret($66,$67);
 label=9;break;
 case 8: 
 label=9;break;
 case 9: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @param {number} $e
 * @return {number}
 */
function _luaK_exp2nextreg($fs,$e){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$fs;
 $2=$e;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 _luaK_dischargevars($3,$4);
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=$2;
 _freeexp($5,$6);
 /** @type {number} */ var $7=$1;
 _luaK_reserveregs($7,1);
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=(($10+48)|0);
 /** @type {number} */ var $12=HEAP8[($11)];
 /** @type {number} */ var $13=($12&255);
 /** @type {number} */ var $14=((($13)-(1))|0);
 _exp2reg($8,$9,$14);
 STACKTOP=sp;return;
}
/**
 * @param {number} $fs
 * @param {number} $e
 * @return {number}
 */
function _luaK_exp2anyreg($fs,$e){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $2=$fs;
 $3=$e;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=$3;
 _luaK_dischargevars($4,$5);
 /** @type {number} */ var $6=$3;
 /** @type {number} */ var $7=(($6)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=($8|0)==6;
 if($9){label=2;break;}else{label=7;break;}
 case 2: 
 /** @type {number} */ var $11=$3;
 /** @type {number} */ var $12=(($11+16)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=$3;
 /** @type {number} */ var $15=(($14+20)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=($13|0)!=($16|0);
 if($17){label=4;break;}else{label=3;break;}
 case 3: 
 /** @type {number} */ var $19=$3;
 /** @type {number} */ var $20=(($19+8)|0);
 /** @type {number} */ var $21=$20;
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 $1=$22;
 label=8;break;
 case 4: 
 /** @type {number} */ var $24=$3;
 /** @type {number} */ var $25=(($24+8)|0);
 /** @type {number} */ var $26=$25;
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=$2;
 /** @type {number} */ var $29=(($28+46)|0);
 /** @type {number} */ var $30=HEAP8[($29)];
 /** @type {number} */ var $31=($30&255);
 /** @type {number} */ var $32=($27|0)>=($31|0);
 if($32){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $34=$2;
 /** @type {number} */ var $35=$3;
 /** @type {number} */ var $36=$3;
 /** @type {number} */ var $37=(($36+8)|0);
 /** @type {number} */ var $38=$37;
 /** @type {number} */ var $39=HEAP32[(($38)>>2)];
 _exp2reg($34,$35,$39);
 /** @type {number} */ var $40=$3;
 /** @type {number} */ var $41=(($40+8)|0);
 /** @type {number} */ var $42=$41;
 /** @type {number} */ var $43=HEAP32[(($42)>>2)];
 $1=$43;
 label=8;break;
 case 6: 
 label=7;break;
 case 7: 
 /** @type {number} */ var $46=$2;
 /** @type {number} */ var $47=$3;
 _luaK_exp2nextreg($46,$47);
 /** @type {number} */ var $48=$3;
 /** @type {number} */ var $49=(($48+8)|0);
 /** @type {number} */ var $50=$49;
 /** @type {number} */ var $51=HEAP32[(($50)>>2)];
 $1=$51;
 label=8;break;
 case 8: 
 /** @type {number} */ var $53=$1;
 STACKTOP=sp;return $53;
 }
}
/**
 * @param {number} $fs
 * @param {number} $e
 * @return {number}
 */
function _luaK_exp2anyregup($fs,$e){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$fs;
 $2=$e;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=(($3)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=($5|0)!=8;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=(($8+16)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=$2;
 /** @type {number} */ var $12=(($11+20)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=($10|0)!=($13|0);
 if($14){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=$2;
 /** @type {number} */ var $18=_luaK_exp2anyreg($16,$17);
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @param {number} $e
 * @return {number}
 */
function _luaK_exp2val($fs,$e){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$fs;
 $2=$e;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=(($3+16)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=(($6+20)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=($5|0)!=($8|0);
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=_luaK_exp2anyreg($11,$12);
 label=4;break;
 case 3: 
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=$2;
 _luaK_dischargevars($15,$16);
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @param {number} $e
 * @return {number}
 */
function _luaK_exp2RK($fs,$e){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $2=$fs;
 $3=$e;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=$3;
 _luaK_exp2val($4,$5);
 /** @type {number} */ var $6=$3;
 /** @type {number} */ var $7=(($6)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 switch(($8|0)){case 2:case 3:case 1:{ label=2;break;}case 5:{ label=8;break;}case 4:{ label=9;break;}default:{label=12;break;}}break;
 case 2: 
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=(($10+32)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=($12|0)<=255;
 if($13){label=3;break;}else{label=7;break;}
 case 3: 
 /** @type {number} */ var $15=$3;
 /** @type {number} */ var $16=(($15)|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=($17|0)==1;
 if($18){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $20=$2;
 /** @type {number} */ var $21=_nilK($20);
 var $31=$21;label=6;break;
 case 5: 
 /** @type {number} */ var $23=$2;
 /** @type {number} */ var $24=$3;
 /** @type {number} */ var $25=(($24)|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 /** @type {number} */ var $27=($26|0)==2;
 /** @type {number} */ var $28=($27&1);
 /** @type {number} */ var $29=_boolK($23,$28);
 var $31=$29;label=6;break;
 case 6: 
 var $31;
 /** @type {number} */ var $32=$3;
 /** @type {number} */ var $33=(($32+8)|0);
 /** @type {number} */ var $34=$33;
 HEAP32[(($34)>>2)]=$31;
 /** @type {number} */ var $35=$3;
 /** @type {number} */ var $36=(($35)|0);
 HEAP32[(($36)>>2)]=4;
 /** @type {number} */ var $37=$3;
 /** @type {number} */ var $38=(($37+8)|0);
 /** @type {number} */ var $39=$38;
 /** @type {number} */ var $40=HEAP32[(($39)>>2)];
 /** @type {number} */ var $41=$40|256;
 $1=$41;
 label=14;break;
 case 7: 
 label=13;break;
 case 8: 
 /** @type {number} */ var $44=$2;
 /** @type {number} */ var $45=$3;
 /** @type {number} */ var $46=(($45+8)|0);
 /** @type {number} */ var $47=$46;
 /** @type {number} */ var $48=HEAPF64[(($47)>>3)];
 /** @type {number} */ var $49=_luaK_numberK($44,$48);
 /** @type {number} */ var $50=$3;
 /** @type {number} */ var $51=(($50+8)|0);
 /** @type {number} */ var $52=$51;
 HEAP32[(($52)>>2)]=$49;
 /** @type {number} */ var $53=$3;
 /** @type {number} */ var $54=(($53)|0);
 HEAP32[(($54)>>2)]=4;
 label=9;break;
 case 9: 
 /** @type {number} */ var $56=$3;
 /** @type {number} */ var $57=(($56+8)|0);
 /** @type {number} */ var $58=$57;
 /** @type {number} */ var $59=HEAP32[(($58)>>2)];
 /** @type {number} */ var $60=($59|0)<=255;
 if($60){label=10;break;}else{label=11;break;}
 case 10: 
 /** @type {number} */ var $62=$3;
 /** @type {number} */ var $63=(($62+8)|0);
 /** @type {number} */ var $64=$63;
 /** @type {number} */ var $65=HEAP32[(($64)>>2)];
 /** @type {number} */ var $66=$65|256;
 $1=$66;
 label=14;break;
 case 11: 
 label=13;break;
 case 12: 
 label=13;break;
 case 13: 
 /** @type {number} */ var $70=$2;
 /** @type {number} */ var $71=$3;
 /** @type {number} */ var $72=_luaK_exp2anyreg($70,$71);
 $1=$72;
 label=14;break;
 case 14: 
 /** @type {number} */ var $74=$1;
 STACKTOP=sp;return $74;
 }
}
/**
 * @param {number} $fs
 * @param {number} $var
 * @param {number} $ex
 * @return {number}
 */
function _luaK_storevar($fs,$var,$ex){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $e;
 /** @type {number} */ var $op;
 /** @type {number} */ var $e1;
 $1=$fs;
 $2=$var;
 $3=$ex;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=(($4)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 if(($6|0)==7){ label=2;break;}else if(($6|0)==8){ label=3;break;}else if(($6|0)==9){ label=4;break;}else{label=5;break;}
 case 2: 
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=$3;
 _freeexp($8,$9);
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=$3;
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=(($12+8)|0);
 /** @type {number} */ var $14=$13;
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 _exp2reg($10,$11,$15);
 label=7;break;
 case 3: 
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=$3;
 /** @type {number} */ var $19=_luaK_exp2anyreg($17,$18);
 $e=$19;
 /** @type {number} */ var $20=$1;
 /** @type {number} */ var $21=$e;
 /** @type {number} */ var $22=$2;
 /** @type {number} */ var $23=(($22+8)|0);
 /** @type {number} */ var $24=$23;
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=_luaK_codeABC($20,9,$21,$25,0);
 label=6;break;
 case 4: 
 /** @type {number} */ var $28=$2;
 /** @type {number} */ var $29=(($28+8)|0);
 /** @type {number} */ var $30=$29;
 /** @type {number} */ var $31=(($30+3)|0);
 /** @type {number} */ var $32=HEAP8[($31)];
 /** @type {number} */ var $33=($32&255);
 /** @type {number} */ var $34=($33|0)==7;
 /** @type {number} */ var $35=($34?10:8);
 $op=$35;
 /** @type {number} */ var $36=$1;
 /** @type {number} */ var $37=$3;
 /** @type {number} */ var $38=_luaK_exp2RK($36,$37);
 $e1=$38;
 /** @type {number} */ var $39=$1;
 /** @type {number} */ var $40=$op;
 /** @type {number} */ var $41=$2;
 /** @type {number} */ var $42=(($41+8)|0);
 /** @type {number} */ var $43=$42;
 /** @type {number} */ var $44=(($43+2)|0);
 /** @type {number} */ var $45=HEAP8[($44)];
 /** @type {number} */ var $46=($45&255);
 /** @type {number} */ var $47=$2;
 /** @type {number} */ var $48=(($47+8)|0);
 /** @type {number} */ var $49=$48;
 /** @type {number} */ var $50=(($49)|0);
 /** @type {number} */ var $51=HEAP16[(($50)>>1)];
 /** @type {number} */ var $52=(($51<<16)>>16);
 /** @type {number} */ var $53=$e1;
 /** @type {number} */ var $54=_luaK_codeABC($39,$40,$46,$52,$53);
 label=6;break;
 case 5: 
 label=6;break;
 case 6: 
 /** @type {number} */ var $57=$1;
 /** @type {number} */ var $58=$3;
 _freeexp($57,$58);
 label=7;break;
 case 7: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @param {number} $e
 * @param {number} $key
 * @return {number}
 */
function _luaK_self($fs,$e,$key){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $ereg;
 $1=$fs;
 $2=$e;
 $3=$key;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=_luaK_exp2anyreg($4,$5);
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=(($7+8)|0);
 /** @type {number} */ var $9=$8;
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 $ereg=$10;
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=$2;
 _freeexp($11,$12);
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=(($13+48)|0);
 /** @type {number} */ var $15=HEAP8[($14)];
 /** @type {number} */ var $16=($15&255);
 /** @type {number} */ var $17=$2;
 /** @type {number} */ var $18=(($17+8)|0);
 /** @type {number} */ var $19=$18;
 HEAP32[(($19)>>2)]=$16;
 /** @type {number} */ var $20=$2;
 /** @type {number} */ var $21=(($20)|0);
 HEAP32[(($21)>>2)]=6;
 /** @type {number} */ var $22=$1;
 _luaK_reserveregs($22,2);
 /** @type {number} */ var $23=$1;
 /** @type {number} */ var $24=$2;
 /** @type {number} */ var $25=(($24+8)|0);
 /** @type {number} */ var $26=$25;
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=$ereg;
 /** @type {number} */ var $29=$1;
 /** @type {number} */ var $30=$3;
 /** @type {number} */ var $31=_luaK_exp2RK($29,$30);
 /** @type {number} */ var $32=_luaK_codeABC($23,12,$27,$28,$31);
 /** @type {number} */ var $33=$1;
 /** @type {number} */ var $34=$3;
 _freeexp($33,$34);
 STACKTOP=sp;return;
}
/**
 * @param {number} $fs
 * @param {number} $e
 * @return {number}
 */
function _luaK_goiftrue($fs,$e){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $pc;
 $1=$fs;
 $2=$e;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 _luaK_dischargevars($3,$4);
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=(($5)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 if(($7|0)==10){ label=2;break;}else if(($7|0)==4|($7|0)==5|($7|0)==2){ label=3;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=$2;
 _invertjump($9,$10);
 /** @type {number} */ var $11=$2;
 /** @type {number} */ var $12=(($11+8)|0);
 /** @type {number} */ var $13=$12;
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 $pc=$14;
 label=5;break;
 case 3: 
 $pc=-1;
 label=5;break;
 case 4: 
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=$2;
 /** @type {number} */ var $19=_jumponcond($17,$18,0);
 $pc=$19;
 label=5;break;
 case 5: 
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=$2;
 /** @type {number} */ var $23=(($22+20)|0);
 /** @type {number} */ var $24=$pc;
 _luaK_concat($21,$23,$24);
 /** @type {number} */ var $25=$1;
 /** @type {number} */ var $26=$2;
 /** @type {number} */ var $27=(($26+16)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 _luaK_patchtohere($25,$28);
 /** @type {number} */ var $29=$2;
 /** @type {number} */ var $30=(($29+16)|0);
 HEAP32[(($30)>>2)]=-1;
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @param {number} $e
 * @return {number}
 */
function _luaK_goiffalse($fs,$e){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $pc;
 $1=$fs;
 $2=$e;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 _luaK_dischargevars($3,$4);
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=(($5)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 if(($7|0)==10){ label=2;break;}else if(($7|0)==1|($7|0)==3){ label=3;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=(($9+8)|0);
 /** @type {number} */ var $11=$10;
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 $pc=$12;
 label=5;break;
 case 3: 
 $pc=-1;
 label=5;break;
 case 4: 
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=_jumponcond($15,$16,1);
 $pc=$17;
 label=5;break;
 case 5: 
 /** @type {number} */ var $19=$1;
 /** @type {number} */ var $20=$2;
 /** @type {number} */ var $21=(($20+16)|0);
 /** @type {number} */ var $22=$pc;
 _luaK_concat($19,$21,$22);
 /** @type {number} */ var $23=$1;
 /** @type {number} */ var $24=$2;
 /** @type {number} */ var $25=(($24+20)|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 _luaK_patchtohere($23,$26);
 /** @type {number} */ var $27=$2;
 /** @type {number} */ var $28=(($27+20)|0);
 HEAP32[(($28)>>2)]=-1;
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @param {number} $t
 * @param {number} $k
 * @return {number}
 */
function _luaK_indexed($fs,$t,$k){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$fs;
 $2=$t;
 $3=$k;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=(($4+8)|0);
 /** @type {number} */ var $6=$5;
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=(($7)&255);
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=(($9+8)|0);
 /** @type {number} */ var $11=$10;
 /** @type {number} */ var $12=(($11+2)|0);
 HEAP8[($12)]=$8;
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=$3;
 /** @type {number} */ var $15=_luaK_exp2RK($13,$14);
 /** @type {number} */ var $16=(($15)&65535);
 /** @type {number} */ var $17=$2;
 /** @type {number} */ var $18=(($17+8)|0);
 /** @type {number} */ var $19=$18;
 /** @type {number} */ var $20=(($19)|0);
 HEAP16[(($20)>>1)]=$16;
 /** @type {number} */ var $21=$2;
 /** @type {number} */ var $22=(($21)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 /** @type {number} */ var $24=($23|0)==8;
 /** @type {number} */ var $25=($24?8:7);
 /** @type {number} */ var $26=(($25)&255);
 /** @type {number} */ var $27=$2;
 /** @type {number} */ var $28=(($27+8)|0);
 /** @type {number} */ var $29=$28;
 /** @type {number} */ var $30=(($29+3)|0);
 HEAP8[($30)]=$26;
 /** @type {number} */ var $31=$2;
 /** @type {number} */ var $32=(($31)|0);
 HEAP32[(($32)>>2)]=9;
 STACKTOP=sp;return;
}
/**
 * @param {number} $fs
 * @param {number} $op
 * @param {number} $e
 * @param {number} $line
 * @return {number}
 */
function _luaK_prefix($fs,$op,$e,$line){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $e2=sp;
 $1=$fs;
 $2=$op;
 $3=$e;
 $4=$line;
 /** @type {number} */ var $5=(($e2+20)|0);
 HEAP32[(($5)>>2)]=-1;
 /** @type {number} */ var $6=(($e2+16)|0);
 HEAP32[(($6)>>2)]=-1;
 /** @type {number} */ var $7=(($e2)|0);
 HEAP32[(($7)>>2)]=5;
 /** @type {number} */ var $8=(($e2+8)|0);
 /** @type {number} */ var $9=$8;
 HEAPF64[(($9)>>3)]=0;
 /** @type {number} */ var $10=$2;
 if(($10|0)==0){ label=2;break;}else if(($10|0)==1){ label=6;break;}else if(($10|0)==2){ label=7;break;}else{label=8;break;}
 case 2: 
 /** @type {number} */ var $12=$3;
 /** @type {number} */ var $13=_isnumeral($12);
 /** @type {number} */ var $14=($13|0)!=0;
 if($14){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $16=$3;
 /** @type {number} */ var $17=(($16+8)|0);
 /** @type {number} */ var $18=$17;
 /** @type {number} */ var $19=HEAPF64[(($18)>>3)];
 /** @type {number} */ var $20=((-.0))-($19);
 /** @type {number} */ var $21=$3;
 /** @type {number} */ var $22=(($21+8)|0);
 /** @type {number} */ var $23=$22;
 HEAPF64[(($23)>>3)]=$20;
 label=5;break;
 case 4: 
 /** @type {number} */ var $25=$1;
 /** @type {number} */ var $26=$3;
 /** @type {number} */ var $27=_luaK_exp2anyreg($25,$26);
 /** @type {number} */ var $28=$1;
 /** @type {number} */ var $29=$3;
 /** @type {number} */ var $30=$4;
 _codearith($28,19,$29,$e2,$30);
 label=5;break;
 case 5: 
 label=9;break;
 case 6: 
 /** @type {number} */ var $33=$1;
 /** @type {number} */ var $34=$3;
 _codenot($33,$34);
 label=9;break;
 case 7: 
 /** @type {number} */ var $36=$1;
 /** @type {number} */ var $37=$3;
 /** @type {number} */ var $38=_luaK_exp2anyreg($36,$37);
 /** @type {number} */ var $39=$1;
 /** @type {number} */ var $40=$3;
 /** @type {number} */ var $41=$4;
 _codearith($39,21,$40,$e2,$41);
 label=9;break;
 case 8: 
 label=9;break;
 case 9: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @param {number} $op
 * @param {number} $v
 * @return {number}
 */
function _luaK_infix($fs,$op,$v){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$fs;
 $2=$op;
 $3=$v;
 /** @type {number} */ var $4=$2;
 switch(($4|0)){case 13:{ label=2;break;}case 14:{ label=3;break;}case 6:{ label=4;break;}case 0:case 1:case 2:case 3:case 4:case 5:{ label=5;break;}default:{label=8;break;}}break;
 case 2: 
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=$3;
 _luaK_goiftrue($6,$7);
 label=9;break;
 case 3: 
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=$3;
 _luaK_goiffalse($9,$10);
 label=9;break;
 case 4: 
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=$3;
 _luaK_exp2nextreg($12,$13);
 label=9;break;
 case 5: 
 /** @type {number} */ var $15=$3;
 /** @type {number} */ var $16=_isnumeral($15);
 /** @type {number} */ var $17=($16|0)!=0;
 if($17){label=7;break;}else{label=6;break;}
 case 6: 
 /** @type {number} */ var $19=$1;
 /** @type {number} */ var $20=$3;
 /** @type {number} */ var $21=_luaK_exp2RK($19,$20);
 label=7;break;
 case 7: 
 label=9;break;
 case 8: 
 /** @type {number} */ var $24=$1;
 /** @type {number} */ var $25=$3;
 /** @type {number} */ var $26=_luaK_exp2RK($24,$25);
 label=9;break;
 case 9: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @param {number} $op
 * @param {number} $e1
 * @param {number} $e2
 * @param {number} $line
 * @return {number}
 */
function _luaK_posfix($fs,$op,$e1,$e2,$line){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 $1=$fs;
 $2=$op;
 $3=$e1;
 $4=$e2;
 $5=$line;
 /** @type {number} */ var $6=$2;
 switch(($6|0)){case 7:case 8:case 9:{ label=10;break;}case 10:case 11:case 12:{ label=11;break;}case 13:{ label=2;break;}case 14:{ label=3;break;}case 6:{ label=4;break;}case 0:case 1:case 2:case 3:case 4:case 5:{ label=9;break;}default:{label=12;break;}}break;
 case 2: 
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=$4;
 _luaK_dischargevars($8,$9);
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=$4;
 /** @type {number} */ var $12=(($11+20)|0);
 /** @type {number} */ var $13=$3;
 /** @type {number} */ var $14=(($13+20)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 _luaK_concat($10,$12,$15);
 /** @type {number} */ var $16=$3;
 /** @type {number} */ var $17=$4;
 /** @type {number} */ var $18=$16;
 /** @type {number} */ var $19=$17;
 HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($18)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];HEAP32[((($18)+(12))>>2)]=HEAP32[((($19)+(12))>>2)];HEAP32[((($18)+(16))>>2)]=HEAP32[((($19)+(16))>>2)];HEAP32[((($18)+(20))>>2)]=HEAP32[((($19)+(20))>>2)];
 label=13;break;
 case 3: 
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=$4;
 _luaK_dischargevars($21,$22);
 /** @type {number} */ var $23=$1;
 /** @type {number} */ var $24=$4;
 /** @type {number} */ var $25=(($24+16)|0);
 /** @type {number} */ var $26=$3;
 /** @type {number} */ var $27=(($26+16)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 _luaK_concat($23,$25,$28);
 /** @type {number} */ var $29=$3;
 /** @type {number} */ var $30=$4;
 /** @type {number} */ var $31=$29;
 /** @type {number} */ var $32=$30;
 HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[((($31)+(4))>>2)]=HEAP32[((($32)+(4))>>2)];HEAP32[((($31)+(8))>>2)]=HEAP32[((($32)+(8))>>2)];HEAP32[((($31)+(12))>>2)]=HEAP32[((($32)+(12))>>2)];HEAP32[((($31)+(16))>>2)]=HEAP32[((($32)+(16))>>2)];HEAP32[((($31)+(20))>>2)]=HEAP32[((($32)+(20))>>2)];
 label=13;break;
 case 4: 
 /** @type {number} */ var $34=$1;
 /** @type {number} */ var $35=$4;
 _luaK_exp2val($34,$35);
 /** @type {number} */ var $36=$4;
 /** @type {number} */ var $37=(($36)|0);
 /** @type {number} */ var $38=HEAP32[(($37)>>2)];
 /** @type {number} */ var $39=($38|0)==11;
 if($39){label=5;break;}else{label=7;break;}
 case 5: 
 /** @type {number} */ var $41=$4;
 /** @type {number} */ var $42=(($41+8)|0);
 /** @type {number} */ var $43=$42;
 /** @type {number} */ var $44=HEAP32[(($43)>>2)];
 /** @type {number} */ var $45=$1;
 /** @type {number} */ var $46=(($45)|0);
 /** @type {number} */ var $47=HEAP32[(($46)>>2)];
 /** @type {number} */ var $48=(($47+12)|0);
 /** @type {number} */ var $49=HEAP32[(($48)>>2)];
 /** @type {number} */ var $50=(($49+($44<<2))|0);
 /** @type {number} */ var $51=HEAP32[(($50)>>2)];
 /** @type {number} */ var $52=$51>>>0;
 /** @type {number} */ var $53=$52&63;
 /** @type {number} */ var $54=($53|0)==22;
 if($54){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $56=$1;
 /** @type {number} */ var $57=$3;
 _freeexp($56,$57);
 /** @type {number} */ var $58=$4;
 /** @type {number} */ var $59=(($58+8)|0);
 /** @type {number} */ var $60=$59;
 /** @type {number} */ var $61=HEAP32[(($60)>>2)];
 /** @type {number} */ var $62=$1;
 /** @type {number} */ var $63=(($62)|0);
 /** @type {number} */ var $64=HEAP32[(($63)>>2)];
 /** @type {number} */ var $65=(($64+12)|0);
 /** @type {number} */ var $66=HEAP32[(($65)>>2)];
 /** @type {number} */ var $67=(($66+($61<<2))|0);
 /** @type {number} */ var $68=HEAP32[(($67)>>2)];
 /** @type {number} */ var $69=$68&8388607;
 /** @type {number} */ var $70=$3;
 /** @type {number} */ var $71=(($70+8)|0);
 /** @type {number} */ var $72=$71;
 /** @type {number} */ var $73=HEAP32[(($72)>>2)];
 /** @type {number} */ var $74=$73<<23;
 /** @type {number} */ var $75=$74&-8388608;
 /** @type {number} */ var $76=$69|$75;
 /** @type {number} */ var $77=$4;
 /** @type {number} */ var $78=(($77+8)|0);
 /** @type {number} */ var $79=$78;
 /** @type {number} */ var $80=HEAP32[(($79)>>2)];
 /** @type {number} */ var $81=$1;
 /** @type {number} */ var $82=(($81)|0);
 /** @type {number} */ var $83=HEAP32[(($82)>>2)];
 /** @type {number} */ var $84=(($83+12)|0);
 /** @type {number} */ var $85=HEAP32[(($84)>>2)];
 /** @type {number} */ var $86=(($85+($80<<2))|0);
 HEAP32[(($86)>>2)]=$76;
 /** @type {number} */ var $87=$3;
 /** @type {number} */ var $88=(($87)|0);
 HEAP32[(($88)>>2)]=11;
 /** @type {number} */ var $89=$4;
 /** @type {number} */ var $90=(($89+8)|0);
 /** @type {number} */ var $91=$90;
 /** @type {number} */ var $92=HEAP32[(($91)>>2)];
 /** @type {number} */ var $93=$3;
 /** @type {number} */ var $94=(($93+8)|0);
 /** @type {number} */ var $95=$94;
 HEAP32[(($95)>>2)]=$92;
 label=8;break;
 case 7: 
 /** @type {number} */ var $97=$1;
 /** @type {number} */ var $98=$4;
 _luaK_exp2nextreg($97,$98);
 /** @type {number} */ var $99=$1;
 /** @type {number} */ var $100=$3;
 /** @type {number} */ var $101=$4;
 /** @type {number} */ var $102=$5;
 _codearith($99,22,$100,$101,$102);
 label=8;break;
 case 8: 
 label=13;break;
 case 9: 
 /** @type {number} */ var $105=$1;
 /** @type {number} */ var $106=$2;
 /** @type {number} */ var $107=(($106)|0);
 /** @type {number} */ var $108=((($107)+(13))|0);
 /** @type {number} */ var $109=$3;
 /** @type {number} */ var $110=$4;
 /** @type {number} */ var $111=$5;
 _codearith($105,$108,$109,$110,$111);
 label=13;break;
 case 10: 
 /** @type {number} */ var $113=$1;
 /** @type {number} */ var $114=$2;
 /** @type {number} */ var $115=((($114)-(7))|0);
 /** @type {number} */ var $116=((($115)+(24))|0);
 /** @type {number} */ var $117=$3;
 /** @type {number} */ var $118=$4;
 _codecomp($113,$116,1,$117,$118);
 label=13;break;
 case 11: 
 /** @type {number} */ var $120=$1;
 /** @type {number} */ var $121=$2;
 /** @type {number} */ var $122=((($121)-(10))|0);
 /** @type {number} */ var $123=((($122)+(24))|0);
 /** @type {number} */ var $124=$3;
 /** @type {number} */ var $125=$4;
 _codecomp($120,$123,0,$124,$125);
 label=13;break;
 case 12: 
 label=13;break;
 case 13: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @param {number} $line
 * @return {number}
 */
function _luaK_fixline($fs,$line){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$fs;
 $2=$line;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+20)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=((($6)-(1))|0);
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=(($8)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=(($10+20)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=(($12+($7<<2))|0);
 HEAP32[(($13)>>2)]=$3;
 STACKTOP=sp;return;
}
/**
 * @param {number} $fs
 * @param {number} $base
 * @param {number} $nelems
 * @param {number} $tostore
 * @return {number}
 */
function _luaK_setlist($fs,$base,$nelems,$tostore){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $c;
 /** @type {number} */ var $b;
 $1=$fs;
 $2=$base;
 $3=$nelems;
 $4=$tostore;
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=((($5)-(1))|0);
 /** @type {number} */ var $7=(((($6|0))/(50))&-1);
 /** @type {number} */ var $8=((($7)+(1))|0);
 $c=$8;
 /** @type {number} */ var $9=$4;
 /** @type {number} */ var $10=($9|0)==-1;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 var $15=0;label=4;break;
 case 3: 
 /** @type {number} */ var $13=$4;
 var $15=$13;label=4;break;
 case 4: 
 var $15;
 $b=$15;
 /** @type {number} */ var $16=$c;
 /** @type {number} */ var $17=($16|0)<=511;
 if($17){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $19=$1;
 /** @type {number} */ var $20=$2;
 /** @type {number} */ var $21=$b;
 /** @type {number} */ var $22=$c;
 /** @type {number} */ var $23=_luaK_codeABC($19,36,$20,$21,$22);
 label=10;break;
 case 6: 
 /** @type {number} */ var $25=$c;
 /** @type {number} */ var $26=($25|0)<=67108863;
 if($26){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $28=$1;
 /** @type {number} */ var $29=$2;
 /** @type {number} */ var $30=$b;
 /** @type {number} */ var $31=_luaK_codeABC($28,36,$29,$30,0);
 /** @type {number} */ var $32=$1;
 /** @type {number} */ var $33=$c;
 /** @type {number} */ var $34=_codeextraarg($32,$33);
 label=9;break;
 case 8: 
 /** @type {number} */ var $36=$1;
 /** @type {number} */ var $37=(($36+12)|0);
 /** @type {number} */ var $38=HEAP32[(($37)>>2)];
 _luaX_syntaxerror($38,11032);
 case 9: 
 label=10;break;
 case 10: 
 /** @type {number} */ var $41=$2;
 /** @type {number} */ var $42=((($41)+(1))|0);
 /** @type {number} */ var $43=(($42)&255);
 /** @type {number} */ var $44=$1;
 /** @type {number} */ var $45=(($44+48)|0);
 HEAP8[($45)]=$43;
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @param {number} $i
 * @return {number}
 */
function _luaK_code($fs,$i){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $f;
 $1=$fs;
 $2=$i;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $f=$5;
 /** @type {number} */ var $6=$1;
 _dischargejpc($6);
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=(($7+20)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=((($9)+(1))|0);
 /** @type {number} */ var $11=$f;
 /** @type {number} */ var $12=(($11+48)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=($10|0)>($13|0);
 if($14){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=(($16+12)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=(($18+52)|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=$f;
 /** @type {number} */ var $22=(($21+12)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 /** @type {number} */ var $24=$23;
 /** @type {number} */ var $25=$f;
 /** @type {number} */ var $26=(($25+48)|0);
 /** @type {number} */ var $27=_luaM_growaux_($20,$24,$26,4,2147483645,7312);
 /** @type {number} */ var $28=$27;
 /** @type {number} */ var $29=$f;
 /** @type {number} */ var $30=(($29+12)|0);
 HEAP32[(($30)>>2)]=$28;
 label=3;break;
 case 3: 
 /** @type {number} */ var $32=$2;
 /** @type {number} */ var $33=$1;
 /** @type {number} */ var $34=(($33+20)|0);
 /** @type {number} */ var $35=HEAP32[(($34)>>2)];
 /** @type {number} */ var $36=$f;
 /** @type {number} */ var $37=(($36+12)|0);
 /** @type {number} */ var $38=HEAP32[(($37)>>2)];
 /** @type {number} */ var $39=(($38+($35<<2))|0);
 HEAP32[(($39)>>2)]=$32;
 /** @type {number} */ var $40=$1;
 /** @type {number} */ var $41=(($40+20)|0);
 /** @type {number} */ var $42=HEAP32[(($41)>>2)];
 /** @type {number} */ var $43=((($42)+(1))|0);
 /** @type {number} */ var $44=$f;
 /** @type {number} */ var $45=(($44+52)|0);
 /** @type {number} */ var $46=HEAP32[(($45)>>2)];
 /** @type {number} */ var $47=($43|0)>($46|0);
 if($47){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $49=$1;
 /** @type {number} */ var $50=(($49+12)|0);
 /** @type {number} */ var $51=HEAP32[(($50)>>2)];
 /** @type {number} */ var $52=(($51+52)|0);
 /** @type {number} */ var $53=HEAP32[(($52)>>2)];
 /** @type {number} */ var $54=$f;
 /** @type {number} */ var $55=(($54+20)|0);
 /** @type {number} */ var $56=HEAP32[(($55)>>2)];
 /** @type {number} */ var $57=$56;
 /** @type {number} */ var $58=$f;
 /** @type {number} */ var $59=(($58+52)|0);
 /** @type {number} */ var $60=_luaM_growaux_($53,$57,$59,4,2147483645,7312);
 /** @type {number} */ var $61=$60;
 /** @type {number} */ var $62=$f;
 /** @type {number} */ var $63=(($62+20)|0);
 HEAP32[(($63)>>2)]=$61;
 label=5;break;
 case 5: 
 /** @type {number} */ var $65=$1;
 /** @type {number} */ var $66=(($65+12)|0);
 /** @type {number} */ var $67=HEAP32[(($66)>>2)];
 /** @type {number} */ var $68=(($67+8)|0);
 /** @type {number} */ var $69=HEAP32[(($68)>>2)];
 /** @type {number} */ var $70=$1;
 /** @type {number} */ var $71=(($70+20)|0);
 /** @type {number} */ var $72=HEAP32[(($71)>>2)];
 /** @type {number} */ var $73=$f;
 /** @type {number} */ var $74=(($73+20)|0);
 /** @type {number} */ var $75=HEAP32[(($74)>>2)];
 /** @type {number} */ var $76=(($75+($72<<2))|0);
 HEAP32[(($76)>>2)]=$69;
 /** @type {number} */ var $77=$1;
 /** @type {number} */ var $78=(($77+20)|0);
 /** @type {number} */ var $79=HEAP32[(($78)>>2)];
 /** @type {number} */ var $80=((($79)+(1))|0);
 HEAP32[(($78)>>2)]=$80;
 STACKTOP=sp;return $79;
 }
}
/**
 * @param {number} $fs
 * @param {number} $pc
 * @return {number}
 */
function _getjump($fs,$pc){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $offset;
 $2=$fs;
 $3=$pc;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=(($5)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=(($7+12)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=(($9+($4<<2))|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=$11>>>14;
 /** @type {number} */ var $13=$12&262143;
 /** @type {number} */ var $14=((($13)-(131071))|0);
 $offset=$14;
 /** @type {number} */ var $15=$offset;
 /** @type {number} */ var $16=($15|0)==-1;
 if($16){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=4;break;
 case 3: 
 /** @type {number} */ var $19=$3;
 /** @type {number} */ var $20=((($19)+(1))|0);
 /** @type {number} */ var $21=$offset;
 /** @type {number} */ var $22=((($20)+($21))|0);
 $1=$22;
 label=4;break;
 case 4: 
 /** @type {number} */ var $24=$1;
 STACKTOP=sp;return $24;
 }
}
/**
 * @param {number} $fs
 * @param {number} $pc
 * @param {number} $dest
 * @return {number}
 */
function _fixjump($fs,$pc,$dest){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $jmp;
 /** @type {number} */ var $offset;
 $1=$fs;
 $2=$pc;
 $3=$dest;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($5)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=(($7+12)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=(($9+($4<<2))|0);
 $jmp=$10;
 /** @type {number} */ var $11=$3;
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=((($12)+(1))|0);
 /** @type {number} */ var $14=((($11)-($13))|0);
 $offset=$14;
 /** @type {number} */ var $15=$offset;
 /** @type {number} */ var $16=Math_abs($15);
 /** @type {number} */ var $17=($16|0)>131071;
 if($17){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $19=$1;
 /** @type {number} */ var $20=(($19+12)|0);
 /** @type {number} */ var $21=HEAP32[(($20)>>2)];
 _luaX_syntaxerror($21,5792);
 case 3: 
 /** @type {number} */ var $23=$jmp;
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=$24&16383;
 /** @type {number} */ var $26=$offset;
 /** @type {number} */ var $27=((($26)+(131071))|0);
 /** @type {number} */ var $28=$27<<14;
 /** @type {number} */ var $29=$28&-16384;
 /** @type {number} */ var $30=$25|$29;
 /** @type {number} */ var $31=$jmp;
 HEAP32[(($31)>>2)]=$30;
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @param {number} $list
 * @param {number} $vtarget
 * @param {number} $reg
 * @param {number} $dtarget
 * @return {number}
 */
function _patchlistaux($fs,$list,$vtarget,$reg,$dtarget){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 /** @type {number} */ var $next;
 $1=$fs;
 $2=$list;
 $3=$vtarget;
 $4=$reg;
 $5=$dtarget;
 label=2;break;
 case 2: 
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=($7|0)!=-1;
 if($8){label=3;break;}else{label=7;break;}
 case 3: 
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=$2;
 /** @type {number} */ var $12=_getjump($10,$11);
 $next=$12;
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=$4;
 /** @type {number} */ var $16=_patchtestreg($13,$14,$15);
 /** @type {number} */ var $17=($16|0)!=0;
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $19=$1;
 /** @type {number} */ var $20=$2;
 /** @type {number} */ var $21=$3;
 _fixjump($19,$20,$21);
 label=6;break;
 case 5: 
 /** @type {number} */ var $23=$1;
 /** @type {number} */ var $24=$2;
 /** @type {number} */ var $25=$5;
 _fixjump($23,$24,$25);
 label=6;break;
 case 6: 
 /** @type {number} */ var $27=$next;
 $2=$27;
 label=2;break;
 case 7: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @param {number} $a
 * @return {number}
 */
function _codeextraarg($fs,$a){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$fs;
 $2=$a;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=$4<<6;
 /** @type {number} */ var $6=39|$5;
 /** @type {number} */ var $7=_luaK_code($3,$6);
 STACKTOP=sp;return $7;
}
/**
 * @param {number} $fs
 * @param {number} $key
 * @param {number} $v
 * @return {number}
 */
function _addk($fs,$key,$v){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $L;
 /** @type {number} */ var $idx;
 /** @type {number} */ var $f;
 /** @type {number} */ var $k;
 /** @type {number} */ var $oldsize;
 /** @type {number} */ var $n;
 /** @type {number} */ var $u=sp;
 /** @type {number} */ var $io;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io1;
 $2=$fs;
 $3=$key;
 $4=$v;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=(($5+12)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=(($7+52)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 $L=$9;
 /** @type {number} */ var $10=$L;
 /** @type {number} */ var $11=$2;
 /** @type {number} */ var $12=(($11+4)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=$3;
 /** @type {number} */ var $15=_luaH_set($10,$13,$14);
 $idx=$15;
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=(($16)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 $f=$18;
 /** @type {number} */ var $19=$idx;
 /** @type {number} */ var $20=(($19+8)|0);
 /** @type {number} */ var $21=HEAP32[(($20)>>2)];
 /** @type {number} */ var $22=($21|0)==3;
 if($22){label=2;break;}else{label=6;break;}
 case 2: 
 /** @type {number} */ var $24=$idx;
 /** @type {number} */ var $25=(($24)|0);
 /** @type {number} */ var $26=$25;
 /** @type {number} */ var $27=HEAPF64[(($26)>>3)];
 $n=$27;
 /** @type {number} */ var $28=$n;
 /** @type {number} */ var $29=($28)+(6755399441055744);
 /** @type {number} */ var $30=$u;
 HEAPF64[(($30)>>3)]=$29;
 /** @type {number} */ var $31=HEAP32[((2580)>>2)];
 /** @type {number} */ var $32=($31|0)==33;
 /** @type {number} */ var $33=($32&1);
 /** @type {number} */ var $34=$u;
 /** @type {number} */ var $35=(($34+($33<<2))|0);
 /** @type {number} */ var $36=HEAP32[(($35)>>2)];
 $k=$36;
 /** @type {number} */ var $37=$k;
 /** @type {number} */ var $38=$f;
 /** @type {number} */ var $39=(($38+8)|0);
 /** @type {number} */ var $40=HEAP32[(($39)>>2)];
 /** @type {number} */ var $41=(($40+($37<<4))|0);
 /** @type {number} */ var $42=(($41+8)|0);
 /** @type {number} */ var $43=HEAP32[(($42)>>2)];
 /** @type {number} */ var $44=$4;
 /** @type {number} */ var $45=(($44+8)|0);
 /** @type {number} */ var $46=HEAP32[(($45)>>2)];
 /** @type {number} */ var $47=($43|0)==($46|0);
 if($47){label=3;break;}else{label=5;break;}
 case 3: 
 /** @type {number} */ var $49=$k;
 /** @type {number} */ var $50=$f;
 /** @type {number} */ var $51=(($50+8)|0);
 /** @type {number} */ var $52=HEAP32[(($51)>>2)];
 /** @type {number} */ var $53=(($52+($49<<4))|0);
 /** @type {number} */ var $54=$4;
 /** @type {number} */ var $55=_luaV_equalobj_(0,$53,$54);
 /** @type {number} */ var $56=($55|0)!=0;
 if($56){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $58=$k;
 $1=$58;
 label=16;break;
 case 5: 
 label=6;break;
 case 6: 
 /** @type {number} */ var $61=$f;
 /** @type {number} */ var $62=(($61+44)|0);
 /** @type {number} */ var $63=HEAP32[(($62)>>2)];
 $oldsize=$63;
 /** @type {number} */ var $64=$2;
 /** @type {number} */ var $65=(($64+32)|0);
 /** @type {number} */ var $66=HEAP32[(($65)>>2)];
 $k=$66;
 /** @type {number} */ var $67=$idx;
 $io=$67;
 /** @type {number} */ var $68=$k;
 /** @type {number} */ var $69=($68|0);
 /** @type {number} */ var $70=$io;
 /** @type {number} */ var $71=(($70)|0);
 /** @type {number} */ var $72=$71;
 HEAPF64[(($72)>>3)]=$69;
 /** @type {number} */ var $73=$io;
 /** @type {number} */ var $74=(($73+8)|0);
 HEAP32[(($74)>>2)]=3;
 /** @type {number} */ var $75=$k;
 /** @type {number} */ var $76=((($75)+(1))|0);
 /** @type {number} */ var $77=$f;
 /** @type {number} */ var $78=(($77+44)|0);
 /** @type {number} */ var $79=HEAP32[(($78)>>2)];
 /** @type {number} */ var $80=($76|0)>($79|0);
 if($80){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $82=$L;
 /** @type {number} */ var $83=$f;
 /** @type {number} */ var $84=(($83+8)|0);
 /** @type {number} */ var $85=HEAP32[(($84)>>2)];
 /** @type {number} */ var $86=$85;
 /** @type {number} */ var $87=$f;
 /** @type {number} */ var $88=(($87+44)|0);
 /** @type {number} */ var $89=_luaM_growaux_($82,$86,$88,16,67108863,8544);
 /** @type {number} */ var $90=$89;
 /** @type {number} */ var $91=$f;
 /** @type {number} */ var $92=(($91+8)|0);
 HEAP32[(($92)>>2)]=$90;
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 /** @type {number} */ var $95=$oldsize;
 /** @type {number} */ var $96=$f;
 /** @type {number} */ var $97=(($96+44)|0);
 /** @type {number} */ var $98=HEAP32[(($97)>>2)];
 /** @type {number} */ var $99=($95|0)<($98|0);
 if($99){label=10;break;}else{label=11;break;}
 case 10: 
 /** @type {number} */ var $101=$oldsize;
 /** @type {number} */ var $102=((($101)+(1))|0);
 $oldsize=$102;
 /** @type {number} */ var $103=$f;
 /** @type {number} */ var $104=(($103+8)|0);
 /** @type {number} */ var $105=HEAP32[(($104)>>2)];
 /** @type {number} */ var $106=(($105+($101<<4))|0);
 /** @type {number} */ var $107=(($106+8)|0);
 HEAP32[(($107)>>2)]=0;
 label=9;break;
 case 11: 
 /** @type {number} */ var $109=$4;
 $io2=$109;
 /** @type {number} */ var $110=$k;
 /** @type {number} */ var $111=$f;
 /** @type {number} */ var $112=(($111+8)|0);
 /** @type {number} */ var $113=HEAP32[(($112)>>2)];
 /** @type {number} */ var $114=(($113+($110<<4))|0);
 $io1=$114;
 /** @type {number} */ var $115=$io1;
 /** @type {number} */ var $116=(($115)|0);
 /** @type {number} */ var $117=$io2;
 /** @type {number} */ var $118=(($117)|0);
 /** @type {number} */ var $119=$116;
 /** @type {number} */ var $120=$118;
 HEAP32[(($119)>>2)]=HEAP32[(($120)>>2)];HEAP32[((($119)+(4))>>2)]=HEAP32[((($120)+(4))>>2)];
 /** @type {number} */ var $121=$io2;
 /** @type {number} */ var $122=(($121+8)|0);
 /** @type {number} */ var $123=HEAP32[(($122)>>2)];
 /** @type {number} */ var $124=$io1;
 /** @type {number} */ var $125=(($124+8)|0);
 HEAP32[(($125)>>2)]=$123;
 /** @type {number} */ var $126=$2;
 /** @type {number} */ var $127=(($126+32)|0);
 /** @type {number} */ var $128=HEAP32[(($127)>>2)];
 /** @type {number} */ var $129=((($128)+(1))|0);
 HEAP32[(($127)>>2)]=$129;
 /** @type {number} */ var $130=$4;
 /** @type {number} */ var $131=(($130+8)|0);
 /** @type {number} */ var $132=HEAP32[(($131)>>2)];
 /** @type {number} */ var $133=$132&64;
 /** @type {number} */ var $134=($133|0)!=0;
 if($134){label=12;break;}else{label=15;break;}
 case 12: 
 /** @type {number} */ var $136=$4;
 /** @type {number} */ var $137=(($136)|0);
 /** @type {number} */ var $138=$137;
 /** @type {number} */ var $139=HEAP32[(($138)>>2)];
 /** @type {number} */ var $140=$139;
 /** @type {number} */ var $141=(($140+5)|0);
 /** @type {number} */ var $142=HEAP8[($141)];
 /** @type {number} */ var $143=($142&255);
 /** @type {number} */ var $144=$143&3;
 /** @type {number} */ var $145=($144|0)!=0;
 if($145){label=13;break;}else{label=15;break;}
 case 13: 
 /** @type {number} */ var $147=$f;
 /** @type {number} */ var $148=$147;
 /** @type {number} */ var $149=$148;
 /** @type {number} */ var $150=(($149+5)|0);
 /** @type {number} */ var $151=HEAP8[($150)];
 /** @type {number} */ var $152=($151&255);
 /** @type {number} */ var $153=$152&4;
 /** @type {number} */ var $154=($153|0)!=0;
 if($154){label=14;break;}else{label=15;break;}
 case 14: 
 /** @type {number} */ var $156=$L;
 /** @type {number} */ var $157=$f;
 /** @type {number} */ var $158=$157;
 /** @type {number} */ var $159=$4;
 /** @type {number} */ var $160=(($159)|0);
 /** @type {number} */ var $161=$160;
 /** @type {number} */ var $162=HEAP32[(($161)>>2)];
 _luaC_barrier_($156,$158,$162);
 label=15;break;
 case 15: 
 /** @type {number} */ var $164=$k;
 $1=$164;
 label=16;break;
 case 16: 
 /** @type {number} */ var $166=$1;
 STACKTOP=sp;return $166;
 }
}
/**
 * @param {number} $fs
 * @param {number} $reg
 * @return {number}
 */
function _freereg($fs,$reg){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$fs;
 $2=$reg;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=$3&256;
 /** @type {number} */ var $5=($4|0)!=0;
 if($5){label=4;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=(($8+46)|0);
 /** @type {number} */ var $10=HEAP8[($9)];
 /** @type {number} */ var $11=($10&255);
 /** @type {number} */ var $12=($7|0)>=($11|0);
 if($12){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=(($14+48)|0);
 /** @type {number} */ var $16=HEAP8[($15)];
 /** @type {number} */ var $17=((($16)-(1))&255);
 HEAP8[($15)]=$17;
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @param {number} $e
 * @return {number}
 */
function _freeexp($fs,$e){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$fs;
 $2=$e;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=(($3)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=($5|0)==6;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=(($9+8)|0);
 /** @type {number} */ var $11=$10;
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 _freereg($8,$12);
 label=3;break;
 case 3: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @param {number} $e
 * @param {number} $reg
 * @return {number}
 */
function _exp2reg($fs,$e,$reg){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $final;
 /** @type {number} */ var $p_f;
 /** @type {number} */ var $p_t;
 /** @type {number} */ var $fj;
 $1=$fs;
 $2=$e;
 $3=$reg;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$3;
 _discharge2reg($4,$5,$6);
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=(($7)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=($9|0)==10;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=$2;
 /** @type {number} */ var $14=(($13+16)|0);
 /** @type {number} */ var $15=$2;
 /** @type {number} */ var $16=(($15+8)|0);
 /** @type {number} */ var $17=$16;
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 _luaK_concat($12,$14,$18);
 label=3;break;
 case 3: 
 /** @type {number} */ var $20=$2;
 /** @type {number} */ var $21=(($20+16)|0);
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 /** @type {number} */ var $23=$2;
 /** @type {number} */ var $24=(($23+20)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=($22|0)!=($25|0);
 if($26){label=4;break;}else{label=11;break;}
 case 4: 
 $p_f=-1;
 $p_t=-1;
 /** @type {number} */ var $28=$1;
 /** @type {number} */ var $29=$2;
 /** @type {number} */ var $30=(($29+16)|0);
 /** @type {number} */ var $31=HEAP32[(($30)>>2)];
 /** @type {number} */ var $32=_need_value($28,$31);
 /** @type {number} */ var $33=($32|0)!=0;
 if($33){label=6;break;}else{label=5;break;}
 case 5: 
 /** @type {number} */ var $35=$1;
 /** @type {number} */ var $36=$2;
 /** @type {number} */ var $37=(($36+20)|0);
 /** @type {number} */ var $38=HEAP32[(($37)>>2)];
 /** @type {number} */ var $39=_need_value($35,$38);
 /** @type {number} */ var $40=($39|0)!=0;
 if($40){label=6;break;}else{label=10;break;}
 case 6: 
 /** @type {number} */ var $42=$2;
 /** @type {number} */ var $43=(($42)|0);
 /** @type {number} */ var $44=HEAP32[(($43)>>2)];
 /** @type {number} */ var $45=($44|0)==10;
 if($45){label=7;break;}else{label=8;break;}
 case 7: 
 var $51=-1;label=9;break;
 case 8: 
 /** @type {number} */ var $48=$1;
 /** @type {number} */ var $49=_luaK_jump($48);
 var $51=$49;label=9;break;
 case 9: 
 var $51;
 $fj=$51;
 /** @type {number} */ var $52=$1;
 /** @type {number} */ var $53=$3;
 /** @type {number} */ var $54=_code_label($52,$53,0,1);
 $p_f=$54;
 /** @type {number} */ var $55=$1;
 /** @type {number} */ var $56=$3;
 /** @type {number} */ var $57=_code_label($55,$56,1,0);
 $p_t=$57;
 /** @type {number} */ var $58=$1;
 /** @type {number} */ var $59=$fj;
 _luaK_patchtohere($58,$59);
 label=10;break;
 case 10: 
 /** @type {number} */ var $61=$1;
 /** @type {number} */ var $62=_luaK_getlabel($61);
 $final=$62;
 /** @type {number} */ var $63=$1;
 /** @type {number} */ var $64=$2;
 /** @type {number} */ var $65=(($64+20)|0);
 /** @type {number} */ var $66=HEAP32[(($65)>>2)];
 /** @type {number} */ var $67=$final;
 /** @type {number} */ var $68=$3;
 /** @type {number} */ var $69=$p_f;
 _patchlistaux($63,$66,$67,$68,$69);
 /** @type {number} */ var $70=$1;
 /** @type {number} */ var $71=$2;
 /** @type {number} */ var $72=(($71+16)|0);
 /** @type {number} */ var $73=HEAP32[(($72)>>2)];
 /** @type {number} */ var $74=$final;
 /** @type {number} */ var $75=$3;
 /** @type {number} */ var $76=$p_t;
 _patchlistaux($70,$73,$74,$75,$76);
 label=11;break;
 case 11: 
 /** @type {number} */ var $78=$2;
 /** @type {number} */ var $79=(($78+16)|0);
 HEAP32[(($79)>>2)]=-1;
 /** @type {number} */ var $80=$2;
 /** @type {number} */ var $81=(($80+20)|0);
 HEAP32[(($81)>>2)]=-1;
 /** @type {number} */ var $82=$3;
 /** @type {number} */ var $83=$2;
 /** @type {number} */ var $84=(($83+8)|0);
 /** @type {number} */ var $85=$84;
 HEAP32[(($85)>>2)]=$82;
 /** @type {number} */ var $86=$2;
 /** @type {number} */ var $87=(($86)|0);
 HEAP32[(($87)>>2)]=6;
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @return {number}
 */
function _nilK($fs){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0;
 /** @type {number} */ var $1;
 /** @type {number} */ var $k=sp;
 /** @type {number} */ var $v=(sp)+(16);
 /** @type {number} */ var $io;
 $1=$fs;
 /** @type {number} */ var $2=(($v+8)|0);
 HEAP32[(($2)>>2)]=0;
 $io=$k;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+4)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=$5;
 /** @type {number} */ var $7=$io;
 /** @type {number} */ var $8=(($7)|0);
 /** @type {number} */ var $9=$8;
 HEAP32[(($9)>>2)]=$6;
 /** @type {number} */ var $10=$io;
 /** @type {number} */ var $11=(($10+8)|0);
 HEAP32[(($11)>>2)]=69;
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=_addk($12,$k,$v);
 STACKTOP=sp;return $13;
}
/**
 * @param {number} $fs
 * @param {number} $b
 * @return {number}
 */
function _boolK($fs,$b){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $o=sp;
 /** @type {number} */ var $io;
 $1=$fs;
 $2=$b;
 $io=$o;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=$io;
 /** @type {number} */ var $5=(($4)|0);
 /** @type {number} */ var $6=$5;
 HEAP32[(($6)>>2)]=$3;
 /** @type {number} */ var $7=$io;
 /** @type {number} */ var $8=(($7+8)|0);
 HEAP32[(($8)>>2)]=1;
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=_addk($9,$o,$o);
 STACKTOP=sp;return $10;
}
/**
 * @param {number} $fs
 * @param {number} $e
 * @return {number}
 */
function _invertjump($fs,$e){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $pc;
 $1=$fs;
 $2=$e;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=(($4+8)|0);
 /** @type {number} */ var $6=$5;
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=_getjumpcontrol($3,$7);
 $pc=$8;
 /** @type {number} */ var $9=$pc;
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=$10&-16321;
 /** @type {number} */ var $12=$pc;
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=$13>>>6;
 /** @type {number} */ var $15=$14&255;
 /** @type {number} */ var $16=($15|0)!=0;
 /** @type {number} */ var $17=$16^1;
 /** @type {number} */ var $18=($17&1);
 /** @type {number} */ var $19=$18<<6;
 /** @type {number} */ var $20=$19&16320;
 /** @type {number} */ var $21=$11|$20;
 /** @type {number} */ var $22=$pc;
 HEAP32[(($22)>>2)]=$21;
 STACKTOP=sp;return;
}
/**
 * @param {number} $fs
 * @param {number} $e
 * @param {number} $cond
 * @return {number}
 */
function _jumponcond($fs,$e,$cond){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $ie;
 $2=$fs;
 $3=$e;
 $4=$cond;
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=(($5)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=($7|0)==11;
 if($8){label=2;break;}else{label=5;break;}
 case 2: 
 /** @type {number} */ var $10=$3;
 /** @type {number} */ var $11=(($10+8)|0);
 /** @type {number} */ var $12=$11;
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=(($14)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=(($16+12)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=(($18+($13<<2))|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 $ie=$20;
 /** @type {number} */ var $21=$ie;
 /** @type {number} */ var $22=$21>>>0;
 /** @type {number} */ var $23=$22&63;
 /** @type {number} */ var $24=($23|0)==20;
 if($24){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $26=$2;
 /** @type {number} */ var $27=(($26+20)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=((($28)-(1))|0);
 HEAP32[(($27)>>2)]=$29;
 /** @type {number} */ var $30=$2;
 /** @type {number} */ var $31=$ie;
 /** @type {number} */ var $32=$31>>>23;
 /** @type {number} */ var $33=$32&511;
 /** @type {number} */ var $34=$4;
 /** @type {number} */ var $35=($34|0)!=0;
 /** @type {number} */ var $36=$35^1;
 /** @type {number} */ var $37=($36&1);
 /** @type {number} */ var $38=_condjump($30,27,$33,0,$37);
 $1=$38;
 label=6;break;
 case 4: 
 label=5;break;
 case 5: 
 /** @type {number} */ var $41=$2;
 /** @type {number} */ var $42=$3;
 _discharge2anyreg($41,$42);
 /** @type {number} */ var $43=$2;
 /** @type {number} */ var $44=$3;
 _freeexp($43,$44);
 /** @type {number} */ var $45=$2;
 /** @type {number} */ var $46=$3;
 /** @type {number} */ var $47=(($46+8)|0);
 /** @type {number} */ var $48=$47;
 /** @type {number} */ var $49=HEAP32[(($48)>>2)];
 /** @type {number} */ var $50=$4;
 /** @type {number} */ var $51=_condjump($45,28,255,$49,$50);
 $1=$51;
 label=6;break;
 case 6: 
 /** @type {number} */ var $53=$1;
 STACKTOP=sp;return $53;
 }
}
/**
 * @param {number} $e
 * @return {number}
 */
function _isnumeral($e){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 $1=$e;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 /** @type {number} */ var $5=($4|0)==5;
 if($5){label=2;break;}else{var $17=0;label=4;break;}
 case 2: 
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=(($7+16)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=($9|0)==-1;
 if($10){label=3;break;}else{var $17=0;label=4;break;}
 case 3: 
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=(($12+20)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=($14|0)==-1;
 var $17=$15;label=4;break;
 case 4: 
 var $17;
 /** @type {number} */ var $18=($17&1);
 STACKTOP=sp;return $18;
 }
}
/**
 * @param {number} $fs
 * @param {number} $op
 * @param {number} $e1
 * @param {number} $e2
 * @param {number} $line
 * @return {number}
 */
function _codearith($fs,$op,$e1,$e2,$line){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 /** @type {number} */ var $o2;
 /** @type {number} */ var $o1;
 $1=$fs;
 $2=$op;
 $3=$e1;
 $4=$e2;
 $5=$line;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=$3;
 /** @type {number} */ var $8=$4;
 /** @type {number} */ var $9=_constfolding($6,$7,$8);
 /** @type {number} */ var $10=($9|0)!=0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 label=11;break;
 case 3: 
 /** @type {number} */ var $13=$2;
 /** @type {number} */ var $14=($13|0)!=19;
 if($14){label=4;break;}else{label=6;break;}
 case 4: 
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=($16|0)!=21;
 if($17){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $19=$1;
 /** @type {number} */ var $20=$4;
 /** @type {number} */ var $21=_luaK_exp2RK($19,$20);
 var $24=$21;label=7;break;
 case 6: 
 var $24=0;label=7;break;
 case 7: 
 var $24;
 $o2=$24;
 /** @type {number} */ var $25=$1;
 /** @type {number} */ var $26=$3;
 /** @type {number} */ var $27=_luaK_exp2RK($25,$26);
 $o1=$27;
 /** @type {number} */ var $28=$o1;
 /** @type {number} */ var $29=$o2;
 /** @type {number} */ var $30=($28|0)>($29|0);
 if($30){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $32=$1;
 /** @type {number} */ var $33=$3;
 _freeexp($32,$33);
 /** @type {number} */ var $34=$1;
 /** @type {number} */ var $35=$4;
 _freeexp($34,$35);
 label=10;break;
 case 9: 
 /** @type {number} */ var $37=$1;
 /** @type {number} */ var $38=$4;
 _freeexp($37,$38);
 /** @type {number} */ var $39=$1;
 /** @type {number} */ var $40=$3;
 _freeexp($39,$40);
 label=10;break;
 case 10: 
 /** @type {number} */ var $42=$1;
 /** @type {number} */ var $43=$2;
 /** @type {number} */ var $44=$o1;
 /** @type {number} */ var $45=$o2;
 /** @type {number} */ var $46=_luaK_codeABC($42,$43,0,$44,$45);
 /** @type {number} */ var $47=$3;
 /** @type {number} */ var $48=(($47+8)|0);
 /** @type {number} */ var $49=$48;
 HEAP32[(($49)>>2)]=$46;
 /** @type {number} */ var $50=$3;
 /** @type {number} */ var $51=(($50)|0);
 HEAP32[(($51)>>2)]=11;
 /** @type {number} */ var $52=$1;
 /** @type {number} */ var $53=$5;
 _luaK_fixline($52,$53);
 label=11;break;
 case 11: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @param {number} $e
 * @return {number}
 */
function _codenot($fs,$e){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $temp;
 $1=$fs;
 $2=$e;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 _luaK_dischargevars($3,$4);
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=(($5)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 switch(($7|0)){case 1:case 3:{ label=2;break;}case 4:case 5:case 2:{ label=3;break;}case 10:{ label=4;break;}case 11:case 6:{ label=5;break;}default:{label=6;break;}}break;
 case 2: 
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=(($9)|0);
 HEAP32[(($10)>>2)]=2;
 label=7;break;
 case 3: 
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=(($12)|0);
 HEAP32[(($13)>>2)]=3;
 label=7;break;
 case 4: 
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=$2;
 _invertjump($15,$16);
 label=7;break;
 case 5: 
 /** @type {number} */ var $18=$1;
 /** @type {number} */ var $19=$2;
 _discharge2anyreg($18,$19);
 /** @type {number} */ var $20=$1;
 /** @type {number} */ var $21=$2;
 _freeexp($20,$21);
 /** @type {number} */ var $22=$1;
 /** @type {number} */ var $23=$2;
 /** @type {number} */ var $24=(($23+8)|0);
 /** @type {number} */ var $25=$24;
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 /** @type {number} */ var $27=_luaK_codeABC($22,20,0,$26,0);
 /** @type {number} */ var $28=$2;
 /** @type {number} */ var $29=(($28+8)|0);
 /** @type {number} */ var $30=$29;
 HEAP32[(($30)>>2)]=$27;
 /** @type {number} */ var $31=$2;
 /** @type {number} */ var $32=(($31)|0);
 HEAP32[(($32)>>2)]=11;
 label=7;break;
 case 6: 
 label=7;break;
 case 7: 
 /** @type {number} */ var $35=$2;
 /** @type {number} */ var $36=(($35+20)|0);
 /** @type {number} */ var $37=HEAP32[(($36)>>2)];
 $temp=$37;
 /** @type {number} */ var $38=$2;
 /** @type {number} */ var $39=(($38+16)|0);
 /** @type {number} */ var $40=HEAP32[(($39)>>2)];
 /** @type {number} */ var $41=$2;
 /** @type {number} */ var $42=(($41+20)|0);
 HEAP32[(($42)>>2)]=$40;
 /** @type {number} */ var $43=$temp;
 /** @type {number} */ var $44=$2;
 /** @type {number} */ var $45=(($44+16)|0);
 HEAP32[(($45)>>2)]=$43;
 /** @type {number} */ var $46=$1;
 /** @type {number} */ var $47=$2;
 /** @type {number} */ var $48=(($47+20)|0);
 /** @type {number} */ var $49=HEAP32[(($48)>>2)];
 _removevalues($46,$49);
 /** @type {number} */ var $50=$1;
 /** @type {number} */ var $51=$2;
 /** @type {number} */ var $52=(($51+16)|0);
 /** @type {number} */ var $53=HEAP32[(($52)>>2)];
 _removevalues($50,$53);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @param {number} $op
 * @param {number} $cond
 * @param {number} $e1
 * @param {number} $e2
 * @return {number}
 */
function _codecomp($fs,$op,$cond,$e1,$e2){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 /** @type {number} */ var $o1;
 /** @type {number} */ var $o2;
 /** @type {number} */ var $temp;
 $1=$fs;
 $2=$op;
 $3=$cond;
 $4=$e1;
 $5=$e2;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=$4;
 /** @type {number} */ var $8=_luaK_exp2RK($6,$7);
 $o1=$8;
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=$5;
 /** @type {number} */ var $11=_luaK_exp2RK($9,$10);
 $o2=$11;
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=$5;
 _freeexp($12,$13);
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=$4;
 _freeexp($14,$15);
 /** @type {number} */ var $16=$3;
 /** @type {number} */ var $17=($16|0)==0;
 if($17){label=2;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $19=$2;
 /** @type {number} */ var $20=($19|0)!=24;
 if($20){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $22=$o1;
 $temp=$22;
 /** @type {number} */ var $23=$o2;
 $o1=$23;
 /** @type {number} */ var $24=$temp;
 $o2=$24;
 $3=1;
 label=4;break;
 case 4: 
 /** @type {number} */ var $26=$1;
 /** @type {number} */ var $27=$2;
 /** @type {number} */ var $28=$3;
 /** @type {number} */ var $29=$o1;
 /** @type {number} */ var $30=$o2;
 /** @type {number} */ var $31=_condjump($26,$27,$28,$29,$30);
 /** @type {number} */ var $32=$4;
 /** @type {number} */ var $33=(($32+8)|0);
 /** @type {number} */ var $34=$33;
 HEAP32[(($34)>>2)]=$31;
 /** @type {number} */ var $35=$4;
 /** @type {number} */ var $36=(($35)|0);
 HEAP32[(($36)>>2)]=10;
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @return {number}
 */
function _dischargejpc($fs){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$fs;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+28)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+20)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=(($9+20)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 _patchlistaux($2,$5,$8,255,$11);
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=(($12+28)|0);
 HEAP32[(($13)>>2)]=-1;
 STACKTOP=sp;return;
}
/**
 * @param {number} $fs
 * @param {number} $node
 * @param {number} $reg
 * @return {number}
 */
function _patchtestreg($fs,$node,$reg){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $i;
 $2=$fs;
 $3=$node;
 $4=$reg;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$3;
 /** @type {number} */ var $7=_getjumpcontrol($5,$6);
 $i=$7;
 /** @type {number} */ var $8=$i;
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=$9>>>0;
 /** @type {number} */ var $11=$10&63;
 /** @type {number} */ var $12=($11|0)!=28;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=8;break;
 case 3: 
 /** @type {number} */ var $15=$4;
 /** @type {number} */ var $16=($15|0)!=255;
 if($16){label=4;break;}else{label=6;break;}
 case 4: 
 /** @type {number} */ var $18=$4;
 /** @type {number} */ var $19=$i;
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=$20>>>23;
 /** @type {number} */ var $22=$21&511;
 /** @type {number} */ var $23=($18|0)!=($22|0);
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $25=$i;
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 /** @type {number} */ var $27=$26&-16321;
 /** @type {number} */ var $28=$4;
 /** @type {number} */ var $29=$28<<6;
 /** @type {number} */ var $30=$29&16320;
 /** @type {number} */ var $31=$27|$30;
 /** @type {number} */ var $32=$i;
 HEAP32[(($32)>>2)]=$31;
 label=7;break;
 case 6: 
 /** @type {number} */ var $34=$i;
 /** @type {number} */ var $35=HEAP32[(($34)>>2)];
 /** @type {number} */ var $36=$35>>>23;
 /** @type {number} */ var $37=$36&511;
 /** @type {number} */ var $38=$37<<6;
 /** @type {number} */ var $39=27|$38;
 /** @type {number} */ var $40=$i;
 /** @type {number} */ var $41=HEAP32[(($40)>>2)];
 /** @type {number} */ var $42=$41>>>14;
 /** @type {number} */ var $43=$42&511;
 /** @type {number} */ var $44=$43<<14;
 /** @type {number} */ var $45=$39|$44;
 /** @type {number} */ var $46=$i;
 HEAP32[(($46)>>2)]=$45;
 label=7;break;
 case 7: 
 $1=1;
 label=8;break;
 case 8: 
 /** @type {number} */ var $49=$1;
 STACKTOP=sp;return $49;
 }
}
/**
 * @param {number} $fs
 * @param {number} $e
 * @param {number} $reg
 * @return {number}
 */
function _discharge2reg($fs,$e,$reg){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $pc;
 $1=$fs;
 $2=$e;
 $3=$reg;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$2;
 _luaK_dischargevars($4,$5);
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=(($6)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 switch(($8|0)){case 1:{ label=2;break;}case 3:case 2:{ label=3;break;}case 4:{ label=4;break;}case 5:{ label=5;break;}case 11:{ label=6;break;}case 6:{ label=7;break;}default:{label=10;break;}}break;
 case 2: 
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=$3;
 _luaK_nil($10,$11,1);
 label=11;break;
 case 3: 
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=$3;
 /** @type {number} */ var $15=$2;
 /** @type {number} */ var $16=(($15)|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=($17|0)==2;
 /** @type {number} */ var $19=($18&1);
 /** @type {number} */ var $20=_luaK_codeABC($13,3,$14,$19,0);
 label=11;break;
 case 4: 
 /** @type {number} */ var $22=$1;
 /** @type {number} */ var $23=$3;
 /** @type {number} */ var $24=$2;
 /** @type {number} */ var $25=(($24+8)|0);
 /** @type {number} */ var $26=$25;
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=_luaK_codek($22,$23,$27);
 label=11;break;
 case 5: 
 /** @type {number} */ var $30=$1;
 /** @type {number} */ var $31=$3;
 /** @type {number} */ var $32=$1;
 /** @type {number} */ var $33=$2;
 /** @type {number} */ var $34=(($33+8)|0);
 /** @type {number} */ var $35=$34;
 /** @type {number} */ var $36=HEAPF64[(($35)>>3)];
 /** @type {number} */ var $37=_luaK_numberK($32,$36);
 /** @type {number} */ var $38=_luaK_codek($30,$31,$37);
 label=11;break;
 case 6: 
 /** @type {number} */ var $40=$2;
 /** @type {number} */ var $41=(($40+8)|0);
 /** @type {number} */ var $42=$41;
 /** @type {number} */ var $43=HEAP32[(($42)>>2)];
 /** @type {number} */ var $44=$1;
 /** @type {number} */ var $45=(($44)|0);
 /** @type {number} */ var $46=HEAP32[(($45)>>2)];
 /** @type {number} */ var $47=(($46+12)|0);
 /** @type {number} */ var $48=HEAP32[(($47)>>2)];
 /** @type {number} */ var $49=(($48+($43<<2))|0);
 $pc=$49;
 /** @type {number} */ var $50=$pc;
 /** @type {number} */ var $51=HEAP32[(($50)>>2)];
 /** @type {number} */ var $52=$51&-16321;
 /** @type {number} */ var $53=$3;
 /** @type {number} */ var $54=$53<<6;
 /** @type {number} */ var $55=$54&16320;
 /** @type {number} */ var $56=$52|$55;
 /** @type {number} */ var $57=$pc;
 HEAP32[(($57)>>2)]=$56;
 label=11;break;
 case 7: 
 /** @type {number} */ var $59=$3;
 /** @type {number} */ var $60=$2;
 /** @type {number} */ var $61=(($60+8)|0);
 /** @type {number} */ var $62=$61;
 /** @type {number} */ var $63=HEAP32[(($62)>>2)];
 /** @type {number} */ var $64=($59|0)!=($63|0);
 if($64){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $66=$1;
 /** @type {number} */ var $67=$3;
 /** @type {number} */ var $68=$2;
 /** @type {number} */ var $69=(($68+8)|0);
 /** @type {number} */ var $70=$69;
 /** @type {number} */ var $71=HEAP32[(($70)>>2)];
 /** @type {number} */ var $72=_luaK_codeABC($66,0,$67,$71,0);
 label=9;break;
 case 9: 
 label=11;break;
 case 10: 
 label=12;break;
 case 11: 
 /** @type {number} */ var $76=$3;
 /** @type {number} */ var $77=$2;
 /** @type {number} */ var $78=(($77+8)|0);
 /** @type {number} */ var $79=$78;
 HEAP32[(($79)>>2)]=$76;
 /** @type {number} */ var $80=$2;
 /** @type {number} */ var $81=(($80)|0);
 HEAP32[(($81)>>2)]=6;
 label=12;break;
 case 12: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @param {number} $list
 * @return {number}
 */
function _need_value($fs,$list){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $i;
 $2=$fs;
 $3=$list;
 label=2;break;
 case 2: 
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=($5|0)!=-1;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=$3;
 /** @type {number} */ var $10=_getjumpcontrol($8,$9);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 $i=$11;
 /** @type {number} */ var $12=$i;
 /** @type {number} */ var $13=$12>>>0;
 /** @type {number} */ var $14=$13&63;
 /** @type {number} */ var $15=($14|0)!=28;
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 $1=1;
 label=8;break;
 case 5: 
 label=6;break;
 case 6: 
 /** @type {number} */ var $19=$2;
 /** @type {number} */ var $20=$3;
 /** @type {number} */ var $21=_getjump($19,$20);
 $3=$21;
 label=2;break;
 case 7: 
 $1=0;
 label=8;break;
 case 8: 
 /** @type {number} */ var $24=$1;
 STACKTOP=sp;return $24;
 }
}
/**
 * @param {number} $fs
 * @param {number} $A
 * @param {number} $b
 * @param {number} $jump
 * @return {number}
 */
function _code_label($fs,$A,$b,$jump){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 $1=$fs;
 $2=$A;
 $3=$b;
 $4=$jump;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=_luaK_getlabel($5);
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=$3;
 /** @type {number} */ var $10=$4;
 /** @type {number} */ var $11=_luaK_codeABC($7,3,$8,$9,$10);
 STACKTOP=sp;return $11;
}
/**
 * @param {number} $fs
 * @param {number} $pc
 * @return {number}
 */
function _getjumpcontrol($fs,$pc){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $pi;
 $2=$fs;
 $3=$pc;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=(($5)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=(($7+12)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=(($9+($4<<2))|0);
 $pi=$10;
 /** @type {number} */ var $11=$3;
 /** @type {number} */ var $12=($11|0)>=1;
 if($12){label=2;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $14=$pi;
 /** @type {number} */ var $15=((($14)-(4))|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=$16>>>0;
 /** @type {number} */ var $18=$17&63;
 /** @type {number} */ var $19=((1240+$18)|0);
 /** @type {number} */ var $20=HEAP8[($19)];
 /** @type {number} */ var $21=($20&255);
 /** @type {number} */ var $22=$21&128;
 /** @type {number} */ var $23=($22|0)!=0;
 if($23){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $25=$pi;
 /** @type {number} */ var $26=((($25)-(4))|0);
 $1=$26;
 label=5;break;
 case 4: 
 /** @type {number} */ var $28=$pi;
 $1=$28;
 label=5;break;
 case 5: 
 /** @type {number} */ var $30=$1;
 STACKTOP=sp;return $30;
 }
}
/**
 * @param {number} $fs
 * @param {number} $op
 * @param {number} $A
 * @param {number} $B
 * @param {number} $C
 * @return {number}
 */
function _condjump($fs,$op,$A,$B,$C){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 $1=$fs;
 $2=$op;
 $3=$A;
 $4=$B;
 $5=$C;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=$3;
 /** @type {number} */ var $9=$4;
 /** @type {number} */ var $10=$5;
 /** @type {number} */ var $11=_luaK_codeABC($6,$7,$8,$9,$10);
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=_luaK_jump($12);
 STACKTOP=sp;return $13;
}
/**
 * @param {number} $fs
 * @param {number} $e
 * @return {number}
 */
function _discharge2anyreg($fs,$e){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$fs;
 $2=$e;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=(($3)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=($5|0)!=6;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $8=$1;
 _luaK_reserveregs($8,1);
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=(($11+48)|0);
 /** @type {number} */ var $13=HEAP8[($12)];
 /** @type {number} */ var $14=($13&255);
 /** @type {number} */ var $15=((($14)-(1))|0);
 _discharge2reg($9,$10,$15);
 label=3;break;
 case 3: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $op
 * @param {number} $e1
 * @param {number} $e2
 * @return {number}
 */
function _constfolding($op,$e1,$e2){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $r;
 $2=$op;
 $3=$e1;
 $4=$e2;
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=_isnumeral($5);
 /** @type {number} */ var $7=($6|0)!=0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $9=$4;
 /** @type {number} */ var $10=_isnumeral($9);
 /** @type {number} */ var $11=($10|0)!=0;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 $1=0;
 label=9;break;
 case 4: 
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=($14|0)==16;
 if($15){label=6;break;}else{label=5;break;}
 case 5: 
 /** @type {number} */ var $17=$2;
 /** @type {number} */ var $18=($17|0)==17;
 if($18){label=6;break;}else{label=8;break;}
 case 6: 
 /** @type {number} */ var $20=$4;
 /** @type {number} */ var $21=(($20+8)|0);
 /** @type {number} */ var $22=$21;
 /** @type {number} */ var $23=HEAPF64[(($22)>>3)];
 /** @type {number} */ var $24=$23==0;
 if($24){label=7;break;}else{label=8;break;}
 case 7: 
 $1=0;
 label=9;break;
 case 8: 
 /** @type {number} */ var $27=$2;
 /** @type {number} */ var $28=((($27)-(13))|0);
 /** @type {number} */ var $29=(($28)|0);
 /** @type {number} */ var $30=$3;
 /** @type {number} */ var $31=(($30+8)|0);
 /** @type {number} */ var $32=$31;
 /** @type {number} */ var $33=HEAPF64[(($32)>>3)];
 /** @type {number} */ var $34=$4;
 /** @type {number} */ var $35=(($34+8)|0);
 /** @type {number} */ var $36=$35;
 /** @type {number} */ var $37=HEAPF64[(($36)>>3)];
 /** @type {number} */ var $38=_luaO_arith($29,$33,$37);
 $r=$38;
 /** @type {number} */ var $39=$r;
 /** @type {number} */ var $40=$3;
 /** @type {number} */ var $41=(($40+8)|0);
 /** @type {number} */ var $42=$41;
 HEAPF64[(($42)>>3)]=$39;
 $1=1;
 label=9;break;
 case 9: 
 /** @type {number} */ var $44=$1;
 STACKTOP=sp;return $44;
 }
}
/**
 * @param {number} $fs
 * @param {number} $list
 * @return {number}
 */
function _removevalues($fs,$list){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$fs;
 $2=$list;
 label=2;break;
 case 2: 
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=($4|0)!=-1;
 if($5){label=3;break;}else{label=5;break;}
 case 3: 
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=_patchtestreg($7,$8,255);
 label=4;break;
 case 4: 
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=_getjump($11,$12);
 $2=$13;
 label=2;break;
 case 5: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $func
 * @param {number} $mask
 * @param {number} $count
 * @return {number}
 */
function _lua_sethook($L,$func,$mask,$count){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 $1=$L;
 $2=$func;
 $3=$mask;
 $4=$count;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=($5|0)==0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $8=$3;
 /** @type {number} */ var $9=($8|0)==0;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 $3=0;
 $2=0;
 label=4;break;
 case 4: 
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=(($12+16)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=(($14+18)|0);
 /** @type {number} */ var $16=HEAP8[($15)];
 /** @type {number} */ var $17=($16&255);
 /** @type {number} */ var $18=$17&1;
 /** @type {number} */ var $19=($18|0)!=0;
 if($19){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=(($21+16)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 /** @type {number} */ var $24=(($23+24)|0);
 /** @type {number} */ var $25=$24;
 /** @type {number} */ var $26=(($25+4)|0);
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=$1;
 /** @type {number} */ var $29=(($28+20)|0);
 HEAP32[(($29)>>2)]=$27;
 label=6;break;
 case 6: 
 /** @type {number} */ var $31=$2;
 /** @type {number} */ var $32=$1;
 /** @type {number} */ var $33=(($32+52)|0);
 HEAP32[(($33)>>2)]=$31;
 /** @type {number} */ var $34=$4;
 /** @type {number} */ var $35=$1;
 /** @type {number} */ var $36=(($35+44)|0);
 HEAP32[(($36)>>2)]=$34;
 /** @type {number} */ var $37=$1;
 /** @type {number} */ var $38=(($37+44)|0);
 /** @type {number} */ var $39=HEAP32[(($38)>>2)];
 /** @type {number} */ var $40=$1;
 /** @type {number} */ var $41=(($40+48)|0);
 HEAP32[(($41)>>2)]=$39;
 /** @type {number} */ var $42=$3;
 /** @type {number} */ var $43=(($42)&255);
 /** @type {number} */ var $44=$1;
 /** @type {number} */ var $45=(($44+40)|0);
 HEAP8[($45)]=$43;
 STACKTOP=sp;return 1;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _lua_gethook($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+52)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 STACKTOP=sp;return $4;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _lua_gethookmask($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+40)|0);
 /** @type {number} */ var $4=HEAP8[($3)];
 /** @type {number} */ var $5=($4&255);
 STACKTOP=sp;return $5;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _lua_gethookcount($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+44)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 STACKTOP=sp;return $4;
}
/**
 * @param {number} $L
 * @param {number} $level
 * @param {number} $ar
 * @return {number}
 */
function _lua_getstack($L,$level,$ar){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $status;
 /** @type {number} */ var $ci;
 $2=$L;
 $3=$level;
 $4=$ar;
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=($5|0)<0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=13;break;
 case 3: 
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=(($9+16)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 $ci=$11;
 label=4;break;
 case 4: 
 /** @type {number} */ var $13=$3;
 /** @type {number} */ var $14=($13|0)>0;
 if($14){label=5;break;}else{label=8;break;}
 case 5: 
 /** @type {number} */ var $16=$ci;
 /** @type {number} */ var $17=$2;
 /** @type {number} */ var $18=(($17+72)|0);
 /** @type {number} */ var $19=($16|0)!=($18|0);
 if($19){label=6;break;}else{label=8;break;}
 case 6: 
 /** @type {number} */ var $21=$3;
 /** @type {number} */ var $22=((($21)-(1))|0);
 $3=$22;
 label=7;break;
 case 7: 
 /** @type {number} */ var $24=$ci;
 /** @type {number} */ var $25=(($24+8)|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 $ci=$26;
 label=4;break;
 case 8: 
 /** @type {number} */ var $28=$3;
 /** @type {number} */ var $29=($28|0)==0;
 if($29){label=9;break;}else{label=11;break;}
 case 9: 
 /** @type {number} */ var $31=$ci;
 /** @type {number} */ var $32=$2;
 /** @type {number} */ var $33=(($32+72)|0);
 /** @type {number} */ var $34=($31|0)!=($33|0);
 if($34){label=10;break;}else{label=11;break;}
 case 10: 
 $status=1;
 /** @type {number} */ var $36=$ci;
 /** @type {number} */ var $37=$4;
 /** @type {number} */ var $38=(($37+96)|0);
 HEAP32[(($38)>>2)]=$36;
 label=12;break;
 case 11: 
 $status=0;
 label=12;break;
 case 12: 
 /** @type {number} */ var $41=$status;
 $1=$41;
 label=13;break;
 case 13: 
 /** @type {number} */ var $43=$1;
 STACKTOP=sp;return $43;
 }
}
/**
 * @param {number} $L
 * @param {number} $ar
 * @param {number} $n
 * @return {number}
 */
function _lua_getlocal($L,$ar,$n){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $name;
 /** @type {number} */ var $pos=sp;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io1;
 $1=$L;
 $2=$ar;
 $3=$n;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=($4|0)==0;
 if($5){label=2;break;}else{label=6;break;}
 case 2: 
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=(($7+8)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=((($9)-(16))|0);
 /** @type {number} */ var $11=(($10+8)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=($12|0)==70;
 if($13){label=4;break;}else{label=3;break;}
 case 3: 
 $name=0;
 label=5;break;
 case 4: 
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=(($16+8)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=((($18)-(16))|0);
 /** @type {number} */ var $20=(($19)|0);
 /** @type {number} */ var $21=$20;
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 /** @type {number} */ var $23=$22;
 /** @type {number} */ var $24=$23;
 /** @type {number} */ var $25=(($24+12)|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 /** @type {number} */ var $27=$3;
 /** @type {number} */ var $28=_luaF_getlocalname($26,$27,0);
 $name=$28;
 label=5;break;
 case 5: 
 label=9;break;
 case 6: 
 HEAP32[(($pos)>>2)]=0;
 /** @type {number} */ var $31=$1;
 /** @type {number} */ var $32=$2;
 /** @type {number} */ var $33=(($32+96)|0);
 /** @type {number} */ var $34=HEAP32[(($33)>>2)];
 /** @type {number} */ var $35=$3;
 /** @type {number} */ var $36=_findlocal($31,$34,$35,$pos);
 $name=$36;
 /** @type {number} */ var $37=$name;
 /** @type {number} */ var $38=($37|0)!=0;
 if($38){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $40=HEAP32[(($pos)>>2)];
 $io2=$40;
 /** @type {number} */ var $41=$1;
 /** @type {number} */ var $42=(($41+8)|0);
 /** @type {number} */ var $43=HEAP32[(($42)>>2)];
 $io1=$43;
 /** @type {number} */ var $44=$io1;
 /** @type {number} */ var $45=(($44)|0);
 /** @type {number} */ var $46=$io2;
 /** @type {number} */ var $47=(($46)|0);
 /** @type {number} */ var $48=$45;
 /** @type {number} */ var $49=$47;
 HEAP32[(($48)>>2)]=HEAP32[(($49)>>2)];HEAP32[((($48)+(4))>>2)]=HEAP32[((($49)+(4))>>2)];
 /** @type {number} */ var $50=$io2;
 /** @type {number} */ var $51=(($50+8)|0);
 /** @type {number} */ var $52=HEAP32[(($51)>>2)];
 /** @type {number} */ var $53=$io1;
 /** @type {number} */ var $54=(($53+8)|0);
 HEAP32[(($54)>>2)]=$52;
 /** @type {number} */ var $55=$1;
 /** @type {number} */ var $56=(($55+8)|0);
 /** @type {number} */ var $57=HEAP32[(($56)>>2)];
 /** @type {number} */ var $58=(($57+16)|0);
 HEAP32[(($56)>>2)]=$58;
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 /** @type {number} */ var $61=$name;
 STACKTOP=sp;return $61;
 }
}
/**
 * @param {number} $L
 * @param {number} $ar
 * @param {number} $n
 * @return {number}
 */
function _lua_setlocal($L,$ar,$n){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $pos=sp;
 /** @type {number} */ var $name;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io1;
 $1=$L;
 $2=$ar;
 $3=$n;
 HEAP32[(($pos)>>2)]=0;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=(($5+96)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=$3;
 /** @type {number} */ var $9=_findlocal($4,$7,$8,$pos);
 $name=$9;
 /** @type {number} */ var $10=$name;
 /** @type {number} */ var $11=($10|0)!=0;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=(($13+8)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=((($15)-(16))|0);
 $io2=$16;
 /** @type {number} */ var $17=HEAP32[(($pos)>>2)];
 $io1=$17;
 /** @type {number} */ var $18=$io1;
 /** @type {number} */ var $19=(($18)|0);
 /** @type {number} */ var $20=$io2;
 /** @type {number} */ var $21=(($20)|0);
 /** @type {number} */ var $22=$19;
 /** @type {number} */ var $23=$21;
 HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];
 /** @type {number} */ var $24=$io2;
 /** @type {number} */ var $25=(($24+8)|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 /** @type {number} */ var $27=$io1;
 /** @type {number} */ var $28=(($27+8)|0);
 HEAP32[(($28)>>2)]=$26;
 label=3;break;
 case 3: 
 /** @type {number} */ var $30=$1;
 /** @type {number} */ var $31=(($30+8)|0);
 /** @type {number} */ var $32=HEAP32[(($31)>>2)];
 /** @type {number} */ var $33=((($32)-(16))|0);
 HEAP32[(($31)>>2)]=$33;
 /** @type {number} */ var $34=$name;
 STACKTOP=sp;return $34;
 }
}
/**
 * @param {number} $L
 * @param {number} $what
 * @param {number} $ar
 * @return {number}
 */
function _lua_getinfo($L,$what,$ar){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $status;
 /** @type {number} */ var $cl;
 /** @type {number} */ var $ci;
 /** @type {number} */ var $func;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io1;
 $1=$L;
 $2=$what;
 $3=$ar;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=HEAP8[($4)];
 /** @type {number} */ var $6=(($5<<24)>>24);
 /** @type {number} */ var $7=($6|0)==62;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $ci=0;
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=(($9+8)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=((($11)-(16))|0);
 $func=$12;
 /** @type {number} */ var $13=$2;
 /** @type {number} */ var $14=(($13+1)|0);
 $2=$14;
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=(($15+8)|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=((($17)-(16))|0);
 HEAP32[(($16)>>2)]=$18;
 label=4;break;
 case 3: 
 /** @type {number} */ var $20=$3;
 /** @type {number} */ var $21=(($20+96)|0);
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 $ci=$22;
 /** @type {number} */ var $23=$ci;
 /** @type {number} */ var $24=(($23)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 $func=$25;
 label=4;break;
 case 4: 
 /** @type {number} */ var $27=$func;
 /** @type {number} */ var $28=(($27+8)|0);
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 /** @type {number} */ var $30=$29&31;
 /** @type {number} */ var $31=($30|0)==6;
 if($31){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $33=$func;
 /** @type {number} */ var $34=(($33)|0);
 /** @type {number} */ var $35=$34;
 /** @type {number} */ var $36=HEAP32[(($35)>>2)];
 /** @type {number} */ var $37=$36;
 var $40=$37;label=7;break;
 case 6: 
 var $40=0;label=7;break;
 case 7: 
 var $40;
 $cl=$40;
 /** @type {number} */ var $41=$1;
 /** @type {number} */ var $42=$2;
 /** @type {number} */ var $43=$3;
 /** @type {number} */ var $44=$cl;
 /** @type {number} */ var $45=$ci;
 /** @type {number} */ var $46=_auxgetinfo($41,$42,$43,$44,$45);
 $status=$46;
 /** @type {number} */ var $47=$2;
 /** @type {number} */ var $48=_strchr($47,102);
 /** @type {number} */ var $49=($48|0)!=0;
 if($49){label=8;break;}else{label=12;break;}
 case 8: 
 /** @type {number} */ var $51=$func;
 $io2=$51;
 /** @type {number} */ var $52=$1;
 /** @type {number} */ var $53=(($52+8)|0);
 /** @type {number} */ var $54=HEAP32[(($53)>>2)];
 $io1=$54;
 /** @type {number} */ var $55=$io1;
 /** @type {number} */ var $56=(($55)|0);
 /** @type {number} */ var $57=$io2;
 /** @type {number} */ var $58=(($57)|0);
 /** @type {number} */ var $59=$56;
 /** @type {number} */ var $60=$58;
 HEAP32[(($59)>>2)]=HEAP32[(($60)>>2)];HEAP32[((($59)+(4))>>2)]=HEAP32[((($60)+(4))>>2)];
 /** @type {number} */ var $61=$io2;
 /** @type {number} */ var $62=(($61+8)|0);
 /** @type {number} */ var $63=HEAP32[(($62)>>2)];
 /** @type {number} */ var $64=$io1;
 /** @type {number} */ var $65=(($64+8)|0);
 HEAP32[(($65)>>2)]=$63;
 /** @type {number} */ var $66=$1;
 /** @type {number} */ var $67=(($66+8)|0);
 /** @type {number} */ var $68=HEAP32[(($67)>>2)];
 /** @type {number} */ var $69=(($68+16)|0);
 HEAP32[(($67)>>2)]=$69;
 /** @type {number} */ var $70=$1;
 /** @type {number} */ var $71=(($70+24)|0);
 /** @type {number} */ var $72=HEAP32[(($71)>>2)];
 /** @type {number} */ var $73=$1;
 /** @type {number} */ var $74=(($73+8)|0);
 /** @type {number} */ var $75=HEAP32[(($74)>>2)];
 /** @type {number} */ var $76=$72;
 /** @type {number} */ var $77=$75;
 /** @type {number} */ var $78=((($76)-($77))|0);
 /** @type {number} */ var $79=(((($78|0))/(16))&-1);
 /** @type {number} */ var $80=($79|0)<=0;
 if($80){label=9;break;}else{label=10;break;}
 case 9: 
 /** @type {number} */ var $82=$1;
 _luaD_growstack($82,0);
 label=11;break;
 case 10: 
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 /** @type {number} */ var $86=$2;
 /** @type {number} */ var $87=_strchr($86,76);
 /** @type {number} */ var $88=($87|0)!=0;
 if($88){label=13;break;}else{label=14;break;}
 case 13: 
 /** @type {number} */ var $90=$1;
 /** @type {number} */ var $91=$cl;
 _collectvalidlines($90,$91);
 label=14;break;
 case 14: 
 /** @type {number} */ var $93=$status;
 STACKTOP=sp;return $93;
 }
}
/**
 * @param {number} $L
 * @param {number} $o
 * @param {number} $op
 * @return {number}
 */
function _luaG_typeerror($L,$o,$op){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $ci;
 /** @type {number} */ var $name=sp;
 /** @type {number} */ var $t;
 /** @type {number} */ var $kind;
 $1=$L;
 $2=$o;
 $3=$op;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+16)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 $ci=$6;
 HEAP32[(($name)>>2)]=0;
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=(($7+8)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=$9&15;
 /** @type {number} */ var $11=((($10)+(1))|0);
 /** @type {number} */ var $12=((1120+($11<<2))|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 $t=$13;
 $kind=0;
 /** @type {number} */ var $14=$ci;
 /** @type {number} */ var $15=(($14+18)|0);
 /** @type {number} */ var $16=HEAP8[($15)];
 /** @type {number} */ var $17=($16&255);
 /** @type {number} */ var $18=$17&1;
 /** @type {number} */ var $19=($18|0)!=0;
 if($19){label=2;break;}else{label=6;break;}
 case 2: 
 /** @type {number} */ var $21=$ci;
 /** @type {number} */ var $22=$2;
 /** @type {number} */ var $23=_getupvalname($21,$22,$name);
 $kind=$23;
 /** @type {number} */ var $24=$kind;
 /** @type {number} */ var $25=($24|0)!=0;
 if($25){label=5;break;}else{label=3;break;}
 case 3: 
 /** @type {number} */ var $27=$ci;
 /** @type {number} */ var $28=$2;
 /** @type {number} */ var $29=_isinstack($27,$28);
 /** @type {number} */ var $30=($29|0)!=0;
 if($30){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $32=$ci;
 /** @type {number} */ var $33=(($32)|0);
 /** @type {number} */ var $34=HEAP32[(($33)>>2)];
 /** @type {number} */ var $35=(($34)|0);
 /** @type {number} */ var $36=$35;
 /** @type {number} */ var $37=HEAP32[(($36)>>2)];
 /** @type {number} */ var $38=$37;
 /** @type {number} */ var $39=$38;
 /** @type {number} */ var $40=(($39+12)|0);
 /** @type {number} */ var $41=HEAP32[(($40)>>2)];
 /** @type {number} */ var $42=$ci;
 /** @type {number} */ var $43=_currentpc($42);
 /** @type {number} */ var $44=$2;
 /** @type {number} */ var $45=$ci;
 /** @type {number} */ var $46=(($45+24)|0);
 /** @type {number} */ var $47=$46;
 /** @type {number} */ var $48=(($47)|0);
 /** @type {number} */ var $49=HEAP32[(($48)>>2)];
 /** @type {number} */ var $50=$44;
 /** @type {number} */ var $51=$49;
 /** @type {number} */ var $52=((($50)-($51))|0);
 /** @type {number} */ var $53=(((($52|0))/(16))&-1);
 /** @type {number} */ var $54=_getobjname($41,$43,$53,$name);
 $kind=$54;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 /** @type {number} */ var $57=$kind;
 /** @type {number} */ var $58=($57|0)!=0;
 if($58){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $60=$1;
 /** @type {number} */ var $61=$3;
 /** @type {number} */ var $62=$kind;
 /** @type {number} */ var $63=HEAP32[(($name)>>2)];
 /** @type {number} */ var $64=$t;
 _luaG_runerror($60,4512,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,HEAP32[((tempVarArgs)>>2)]=$61,HEAP32[(((tempVarArgs)+(8))>>2)]=$62,HEAP32[(((tempVarArgs)+(16))>>2)]=$63,HEAP32[(((tempVarArgs)+(24))>>2)]=$64,tempVarArgs)); STACKTOP=tempVarArgs;
 case 8: 
 /** @type {number} */ var $66=$1;
 /** @type {number} */ var $67=$3;
 /** @type {number} */ var $68=$t;
 _luaG_runerror($66,10400,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$67,HEAP32[(((tempVarArgs)+(8))>>2)]=$68,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $fmt
 * @param {number} varrp
 * @return {number}
 */
function _luaG_runerror($L,$fmt,varrp){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $argp=sp;
 $1=$L;
 $2=$fmt;
 /** @type {number} */ var $3=(($argp)|0);
 /** @type {number} */ var $4=$3;
 HEAP32[(($4)>>2)]=varrp;HEAP32[((($4)+(4))>>2)]=0;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=(($argp)|0);
 /** @type {number} */ var $9=_luaO_pushvfstring($6,$7,$8);
 _addinfo($5,$9);
 /** @type {number} */ var $10=(($argp)|0);
 /** @type {number} */ var $11=$10;
 /** @type {number} */ var $12=$1;
 _luaG_errormsg($12);
 STACKTOP=sp;return;
}
/**
 * @param {number} $L
 * @param {number} $p1
 * @param {number} $p2
 * @return {number}
 */
function _luaG_concaterror($L,$p1,$p2){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$L;
 $2=$p1;
 $3=$p2;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=(($4+8)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=$6&15;
 /** @type {number} */ var $8=($7|0)==4;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=(($10+8)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=($12|0)==3;
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $15=$3;
 $2=$15;
 label=4;break;
 case 4: 
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=$2;
 _luaG_typeerror($17,$18,7880);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $p1
 * @param {number} $p2
 * @return {number}
 */
function _luaG_aritherror($L,$p1,$p2){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $temp=sp;
 $1=$L;
 $2=$p1;
 $3=$p2;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_luaV_tonumber($4,$temp);
 /** @type {number} */ var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $8=$2;
 $3=$8;
 label=3;break;
 case 3: 
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=$3;
 _luaG_typeerror($10,$11,6040);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $p1
 * @param {number} $p2
 * @return {number}
 */
function _luaG_ordererror($L,$p1,$p2){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $t1;
 /** @type {number} */ var $t2;
 $1=$L;
 $2=$p1;
 $3=$p2;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=(($4+8)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=$6&15;
 /** @type {number} */ var $8=((($7)+(1))|0);
 /** @type {number} */ var $9=((1120+($8<<2))|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 $t1=$10;
 /** @type {number} */ var $11=$3;
 /** @type {number} */ var $12=(($11+8)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=$13&15;
 /** @type {number} */ var $15=((($14)+(1))|0);
 /** @type {number} */ var $16=((1120+($15<<2))|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 $t2=$17;
 /** @type {number} */ var $18=$t1;
 /** @type {number} */ var $19=$t2;
 /** @type {number} */ var $20=($18|0)==($19|0);
 if($20){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $22=$1;
 /** @type {number} */ var $23=$t1;
 _luaG_runerror($22,4640,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$23,tempVarArgs)); STACKTOP=tempVarArgs;
 case 3: 
 /** @type {number} */ var $25=$1;
 /** @type {number} */ var $26=$t1;
 /** @type {number} */ var $27=$t2;
 _luaG_runerror($25,4408,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$26,HEAP32[(((tempVarArgs)+(8))>>2)]=$27,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaG_errormsg($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $errfunc;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io1;
 /** @type {number} */ var $io21;
 /** @type {number} */ var $io12;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+68)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 /** @type {number} */ var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=8;break;}
 case 2: 
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=(($7+28)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=$9;
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=(($11+68)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=(($10+$13)|0);
 /** @type {number} */ var $15=$14;
 $errfunc=$15;
 /** @type {number} */ var $16=$errfunc;
 /** @type {number} */ var $17=(($16+8)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=$18&15;
 /** @type {number} */ var $20=($19|0)==6;
 if($20){label=4;break;}else{label=3;break;}
 case 3: 
 /** @type {number} */ var $22=$1;
 _luaD_throw($22,6);
 case 4: 
 /** @type {number} */ var $24=$1;
 /** @type {number} */ var $25=(($24+8)|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 /** @type {number} */ var $27=((($26)-(16))|0);
 $io2=$27;
 /** @type {number} */ var $28=$1;
 /** @type {number} */ var $29=(($28+8)|0);
 /** @type {number} */ var $30=HEAP32[(($29)>>2)];
 $io1=$30;
 /** @type {number} */ var $31=$io1;
 /** @type {number} */ var $32=(($31)|0);
 /** @type {number} */ var $33=$io2;
 /** @type {number} */ var $34=(($33)|0);
 /** @type {number} */ var $35=$32;
 /** @type {number} */ var $36=$34;
 HEAP32[(($35)>>2)]=HEAP32[(($36)>>2)];HEAP32[((($35)+(4))>>2)]=HEAP32[((($36)+(4))>>2)];
 /** @type {number} */ var $37=$io2;
 /** @type {number} */ var $38=(($37+8)|0);
 /** @type {number} */ var $39=HEAP32[(($38)>>2)];
 /** @type {number} */ var $40=$io1;
 /** @type {number} */ var $41=(($40+8)|0);
 HEAP32[(($41)>>2)]=$39;
 /** @type {number} */ var $42=$errfunc;
 $io21=$42;
 /** @type {number} */ var $43=$1;
 /** @type {number} */ var $44=(($43+8)|0);
 /** @type {number} */ var $45=HEAP32[(($44)>>2)];
 /** @type {number} */ var $46=((($45)-(16))|0);
 $io12=$46;
 /** @type {number} */ var $47=$io12;
 /** @type {number} */ var $48=(($47)|0);
 /** @type {number} */ var $49=$io21;
 /** @type {number} */ var $50=(($49)|0);
 /** @type {number} */ var $51=$48;
 /** @type {number} */ var $52=$50;
 HEAP32[(($51)>>2)]=HEAP32[(($52)>>2)];HEAP32[((($51)+(4))>>2)]=HEAP32[((($52)+(4))>>2)];
 /** @type {number} */ var $53=$io21;
 /** @type {number} */ var $54=(($53+8)|0);
 /** @type {number} */ var $55=HEAP32[(($54)>>2)];
 /** @type {number} */ var $56=$io12;
 /** @type {number} */ var $57=(($56+8)|0);
 HEAP32[(($57)>>2)]=$55;
 /** @type {number} */ var $58=$1;
 /** @type {number} */ var $59=(($58+8)|0);
 /** @type {number} */ var $60=HEAP32[(($59)>>2)];
 /** @type {number} */ var $61=(($60+16)|0);
 HEAP32[(($59)>>2)]=$61;
 /** @type {number} */ var $62=$1;
 /** @type {number} */ var $63=(($62+24)|0);
 /** @type {number} */ var $64=HEAP32[(($63)>>2)];
 /** @type {number} */ var $65=$1;
 /** @type {number} */ var $66=(($65+8)|0);
 /** @type {number} */ var $67=HEAP32[(($66)>>2)];
 /** @type {number} */ var $68=$64;
 /** @type {number} */ var $69=$67;
 /** @type {number} */ var $70=((($68)-($69))|0);
 /** @type {number} */ var $71=(((($70|0))/(16))&-1);
 /** @type {number} */ var $72=($71|0)<=0;
 if($72){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $74=$1;
 _luaD_growstack($74,0);
 label=7;break;
 case 6: 
 label=7;break;
 case 7: 
 /** @type {number} */ var $77=$1;
 /** @type {number} */ var $78=$1;
 /** @type {number} */ var $79=(($78+8)|0);
 /** @type {number} */ var $80=HEAP32[(($79)>>2)];
 /** @type {number} */ var $81=((($80)-(32))|0);
 _luaD_call($77,$81,1,0);
 label=8;break;
 case 8: 
 /** @type {number} */ var $83=$1;
 _luaD_throw($83,2);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $ci
 * @param {number} $n
 * @param {number} $pos
 * @return {number}
 */
function _findlocal($L,$ci,$n,$pos){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 /** @type {number} */ var $name;
 /** @type {number} */ var $base;
 /** @type {number} */ var $limit;
 $2=$L;
 $3=$ci;
 $4=$n;
 $5=$pos;
 $name=0;
 /** @type {number} */ var $6=$3;
 /** @type {number} */ var $7=(($6+18)|0);
 /** @type {number} */ var $8=HEAP8[($7)];
 /** @type {number} */ var $9=($8&255);
 /** @type {number} */ var $10=$9&1;
 /** @type {number} */ var $11=($10|0)!=0;
 if($11){label=2;break;}else{label=6;break;}
 case 2: 
 /** @type {number} */ var $13=$4;
 /** @type {number} */ var $14=($13|0)<0;
 if($14){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $16=$3;
 /** @type {number} */ var $17=$4;
 /** @type {number} */ var $18=(((-$17))|0);
 /** @type {number} */ var $19=$5;
 /** @type {number} */ var $20=_findvararg($16,$18,$19);
 $1=$20;
 label=17;break;
 case 4: 
 /** @type {number} */ var $22=$3;
 /** @type {number} */ var $23=(($22+24)|0);
 /** @type {number} */ var $24=$23;
 /** @type {number} */ var $25=(($24)|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 $base=$26;
 /** @type {number} */ var $27=$3;
 /** @type {number} */ var $28=(($27)|0);
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 /** @type {number} */ var $30=(($29)|0);
 /** @type {number} */ var $31=$30;
 /** @type {number} */ var $32=HEAP32[(($31)>>2)];
 /** @type {number} */ var $33=$32;
 /** @type {number} */ var $34=$33;
 /** @type {number} */ var $35=(($34+12)|0);
 /** @type {number} */ var $36=HEAP32[(($35)>>2)];
 /** @type {number} */ var $37=$4;
 /** @type {number} */ var $38=$3;
 /** @type {number} */ var $39=_currentpc($38);
 /** @type {number} */ var $40=_luaF_getlocalname($36,$37,$39);
 $name=$40;
 label=5;break;
 case 5: 
 label=7;break;
 case 6: 
 /** @type {number} */ var $43=$3;
 /** @type {number} */ var $44=(($43)|0);
 /** @type {number} */ var $45=HEAP32[(($44)>>2)];
 /** @type {number} */ var $46=(($45+16)|0);
 $base=$46;
 label=7;break;
 case 7: 
 /** @type {number} */ var $48=$name;
 /** @type {number} */ var $49=($48|0)==0;
 if($49){label=8;break;}else{label=16;break;}
 case 8: 
 /** @type {number} */ var $51=$3;
 /** @type {number} */ var $52=$2;
 /** @type {number} */ var $53=(($52+16)|0);
 /** @type {number} */ var $54=HEAP32[(($53)>>2)];
 /** @type {number} */ var $55=($51|0)==($54|0);
 if($55){label=9;break;}else{label=10;break;}
 case 9: 
 /** @type {number} */ var $57=$2;
 /** @type {number} */ var $58=(($57+8)|0);
 /** @type {number} */ var $59=HEAP32[(($58)>>2)];
 var $67=$59;label=11;break;
 case 10: 
 /** @type {number} */ var $61=$3;
 /** @type {number} */ var $62=(($61+12)|0);
 /** @type {number} */ var $63=HEAP32[(($62)>>2)];
 /** @type {number} */ var $64=(($63)|0);
 /** @type {number} */ var $65=HEAP32[(($64)>>2)];
 var $67=$65;label=11;break;
 case 11: 
 var $67;
 $limit=$67;
 /** @type {number} */ var $68=$limit;
 /** @type {number} */ var $69=$base;
 /** @type {number} */ var $70=$68;
 /** @type {number} */ var $71=$69;
 /** @type {number} */ var $72=((($70)-($71))|0);
 /** @type {number} */ var $73=(((($72|0))/(16))&-1);
 /** @type {number} */ var $74=$4;
 /** @type {number} */ var $75=($73|0)>=($74|0);
 if($75){label=12;break;}else{label=14;break;}
 case 12: 
 /** @type {number} */ var $77=$4;
 /** @type {number} */ var $78=($77|0)>0;
 if($78){label=13;break;}else{label=14;break;}
 case 13: 
 $name=8768;
 label=15;break;
 case 14: 
 $1=0;
 label=17;break;
 case 15: 
 label=16;break;
 case 16: 
 /** @type {number} */ var $83=$base;
 /** @type {number} */ var $84=$4;
 /** @type {number} */ var $85=((($84)-(1))|0);
 /** @type {number} */ var $86=(($83+($85<<4))|0);
 /** @type {number} */ var $87=$5;
 HEAP32[(($87)>>2)]=$86;
 /** @type {number} */ var $88=$name;
 $1=$88;
 label=17;break;
 case 17: 
 /** @type {number} */ var $90=$1;
 STACKTOP=sp;return $90;
 }
}
/**
 * @param {number} $L
 * @param {number} $what
 * @param {number} $ar
 * @param {number} $f
 * @param {number} $ci
 * @return {number}
 */
function _auxgetinfo($L,$what,$ar,$f,$ci){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 /** @type {number} */ var $status;
 $1=$L;
 $2=$what;
 $3=$ar;
 $4=$f;
 $5=$ci;
 $status=1;
 label=2;break;
 case 2: 
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=HEAP8[($7)];
 /** @type {number} */ var $9=(($8<<24)>>24)!=0;
 if($9){label=3;break;}else{label=34;break;}
 case 3: 
 /** @type {number} */ var $11=$2;
 /** @type {number} */ var $12=HEAP8[($11)];
 /** @type {number} */ var $13=(($12<<24)>>24);
 switch(($13|0)){case 117:{ label=10;break;}case 116:{ label=18;break;}case 110:{ label=22;break;}case 76:case 102:{ label=30;break;}case 83:{ label=4;break;}case 108:{ label=5;break;}default:{label=31;break;}}break;
 case 4: 
 /** @type {number} */ var $15=$3;
 /** @type {number} */ var $16=$4;
 _funcinfo($15,$16);
 label=32;break;
 case 5: 
 /** @type {number} */ var $18=$5;
 /** @type {number} */ var $19=($18|0)!=0;
 if($19){label=6;break;}else{label=8;break;}
 case 6: 
 /** @type {number} */ var $21=$5;
 /** @type {number} */ var $22=(($21+18)|0);
 /** @type {number} */ var $23=HEAP8[($22)];
 /** @type {number} */ var $24=($23&255);
 /** @type {number} */ var $25=$24&1;
 /** @type {number} */ var $26=($25|0)!=0;
 if($26){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $28=$5;
 /** @type {number} */ var $29=_currentline($28);
 var $32=$29;label=9;break;
 case 8: 
 var $32=-1;label=9;break;
 case 9: 
 var $32;
 /** @type {number} */ var $33=$3;
 /** @type {number} */ var $34=(($33+20)|0);
 HEAP32[(($34)>>2)]=$32;
 label=32;break;
 case 10: 
 /** @type {number} */ var $36=$4;
 /** @type {number} */ var $37=($36|0)==0;
 if($37){label=11;break;}else{label=12;break;}
 case 11: 
 var $46=0;label=13;break;
 case 12: 
 /** @type {number} */ var $40=$4;
 /** @type {number} */ var $41=$40;
 /** @type {number} */ var $42=(($41+6)|0);
 /** @type {number} */ var $43=HEAP8[($42)];
 /** @type {number} */ var $44=($43&255);
 var $46=$44;label=13;break;
 case 13: 
 var $46;
 /** @type {number} */ var $47=(($46)&255);
 /** @type {number} */ var $48=$3;
 /** @type {number} */ var $49=(($48+32)|0);
 HEAP8[($49)]=$47;
 /** @type {number} */ var $50=$4;
 /** @type {number} */ var $51=($50|0)==0;
 if($51){label=15;break;}else{label=14;break;}
 case 14: 
 /** @type {number} */ var $53=$4;
 /** @type {number} */ var $54=$53;
 /** @type {number} */ var $55=(($54+4)|0);
 /** @type {number} */ var $56=HEAP8[($55)];
 /** @type {number} */ var $57=($56&255);
 /** @type {number} */ var $58=($57|0)==38;
 if($58){label=15;break;}else{label=16;break;}
 case 15: 
 /** @type {number} */ var $60=$3;
 /** @type {number} */ var $61=(($60+34)|0);
 HEAP8[($61)]=1;
 /** @type {number} */ var $62=$3;
 /** @type {number} */ var $63=(($62+33)|0);
 HEAP8[($63)]=0;
 label=17;break;
 case 16: 
 /** @type {number} */ var $65=$4;
 /** @type {number} */ var $66=$65;
 /** @type {number} */ var $67=(($66+12)|0);
 /** @type {number} */ var $68=HEAP32[(($67)>>2)];
 /** @type {number} */ var $69=(($68+77)|0);
 /** @type {number} */ var $70=HEAP8[($69)];
 /** @type {number} */ var $71=$3;
 /** @type {number} */ var $72=(($71+34)|0);
 HEAP8[($72)]=$70;
 /** @type {number} */ var $73=$4;
 /** @type {number} */ var $74=$73;
 /** @type {number} */ var $75=(($74+12)|0);
 /** @type {number} */ var $76=HEAP32[(($75)>>2)];
 /** @type {number} */ var $77=(($76+76)|0);
 /** @type {number} */ var $78=HEAP8[($77)];
 /** @type {number} */ var $79=$3;
 /** @type {number} */ var $80=(($79+33)|0);
 HEAP8[($80)]=$78;
 label=17;break;
 case 17: 
 label=32;break;
 case 18: 
 /** @type {number} */ var $83=$5;
 /** @type {number} */ var $84=($83|0)!=0;
 if($84){label=19;break;}else{label=20;break;}
 case 19: 
 /** @type {number} */ var $86=$5;
 /** @type {number} */ var $87=(($86+18)|0);
 /** @type {number} */ var $88=HEAP8[($87)];
 /** @type {number} */ var $89=($88&255);
 /** @type {number} */ var $90=$89&64;
 var $93=$90;label=21;break;
 case 20: 
 var $93=0;label=21;break;
 case 21: 
 var $93;
 /** @type {number} */ var $94=(($93)&255);
 /** @type {number} */ var $95=$3;
 /** @type {number} */ var $96=(($95+35)|0);
 HEAP8[($96)]=$94;
 label=32;break;
 case 22: 
 /** @type {number} */ var $98=$5;
 /** @type {number} */ var $99=($98|0)!=0;
 if($99){label=23;break;}else{label=26;break;}
 case 23: 
 /** @type {number} */ var $101=$5;
 /** @type {number} */ var $102=(($101+18)|0);
 /** @type {number} */ var $103=HEAP8[($102)];
 /** @type {number} */ var $104=($103&255);
 /** @type {number} */ var $105=$104&64;
 /** @type {number} */ var $106=($105|0)!=0;
 if($106){label=26;break;}else{label=24;break;}
 case 24: 
 /** @type {number} */ var $108=$5;
 /** @type {number} */ var $109=(($108+8)|0);
 /** @type {number} */ var $110=HEAP32[(($109)>>2)];
 /** @type {number} */ var $111=(($110+18)|0);
 /** @type {number} */ var $112=HEAP8[($111)];
 /** @type {number} */ var $113=($112&255);
 /** @type {number} */ var $114=$113&1;
 /** @type {number} */ var $115=($114|0)!=0;
 if($115){label=25;break;}else{label=26;break;}
 case 25: 
 /** @type {number} */ var $117=$1;
 /** @type {number} */ var $118=$5;
 /** @type {number} */ var $119=(($118+8)|0);
 /** @type {number} */ var $120=HEAP32[(($119)>>2)];
 /** @type {number} */ var $121=$3;
 /** @type {number} */ var $122=(($121+4)|0);
 /** @type {number} */ var $123=_getfuncname($117,$120,$122);
 /** @type {number} */ var $124=$3;
 /** @type {number} */ var $125=(($124+8)|0);
 HEAP32[(($125)>>2)]=$123;
 label=27;break;
 case 26: 
 /** @type {number} */ var $127=$3;
 /** @type {number} */ var $128=(($127+8)|0);
 HEAP32[(($128)>>2)]=0;
 label=27;break;
 case 27: 
 /** @type {number} */ var $130=$3;
 /** @type {number} */ var $131=(($130+8)|0);
 /** @type {number} */ var $132=HEAP32[(($131)>>2)];
 /** @type {number} */ var $133=($132|0)==0;
 if($133){label=28;break;}else{label=29;break;}
 case 28: 
 /** @type {number} */ var $135=$3;
 /** @type {number} */ var $136=(($135+8)|0);
 HEAP32[(($136)>>2)]=12120;
 /** @type {number} */ var $137=$3;
 /** @type {number} */ var $138=(($137+4)|0);
 HEAP32[(($138)>>2)]=0;
 label=29;break;
 case 29: 
 label=32;break;
 case 30: 
 label=32;break;
 case 31: 
 $status=0;
 label=32;break;
 case 32: 
 label=33;break;
 case 33: 
 /** @type {number} */ var $144=$2;
 /** @type {number} */ var $145=(($144+1)|0);
 $2=$145;
 label=2;break;
 case 34: 
 /** @type {number} */ var $147=$status;
 STACKTOP=sp;return $147;
 }
}
/**
 * @param {number} $L
 * @param {number} $f
 * @return {number}
 */
function _collectvalidlines($L,$f){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $i;
 /** @type {number} */ var $v=sp;
 /** @type {number} */ var $lineinfo;
 /** @type {number} */ var $t;
 /** @type {number} */ var $io;
 /** @type {number} */ var $io1;
 $1=$L;
 $2=$f;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=$6;
 /** @type {number} */ var $8=(($7+4)|0);
 /** @type {number} */ var $9=HEAP8[($8)];
 /** @type {number} */ var $10=($9&255);
 /** @type {number} */ var $11=($10|0)==38;
 if($11){label=3;break;}else{label=7;break;}
 case 3: 
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=(($13+8)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=(($15+8)|0);
 HEAP32[(($16)>>2)]=0;
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=(($17+8)|0);
 /** @type {number} */ var $19=HEAP32[(($18)>>2)];
 /** @type {number} */ var $20=(($19+16)|0);
 HEAP32[(($18)>>2)]=$20;
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=(($21+24)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 /** @type {number} */ var $24=$1;
 /** @type {number} */ var $25=(($24+8)|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 /** @type {number} */ var $27=$23;
 /** @type {number} */ var $28=$26;
 /** @type {number} */ var $29=((($27)-($28))|0);
 /** @type {number} */ var $30=(((($29|0))/(16))&-1);
 /** @type {number} */ var $31=($30|0)<=0;
 if($31){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $33=$1;
 _luaD_growstack($33,0);
 label=6;break;
 case 5: 
 label=6;break;
 case 6: 
 label=15;break;
 case 7: 
 /** @type {number} */ var $37=$2;
 /** @type {number} */ var $38=$37;
 /** @type {number} */ var $39=(($38+12)|0);
 /** @type {number} */ var $40=HEAP32[(($39)>>2)];
 /** @type {number} */ var $41=(($40+20)|0);
 /** @type {number} */ var $42=HEAP32[(($41)>>2)];
 $lineinfo=$42;
 /** @type {number} */ var $43=$1;
 /** @type {number} */ var $44=_luaH_new($43);
 $t=$44;
 /** @type {number} */ var $45=$1;
 /** @type {number} */ var $46=(($45+8)|0);
 /** @type {number} */ var $47=HEAP32[(($46)>>2)];
 $io=$47;
 /** @type {number} */ var $48=$t;
 /** @type {number} */ var $49=$48;
 /** @type {number} */ var $50=$io;
 /** @type {number} */ var $51=(($50)|0);
 /** @type {number} */ var $52=$51;
 HEAP32[(($52)>>2)]=$49;
 /** @type {number} */ var $53=$io;
 /** @type {number} */ var $54=(($53+8)|0);
 HEAP32[(($54)>>2)]=69;
 /** @type {number} */ var $55=$1;
 /** @type {number} */ var $56=(($55+8)|0);
 /** @type {number} */ var $57=HEAP32[(($56)>>2)];
 /** @type {number} */ var $58=(($57+16)|0);
 HEAP32[(($56)>>2)]=$58;
 /** @type {number} */ var $59=$1;
 /** @type {number} */ var $60=(($59+24)|0);
 /** @type {number} */ var $61=HEAP32[(($60)>>2)];
 /** @type {number} */ var $62=$1;
 /** @type {number} */ var $63=(($62+8)|0);
 /** @type {number} */ var $64=HEAP32[(($63)>>2)];
 /** @type {number} */ var $65=$61;
 /** @type {number} */ var $66=$64;
 /** @type {number} */ var $67=((($65)-($66))|0);
 /** @type {number} */ var $68=(((($67|0))/(16))&-1);
 /** @type {number} */ var $69=($68|0)<=0;
 if($69){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $71=$1;
 _luaD_growstack($71,0);
 label=10;break;
 case 9: 
 label=10;break;
 case 10: 
 $io1=$v;
 /** @type {number} */ var $74=$io1;
 /** @type {number} */ var $75=(($74)|0);
 /** @type {number} */ var $76=$75;
 HEAP32[(($76)>>2)]=1;
 /** @type {number} */ var $77=$io1;
 /** @type {number} */ var $78=(($77+8)|0);
 HEAP32[(($78)>>2)]=1;
 $i=0;
 label=11;break;
 case 11: 
 /** @type {number} */ var $80=$i;
 /** @type {number} */ var $81=$2;
 /** @type {number} */ var $82=$81;
 /** @type {number} */ var $83=(($82+12)|0);
 /** @type {number} */ var $84=HEAP32[(($83)>>2)];
 /** @type {number} */ var $85=(($84+52)|0);
 /** @type {number} */ var $86=HEAP32[(($85)>>2)];
 /** @type {number} */ var $87=($80|0)<($86|0);
 if($87){label=12;break;}else{label=14;break;}
 case 12: 
 /** @type {number} */ var $89=$1;
 /** @type {number} */ var $90=$t;
 /** @type {number} */ var $91=$i;
 /** @type {number} */ var $92=$lineinfo;
 /** @type {number} */ var $93=(($92+($91<<2))|0);
 /** @type {number} */ var $94=HEAP32[(($93)>>2)];
 _luaH_setint($89,$90,$94,$v);
 label=13;break;
 case 13: 
 /** @type {number} */ var $96=$i;
 /** @type {number} */ var $97=((($96)+(1))|0);
 $i=$97;
 label=11;break;
 case 14: 
 label=15;break;
 case 15: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ci
 * @param {number} $o
 * @param {number} $name
 * @return {number}
 */
function _getupvalname($ci,$o,$name){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $c;
 /** @type {number} */ var $i;
 $2=$ci;
 $3=$o;
 $4=$name;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=(($5)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=(($7)|0);
 /** @type {number} */ var $9=$8;
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=$10;
 /** @type {number} */ var $12=$11;
 $c=$12;
 $i=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $14=$i;
 /** @type {number} */ var $15=$c;
 /** @type {number} */ var $16=(($15+6)|0);
 /** @type {number} */ var $17=HEAP8[($16)];
 /** @type {number} */ var $18=($17&255);
 /** @type {number} */ var $19=($14|0)<($18|0);
 if($19){label=3;break;}else{label=7;break;}
 case 3: 
 /** @type {number} */ var $21=$i;
 /** @type {number} */ var $22=$c;
 /** @type {number} */ var $23=(($22+16)|0);
 /** @type {number} */ var $24=(($23+($21<<2))|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=(($25+8)|0);
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=$3;
 /** @type {number} */ var $29=($27|0)==($28|0);
 if($29){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $31=$c;
 /** @type {number} */ var $32=(($31+12)|0);
 /** @type {number} */ var $33=HEAP32[(($32)>>2)];
 /** @type {number} */ var $34=$i;
 /** @type {number} */ var $35=_upvalname($33,$34);
 /** @type {number} */ var $36=$4;
 HEAP32[(($36)>>2)]=$35;
 $1=11712;
 label=8;break;
 case 5: 
 label=6;break;
 case 6: 
 /** @type {number} */ var $39=$i;
 /** @type {number} */ var $40=((($39)+(1))|0);
 $i=$40;
 label=2;break;
 case 7: 
 $1=0;
 label=8;break;
 case 8: 
 /** @type {number} */ var $43=$1;
 STACKTOP=sp;return $43;
 }
}
/**
 * @param {number} $ci
 * @param {number} $o
 * @return {number}
 */
function _isinstack($ci,$o){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $p;
 $2=$ci;
 $3=$o;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=(($4+24)|0);
 /** @type {number} */ var $6=$5;
 /** @type {number} */ var $7=(($6)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 $p=$8;
 label=2;break;
 case 2: 
 /** @type {number} */ var $10=$p;
 /** @type {number} */ var $11=$2;
 /** @type {number} */ var $12=(($11+4)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=($10>>>0)<($13>>>0);
 if($14){label=3;break;}else{label=7;break;}
 case 3: 
 /** @type {number} */ var $16=$3;
 /** @type {number} */ var $17=$p;
 /** @type {number} */ var $18=($16|0)==($17|0);
 if($18){label=4;break;}else{label=5;break;}
 case 4: 
 $1=1;
 label=8;break;
 case 5: 
 label=6;break;
 case 6: 
 /** @type {number} */ var $22=$p;
 /** @type {number} */ var $23=(($22+16)|0);
 $p=$23;
 label=2;break;
 case 7: 
 $1=0;
 label=8;break;
 case 8: 
 /** @type {number} */ var $26=$1;
 STACKTOP=sp;return $26;
 }
}
/**
 * @param {number} $ci
 * @return {number}
 */
function _currentpc($ci){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$ci;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+24)|0);
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=(($4+4)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=(($7)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=(($9)|0);
 /** @type {number} */ var $11=$10;
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=$12;
 /** @type {number} */ var $14=$13;
 /** @type {number} */ var $15=(($14+12)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=(($16+12)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=$6;
 /** @type {number} */ var $20=$18;
 /** @type {number} */ var $21=((($19)-($20))|0);
 /** @type {number} */ var $22=(((($21|0))/(4))&-1);
 /** @type {number} */ var $23=((($22)-(1))|0);
 STACKTOP=sp;return $23;
}
/**
 * @param {number} $p
 * @param {number} $lastpc
 * @param {number} $reg
 * @param {number} $name
 * @return {number}
 */
function _getobjname($p,$lastpc,$reg,$name){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 /** @type {number} */ var $pc;
 /** @type {number} */ var $i;
 /** @type {number} */ var $op;
 /** @type {number} */ var $b;
 /** @type {number} */ var $k;
 /** @type {number} */ var $t;
 /** @type {number} */ var $vn;
 /** @type {number} */ var $b1;
 /** @type {number} */ var $k2;
 $2=$p;
 $3=$lastpc;
 $4=$reg;
 $5=$name;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=$4;
 /** @type {number} */ var $8=((($7)+(1))|0);
 /** @type {number} */ var $9=$3;
 /** @type {number} */ var $10=_luaF_getlocalname($6,$8,$9);
 /** @type {number} */ var $11=$5;
 HEAP32[(($11)>>2)]=$10;
 /** @type {number} */ var $12=$5;
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=($13|0)!=0;
 if($14){label=2;break;}else{label=3;break;}
 case 2: 
 $1=3504;
 label=25;break;
 case 3: 
 /** @type {number} */ var $17=$2;
 /** @type {number} */ var $18=$3;
 /** @type {number} */ var $19=$4;
 /** @type {number} */ var $20=_findsetreg($17,$18,$19);
 $pc=$20;
 /** @type {number} */ var $21=$pc;
 /** @type {number} */ var $22=($21|0)!=-1;
 if($22){label=4;break;}else{label=24;break;}
 case 4: 
 /** @type {number} */ var $24=$pc;
 /** @type {number} */ var $25=$2;
 /** @type {number} */ var $26=(($25+12)|0);
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=(($27+($24<<2))|0);
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 $i=$29;
 /** @type {number} */ var $30=$i;
 /** @type {number} */ var $31=$30>>>0;
 /** @type {number} */ var $32=$31&63;
 $op=$32;
 /** @type {number} */ var $33=$op;
 switch(($33|0)){case 5:{ label=14;break;}case 1:case 2:{ label=15;break;}case 12:{ label=21;break;}case 0:{ label=5;break;}case 6:case 7:{ label=8;break;}default:{label=22;break;}}break;
 case 5: 
 /** @type {number} */ var $35=$i;
 /** @type {number} */ var $36=$35>>>23;
 /** @type {number} */ var $37=$36&511;
 $b=$37;
 /** @type {number} */ var $38=$b;
 /** @type {number} */ var $39=$i;
 /** @type {number} */ var $40=$39>>>6;
 /** @type {number} */ var $41=$40&255;
 /** @type {number} */ var $42=($38|0)<($41|0);
 if($42){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $44=$2;
 /** @type {number} */ var $45=$pc;
 /** @type {number} */ var $46=$b;
 /** @type {number} */ var $47=$5;
 /** @type {number} */ var $48=_getobjname($44,$45,$46,$47);
 $1=$48;
 label=25;break;
 case 7: 
 label=23;break;
 case 8: 
 /** @type {number} */ var $51=$i;
 /** @type {number} */ var $52=$51>>>14;
 /** @type {number} */ var $53=$52&511;
 $k=$53;
 /** @type {number} */ var $54=$i;
 /** @type {number} */ var $55=$54>>>23;
 /** @type {number} */ var $56=$55&511;
 $t=$56;
 /** @type {number} */ var $57=$op;
 /** @type {number} */ var $58=($57|0)==7;
 if($58){label=9;break;}else{label=10;break;}
 case 9: 
 /** @type {number} */ var $60=$2;
 /** @type {number} */ var $61=$t;
 /** @type {number} */ var $62=((($61)+(1))|0);
 /** @type {number} */ var $63=$pc;
 /** @type {number} */ var $64=_luaF_getlocalname($60,$62,$63);
 var $70=$64;label=11;break;
 case 10: 
 /** @type {number} */ var $66=$2;
 /** @type {number} */ var $67=$t;
 /** @type {number} */ var $68=_upvalname($66,$67);
 var $70=$68;label=11;break;
 case 11: 
 var $70;
 $vn=$70;
 /** @type {number} */ var $71=$2;
 /** @type {number} */ var $72=$pc;
 /** @type {number} */ var $73=$k;
 /** @type {number} */ var $74=$5;
 _kname($71,$72,$73,$74);
 /** @type {number} */ var $75=$vn;
 /** @type {number} */ var $76=($75|0)!=0;
 if($76){label=12;break;}else{var $82=0;label=13;break;}
 case 12: 
 /** @type {number} */ var $78=$vn;
 /** @type {number} */ var $79=_strcmp($78,3136);
 /** @type {number} */ var $80=($79|0)==0;
 var $82=$80;label=13;break;
 case 13: 
 var $82;
 /** @type {number} */ var $83=($82?2808:12040);
 $1=$83;
 label=25;break;
 case 14: 
 /** @type {number} */ var $85=$2;
 /** @type {number} */ var $86=$i;
 /** @type {number} */ var $87=$86>>>23;
 /** @type {number} */ var $88=$87&511;
 /** @type {number} */ var $89=_upvalname($85,$88);
 /** @type {number} */ var $90=$5;
 HEAP32[(($90)>>2)]=$89;
 $1=11712;
 label=25;break;
 case 15: 
 /** @type {number} */ var $92=$op;
 /** @type {number} */ var $93=($92|0)==1;
 if($93){label=16;break;}else{label=17;break;}
 case 16: 
 /** @type {number} */ var $95=$i;
 /** @type {number} */ var $96=$95>>>14;
 /** @type {number} */ var $97=$96&262143;
 var $109=$97;label=18;break;
 case 17: 
 /** @type {number} */ var $99=$pc;
 /** @type {number} */ var $100=((($99)+(1))|0);
 /** @type {number} */ var $101=$2;
 /** @type {number} */ var $102=(($101+12)|0);
 /** @type {number} */ var $103=HEAP32[(($102)>>2)];
 /** @type {number} */ var $104=(($103+($100<<2))|0);
 /** @type {number} */ var $105=HEAP32[(($104)>>2)];
 /** @type {number} */ var $106=$105>>>6;
 /** @type {number} */ var $107=$106&67108863;
 var $109=$107;label=18;break;
 case 18: 
 var $109;
 $b1=$109;
 /** @type {number} */ var $110=$b1;
 /** @type {number} */ var $111=$2;
 /** @type {number} */ var $112=(($111+8)|0);
 /** @type {number} */ var $113=HEAP32[(($112)>>2)];
 /** @type {number} */ var $114=(($113+($110<<4))|0);
 /** @type {number} */ var $115=(($114+8)|0);
 /** @type {number} */ var $116=HEAP32[(($115)>>2)];
 /** @type {number} */ var $117=$116&15;
 /** @type {number} */ var $118=($117|0)==4;
 if($118){label=19;break;}else{label=20;break;}
 case 19: 
 /** @type {number} */ var $120=$b1;
 /** @type {number} */ var $121=$2;
 /** @type {number} */ var $122=(($121+8)|0);
 /** @type {number} */ var $123=HEAP32[(($122)>>2)];
 /** @type {number} */ var $124=(($123+($120<<4))|0);
 /** @type {number} */ var $125=(($124)|0);
 /** @type {number} */ var $126=$125;
 /** @type {number} */ var $127=HEAP32[(($126)>>2)];
 /** @type {number} */ var $128=$127;
 /** @type {number} */ var $129=(($128+16)|0);
 /** @type {number} */ var $130=$129;
 /** @type {number} */ var $131=$5;
 HEAP32[(($131)>>2)]=$130;
 $1=11296;
 label=25;break;
 case 20: 
 label=23;break;
 case 21: 
 /** @type {number} */ var $134=$i;
 /** @type {number} */ var $135=$134>>>14;
 /** @type {number} */ var $136=$135&511;
 $k2=$136;
 /** @type {number} */ var $137=$2;
 /** @type {number} */ var $138=$pc;
 /** @type {number} */ var $139=$k2;
 /** @type {number} */ var $140=$5;
 _kname($137,$138,$139,$140);
 $1=11016;
 label=25;break;
 case 22: 
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 $1=0;
 label=25;break;
 case 25: 
 /** @type {number} */ var $145=$1;
 STACKTOP=sp;return $145;
 }
}
/**
 * @param {number} $L
 * @param {number} $msg
 * @return {number}
 */
function _addinfo($L,$msg){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $ci;
 /** @type {number} */ var $buff=sp;
 /** @type {number} */ var $line;
 /** @type {number} */ var $src;
 $1=$L;
 $2=$msg;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+16)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $ci=$5;
 /** @type {number} */ var $6=$ci;
 /** @type {number} */ var $7=(($6+18)|0);
 /** @type {number} */ var $8=HEAP8[($7)];
 /** @type {number} */ var $9=($8&255);
 /** @type {number} */ var $10=$9&1;
 /** @type {number} */ var $11=($10|0)!=0;
 if($11){label=2;break;}else{label=6;break;}
 case 2: 
 /** @type {number} */ var $13=$ci;
 /** @type {number} */ var $14=_currentline($13);
 $line=$14;
 /** @type {number} */ var $15=$ci;
 /** @type {number} */ var $16=(($15)|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=(($17)|0);
 /** @type {number} */ var $19=$18;
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=$20;
 /** @type {number} */ var $22=$21;
 /** @type {number} */ var $23=(($22+12)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=(($24+36)|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 $src=$26;
 /** @type {number} */ var $27=$src;
 /** @type {number} */ var $28=($27|0)!=0;
 if($28){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $30=(($buff)|0);
 /** @type {number} */ var $31=$src;
 /** @type {number} */ var $32=(($31+16)|0);
 /** @type {number} */ var $33=$32;
 _luaO_chunkid($30,$33,60);
 label=5;break;
 case 4: 
 /** @type {number} */ var $35=(($buff)|0);
 HEAP8[($35)]=63;
 /** @type {number} */ var $36=(($buff+1)|0);
 HEAP8[($36)]=0;
 label=5;break;
 case 5: 
 /** @type {number} */ var $38=$1;
 /** @type {number} */ var $39=(($buff)|0);
 /** @type {number} */ var $40=$line;
 /** @type {number} */ var $41=$2;
 /** @type {number} */ var $42=_luaO_pushfstring($38,3936,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,HEAP32[((tempVarArgs)>>2)]=$39,HEAP32[(((tempVarArgs)+(8))>>2)]=$40,HEAP32[(((tempVarArgs)+(16))>>2)]=$41,tempVarArgs)); STACKTOP=tempVarArgs;
 label=6;break;
 case 6: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ci
 * @param {number} $n
 * @param {number} $pos
 * @return {number}
 */
function _findvararg($ci,$n,$pos){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $nparams;
 $2=$ci;
 $3=$n;
 $4=$pos;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=(($5)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=(($7)|0);
 /** @type {number} */ var $9=$8;
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=$10;
 /** @type {number} */ var $12=$11;
 /** @type {number} */ var $13=(($12+12)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=(($14+76)|0);
 /** @type {number} */ var $16=HEAP8[($15)];
 /** @type {number} */ var $17=($16&255);
 $nparams=$17;
 /** @type {number} */ var $18=$3;
 /** @type {number} */ var $19=$2;
 /** @type {number} */ var $20=(($19+24)|0);
 /** @type {number} */ var $21=$20;
 /** @type {number} */ var $22=(($21)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 /** @type {number} */ var $24=$2;
 /** @type {number} */ var $25=(($24)|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 /** @type {number} */ var $27=$23;
 /** @type {number} */ var $28=$26;
 /** @type {number} */ var $29=((($27)-($28))|0);
 /** @type {number} */ var $30=(((($29|0))/(16))&-1);
 /** @type {number} */ var $31=$nparams;
 /** @type {number} */ var $32=((($30)-($31))|0);
 /** @type {number} */ var $33=($18|0)>=($32|0);
 if($33){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=4;break;
 case 3: 
 /** @type {number} */ var $36=$2;
 /** @type {number} */ var $37=(($36)|0);
 /** @type {number} */ var $38=HEAP32[(($37)>>2)];
 /** @type {number} */ var $39=$nparams;
 /** @type {number} */ var $40=(($38+($39<<4))|0);
 /** @type {number} */ var $41=$3;
 /** @type {number} */ var $42=(($40+($41<<4))|0);
 /** @type {number} */ var $43=$4;
 HEAP32[(($43)>>2)]=$42;
 $1=8504;
 label=4;break;
 case 4: 
 /** @type {number} */ var $45=$1;
 STACKTOP=sp;return $45;
 }
}
/**
 * @param {number} $ar
 * @param {number} $cl
 * @return {number}
 */
function _funcinfo($ar,$cl){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $p;
 $1=$ar;
 $2=$cl;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=$6;
 /** @type {number} */ var $8=(($7+4)|0);
 /** @type {number} */ var $9=HEAP8[($8)];
 /** @type {number} */ var $10=($9&255);
 /** @type {number} */ var $11=($10|0)==38;
 if($11){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=(($13+16)|0);
 HEAP32[(($14)>>2)]=9952;
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=(($15+24)|0);
 HEAP32[(($16)>>2)]=-1;
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=(($17+28)|0);
 HEAP32[(($18)>>2)]=-1;
 /** @type {number} */ var $19=$1;
 /** @type {number} */ var $20=(($19+12)|0);
 HEAP32[(($20)>>2)]=9704;
 label=8;break;
 case 4: 
 /** @type {number} */ var $22=$2;
 /** @type {number} */ var $23=$22;
 /** @type {number} */ var $24=(($23+12)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 $p=$25;
 /** @type {number} */ var $26=$p;
 /** @type {number} */ var $27=(($26+36)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=($28|0)!=0;
 if($29){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $31=$p;
 /** @type {number} */ var $32=(($31+36)|0);
 /** @type {number} */ var $33=HEAP32[(($32)>>2)];
 /** @type {number} */ var $34=(($33+16)|0);
 /** @type {number} */ var $35=$34;
 var $38=$35;label=7;break;
 case 6: 
 var $38=9456;label=7;break;
 case 7: 
 var $38;
 /** @type {number} */ var $39=$1;
 /** @type {number} */ var $40=(($39+16)|0);
 HEAP32[(($40)>>2)]=$38;
 /** @type {number} */ var $41=$p;
 /** @type {number} */ var $42=(($41+64)|0);
 /** @type {number} */ var $43=HEAP32[(($42)>>2)];
 /** @type {number} */ var $44=$1;
 /** @type {number} */ var $45=(($44+24)|0);
 HEAP32[(($45)>>2)]=$43;
 /** @type {number} */ var $46=$p;
 /** @type {number} */ var $47=(($46+68)|0);
 /** @type {number} */ var $48=HEAP32[(($47)>>2)];
 /** @type {number} */ var $49=$1;
 /** @type {number} */ var $50=(($49+28)|0);
 HEAP32[(($50)>>2)]=$48;
 /** @type {number} */ var $51=$1;
 /** @type {number} */ var $52=(($51+24)|0);
 /** @type {number} */ var $53=HEAP32[(($52)>>2)];
 /** @type {number} */ var $54=($53|0)==0;
 /** @type {number} */ var $55=($54?9256:9016);
 /** @type {number} */ var $56=$1;
 /** @type {number} */ var $57=(($56+12)|0);
 HEAP32[(($57)>>2)]=$55;
 label=8;break;
 case 8: 
 /** @type {number} */ var $59=$1;
 /** @type {number} */ var $60=(($59+36)|0);
 /** @type {number} */ var $61=(($60)|0);
 /** @type {number} */ var $62=$1;
 /** @type {number} */ var $63=(($62+16)|0);
 /** @type {number} */ var $64=HEAP32[(($63)>>2)];
 _luaO_chunkid($61,$64,60);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ci
 * @return {number}
 */
function _currentline($ci){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 $1=$ci;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 /** @type {number} */ var $5=(($4)|0);
 /** @type {number} */ var $6=$5;
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=$7;
 /** @type {number} */ var $9=$8;
 /** @type {number} */ var $10=(($9+12)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=(($11+20)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=($13|0)!=0;
 if($14){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=_currentpc($16);
 /** @type {number} */ var $18=$1;
 /** @type {number} */ var $19=(($18)|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=(($20)|0);
 /** @type {number} */ var $22=$21;
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 /** @type {number} */ var $24=$23;
 /** @type {number} */ var $25=$24;
 /** @type {number} */ var $26=(($25+12)|0);
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=(($27+20)|0);
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 /** @type {number} */ var $30=(($29+($17<<2))|0);
 /** @type {number} */ var $31=HEAP32[(($30)>>2)];
 var $34=$31;label=4;break;
 case 3: 
 var $34=0;label=4;break;
 case 4: 
 var $34;
 STACKTOP=sp;return $34;
 }
}
/**
 * @param {number} $L
 * @param {number} $ci
 * @param {number} $name
 * @return {number}
 */
function _getfuncname($L,$ci,$name){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $tm;
 /** @type {number} */ var $p;
 /** @type {number} */ var $pc;
 /** @type {number} */ var $i;
 $2=$L;
 $3=$ci;
 $4=$name;
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=(($5)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=(($7)|0);
 /** @type {number} */ var $9=$8;
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=$10;
 /** @type {number} */ var $12=$11;
 /** @type {number} */ var $13=(($12+12)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 $p=$14;
 /** @type {number} */ var $15=$3;
 /** @type {number} */ var $16=_currentpc($15);
 $pc=$16;
 /** @type {number} */ var $17=$pc;
 /** @type {number} */ var $18=$p;
 /** @type {number} */ var $19=(($18+12)|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=(($20+($17<<2))|0);
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 $i=$22;
 /** @type {number} */ var $23=$i;
 /** @type {number} */ var $24=$23>>>0;
 /** @type {number} */ var $25=$24&63;
 switch(($25|0)){case 16:{ label=10;break;}case 17:{ label=11;break;}case 18:{ label=12;break;}case 19:{ label=13;break;}case 21:{ label=14;break;}case 25:{ label=15;break;}case 26:{ label=16;break;}case 22:{ label=17;break;}case 29:case 30:{ label=2;break;}case 34:{ label=3;break;}case 12:case 6:case 7:{ label=4;break;}case 8:case 10:{ label=5;break;}case 24:{ label=6;break;}case 13:{ label=7;break;}case 14:{ label=8;break;}case 15:{ label=9;break;}default:{label=18;break;}}break;
 case 2: 
 /** @type {number} */ var $27=$p;
 /** @type {number} */ var $28=$pc;
 /** @type {number} */ var $29=$i;
 /** @type {number} */ var $30=$29>>>6;
 /** @type {number} */ var $31=$30&255;
 /** @type {number} */ var $32=$4;
 /** @type {number} */ var $33=_getobjname($27,$28,$31,$32);
 $1=$33;
 label=20;break;
 case 3: 
 /** @type {number} */ var $35=$4;
 HEAP32[(($35)>>2)]=10352;
 $1=10352;
 label=20;break;
 case 4: 
 $tm=0;
 label=19;break;
 case 5: 
 $tm=1;
 label=19;break;
 case 6: 
 $tm=5;
 label=19;break;
 case 7: 
 $tm=6;
 label=19;break;
 case 8: 
 $tm=7;
 label=19;break;
 case 9: 
 $tm=8;
 label=19;break;
 case 10: 
 $tm=9;
 label=19;break;
 case 11: 
 $tm=10;
 label=19;break;
 case 12: 
 $tm=11;
 label=19;break;
 case 13: 
 $tm=12;
 label=19;break;
 case 14: 
 $tm=4;
 label=19;break;
 case 15: 
 $tm=13;
 label=19;break;
 case 16: 
 $tm=14;
 label=19;break;
 case 17: 
 $tm=15;
 label=19;break;
 case 18: 
 $1=0;
 label=20;break;
 case 19: 
 /** @type {number} */ var $52=$tm;
 /** @type {number} */ var $53=$2;
 /** @type {number} */ var $54=(($53+12)|0);
 /** @type {number} */ var $55=HEAP32[(($54)>>2)];
 /** @type {number} */ var $56=(($55+184)|0);
 /** @type {number} */ var $57=(($56+($52<<2))|0);
 /** @type {number} */ var $58=HEAP32[(($57)>>2)];
 /** @type {number} */ var $59=(($58+16)|0);
 /** @type {number} */ var $60=$59;
 /** @type {number} */ var $61=$4;
 HEAP32[(($61)>>2)]=$60;
 $1=10144;
 label=20;break;
 case 20: 
 /** @type {number} */ var $63=$1;
 STACKTOP=sp;return $63;
 }
}
/**
 * @param {number} $p
 * @param {number} $uv
 * @return {number}
 */
function _upvalname($p,$uv){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $s;
 $2=$p;
 $3=$uv;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=(($5+28)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=(($7+($4<<3))|0);
 /** @type {number} */ var $9=(($8)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 $s=$10;
 /** @type {number} */ var $11=$s;
 /** @type {number} */ var $12=($11|0)==0;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 $1=10808;
 label=4;break;
 case 3: 
 /** @type {number} */ var $15=$s;
 /** @type {number} */ var $16=(($15+16)|0);
 /** @type {number} */ var $17=$16;
 $1=$17;
 label=4;break;
 case 4: 
 /** @type {number} */ var $19=$1;
 STACKTOP=sp;return $19;
 }
}
/**
 * @param {number} $p
 * @param {number} $lastpc
 * @param {number} $reg
 * @return {number}
 */
function _findsetreg($p,$lastpc,$reg){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $pc;
 /** @type {number} */ var $setreg;
 /** @type {number} */ var $i;
 /** @type {number} */ var $op;
 /** @type {number} */ var $a;
 /** @type {number} */ var $b;
 /** @type {number} */ var $b1;
 /** @type {number} */ var $dest;
 $1=$p;
 $2=$lastpc;
 $3=$reg;
 $setreg=-1;
 $pc=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $5=$pc;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=($5|0)<($6|0);
 if($7){label=3;break;}else{label=27;break;}
 case 3: 
 /** @type {number} */ var $9=$pc;
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=(($10+12)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=(($12+($9<<2))|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 $i=$14;
 /** @type {number} */ var $15=$i;
 /** @type {number} */ var $16=$15>>>0;
 /** @type {number} */ var $17=$16&63;
 $op=$17;
 /** @type {number} */ var $18=$i;
 /** @type {number} */ var $19=$18>>>6;
 /** @type {number} */ var $20=$19&255;
 $a=$20;
 /** @type {number} */ var $21=$op;
 switch(($21|0)){case 29:case 30:{ label=11;break;}case 23:{ label=14;break;}case 27:{ label=18;break;}case 4:{ label=4;break;}case 34:{ label=8;break;}default:{label=21;break;}}break;
 case 4: 
 /** @type {number} */ var $23=$i;
 /** @type {number} */ var $24=$23>>>23;
 /** @type {number} */ var $25=$24&511;
 $b=$25;
 /** @type {number} */ var $26=$a;
 /** @type {number} */ var $27=$3;
 /** @type {number} */ var $28=($26|0)<=($27|0);
 if($28){label=5;break;}else{label=7;break;}
 case 5: 
 /** @type {number} */ var $30=$3;
 /** @type {number} */ var $31=$a;
 /** @type {number} */ var $32=$b;
 /** @type {number} */ var $33=((($31)+($32))|0);
 /** @type {number} */ var $34=($30|0)<=($33|0);
 if($34){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $36=$pc;
 $setreg=$36;
 label=7;break;
 case 7: 
 label=25;break;
 case 8: 
 /** @type {number} */ var $39=$3;
 /** @type {number} */ var $40=$a;
 /** @type {number} */ var $41=((($40)+(2))|0);
 /** @type {number} */ var $42=($39|0)>=($41|0);
 if($42){label=9;break;}else{label=10;break;}
 case 9: 
 /** @type {number} */ var $44=$pc;
 $setreg=$44;
 label=10;break;
 case 10: 
 label=25;break;
 case 11: 
 /** @type {number} */ var $47=$3;
 /** @type {number} */ var $48=$a;
 /** @type {number} */ var $49=($47|0)>=($48|0);
 if($49){label=12;break;}else{label=13;break;}
 case 12: 
 /** @type {number} */ var $51=$pc;
 $setreg=$51;
 label=13;break;
 case 13: 
 label=25;break;
 case 14: 
 /** @type {number} */ var $54=$i;
 /** @type {number} */ var $55=$54>>>14;
 /** @type {number} */ var $56=$55&262143;
 /** @type {number} */ var $57=((($56)-(131071))|0);
 $b1=$57;
 /** @type {number} */ var $58=$pc;
 /** @type {number} */ var $59=((($58)+(1))|0);
 /** @type {number} */ var $60=$b1;
 /** @type {number} */ var $61=((($59)+($60))|0);
 $dest=$61;
 /** @type {number} */ var $62=$pc;
 /** @type {number} */ var $63=$dest;
 /** @type {number} */ var $64=($62|0)<($63|0);
 if($64){label=15;break;}else{label=17;break;}
 case 15: 
 /** @type {number} */ var $66=$dest;
 /** @type {number} */ var $67=$2;
 /** @type {number} */ var $68=($66|0)<=($67|0);
 if($68){label=16;break;}else{label=17;break;}
 case 16: 
 /** @type {number} */ var $70=$b1;
 /** @type {number} */ var $71=$pc;
 /** @type {number} */ var $72=((($71)+($70))|0);
 $pc=$72;
 label=17;break;
 case 17: 
 label=25;break;
 case 18: 
 /** @type {number} */ var $75=$3;
 /** @type {number} */ var $76=$a;
 /** @type {number} */ var $77=($75|0)==($76|0);
 if($77){label=19;break;}else{label=20;break;}
 case 19: 
 /** @type {number} */ var $79=$pc;
 $setreg=$79;
 label=20;break;
 case 20: 
 label=25;break;
 case 21: 
 /** @type {number} */ var $82=$op;
 /** @type {number} */ var $83=((1240+$82)|0);
 /** @type {number} */ var $84=HEAP8[($83)];
 /** @type {number} */ var $85=($84&255);
 /** @type {number} */ var $86=$85&64;
 /** @type {number} */ var $87=($86|0)!=0;
 if($87){label=22;break;}else{label=24;break;}
 case 22: 
 /** @type {number} */ var $89=$3;
 /** @type {number} */ var $90=$a;
 /** @type {number} */ var $91=($89|0)==($90|0);
 if($91){label=23;break;}else{label=24;break;}
 case 23: 
 /** @type {number} */ var $93=$pc;
 $setreg=$93;
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 /** @type {number} */ var $97=$pc;
 /** @type {number} */ var $98=((($97)+(1))|0);
 $pc=$98;
 label=2;break;
 case 27: 
 /** @type {number} */ var $100=$setreg;
 STACKTOP=sp;return $100;
 }
}
/**
 * @param {number} $p
 * @param {number} $pc
 * @param {number} $c
 * @param {number} $name
 * @return {number}
 */
function _kname($p,$pc,$c,$name){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $kvalue;
 /** @type {number} */ var $what;
 $1=$p;
 $2=$pc;
 $3=$c;
 $4=$name;
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=$5&256;
 /** @type {number} */ var $7=($6|0)!=0;
 if($7){label=2;break;}else{label=5;break;}
 case 2: 
 /** @type {number} */ var $9=$3;
 /** @type {number} */ var $10=$9&-257;
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=(($11+8)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=(($13+($10<<4))|0);
 $kvalue=$14;
 /** @type {number} */ var $15=$kvalue;
 /** @type {number} */ var $16=(($15+8)|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=$17&15;
 /** @type {number} */ var $19=($18|0)==4;
 if($19){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $21=$kvalue;
 /** @type {number} */ var $22=(($21)|0);
 /** @type {number} */ var $23=$22;
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=$24;
 /** @type {number} */ var $26=(($25+16)|0);
 /** @type {number} */ var $27=$26;
 /** @type {number} */ var $28=$4;
 HEAP32[(($28)>>2)]=$27;
 label=10;break;
 case 4: 
 label=9;break;
 case 5: 
 /** @type {number} */ var $31=$1;
 /** @type {number} */ var $32=$2;
 /** @type {number} */ var $33=$3;
 /** @type {number} */ var $34=$4;
 /** @type {number} */ var $35=_getobjname($31,$32,$33,$34);
 $what=$35;
 /** @type {number} */ var $36=$what;
 /** @type {number} */ var $37=($36|0)!=0;
 if($37){label=6;break;}else{label=8;break;}
 case 6: 
 /** @type {number} */ var $39=$what;
 /** @type {number} */ var $40=HEAP8[($39)];
 /** @type {number} */ var $41=(($40<<24)>>24);
 /** @type {number} */ var $42=($41|0)==99;
 if($42){label=7;break;}else{label=8;break;}
 case 7: 
 label=10;break;
 case 8: 
 label=9;break;
 case 9: 
 /** @type {number} */ var $46=$4;
 HEAP32[(($46)>>2)]=10808;
 label=10;break;
 case 10: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $errcode
 * @return {number}
 */
function _luaD_throw($L,$errcode){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io1;
 $1=$L;
 $2=$errcode;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+64)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=(($9+64)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=(($11+160)|0);
 HEAP32[(($12)>>2)]=$8;
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=(($13+64)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=(($15+4)|0);
 /** @type {number} */ var $17=(($16)|0);
 _longjmp($17,1);
 case 3: 
 /** @type {number} */ var $19=$2;
 /** @type {number} */ var $20=(($19)&255);
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=(($21+6)|0);
 HEAP8[($22)]=$20;
 /** @type {number} */ var $23=$1;
 /** @type {number} */ var $24=(($23+12)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=(($25+172)|0);
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=(($27+64)|0);
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 /** @type {number} */ var $30=($29|0)!=0;
 if($30){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $32=$1;
 /** @type {number} */ var $33=(($32+8)|0);
 /** @type {number} */ var $34=HEAP32[(($33)>>2)];
 /** @type {number} */ var $35=((($34)-(16))|0);
 $io2=$35;
 /** @type {number} */ var $36=$1;
 /** @type {number} */ var $37=(($36+12)|0);
 /** @type {number} */ var $38=HEAP32[(($37)>>2)];
 /** @type {number} */ var $39=(($38+172)|0);
 /** @type {number} */ var $40=HEAP32[(($39)>>2)];
 /** @type {number} */ var $41=(($40+8)|0);
 /** @type {number} */ var $42=HEAP32[(($41)>>2)];
 /** @type {number} */ var $43=(($42+16)|0);
 HEAP32[(($41)>>2)]=$43;
 $io1=$42;
 /** @type {number} */ var $44=$io1;
 /** @type {number} */ var $45=(($44)|0);
 /** @type {number} */ var $46=$io2;
 /** @type {number} */ var $47=(($46)|0);
 /** @type {number} */ var $48=$45;
 /** @type {number} */ var $49=$47;
 HEAP32[(($48)>>2)]=HEAP32[(($49)>>2)];HEAP32[((($48)+(4))>>2)]=HEAP32[((($49)+(4))>>2)];
 /** @type {number} */ var $50=$io2;
 /** @type {number} */ var $51=(($50+8)|0);
 /** @type {number} */ var $52=HEAP32[(($51)>>2)];
 /** @type {number} */ var $53=$io1;
 /** @type {number} */ var $54=(($53+8)|0);
 HEAP32[(($54)>>2)]=$52;
 /** @type {number} */ var $55=$1;
 /** @type {number} */ var $56=(($55+12)|0);
 /** @type {number} */ var $57=HEAP32[(($56)>>2)];
 /** @type {number} */ var $58=(($57+172)|0);
 /** @type {number} */ var $59=HEAP32[(($58)>>2)];
 /** @type {number} */ var $60=$2;
 _luaD_throw($59,$60);
 case 5: 
 /** @type {number} */ var $62=$1;
 /** @type {number} */ var $63=(($62+12)|0);
 /** @type {number} */ var $64=HEAP32[(($63)>>2)];
 /** @type {number} */ var $65=(($64+168)|0);
 /** @type {number} */ var $66=HEAP32[(($65)>>2)];
 /** @type {number} */ var $67=($66|0)!=0;
 if($67){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $69=$1;
 /** @type {number} */ var $70=(($69+12)|0);
 /** @type {number} */ var $71=HEAP32[(($70)>>2)];
 /** @type {number} */ var $72=(($71+168)|0);
 /** @type {number} */ var $73=HEAP32[(($72)>>2)];
 /** @type {number} */ var $74=$1;
 /** @type {number} */ var $75=FUNCTION_TABLE[$73]($74);
 label=7;break;
 case 7: 
 _abort();
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $f
 * @param {number} $ud
 * @return {number}
 */
function _luaD_rawrunprotected($L,$f,$ud){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+168)|0;
 label = 1; 
 var mySetjmpIds = {};
 var setjmpTable = {"1": function(value) { label = 4; $16 = value },dummy: 0};
 while(1)try { switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $oldnCcalls;
 /** @type {number} */ var $lj=sp;
 $1=$L;
 $2=$f;
 $3=$ud;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+38)|0);
 /** @type {number} */ var $6=HEAP16[(($5)>>1)];
 $oldnCcalls=$6;
 /** @type {number} */ var $7=(($lj+160)|0);
 HEAP32[(($7)>>2)]=0;
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=(($8+64)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=(($lj)|0);
 HEAP32[(($11)>>2)]=$10;
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=(($12+64)|0);
 HEAP32[(($13)>>2)]=$lj;
 /** @type {number} */ var $14=(($lj+4)|0);
 /** @type {number} */ var $15=(($14)|0);
 /** @type {number} */ var $16=(tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label,HEAP32[(($15)>>2)]=tempInt, 0);
 label=4;break;
 case 4: 
 /** @type {number} */ var $17=($16|0)==0;
 if($17){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $19=$2;
 /** @type {number} */ var $20=$1;
 /** @type {number} */ var $21=$3;
 FUNCTION_TABLE[$19]($20,$21);
 label=3;break;
 case 3: 
 /** @type {number} */ var $23=(($lj)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=$1;
 /** @type {number} */ var $26=(($25+64)|0);
 HEAP32[(($26)>>2)]=$24;
 /** @type {number} */ var $27=$oldnCcalls;
 /** @type {number} */ var $28=$1;
 /** @type {number} */ var $29=(($28+38)|0);
 HEAP16[(($29)>>1)]=$27;
 /** @type {number} */ var $30=(($lj+160)|0);
 /** @type {number} */ var $31=HEAP32[(($30)>>2)];
 STACKTOP=sp;return $31;
 }
 } catch(e) { if (!e.longjmp || !(e.id in mySetjmpIds)) throw(e); setjmpTable[setjmpLabels[e.id]](e.value) }
}
/**
 * @param {number} $L
 * @param {number} $newsize
 * @return {number}
 */
function _luaD_reallocstack($L,$newsize){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $oldstack;
 /** @type {number} */ var $lim;
 $1=$L;
 $2=$newsize;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+28)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $oldstack=$5;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+32)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 $lim=$8;
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=((($9)+(1))|0);
 /** @type {number} */ var $11=($10>>>0)>268435455;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $13=$1;
 _luaM_toobig($13);
 label=4;break;
 case 3: 
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=(($17+28)|0);
 /** @type {number} */ var $19=HEAP32[(($18)>>2)];
 /** @type {number} */ var $20=$19;
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=(($21+32)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 /** @type {number} */ var $24=($23<<4);
 /** @type {number} */ var $25=$2;
 /** @type {number} */ var $26=($25<<4);
 /** @type {number} */ var $27=_luaM_realloc_($16,$20,$24,$26);
 var $29=$27;label=4;break;
 case 4: 
 var $29;
 /** @type {number} */ var $30=$29;
 /** @type {number} */ var $31=$1;
 /** @type {number} */ var $32=(($31+28)|0);
 HEAP32[(($32)>>2)]=$30;
 label=5;break;
 case 5: 
 /** @type {number} */ var $34=$lim;
 /** @type {number} */ var $35=$2;
 /** @type {number} */ var $36=($34|0)<($35|0);
 if($36){label=6;break;}else{label=8;break;}
 case 6: 
 /** @type {number} */ var $38=$1;
 /** @type {number} */ var $39=(($38+28)|0);
 /** @type {number} */ var $40=HEAP32[(($39)>>2)];
 /** @type {number} */ var $41=$lim;
 /** @type {number} */ var $42=(($40+($41<<4))|0);
 /** @type {number} */ var $43=(($42+8)|0);
 HEAP32[(($43)>>2)]=0;
 label=7;break;
 case 7: 
 /** @type {number} */ var $45=$lim;
 /** @type {number} */ var $46=((($45)+(1))|0);
 $lim=$46;
 label=5;break;
 case 8: 
 /** @type {number} */ var $48=$2;
 /** @type {number} */ var $49=$1;
 /** @type {number} */ var $50=(($49+32)|0);
 HEAP32[(($50)>>2)]=$48;
 /** @type {number} */ var $51=$1;
 /** @type {number} */ var $52=(($51+28)|0);
 /** @type {number} */ var $53=HEAP32[(($52)>>2)];
 /** @type {number} */ var $54=$2;
 /** @type {number} */ var $55=(($53+($54<<4))|0);
 /** @type {number} */ var $56=((($55)-(80))|0);
 /** @type {number} */ var $57=$1;
 /** @type {number} */ var $58=(($57+24)|0);
 HEAP32[(($58)>>2)]=$56;
 /** @type {number} */ var $59=$1;
 /** @type {number} */ var $60=$oldstack;
 _correctstack($59,$60);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $n
 * @return {number}
 */
function _luaD_growstack($L,$n){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $size;
 /** @type {number} */ var $needed;
 /** @type {number} */ var $newsize;
 $1=$L;
 $2=$n;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+32)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $size=$5;
 /** @type {number} */ var $6=$size;
 /** @type {number} */ var $7=($6|0)>1000000;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $9=$1;
 _luaD_throw($9,6);
 case 3: 
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=(($11+8)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=(($14+28)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=$13;
 /** @type {number} */ var $18=$16;
 /** @type {number} */ var $19=((($17)-($18))|0);
 /** @type {number} */ var $20=(((($19|0))/(16))&-1);
 /** @type {number} */ var $21=$2;
 /** @type {number} */ var $22=((($20)+($21))|0);
 /** @type {number} */ var $23=((($22)+(5))|0);
 $needed=$23;
 /** @type {number} */ var $24=$size;
 /** @type {number} */ var $25=($24<<1);
 $newsize=$25;
 /** @type {number} */ var $26=$newsize;
 /** @type {number} */ var $27=($26|0)>1000000;
 if($27){label=4;break;}else{label=5;break;}
 case 4: 
 $newsize=1000000;
 label=5;break;
 case 5: 
 /** @type {number} */ var $30=$newsize;
 /** @type {number} */ var $31=$needed;
 /** @type {number} */ var $32=($30|0)<($31|0);
 if($32){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $34=$needed;
 $newsize=$34;
 label=7;break;
 case 7: 
 /** @type {number} */ var $36=$newsize;
 /** @type {number} */ var $37=($36|0)>1000000;
 if($37){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $39=$1;
 _luaD_reallocstack($39,1000200);
 /** @type {number} */ var $40=$1;
 _luaG_runerror($40,8320,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 case 9: 
 /** @type {number} */ var $42=$1;
 /** @type {number} */ var $43=$newsize;
 _luaD_reallocstack($42,$43);
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaD_shrinkstack($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $inuse;
 /** @type {number} */ var $goodsize;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_stackinuse($2);
 $inuse=$3;
 /** @type {number} */ var $4=$inuse;
 /** @type {number} */ var $5=$inuse;
 /** @type {number} */ var $6=(((($5|0))/(8))&-1);
 /** @type {number} */ var $7=((($4)+($6))|0);
 /** @type {number} */ var $8=((($7)+(10))|0);
 $goodsize=$8;
 /** @type {number} */ var $9=$goodsize;
 /** @type {number} */ var $10=($9|0)>1000000;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 $goodsize=1000000;
 label=3;break;
 case 3: 
 /** @type {number} */ var $13=$inuse;
 /** @type {number} */ var $14=($13|0)>1000000;
 if($14){label=5;break;}else{label=4;break;}
 case 4: 
 /** @type {number} */ var $16=$goodsize;
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=(($17+32)|0);
 /** @type {number} */ var $19=HEAP32[(($18)>>2)];
 /** @type {number} */ var $20=($16|0)>=($19|0);
 if($20){label=5;break;}else{label=6;break;}
 case 5: 
 label=7;break;
 case 6: 
 /** @type {number} */ var $23=$1;
 /** @type {number} */ var $24=$goodsize;
 _luaD_reallocstack($23,$24);
 label=7;break;
 case 7: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $event
 * @param {number} $line
 * @return {number}
 */
function _luaD_hook($L,$event,$line){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $hook;
 /** @type {number} */ var $ci;
 /** @type {number} */ var $top;
 /** @type {number} */ var $ci_top;
 /** @type {number} */ var $ar=sp;
 $1=$L;
 $2=$event;
 $3=$line;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+52)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 $hook=$6;
 /** @type {number} */ var $7=$hook;
 /** @type {number} */ var $8=($7|0)!=0;
 if($8){label=2;break;}else{label=7;break;}
 case 2: 
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=(($10+41)|0);
 /** @type {number} */ var $12=HEAP8[($11)];
 /** @type {number} */ var $13=($12&255);
 /** @type {number} */ var $14=($13|0)!=0;
 if($14){label=3;break;}else{label=7;break;}
 case 3: 
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=(($16+16)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 $ci=$18;
 /** @type {number} */ var $19=$1;
 /** @type {number} */ var $20=(($19+8)|0);
 /** @type {number} */ var $21=HEAP32[(($20)>>2)];
 /** @type {number} */ var $22=$21;
 /** @type {number} */ var $23=$1;
 /** @type {number} */ var $24=(($23+28)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=$25;
 /** @type {number} */ var $27=$22;
 /** @type {number} */ var $28=$26;
 /** @type {number} */ var $29=((($27)-($28))|0);
 $top=$29;
 /** @type {number} */ var $30=$ci;
 /** @type {number} */ var $31=(($30+4)|0);
 /** @type {number} */ var $32=HEAP32[(($31)>>2)];
 /** @type {number} */ var $33=$32;
 /** @type {number} */ var $34=$1;
 /** @type {number} */ var $35=(($34+28)|0);
 /** @type {number} */ var $36=HEAP32[(($35)>>2)];
 /** @type {number} */ var $37=$36;
 /** @type {number} */ var $38=$33;
 /** @type {number} */ var $39=$37;
 /** @type {number} */ var $40=((($38)-($39))|0);
 $ci_top=$40;
 /** @type {number} */ var $41=$2;
 /** @type {number} */ var $42=(($ar)|0);
 HEAP32[(($42)>>2)]=$41;
 /** @type {number} */ var $43=$3;
 /** @type {number} */ var $44=(($ar+20)|0);
 HEAP32[(($44)>>2)]=$43;
 /** @type {number} */ var $45=$ci;
 /** @type {number} */ var $46=(($ar+96)|0);
 HEAP32[(($46)>>2)]=$45;
 /** @type {number} */ var $47=$1;
 /** @type {number} */ var $48=(($47+24)|0);
 /** @type {number} */ var $49=HEAP32[(($48)>>2)];
 /** @type {number} */ var $50=$1;
 /** @type {number} */ var $51=(($50+8)|0);
 /** @type {number} */ var $52=HEAP32[(($51)>>2)];
 /** @type {number} */ var $53=$49;
 /** @type {number} */ var $54=$52;
 /** @type {number} */ var $55=((($53)-($54))|0);
 /** @type {number} */ var $56=(((($55|0))/(16))&-1);
 /** @type {number} */ var $57=($56|0)<=20;
 if($57){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $59=$1;
 _luaD_growstack($59,20);
 label=6;break;
 case 5: 
 label=6;break;
 case 6: 
 /** @type {number} */ var $62=$1;
 /** @type {number} */ var $63=(($62+8)|0);
 /** @type {number} */ var $64=HEAP32[(($63)>>2)];
 /** @type {number} */ var $65=(($64+320)|0);
 /** @type {number} */ var $66=$ci;
 /** @type {number} */ var $67=(($66+4)|0);
 HEAP32[(($67)>>2)]=$65;
 /** @type {number} */ var $68=$1;
 /** @type {number} */ var $69=(($68+41)|0);
 HEAP8[($69)]=0;
 /** @type {number} */ var $70=$ci;
 /** @type {number} */ var $71=(($70+18)|0);
 /** @type {number} */ var $72=HEAP8[($71)];
 /** @type {number} */ var $73=($72&255);
 /** @type {number} */ var $74=$73|2;
 /** @type {number} */ var $75=(($74)&255);
 HEAP8[($71)]=$75;
 /** @type {number} */ var $76=$hook;
 /** @type {number} */ var $77=$1;
 FUNCTION_TABLE[$76]($77,$ar);
 /** @type {number} */ var $78=$1;
 /** @type {number} */ var $79=(($78+41)|0);
 HEAP8[($79)]=1;
 /** @type {number} */ var $80=$1;
 /** @type {number} */ var $81=(($80+28)|0);
 /** @type {number} */ var $82=HEAP32[(($81)>>2)];
 /** @type {number} */ var $83=$82;
 /** @type {number} */ var $84=$ci_top;
 /** @type {number} */ var $85=(($83+$84)|0);
 /** @type {number} */ var $86=$85;
 /** @type {number} */ var $87=$ci;
 /** @type {number} */ var $88=(($87+4)|0);
 HEAP32[(($88)>>2)]=$86;
 /** @type {number} */ var $89=$1;
 /** @type {number} */ var $90=(($89+28)|0);
 /** @type {number} */ var $91=HEAP32[(($90)>>2)];
 /** @type {number} */ var $92=$91;
 /** @type {number} */ var $93=$top;
 /** @type {number} */ var $94=(($92+$93)|0);
 /** @type {number} */ var $95=$94;
 /** @type {number} */ var $96=$1;
 /** @type {number} */ var $97=(($96+8)|0);
 HEAP32[(($97)>>2)]=$95;
 /** @type {number} */ var $98=$ci;
 /** @type {number} */ var $99=(($98+18)|0);
 /** @type {number} */ var $100=HEAP8[($99)];
 /** @type {number} */ var $101=($100&255);
 /** @type {number} */ var $102=$101&-3;
 /** @type {number} */ var $103=(($102)&255);
 HEAP8[($99)]=$103;
 label=7;break;
 case 7: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $func
 * @param {number} $nresults
 * @return {number}
 */
function _luaD_precall($L,$func,$nresults){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $f;
 /** @type {number} */ var $ci;
 /** @type {number} */ var $n;
 /** @type {number} */ var $funcr;
 /** @type {number} */ var $base;
 /** @type {number} */ var $p;
 $2=$L;
 $3=$func;
 $4=$nresults;
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=$5;
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=(($7+28)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=$9;
 /** @type {number} */ var $11=$6;
 /** @type {number} */ var $12=$10;
 /** @type {number} */ var $13=((($11)-($12))|0);
 $funcr=$13;
 /** @type {number} */ var $14=$3;
 /** @type {number} */ var $15=(($14+8)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=$16&63;
 if(($17|0)==6){ label=13;break;}else if(($17|0)==22){ label=2;break;}else if(($17|0)==38){ label=3;break;}else{label=29;break;}
 case 2: 
 /** @type {number} */ var $19=$3;
 /** @type {number} */ var $20=(($19)|0);
 /** @type {number} */ var $21=$20;
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 $f=$22;
 label=4;break;
 case 3: 
 /** @type {number} */ var $24=$3;
 /** @type {number} */ var $25=(($24)|0);
 /** @type {number} */ var $26=$25;
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=$27;
 /** @type {number} */ var $29=$28;
 /** @type {number} */ var $30=(($29+12)|0);
 /** @type {number} */ var $31=HEAP32[(($30)>>2)];
 $f=$31;
 label=4;break;
 case 4: 
 /** @type {number} */ var $33=$2;
 /** @type {number} */ var $34=(($33+24)|0);
 /** @type {number} */ var $35=HEAP32[(($34)>>2)];
 /** @type {number} */ var $36=$2;
 /** @type {number} */ var $37=(($36+8)|0);
 /** @type {number} */ var $38=HEAP32[(($37)>>2)];
 /** @type {number} */ var $39=$35;
 /** @type {number} */ var $40=$38;
 /** @type {number} */ var $41=((($39)-($40))|0);
 /** @type {number} */ var $42=(((($41|0))/(16))&-1);
 /** @type {number} */ var $43=($42|0)<=20;
 if($43){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $45=$2;
 _luaD_growstack($45,20);
 label=7;break;
 case 6: 
 label=7;break;
 case 7: 
 /** @type {number} */ var $48=$2;
 /** @type {number} */ var $49=(($48+16)|0);
 /** @type {number} */ var $50=HEAP32[(($49)>>2)];
 /** @type {number} */ var $51=(($50+12)|0);
 /** @type {number} */ var $52=HEAP32[(($51)>>2)];
 /** @type {number} */ var $53=($52|0)!=0;
 if($53){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $55=$2;
 /** @type {number} */ var $56=(($55+16)|0);
 /** @type {number} */ var $57=HEAP32[(($56)>>2)];
 /** @type {number} */ var $58=(($57+12)|0);
 /** @type {number} */ var $59=HEAP32[(($58)>>2)];
 var $64=$59;label=10;break;
 case 9: 
 /** @type {number} */ var $61=$2;
 /** @type {number} */ var $62=_luaE_extendCI($61);
 var $64=$62;label=10;break;
 case 10: 
 var $64;
 /** @type {number} */ var $65=$2;
 /** @type {number} */ var $66=(($65+16)|0);
 HEAP32[(($66)>>2)]=$64;
 $ci=$64;
 /** @type {number} */ var $67=$4;
 /** @type {number} */ var $68=(($67)&65535);
 /** @type {number} */ var $69=$ci;
 /** @type {number} */ var $70=(($69+16)|0);
 HEAP16[(($70)>>1)]=$68;
 /** @type {number} */ var $71=$2;
 /** @type {number} */ var $72=(($71+28)|0);
 /** @type {number} */ var $73=HEAP32[(($72)>>2)];
 /** @type {number} */ var $74=$73;
 /** @type {number} */ var $75=$funcr;
 /** @type {number} */ var $76=(($74+$75)|0);
 /** @type {number} */ var $77=$76;
 /** @type {number} */ var $78=$ci;
 /** @type {number} */ var $79=(($78)|0);
 HEAP32[(($79)>>2)]=$77;
 /** @type {number} */ var $80=$2;
 /** @type {number} */ var $81=(($80+8)|0);
 /** @type {number} */ var $82=HEAP32[(($81)>>2)];
 /** @type {number} */ var $83=(($82+320)|0);
 /** @type {number} */ var $84=$ci;
 /** @type {number} */ var $85=(($84+4)|0);
 HEAP32[(($85)>>2)]=$83;
 /** @type {number} */ var $86=$ci;
 /** @type {number} */ var $87=(($86+18)|0);
 HEAP8[($87)]=0;
 /** @type {number} */ var $88=$2;
 /** @type {number} */ var $89=(($88+40)|0);
 /** @type {number} */ var $90=HEAP8[($89)];
 /** @type {number} */ var $91=($90&255);
 /** @type {number} */ var $92=$91&1;
 /** @type {number} */ var $93=($92|0)!=0;
 if($93){label=11;break;}else{label=12;break;}
 case 11: 
 /** @type {number} */ var $95=$2;
 _luaD_hook($95,0,-1);
 label=12;break;
 case 12: 
 /** @type {number} */ var $97=$f;
 /** @type {number} */ var $98=$2;
 /** @type {number} */ var $99=FUNCTION_TABLE[$97]($98);
 $n=$99;
 /** @type {number} */ var $100=$2;
 /** @type {number} */ var $101=$2;
 /** @type {number} */ var $102=(($101+8)|0);
 /** @type {number} */ var $103=HEAP32[(($102)>>2)];
 /** @type {number} */ var $104=$n;
 /** @type {number} */ var $105=(((-$104))|0);
 /** @type {number} */ var $106=(($103+($105<<4))|0);
 /** @type {number} */ var $107=_luaD_poscall($100,$106);
 $1=1;
 label=30;break;
 case 13: 
 /** @type {number} */ var $109=$3;
 /** @type {number} */ var $110=(($109)|0);
 /** @type {number} */ var $111=$110;
 /** @type {number} */ var $112=HEAP32[(($111)>>2)];
 /** @type {number} */ var $113=$112;
 /** @type {number} */ var $114=$113;
 /** @type {number} */ var $115=(($114+12)|0);
 /** @type {number} */ var $116=HEAP32[(($115)>>2)];
 $p=$116;
 /** @type {number} */ var $117=$2;
 /** @type {number} */ var $118=(($117+24)|0);
 /** @type {number} */ var $119=HEAP32[(($118)>>2)];
 /** @type {number} */ var $120=$2;
 /** @type {number} */ var $121=(($120+8)|0);
 /** @type {number} */ var $122=HEAP32[(($121)>>2)];
 /** @type {number} */ var $123=$119;
 /** @type {number} */ var $124=$122;
 /** @type {number} */ var $125=((($123)-($124))|0);
 /** @type {number} */ var $126=(((($125|0))/(16))&-1);
 /** @type {number} */ var $127=$p;
 /** @type {number} */ var $128=(($127+78)|0);
 /** @type {number} */ var $129=HEAP8[($128)];
 /** @type {number} */ var $130=($129&255);
 /** @type {number} */ var $131=($126|0)<=($130|0);
 if($131){label=14;break;}else{label=15;break;}
 case 14: 
 /** @type {number} */ var $133=$2;
 /** @type {number} */ var $134=$p;
 /** @type {number} */ var $135=(($134+78)|0);
 /** @type {number} */ var $136=HEAP8[($135)];
 /** @type {number} */ var $137=($136&255);
 _luaD_growstack($133,$137);
 label=16;break;
 case 15: 
 label=16;break;
 case 16: 
 /** @type {number} */ var $140=$2;
 /** @type {number} */ var $141=(($140+28)|0);
 /** @type {number} */ var $142=HEAP32[(($141)>>2)];
 /** @type {number} */ var $143=$142;
 /** @type {number} */ var $144=$funcr;
 /** @type {number} */ var $145=(($143+$144)|0);
 /** @type {number} */ var $146=$145;
 $3=$146;
 /** @type {number} */ var $147=$2;
 /** @type {number} */ var $148=(($147+8)|0);
 /** @type {number} */ var $149=HEAP32[(($148)>>2)];
 /** @type {number} */ var $150=$3;
 /** @type {number} */ var $151=$149;
 /** @type {number} */ var $152=$150;
 /** @type {number} */ var $153=((($151)-($152))|0);
 /** @type {number} */ var $154=(((($153|0))/(16))&-1);
 /** @type {number} */ var $155=((($154)-(1))|0);
 $n=$155;
 label=17;break;
 case 17: 
 /** @type {number} */ var $157=$n;
 /** @type {number} */ var $158=$p;
 /** @type {number} */ var $159=(($158+76)|0);
 /** @type {number} */ var $160=HEAP8[($159)];
 /** @type {number} */ var $161=($160&255);
 /** @type {number} */ var $162=($157|0)<($161|0);
 if($162){label=18;break;}else{label=20;break;}
 case 18: 
 /** @type {number} */ var $164=$2;
 /** @type {number} */ var $165=(($164+8)|0);
 /** @type {number} */ var $166=HEAP32[(($165)>>2)];
 /** @type {number} */ var $167=(($166+16)|0);
 HEAP32[(($165)>>2)]=$167;
 /** @type {number} */ var $168=(($166+8)|0);
 HEAP32[(($168)>>2)]=0;
 label=19;break;
 case 19: 
 /** @type {number} */ var $170=$n;
 /** @type {number} */ var $171=((($170)+(1))|0);
 $n=$171;
 label=17;break;
 case 20: 
 /** @type {number} */ var $173=$p;
 /** @type {number} */ var $174=(($173+77)|0);
 /** @type {number} */ var $175=HEAP8[($174)];
 /** @type {number} */ var $176=(($175<<24)>>24)!=0;
 if($176){label=22;break;}else{label=21;break;}
 case 21: 
 /** @type {number} */ var $178=$3;
 /** @type {number} */ var $179=(($178+16)|0);
 var $186=$179;label=23;break;
 case 22: 
 /** @type {number} */ var $181=$2;
 /** @type {number} */ var $182=$p;
 /** @type {number} */ var $183=$n;
 /** @type {number} */ var $184=_adjust_varargs($181,$182,$183);
 var $186=$184;label=23;break;
 case 23: 
 var $186;
 $base=$186;
 /** @type {number} */ var $187=$2;
 /** @type {number} */ var $188=(($187+16)|0);
 /** @type {number} */ var $189=HEAP32[(($188)>>2)];
 /** @type {number} */ var $190=(($189+12)|0);
 /** @type {number} */ var $191=HEAP32[(($190)>>2)];
 /** @type {number} */ var $192=($191|0)!=0;
 if($192){label=24;break;}else{label=25;break;}
 case 24: 
 /** @type {number} */ var $194=$2;
 /** @type {number} */ var $195=(($194+16)|0);
 /** @type {number} */ var $196=HEAP32[(($195)>>2)];
 /** @type {number} */ var $197=(($196+12)|0);
 /** @type {number} */ var $198=HEAP32[(($197)>>2)];
 var $203=$198;label=26;break;
 case 25: 
 /** @type {number} */ var $200=$2;
 /** @type {number} */ var $201=_luaE_extendCI($200);
 var $203=$201;label=26;break;
 case 26: 
 var $203;
 /** @type {number} */ var $204=$2;
 /** @type {number} */ var $205=(($204+16)|0);
 HEAP32[(($205)>>2)]=$203;
 $ci=$203;
 /** @type {number} */ var $206=$4;
 /** @type {number} */ var $207=(($206)&65535);
 /** @type {number} */ var $208=$ci;
 /** @type {number} */ var $209=(($208+16)|0);
 HEAP16[(($209)>>1)]=$207;
 /** @type {number} */ var $210=$3;
 /** @type {number} */ var $211=$ci;
 /** @type {number} */ var $212=(($211)|0);
 HEAP32[(($212)>>2)]=$210;
 /** @type {number} */ var $213=$base;
 /** @type {number} */ var $214=$ci;
 /** @type {number} */ var $215=(($214+24)|0);
 /** @type {number} */ var $216=$215;
 /** @type {number} */ var $217=(($216)|0);
 HEAP32[(($217)>>2)]=$213;
 /** @type {number} */ var $218=$base;
 /** @type {number} */ var $219=$p;
 /** @type {number} */ var $220=(($219+78)|0);
 /** @type {number} */ var $221=HEAP8[($220)];
 /** @type {number} */ var $222=($221&255);
 /** @type {number} */ var $223=(($218+($222<<4))|0);
 /** @type {number} */ var $224=$ci;
 /** @type {number} */ var $225=(($224+4)|0);
 HEAP32[(($225)>>2)]=$223;
 /** @type {number} */ var $226=$p;
 /** @type {number} */ var $227=(($226+12)|0);
 /** @type {number} */ var $228=HEAP32[(($227)>>2)];
 /** @type {number} */ var $229=$ci;
 /** @type {number} */ var $230=(($229+24)|0);
 /** @type {number} */ var $231=$230;
 /** @type {number} */ var $232=(($231+4)|0);
 HEAP32[(($232)>>2)]=$228;
 /** @type {number} */ var $233=$ci;
 /** @type {number} */ var $234=(($233+18)|0);
 HEAP8[($234)]=1;
 /** @type {number} */ var $235=$ci;
 /** @type {number} */ var $236=(($235+4)|0);
 /** @type {number} */ var $237=HEAP32[(($236)>>2)];
 /** @type {number} */ var $238=$2;
 /** @type {number} */ var $239=(($238+8)|0);
 HEAP32[(($239)>>2)]=$237;
 /** @type {number} */ var $240=$2;
 /** @type {number} */ var $241=(($240+40)|0);
 /** @type {number} */ var $242=HEAP8[($241)];
 /** @type {number} */ var $243=($242&255);
 /** @type {number} */ var $244=$243&1;
 /** @type {number} */ var $245=($244|0)!=0;
 if($245){label=27;break;}else{label=28;break;}
 case 27: 
 /** @type {number} */ var $247=$2;
 /** @type {number} */ var $248=$ci;
 _callhook($247,$248);
 label=28;break;
 case 28: 
 $1=0;
 label=30;break;
 case 29: 
 /** @type {number} */ var $251=$2;
 /** @type {number} */ var $252=$3;
 /** @type {number} */ var $253=_tryfuncTM($251,$252);
 $3=$253;
 /** @type {number} */ var $254=$2;
 /** @type {number} */ var $255=$3;
 /** @type {number} */ var $256=$4;
 /** @type {number} */ var $257=_luaD_precall($254,$255,$256);
 $1=$257;
 label=30;break;
 case 30: 
 /** @type {number} */ var $259=$1;
 STACKTOP=sp;return $259;
 }
}
/**
 * @param {number} $L
 * @param {number} $firstResult
 * @return {number}
 */
function _luaD_poscall($L,$firstResult){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $res;
 /** @type {number} */ var $wanted;
 /** @type {number} */ var $i;
 /** @type {number} */ var $ci;
 /** @type {number} */ var $fr;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io1;
 $1=$L;
 $2=$firstResult;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+16)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $ci=$5;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+40)|0);
 /** @type {number} */ var $8=HEAP8[($7)];
 /** @type {number} */ var $9=($8&255);
 /** @type {number} */ var $10=$9&6;
 /** @type {number} */ var $11=($10|0)!=0;
 if($11){label=2;break;}else{label=5;break;}
 case 2: 
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=(($13+40)|0);
 /** @type {number} */ var $15=HEAP8[($14)];
 /** @type {number} */ var $16=($15&255);
 /** @type {number} */ var $17=$16&2;
 /** @type {number} */ var $18=($17|0)!=0;
 if($18){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $20=$2;
 /** @type {number} */ var $21=$20;
 /** @type {number} */ var $22=$1;
 /** @type {number} */ var $23=(($22+28)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=$24;
 /** @type {number} */ var $26=$21;
 /** @type {number} */ var $27=$25;
 /** @type {number} */ var $28=((($26)-($27))|0);
 $fr=$28;
 /** @type {number} */ var $29=$1;
 _luaD_hook($29,1,-1);
 /** @type {number} */ var $30=$1;
 /** @type {number} */ var $31=(($30+28)|0);
 /** @type {number} */ var $32=HEAP32[(($31)>>2)];
 /** @type {number} */ var $33=$32;
 /** @type {number} */ var $34=$fr;
 /** @type {number} */ var $35=(($33+$34)|0);
 /** @type {number} */ var $36=$35;
 $2=$36;
 label=4;break;
 case 4: 
 /** @type {number} */ var $38=$ci;
 /** @type {number} */ var $39=(($38+8)|0);
 /** @type {number} */ var $40=HEAP32[(($39)>>2)];
 /** @type {number} */ var $41=(($40+24)|0);
 /** @type {number} */ var $42=$41;
 /** @type {number} */ var $43=(($42+4)|0);
 /** @type {number} */ var $44=HEAP32[(($43)>>2)];
 /** @type {number} */ var $45=$1;
 /** @type {number} */ var $46=(($45+20)|0);
 HEAP32[(($46)>>2)]=$44;
 label=5;break;
 case 5: 
 /** @type {number} */ var $48=$ci;
 /** @type {number} */ var $49=(($48)|0);
 /** @type {number} */ var $50=HEAP32[(($49)>>2)];
 $res=$50;
 /** @type {number} */ var $51=$ci;
 /** @type {number} */ var $52=(($51+16)|0);
 /** @type {number} */ var $53=HEAP16[(($52)>>1)];
 /** @type {number} */ var $54=(($53<<16)>>16);
 $wanted=$54;
 /** @type {number} */ var $55=$ci;
 /** @type {number} */ var $56=(($55+8)|0);
 /** @type {number} */ var $57=HEAP32[(($56)>>2)];
 $ci=$57;
 /** @type {number} */ var $58=$1;
 /** @type {number} */ var $59=(($58+16)|0);
 HEAP32[(($59)>>2)]=$57;
 /** @type {number} */ var $60=$wanted;
 $i=$60;
 label=6;break;
 case 6: 
 /** @type {number} */ var $62=$i;
 /** @type {number} */ var $63=($62|0)!=0;
 if($63){label=7;break;}else{label=10;break;}
 case 7: 
 /** @type {number} */ var $65=$2;
 /** @type {number} */ var $66=$1;
 /** @type {number} */ var $67=(($66+8)|0);
 /** @type {number} */ var $68=HEAP32[(($67)>>2)];
 /** @type {number} */ var $69=($65>>>0)<($68>>>0);
 if($69){label=8;break;}else{label=10;break;}
 case 8: 
 /** @type {number} */ var $71=$2;
 /** @type {number} */ var $72=(($71+16)|0);
 $2=$72;
 $io2=$71;
 /** @type {number} */ var $73=$res;
 /** @type {number} */ var $74=(($73+16)|0);
 $res=$74;
 $io1=$73;
 /** @type {number} */ var $75=$io1;
 /** @type {number} */ var $76=(($75)|0);
 /** @type {number} */ var $77=$io2;
 /** @type {number} */ var $78=(($77)|0);
 /** @type {number} */ var $79=$76;
 /** @type {number} */ var $80=$78;
 HEAP32[(($79)>>2)]=HEAP32[(($80)>>2)];HEAP32[((($79)+(4))>>2)]=HEAP32[((($80)+(4))>>2)];
 /** @type {number} */ var $81=$io2;
 /** @type {number} */ var $82=(($81+8)|0);
 /** @type {number} */ var $83=HEAP32[(($82)>>2)];
 /** @type {number} */ var $84=$io1;
 /** @type {number} */ var $85=(($84+8)|0);
 HEAP32[(($85)>>2)]=$83;
 label=9;break;
 case 9: 
 /** @type {number} */ var $87=$i;
 /** @type {number} */ var $88=((($87)-(1))|0);
 $i=$88;
 label=6;break;
 case 10: 
 label=11;break;
 case 11: 
 /** @type {number} */ var $91=$i;
 /** @type {number} */ var $92=((($91)-(1))|0);
 $i=$92;
 /** @type {number} */ var $93=($91|0)>0;
 if($93){label=12;break;}else{label=13;break;}
 case 12: 
 /** @type {number} */ var $95=$res;
 /** @type {number} */ var $96=(($95+16)|0);
 $res=$96;
 /** @type {number} */ var $97=(($95+8)|0);
 HEAP32[(($97)>>2)]=0;
 label=11;break;
 case 13: 
 /** @type {number} */ var $99=$res;
 /** @type {number} */ var $100=$1;
 /** @type {number} */ var $101=(($100+8)|0);
 HEAP32[(($101)>>2)]=$99;
 /** @type {number} */ var $102=$wanted;
 /** @type {number} */ var $103=((($102)+(1))|0);
 STACKTOP=sp;return $103;
 }
}
/**
 * @param {number} $L
 * @param {number} $func
 * @param {number} $nResults
 * @param {number} $allowyield
 * @return {number}
 */
function _luaD_call($L,$func,$nResults,$allowyield){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 $1=$L;
 $2=$func;
 $3=$nResults;
 $4=$allowyield;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($5+38)|0);
 /** @type {number} */ var $7=HEAP16[(($6)>>1)];
 /** @type {number} */ var $8=((($7)+(1))&65535);
 HEAP16[(($6)>>1)]=$8;
 /** @type {number} */ var $9=($8&65535);
 /** @type {number} */ var $10=($9|0)>=200;
 if($10){label=2;break;}else{label=8;break;}
 case 2: 
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=(($12+38)|0);
 /** @type {number} */ var $14=HEAP16[(($13)>>1)];
 /** @type {number} */ var $15=($14&65535);
 /** @type {number} */ var $16=($15|0)==200;
 if($16){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $18=$1;
 _luaG_runerror($18,11128,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 case 4: 
 /** @type {number} */ var $20=$1;
 /** @type {number} */ var $21=(($20+38)|0);
 /** @type {number} */ var $22=HEAP16[(($21)>>1)];
 /** @type {number} */ var $23=($22&65535);
 /** @type {number} */ var $24=($23|0)>=225;
 if($24){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $26=$1;
 _luaD_throw($26,6);
 case 6: 
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 /** @type {number} */ var $30=$4;
 /** @type {number} */ var $31=($30|0)!=0;
 if($31){label=10;break;}else{label=9;break;}
 case 9: 
 /** @type {number} */ var $33=$1;
 /** @type {number} */ var $34=(($33+36)|0);
 /** @type {number} */ var $35=HEAP16[(($34)>>1)];
 /** @type {number} */ var $36=((($35)+(1))&65535);
 HEAP16[(($34)>>1)]=$36;
 label=10;break;
 case 10: 
 /** @type {number} */ var $38=$1;
 /** @type {number} */ var $39=$2;
 /** @type {number} */ var $40=$3;
 /** @type {number} */ var $41=_luaD_precall($38,$39,$40);
 /** @type {number} */ var $42=($41|0)!=0;
 if($42){label=12;break;}else{label=11;break;}
 case 11: 
 /** @type {number} */ var $44=$1;
 _luaV_execute($44);
 label=12;break;
 case 12: 
 /** @type {number} */ var $46=$4;
 /** @type {number} */ var $47=($46|0)!=0;
 if($47){label=14;break;}else{label=13;break;}
 case 13: 
 /** @type {number} */ var $49=$1;
 /** @type {number} */ var $50=(($49+36)|0);
 /** @type {number} */ var $51=HEAP16[(($50)>>1)];
 /** @type {number} */ var $52=((($51)-(1))&65535);
 HEAP16[(($50)>>1)]=$52;
 label=14;break;
 case 14: 
 /** @type {number} */ var $54=$1;
 /** @type {number} */ var $55=(($54+38)|0);
 /** @type {number} */ var $56=HEAP16[(($55)>>1)];
 /** @type {number} */ var $57=((($56)-(1))&65535);
 HEAP16[(($55)>>1)]=$57;
 /** @type {number} */ var $58=$1;
 /** @type {number} */ var $59=(($58+12)|0);
 /** @type {number} */ var $60=HEAP32[(($59)>>2)];
 /** @type {number} */ var $61=(($60+12)|0);
 /** @type {number} */ var $62=HEAP32[(($61)>>2)];
 /** @type {number} */ var $63=($62|0)>0;
 if($63){label=15;break;}else{label=16;break;}
 case 15: 
 /** @type {number} */ var $65=$1;
 _luaC_step($65);
 label=16;break;
 case 16: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $from
 * @param {number} $nargs
 * @return {number}
 */
function _lua_resume($L,$from,$nargs){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $status;
 $1=$L;
 $2=$from;
 $3=$nargs;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=(($8+38)|0);
 /** @type {number} */ var $10=HEAP16[(($9)>>1)];
 /** @type {number} */ var $11=($10&65535);
 /** @type {number} */ var $12=((($11)+(1))|0);
 var $15=$12;label=4;break;
 case 3: 
 var $15=1;label=4;break;
 case 4: 
 var $15;
 /** @type {number} */ var $16=(($15)&65535);
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=(($17+38)|0);
 HEAP16[(($18)>>1)]=$16;
 /** @type {number} */ var $19=$1;
 /** @type {number} */ var $20=(($19+36)|0);
 HEAP16[(($20)>>1)]=0;
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=$1;
 /** @type {number} */ var $23=(($22+8)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=$3;
 /** @type {number} */ var $26=(((-$25))|0);
 /** @type {number} */ var $27=(($24+($26<<4))|0);
 /** @type {number} */ var $28=$27;
 /** @type {number} */ var $29=_luaD_rawrunprotected($21,152,$28);
 $status=$29;
 /** @type {number} */ var $30=$status;
 /** @type {number} */ var $31=($30|0)==-1;
 if($31){label=5;break;}else{label=6;break;}
 case 5: 
 $status=2;
 label=15;break;
 case 6: 
 label=7;break;
 case 7: 
 /** @type {number} */ var $35=$status;
 /** @type {number} */ var $36=($35|0)!=0;
 if($36){label=8;break;}else{var $41=0;label=9;break;}
 case 8: 
 /** @type {number} */ var $38=$status;
 /** @type {number} */ var $39=($38|0)!=1;
 var $41=$39;label=9;break;
 case 9: 
 var $41;
 if($41){label=10;break;}else{label=14;break;}
 case 10: 
 /** @type {number} */ var $43=$1;
 /** @type {number} */ var $44=$status;
 /** @type {number} */ var $45=_recover($43,$44);
 /** @type {number} */ var $46=($45|0)!=0;
 if($46){label=11;break;}else{label=12;break;}
 case 11: 
 /** @type {number} */ var $48=$1;
 /** @type {number} */ var $49=_luaD_rawrunprotected($48,236,0);
 $status=$49;
 label=13;break;
 case 12: 
 /** @type {number} */ var $51=$status;
 /** @type {number} */ var $52=(($51)&255);
 /** @type {number} */ var $53=$1;
 /** @type {number} */ var $54=(($53+6)|0);
 HEAP8[($54)]=$52;
 /** @type {number} */ var $55=$1;
 /** @type {number} */ var $56=$status;
 /** @type {number} */ var $57=$1;
 /** @type {number} */ var $58=(($57+8)|0);
 /** @type {number} */ var $59=HEAP32[(($58)>>2)];
 _seterrorobj($55,$56,$59);
 /** @type {number} */ var $60=$1;
 /** @type {number} */ var $61=(($60+8)|0);
 /** @type {number} */ var $62=HEAP32[(($61)>>2)];
 /** @type {number} */ var $63=$1;
 /** @type {number} */ var $64=(($63+16)|0);
 /** @type {number} */ var $65=HEAP32[(($64)>>2)];
 /** @type {number} */ var $66=(($65+4)|0);
 HEAP32[(($66)>>2)]=$62;
 label=14;break;
 case 13: 
 label=7;break;
 case 14: 
 label=15;break;
 case 15: 
 /** @type {number} */ var $70=$1;
 /** @type {number} */ var $71=(($70+36)|0);
 HEAP16[(($71)>>1)]=1;
 /** @type {number} */ var $72=$1;
 /** @type {number} */ var $73=(($72+38)|0);
 /** @type {number} */ var $74=HEAP16[(($73)>>1)];
 /** @type {number} */ var $75=((($74)-(1))&65535);
 HEAP16[(($73)>>1)]=$75;
 /** @type {number} */ var $76=$status;
 STACKTOP=sp;return $76;
 }
}
/**
 * @param {number} $L
 * @param {number} $nresults
 * @param {number} $ctx
 * @param {number} $k
 * @return {number}
 */
function _lua_yieldk($L,$nresults,$ctx,$k){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $ci;
 $1=$L;
 $2=$nresults;
 $3=$ctx;
 $4=$k;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($5+16)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 $ci=$7;
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=(($9+36)|0);
 /** @type {number} */ var $11=HEAP16[(($10)>>1)];
 /** @type {number} */ var $12=($11&65535);
 /** @type {number} */ var $13=($12|0)>0;
 if($13){label=2;break;}else{label=5;break;}
 case 2: 
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=(($16+12)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=(($18+172)|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=($15|0)!=($20|0);
 if($21){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $23=$1;
 _luaG_runerror($23,8800,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 case 4: 
 /** @type {number} */ var $25=$1;
 _luaG_runerror($25,6744,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 case 5: 
 /** @type {number} */ var $27=$1;
 /** @type {number} */ var $28=(($27+6)|0);
 HEAP8[($28)]=1;
 /** @type {number} */ var $29=$ci;
 /** @type {number} */ var $30=(($29)|0);
 /** @type {number} */ var $31=HEAP32[(($30)>>2)];
 /** @type {number} */ var $32=$31;
 /** @type {number} */ var $33=$1;
 /** @type {number} */ var $34=(($33+28)|0);
 /** @type {number} */ var $35=HEAP32[(($34)>>2)];
 /** @type {number} */ var $36=$35;
 /** @type {number} */ var $37=$32;
 /** @type {number} */ var $38=$36;
 /** @type {number} */ var $39=((($37)-($38))|0);
 /** @type {number} */ var $40=$ci;
 /** @type {number} */ var $41=(($40+20)|0);
 HEAP32[(($41)>>2)]=$39;
 /** @type {number} */ var $42=$ci;
 /** @type {number} */ var $43=(($42+18)|0);
 /** @type {number} */ var $44=HEAP8[($43)];
 /** @type {number} */ var $45=($44&255);
 /** @type {number} */ var $46=$45&1;
 /** @type {number} */ var $47=($46|0)!=0;
 if($47){label=6;break;}else{label=7;break;}
 case 6: 
 label=10;break;
 case 7: 
 /** @type {number} */ var $50=$4;
 /** @type {number} */ var $51=$ci;
 /** @type {number} */ var $52=(($51+24)|0);
 /** @type {number} */ var $53=$52;
 /** @type {number} */ var $54=(($53+4)|0);
 HEAP32[(($54)>>2)]=$50;
 /** @type {number} */ var $55=($50|0)!=0;
 if($55){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $57=$3;
 /** @type {number} */ var $58=$ci;
 /** @type {number} */ var $59=(($58+24)|0);
 /** @type {number} */ var $60=$59;
 /** @type {number} */ var $61=(($60)|0);
 HEAP32[(($61)>>2)]=$57;
 label=9;break;
 case 9: 
 /** @type {number} */ var $63=$1;
 /** @type {number} */ var $64=(($63+8)|0);
 /** @type {number} */ var $65=HEAP32[(($64)>>2)];
 /** @type {number} */ var $66=$2;
 /** @type {number} */ var $67=(((-$66))|0);
 /** @type {number} */ var $68=(($65+($67<<4))|0);
 /** @type {number} */ var $69=((($68)-(16))|0);
 /** @type {number} */ var $70=$ci;
 /** @type {number} */ var $71=(($70)|0);
 HEAP32[(($71)>>2)]=$69;
 /** @type {number} */ var $72=$1;
 _luaD_throw($72,1);
 case 10: 
 STACKTOP=sp;return 0;
 }
}
/**
 * @param {number} $L
 * @param {number} $func
 * @param {number} $u
 * @param {number} $old_top
 * @param {number} $ef
 * @return {number}
 */
function _luaD_pcall($L,$func,$u,$old_top,$ef){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 /** @type {number} */ var $status;
 /** @type {number} */ var $old_ci;
 /** @type {number} */ var $old_allowhooks;
 /** @type {number} */ var $old_nny;
 /** @type {number} */ var $old_errfunc;
 /** @type {number} */ var $oldtop;
 $1=$L;
 $2=$func;
 $3=$u;
 $4=$old_top;
 $5=$ef;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+16)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 $old_ci=$8;
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=(($9+41)|0);
 /** @type {number} */ var $11=HEAP8[($10)];
 $old_allowhooks=$11;
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=(($12+36)|0);
 /** @type {number} */ var $14=HEAP16[(($13)>>1)];
 $old_nny=$14;
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=(($15+68)|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 $old_errfunc=$17;
 /** @type {number} */ var $18=$5;
 /** @type {number} */ var $19=$1;
 /** @type {number} */ var $20=(($19+68)|0);
 HEAP32[(($20)>>2)]=$18;
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=$2;
 /** @type {number} */ var $23=$3;
 /** @type {number} */ var $24=_luaD_rawrunprotected($21,$22,$23);
 $status=$24;
 /** @type {number} */ var $25=$status;
 /** @type {number} */ var $26=($25|0)!=0;
 if($26){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $28=$1;
 /** @type {number} */ var $29=(($28+28)|0);
 /** @type {number} */ var $30=HEAP32[(($29)>>2)];
 /** @type {number} */ var $31=$30;
 /** @type {number} */ var $32=$4;
 /** @type {number} */ var $33=(($31+$32)|0);
 /** @type {number} */ var $34=$33;
 $oldtop=$34;
 /** @type {number} */ var $35=$1;
 /** @type {number} */ var $36=$oldtop;
 _luaF_close($35,$36);
 /** @type {number} */ var $37=$1;
 /** @type {number} */ var $38=$status;
 /** @type {number} */ var $39=$oldtop;
 _seterrorobj($37,$38,$39);
 /** @type {number} */ var $40=$old_ci;
 /** @type {number} */ var $41=$1;
 /** @type {number} */ var $42=(($41+16)|0);
 HEAP32[(($42)>>2)]=$40;
 /** @type {number} */ var $43=$old_allowhooks;
 /** @type {number} */ var $44=$1;
 /** @type {number} */ var $45=(($44+41)|0);
 HEAP8[($45)]=$43;
 /** @type {number} */ var $46=$old_nny;
 /** @type {number} */ var $47=$1;
 /** @type {number} */ var $48=(($47+36)|0);
 HEAP16[(($48)>>1)]=$46;
 /** @type {number} */ var $49=$1;
 _luaD_shrinkstack($49);
 label=3;break;
 case 3: 
 /** @type {number} */ var $51=$old_errfunc;
 /** @type {number} */ var $52=$1;
 /** @type {number} */ var $53=(($52+68)|0);
 HEAP32[(($53)>>2)]=$51;
 /** @type {number} */ var $54=$status;
 STACKTOP=sp;return $54;
 }
}
/**
 * @param {number} $L
 * @param {number} $z
 * @param {number} $name
 * @param {number} $mode
 * @return {number}
 */
function _luaD_protectedparser($L,$z,$name,$mode){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $p=sp;
 /** @type {number} */ var $status;
 $1=$L;
 $2=$z;
 $3=$name;
 $4=$mode;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($5+36)|0);
 /** @type {number} */ var $7=HEAP16[(($6)>>1)];
 /** @type {number} */ var $8=((($7)+(1))&65535);
 HEAP16[(($6)>>1)]=$8;
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=(($p)|0);
 HEAP32[(($10)>>2)]=$9;
 /** @type {number} */ var $11=$3;
 /** @type {number} */ var $12=(($p+56)|0);
 HEAP32[(($12)>>2)]=$11;
 /** @type {number} */ var $13=$4;
 /** @type {number} */ var $14=(($p+52)|0);
 HEAP32[(($14)>>2)]=$13;
 /** @type {number} */ var $15=(($p+16)|0);
 /** @type {number} */ var $16=(($15)|0);
 /** @type {number} */ var $17=(($16)|0);
 HEAP32[(($17)>>2)]=0;
 /** @type {number} */ var $18=(($p+16)|0);
 /** @type {number} */ var $19=(($18)|0);
 /** @type {number} */ var $20=(($19+8)|0);
 HEAP32[(($20)>>2)]=0;
 /** @type {number} */ var $21=(($p+16)|0);
 /** @type {number} */ var $22=(($21+12)|0);
 /** @type {number} */ var $23=(($22)|0);
 HEAP32[(($23)>>2)]=0;
 /** @type {number} */ var $24=(($p+16)|0);
 /** @type {number} */ var $25=(($24+12)|0);
 /** @type {number} */ var $26=(($25+8)|0);
 HEAP32[(($26)>>2)]=0;
 /** @type {number} */ var $27=(($p+16)|0);
 /** @type {number} */ var $28=(($27+24)|0);
 /** @type {number} */ var $29=(($28)|0);
 HEAP32[(($29)>>2)]=0;
 /** @type {number} */ var $30=(($p+16)|0);
 /** @type {number} */ var $31=(($30+24)|0);
 /** @type {number} */ var $32=(($31+8)|0);
 HEAP32[(($32)>>2)]=0;
 /** @type {number} */ var $33=(($p+4)|0);
 /** @type {number} */ var $34=(($33)|0);
 HEAP32[(($34)>>2)]=0;
 /** @type {number} */ var $35=(($p+4)|0);
 /** @type {number} */ var $36=(($35+8)|0);
 HEAP32[(($36)>>2)]=0;
 /** @type {number} */ var $37=$1;
 /** @type {number} */ var $38=$p;
 /** @type {number} */ var $39=$1;
 /** @type {number} */ var $40=(($39+8)|0);
 /** @type {number} */ var $41=HEAP32[(($40)>>2)];
 /** @type {number} */ var $42=$41;
 /** @type {number} */ var $43=$1;
 /** @type {number} */ var $44=(($43+28)|0);
 /** @type {number} */ var $45=HEAP32[(($44)>>2)];
 /** @type {number} */ var $46=$45;
 /** @type {number} */ var $47=$42;
 /** @type {number} */ var $48=$46;
 /** @type {number} */ var $49=((($47)-($48))|0);
 /** @type {number} */ var $50=$1;
 /** @type {number} */ var $51=(($50+68)|0);
 /** @type {number} */ var $52=HEAP32[(($51)>>2)];
 /** @type {number} */ var $53=_luaD_pcall($37,120,$38,$49,$52);
 $status=$53;
 /** @type {number} */ var $54=$1;
 /** @type {number} */ var $55=(($p+4)|0);
 /** @type {number} */ var $56=(($55)|0);
 /** @type {number} */ var $57=HEAP32[(($56)>>2)];
 /** @type {number} */ var $58=(($p+4)|0);
 /** @type {number} */ var $59=(($58+8)|0);
 /** @type {number} */ var $60=HEAP32[(($59)>>2)];
 /** @type {number} */ var $61=$60;
 /** @type {number} */ var $62=_luaM_realloc_($54,$57,$61,0);
 /** @type {number} */ var $63=(($p+4)|0);
 /** @type {number} */ var $64=(($63)|0);
 HEAP32[(($64)>>2)]=$62;
 /** @type {number} */ var $65=(($p+4)|0);
 /** @type {number} */ var $66=(($65+8)|0);
 HEAP32[(($66)>>2)]=0;
 /** @type {number} */ var $67=$1;
 /** @type {number} */ var $68=(($p+16)|0);
 /** @type {number} */ var $69=(($68)|0);
 /** @type {number} */ var $70=(($69)|0);
 /** @type {number} */ var $71=HEAP32[(($70)>>2)];
 /** @type {number} */ var $72=$71;
 /** @type {number} */ var $73=(($p+16)|0);
 /** @type {number} */ var $74=(($73)|0);
 /** @type {number} */ var $75=(($74+8)|0);
 /** @type {number} */ var $76=HEAP32[(($75)>>2)];
 /** @type {number} */ var $77=($76<<1);
 /** @type {number} */ var $78=_luaM_realloc_($67,$72,$77,0);
 /** @type {number} */ var $79=$1;
 /** @type {number} */ var $80=(($p+16)|0);
 /** @type {number} */ var $81=(($80+12)|0);
 /** @type {number} */ var $82=(($81)|0);
 /** @type {number} */ var $83=HEAP32[(($82)>>2)];
 /** @type {number} */ var $84=$83;
 /** @type {number} */ var $85=(($p+16)|0);
 /** @type {number} */ var $86=(($85+12)|0);
 /** @type {number} */ var $87=(($86+8)|0);
 /** @type {number} */ var $88=HEAP32[(($87)>>2)];
 /** @type {number} */ var $89=($88<<4);
 /** @type {number} */ var $90=_luaM_realloc_($79,$84,$89,0);
 /** @type {number} */ var $91=$1;
 /** @type {number} */ var $92=(($p+16)|0);
 /** @type {number} */ var $93=(($92+24)|0);
 /** @type {number} */ var $94=(($93)|0);
 /** @type {number} */ var $95=HEAP32[(($94)>>2)];
 /** @type {number} */ var $96=$95;
 /** @type {number} */ var $97=(($p+16)|0);
 /** @type {number} */ var $98=(($97+24)|0);
 /** @type {number} */ var $99=(($98+8)|0);
 /** @type {number} */ var $100=HEAP32[(($99)>>2)];
 /** @type {number} */ var $101=($100<<4);
 /** @type {number} */ var $102=_luaM_realloc_($91,$96,$101,0);
 /** @type {number} */ var $103=$1;
 /** @type {number} */ var $104=(($103+36)|0);
 /** @type {number} */ var $105=HEAP16[(($104)>>1)];
 /** @type {number} */ var $106=((($105)-(1))&65535);
 HEAP16[(($104)>>1)]=$106;
 /** @type {number} */ var $107=$status;
 STACKTOP=sp;return $107;
}
/**
 * @param {number} $L
 * @param {number} $oldstack
 * @return {number}
 */
function _correctstack($L,$oldstack){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $ci;
 /** @type {number} */ var $up;
 $1=$L;
 $2=$oldstack;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+8)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=$5;
 /** @type {number} */ var $8=$6;
 /** @type {number} */ var $9=((($7)-($8))|0);
 /** @type {number} */ var $10=(((($9|0))/(16))&-1);
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=(($11+28)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=(($13+($10<<4))|0);
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=(($15+8)|0);
 HEAP32[(($16)>>2)]=$14;
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=(($17+56)|0);
 /** @type {number} */ var $19=HEAP32[(($18)>>2)];
 $up=$19;
 label=2;break;
 case 2: 
 /** @type {number} */ var $21=$up;
 /** @type {number} */ var $22=($21|0)!=0;
 if($22){label=3;break;}else{label=5;break;}
 case 3: 
 /** @type {number} */ var $24=$up;
 /** @type {number} */ var $25=$24;
 /** @type {number} */ var $26=(($25+8)|0);
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=$2;
 /** @type {number} */ var $29=$27;
 /** @type {number} */ var $30=$28;
 /** @type {number} */ var $31=((($29)-($30))|0);
 /** @type {number} */ var $32=(((($31|0))/(16))&-1);
 /** @type {number} */ var $33=$1;
 /** @type {number} */ var $34=(($33+28)|0);
 /** @type {number} */ var $35=HEAP32[(($34)>>2)];
 /** @type {number} */ var $36=(($35+($32<<4))|0);
 /** @type {number} */ var $37=$up;
 /** @type {number} */ var $38=$37;
 /** @type {number} */ var $39=(($38+8)|0);
 HEAP32[(($39)>>2)]=$36;
 label=4;break;
 case 4: 
 /** @type {number} */ var $41=$up;
 /** @type {number} */ var $42=$41;
 /** @type {number} */ var $43=(($42)|0);
 /** @type {number} */ var $44=HEAP32[(($43)>>2)];
 $up=$44;
 label=2;break;
 case 5: 
 /** @type {number} */ var $46=$1;
 /** @type {number} */ var $47=(($46+16)|0);
 /** @type {number} */ var $48=HEAP32[(($47)>>2)];
 $ci=$48;
 label=6;break;
 case 6: 
 /** @type {number} */ var $50=$ci;
 /** @type {number} */ var $51=($50|0)!=0;
 if($51){label=7;break;}else{label=11;break;}
 case 7: 
 /** @type {number} */ var $53=$ci;
 /** @type {number} */ var $54=(($53+4)|0);
 /** @type {number} */ var $55=HEAP32[(($54)>>2)];
 /** @type {number} */ var $56=$2;
 /** @type {number} */ var $57=$55;
 /** @type {number} */ var $58=$56;
 /** @type {number} */ var $59=((($57)-($58))|0);
 /** @type {number} */ var $60=(((($59|0))/(16))&-1);
 /** @type {number} */ var $61=$1;
 /** @type {number} */ var $62=(($61+28)|0);
 /** @type {number} */ var $63=HEAP32[(($62)>>2)];
 /** @type {number} */ var $64=(($63+($60<<4))|0);
 /** @type {number} */ var $65=$ci;
 /** @type {number} */ var $66=(($65+4)|0);
 HEAP32[(($66)>>2)]=$64;
 /** @type {number} */ var $67=$ci;
 /** @type {number} */ var $68=(($67)|0);
 /** @type {number} */ var $69=HEAP32[(($68)>>2)];
 /** @type {number} */ var $70=$2;
 /** @type {number} */ var $71=$69;
 /** @type {number} */ var $72=$70;
 /** @type {number} */ var $73=((($71)-($72))|0);
 /** @type {number} */ var $74=(((($73|0))/(16))&-1);
 /** @type {number} */ var $75=$1;
 /** @type {number} */ var $76=(($75+28)|0);
 /** @type {number} */ var $77=HEAP32[(($76)>>2)];
 /** @type {number} */ var $78=(($77+($74<<4))|0);
 /** @type {number} */ var $79=$ci;
 /** @type {number} */ var $80=(($79)|0);
 HEAP32[(($80)>>2)]=$78;
 /** @type {number} */ var $81=$ci;
 /** @type {number} */ var $82=(($81+18)|0);
 /** @type {number} */ var $83=HEAP8[($82)];
 /** @type {number} */ var $84=($83&255);
 /** @type {number} */ var $85=$84&1;
 /** @type {number} */ var $86=($85|0)!=0;
 if($86){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $88=$ci;
 /** @type {number} */ var $89=(($88+24)|0);
 /** @type {number} */ var $90=$89;
 /** @type {number} */ var $91=(($90)|0);
 /** @type {number} */ var $92=HEAP32[(($91)>>2)];
 /** @type {number} */ var $93=$2;
 /** @type {number} */ var $94=$92;
 /** @type {number} */ var $95=$93;
 /** @type {number} */ var $96=((($94)-($95))|0);
 /** @type {number} */ var $97=(((($96|0))/(16))&-1);
 /** @type {number} */ var $98=$1;
 /** @type {number} */ var $99=(($98+28)|0);
 /** @type {number} */ var $100=HEAP32[(($99)>>2)];
 /** @type {number} */ var $101=(($100+($97<<4))|0);
 /** @type {number} */ var $102=$ci;
 /** @type {number} */ var $103=(($102+24)|0);
 /** @type {number} */ var $104=$103;
 /** @type {number} */ var $105=(($104)|0);
 HEAP32[(($105)>>2)]=$101;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 /** @type {number} */ var $108=$ci;
 /** @type {number} */ var $109=(($108+8)|0);
 /** @type {number} */ var $110=HEAP32[(($109)>>2)];
 $ci=$110;
 label=6;break;
 case 11: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _stackinuse($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $ci;
 /** @type {number} */ var $lim;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+8)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $lim=$4;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($5+16)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 $ci=$7;
 label=2;break;
 case 2: 
 /** @type {number} */ var $9=$ci;
 /** @type {number} */ var $10=($9|0)!=0;
 if($10){label=3;break;}else{label=7;break;}
 case 3: 
 /** @type {number} */ var $12=$lim;
 /** @type {number} */ var $13=$ci;
 /** @type {number} */ var $14=(($13+4)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=($12>>>0)<($15>>>0);
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $18=$ci;
 /** @type {number} */ var $19=(($18+4)|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 $lim=$20;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 /** @type {number} */ var $23=$ci;
 /** @type {number} */ var $24=(($23+8)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 $ci=$25;
 label=2;break;
 case 7: 
 /** @type {number} */ var $27=$lim;
 /** @type {number} */ var $28=$1;
 /** @type {number} */ var $29=(($28+28)|0);
 /** @type {number} */ var $30=HEAP32[(($29)>>2)];
 /** @type {number} */ var $31=$27;
 /** @type {number} */ var $32=$30;
 /** @type {number} */ var $33=((($31)-($32))|0);
 /** @type {number} */ var $34=(((($33|0))/(16))&-1);
 /** @type {number} */ var $35=((($34)+(1))|0);
 STACKTOP=sp;return $35;
 }
}
/**
 * @param {number} $L
 * @param {number} $p
 * @param {number} $actual
 * @return {number}
 */
function _adjust_varargs($L,$p,$actual){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $i;
 /** @type {number} */ var $nfixargs;
 /** @type {number} */ var $base;
 /** @type {number} */ var $fixed;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io1;
 $1=$L;
 $2=$p;
 $3=$actual;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=(($4+76)|0);
 /** @type {number} */ var $6=HEAP8[($5)];
 /** @type {number} */ var $7=($6&255);
 $nfixargs=$7;
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=(($8+8)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=$3;
 /** @type {number} */ var $12=(((-$11))|0);
 /** @type {number} */ var $13=(($10+($12<<4))|0);
 $fixed=$13;
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=(($14+8)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 $base=$16;
 $i=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $18=$i;
 /** @type {number} */ var $19=$nfixargs;
 /** @type {number} */ var $20=($18|0)<($19|0);
 if($20){label=3;break;}else{label=5;break;}
 case 3: 
 /** @type {number} */ var $22=$fixed;
 /** @type {number} */ var $23=$i;
 /** @type {number} */ var $24=(($22+($23<<4))|0);
 $io2=$24;
 /** @type {number} */ var $25=$1;
 /** @type {number} */ var $26=(($25+8)|0);
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=(($27+16)|0);
 HEAP32[(($26)>>2)]=$28;
 $io1=$27;
 /** @type {number} */ var $29=$io1;
 /** @type {number} */ var $30=(($29)|0);
 /** @type {number} */ var $31=$io2;
 /** @type {number} */ var $32=(($31)|0);
 /** @type {number} */ var $33=$30;
 /** @type {number} */ var $34=$32;
 HEAP32[(($33)>>2)]=HEAP32[(($34)>>2)];HEAP32[((($33)+(4))>>2)]=HEAP32[((($34)+(4))>>2)];
 /** @type {number} */ var $35=$io2;
 /** @type {number} */ var $36=(($35+8)|0);
 /** @type {number} */ var $37=HEAP32[(($36)>>2)];
 /** @type {number} */ var $38=$io1;
 /** @type {number} */ var $39=(($38+8)|0);
 HEAP32[(($39)>>2)]=$37;
 /** @type {number} */ var $40=$fixed;
 /** @type {number} */ var $41=$i;
 /** @type {number} */ var $42=(($40+($41<<4))|0);
 /** @type {number} */ var $43=(($42+8)|0);
 HEAP32[(($43)>>2)]=0;
 label=4;break;
 case 4: 
 /** @type {number} */ var $45=$i;
 /** @type {number} */ var $46=((($45)+(1))|0);
 $i=$46;
 label=2;break;
 case 5: 
 /** @type {number} */ var $48=$base;
 STACKTOP=sp;return $48;
 }
}
/**
 * @param {number} $L
 * @param {number} $ci
 * @return {number}
 */
function _callhook($L,$ci){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $hook;
 $1=$L;
 $2=$ci;
 $hook=0;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=(($3+24)|0);
 /** @type {number} */ var $5=$4;
 /** @type {number} */ var $6=(($5+4)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=(($7+4)|0);
 HEAP32[(($6)>>2)]=$8;
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=(($9+8)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=(($11+18)|0);
 /** @type {number} */ var $13=HEAP8[($12)];
 /** @type {number} */ var $14=($13&255);
 /** @type {number} */ var $15=$14&1;
 /** @type {number} */ var $16=($15|0)!=0;
 if($16){label=2;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $18=$2;
 /** @type {number} */ var $19=(($18+8)|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=(($20+24)|0);
 /** @type {number} */ var $22=$21;
 /** @type {number} */ var $23=(($22+4)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=((($24)-(4))|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 /** @type {number} */ var $27=$26>>>0;
 /** @type {number} */ var $28=$27&63;
 /** @type {number} */ var $29=($28|0)==30;
 if($29){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $31=$2;
 /** @type {number} */ var $32=(($31+18)|0);
 /** @type {number} */ var $33=HEAP8[($32)];
 /** @type {number} */ var $34=($33&255);
 /** @type {number} */ var $35=$34|64;
 /** @type {number} */ var $36=(($35)&255);
 HEAP8[($32)]=$36;
 $hook=4;
 label=4;break;
 case 4: 
 /** @type {number} */ var $38=$1;
 /** @type {number} */ var $39=$hook;
 _luaD_hook($38,$39,-1);
 /** @type {number} */ var $40=$2;
 /** @type {number} */ var $41=(($40+24)|0);
 /** @type {number} */ var $42=$41;
 /** @type {number} */ var $43=(($42+4)|0);
 /** @type {number} */ var $44=HEAP32[(($43)>>2)];
 /** @type {number} */ var $45=((($44)-(4))|0);
 HEAP32[(($43)>>2)]=$45;
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $func
 * @return {number}
 */
function _tryfuncTM($L,$func){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $tm;
 /** @type {number} */ var $p;
 /** @type {number} */ var $funcr;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io1;
 /** @type {number} */ var $io21;
 /** @type {number} */ var $io12;
 $1=$L;
 $2=$func;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_luaT_gettmbyobj($3,$4,16);
 $tm=$5;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=$6;
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=(($8+28)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=$10;
 /** @type {number} */ var $12=$7;
 /** @type {number} */ var $13=$11;
 /** @type {number} */ var $14=((($12)-($13))|0);
 $funcr=$14;
 /** @type {number} */ var $15=$tm;
 /** @type {number} */ var $16=(($15+8)|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=$17&15;
 /** @type {number} */ var $19=($18|0)==6;
 if($19){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=$2;
 _luaG_typeerror($21,$22,11560);
 case 3: 
 /** @type {number} */ var $24=$1;
 /** @type {number} */ var $25=(($24+8)|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 $p=$26;
 label=4;break;
 case 4: 
 /** @type {number} */ var $28=$p;
 /** @type {number} */ var $29=$2;
 /** @type {number} */ var $30=($28>>>0)>($29>>>0);
 if($30){label=5;break;}else{label=7;break;}
 case 5: 
 /** @type {number} */ var $32=$p;
 /** @type {number} */ var $33=((($32)-(16))|0);
 $io2=$33;
 /** @type {number} */ var $34=$p;
 $io1=$34;
 /** @type {number} */ var $35=$io1;
 /** @type {number} */ var $36=(($35)|0);
 /** @type {number} */ var $37=$io2;
 /** @type {number} */ var $38=(($37)|0);
 /** @type {number} */ var $39=$36;
 /** @type {number} */ var $40=$38;
 HEAP32[(($39)>>2)]=HEAP32[(($40)>>2)];HEAP32[((($39)+(4))>>2)]=HEAP32[((($40)+(4))>>2)];
 /** @type {number} */ var $41=$io2;
 /** @type {number} */ var $42=(($41+8)|0);
 /** @type {number} */ var $43=HEAP32[(($42)>>2)];
 /** @type {number} */ var $44=$io1;
 /** @type {number} */ var $45=(($44+8)|0);
 HEAP32[(($45)>>2)]=$43;
 label=6;break;
 case 6: 
 /** @type {number} */ var $47=$p;
 /** @type {number} */ var $48=((($47)-(16))|0);
 $p=$48;
 label=4;break;
 case 7: 
 /** @type {number} */ var $50=$1;
 /** @type {number} */ var $51=(($50+8)|0);
 /** @type {number} */ var $52=HEAP32[(($51)>>2)];
 /** @type {number} */ var $53=(($52+16)|0);
 HEAP32[(($51)>>2)]=$53;
 /** @type {number} */ var $54=$1;
 /** @type {number} */ var $55=(($54+24)|0);
 /** @type {number} */ var $56=HEAP32[(($55)>>2)];
 /** @type {number} */ var $57=$1;
 /** @type {number} */ var $58=(($57+8)|0);
 /** @type {number} */ var $59=HEAP32[(($58)>>2)];
 /** @type {number} */ var $60=$56;
 /** @type {number} */ var $61=$59;
 /** @type {number} */ var $62=((($60)-($61))|0);
 /** @type {number} */ var $63=(((($62|0))/(16))&-1);
 /** @type {number} */ var $64=($63|0)<=0;
 if($64){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $66=$1;
 _luaD_growstack($66,0);
 label=10;break;
 case 9: 
 label=10;break;
 case 10: 
 /** @type {number} */ var $69=$1;
 /** @type {number} */ var $70=(($69+28)|0);
 /** @type {number} */ var $71=HEAP32[(($70)>>2)];
 /** @type {number} */ var $72=$71;
 /** @type {number} */ var $73=$funcr;
 /** @type {number} */ var $74=(($72+$73)|0);
 /** @type {number} */ var $75=$74;
 $2=$75;
 /** @type {number} */ var $76=$tm;
 $io21=$76;
 /** @type {number} */ var $77=$2;
 $io12=$77;
 /** @type {number} */ var $78=$io12;
 /** @type {number} */ var $79=(($78)|0);
 /** @type {number} */ var $80=$io21;
 /** @type {number} */ var $81=(($80)|0);
 /** @type {number} */ var $82=$79;
 /** @type {number} */ var $83=$81;
 HEAP32[(($82)>>2)]=HEAP32[(($83)>>2)];HEAP32[((($82)+(4))>>2)]=HEAP32[((($83)+(4))>>2)];
 /** @type {number} */ var $84=$io21;
 /** @type {number} */ var $85=(($84+8)|0);
 /** @type {number} */ var $86=HEAP32[(($85)>>2)];
 /** @type {number} */ var $87=$io12;
 /** @type {number} */ var $88=(($87+8)|0);
 HEAP32[(($88)>>2)]=$86;
 /** @type {number} */ var $89=$2;
 STACKTOP=sp;return $89;
 }
}
/**
 * @param {number} $L
 * @param {number} $ud
 * @return {number}
 */
function _resume($L,$ud){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $nCcalls;
 /** @type {number} */ var $firstArg;
 /** @type {number} */ var $ci;
 /** @type {number} */ var $n;
 $1=$L;
 $2=$ud;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+38)|0);
 /** @type {number} */ var $5=HEAP16[(($4)>>1)];
 /** @type {number} */ var $6=($5&65535);
 $nCcalls=$6;
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=$7;
 $firstArg=$8;
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=(($9+16)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 $ci=$11;
 /** @type {number} */ var $12=$nCcalls;
 /** @type {number} */ var $13=($12|0)>=200;
 if($13){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=$firstArg;
 _resume_error($15,11128,$16);
 case 3: 
 /** @type {number} */ var $18=$1;
 /** @type {number} */ var $19=(($18+6)|0);
 /** @type {number} */ var $20=HEAP8[($19)];
 /** @type {number} */ var $21=($20&255);
 /** @type {number} */ var $22=($21|0)==0;
 if($22){label=4;break;}else{label=9;break;}
 case 4: 
 /** @type {number} */ var $24=$ci;
 /** @type {number} */ var $25=$1;
 /** @type {number} */ var $26=(($25+72)|0);
 /** @type {number} */ var $27=($24|0)!=($26|0);
 if($27){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $29=$1;
 /** @type {number} */ var $30=$firstArg;
 _resume_error($29,2728,$30);
 case 6: 
 /** @type {number} */ var $32=$1;
 /** @type {number} */ var $33=$firstArg;
 /** @type {number} */ var $34=((($33)-(16))|0);
 /** @type {number} */ var $35=_luaD_precall($32,$34,-1);
 /** @type {number} */ var $36=($35|0)!=0;
 if($36){label=8;break;}else{label=7;break;}
 case 7: 
 /** @type {number} */ var $38=$1;
 _luaV_execute($38);
 label=8;break;
 case 8: 
 label=18;break;
 case 9: 
 /** @type {number} */ var $41=$1;
 /** @type {number} */ var $42=(($41+6)|0);
 /** @type {number} */ var $43=HEAP8[($42)];
 /** @type {number} */ var $44=($43&255);
 /** @type {number} */ var $45=($44|0)!=1;
 if($45){label=10;break;}else{label=11;break;}
 case 10: 
 /** @type {number} */ var $47=$1;
 /** @type {number} */ var $48=$firstArg;
 _resume_error($47,11952,$48);
 case 11: 
 /** @type {number} */ var $50=$1;
 /** @type {number} */ var $51=(($50+6)|0);
 HEAP8[($51)]=0;
 /** @type {number} */ var $52=$1;
 /** @type {number} */ var $53=(($52+28)|0);
 /** @type {number} */ var $54=HEAP32[(($53)>>2)];
 /** @type {number} */ var $55=$54;
 /** @type {number} */ var $56=$ci;
 /** @type {number} */ var $57=(($56+20)|0);
 /** @type {number} */ var $58=HEAP32[(($57)>>2)];
 /** @type {number} */ var $59=(($55+$58)|0);
 /** @type {number} */ var $60=$59;
 /** @type {number} */ var $61=$ci;
 /** @type {number} */ var $62=(($61)|0);
 HEAP32[(($62)>>2)]=$60;
 /** @type {number} */ var $63=$ci;
 /** @type {number} */ var $64=(($63+18)|0);
 /** @type {number} */ var $65=HEAP8[($64)];
 /** @type {number} */ var $66=($65&255);
 /** @type {number} */ var $67=$66&1;
 /** @type {number} */ var $68=($67|0)!=0;
 if($68){label=12;break;}else{label=13;break;}
 case 12: 
 /** @type {number} */ var $70=$1;
 _luaV_execute($70);
 label=16;break;
 case 13: 
 /** @type {number} */ var $72=$ci;
 /** @type {number} */ var $73=(($72+24)|0);
 /** @type {number} */ var $74=$73;
 /** @type {number} */ var $75=(($74+4)|0);
 /** @type {number} */ var $76=HEAP32[(($75)>>2)];
 /** @type {number} */ var $77=($76|0)!=0;
 if($77){label=14;break;}else{label=15;break;}
 case 14: 
 /** @type {number} */ var $79=$ci;
 /** @type {number} */ var $80=(($79+24)|0);
 /** @type {number} */ var $81=$80;
 /** @type {number} */ var $82=(($81+13)|0);
 HEAP8[($82)]=1;
 /** @type {number} */ var $83=$ci;
 /** @type {number} */ var $84=(($83+18)|0);
 /** @type {number} */ var $85=HEAP8[($84)];
 /** @type {number} */ var $86=($85&255);
 /** @type {number} */ var $87=$86|8;
 /** @type {number} */ var $88=(($87)&255);
 HEAP8[($84)]=$88;
 /** @type {number} */ var $89=$ci;
 /** @type {number} */ var $90=(($89+24)|0);
 /** @type {number} */ var $91=$90;
 /** @type {number} */ var $92=(($91+4)|0);
 /** @type {number} */ var $93=HEAP32[(($92)>>2)];
 /** @type {number} */ var $94=$1;
 /** @type {number} */ var $95=FUNCTION_TABLE[$93]($94);
 $n=$95;
 /** @type {number} */ var $96=$1;
 /** @type {number} */ var $97=(($96+8)|0);
 /** @type {number} */ var $98=HEAP32[(($97)>>2)];
 /** @type {number} */ var $99=$n;
 /** @type {number} */ var $100=(((-$99))|0);
 /** @type {number} */ var $101=(($98+($100<<4))|0);
 $firstArg=$101;
 label=15;break;
 case 15: 
 /** @type {number} */ var $103=$1;
 /** @type {number} */ var $104=$firstArg;
 /** @type {number} */ var $105=_luaD_poscall($103,$104);
 label=16;break;
 case 16: 
 /** @type {number} */ var $107=$1;
 _unroll($107,0);
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $status
 * @return {number}
 */
function _recover($L,$status){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $oldtop;
 /** @type {number} */ var $ci;
 $2=$L;
 $3=$status;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_findpcall($4);
 $ci=$5;
 /** @type {number} */ var $6=$ci;
 /** @type {number} */ var $7=($6|0)==0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=4;break;
 case 3: 
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=(($10+28)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=$12;
 /** @type {number} */ var $14=$ci;
 /** @type {number} */ var $15=(($14+20)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=(($13+$16)|0);
 /** @type {number} */ var $18=$17;
 $oldtop=$18;
 /** @type {number} */ var $19=$2;
 /** @type {number} */ var $20=$oldtop;
 _luaF_close($19,$20);
 /** @type {number} */ var $21=$2;
 /** @type {number} */ var $22=$3;
 /** @type {number} */ var $23=$oldtop;
 _seterrorobj($21,$22,$23);
 /** @type {number} */ var $24=$ci;
 /** @type {number} */ var $25=$2;
 /** @type {number} */ var $26=(($25+16)|0);
 HEAP32[(($26)>>2)]=$24;
 /** @type {number} */ var $27=$ci;
 /** @type {number} */ var $28=(($27+24)|0);
 /** @type {number} */ var $29=$28;
 /** @type {number} */ var $30=(($29+12)|0);
 /** @type {number} */ var $31=HEAP8[($30)];
 /** @type {number} */ var $32=$2;
 /** @type {number} */ var $33=(($32+41)|0);
 HEAP8[($33)]=$31;
 /** @type {number} */ var $34=$2;
 /** @type {number} */ var $35=(($34+36)|0);
 HEAP16[(($35)>>1)]=0;
 /** @type {number} */ var $36=$2;
 _luaD_shrinkstack($36);
 /** @type {number} */ var $37=$ci;
 /** @type {number} */ var $38=(($37+24)|0);
 /** @type {number} */ var $39=$38;
 /** @type {number} */ var $40=(($39+8)|0);
 /** @type {number} */ var $41=HEAP32[(($40)>>2)];
 /** @type {number} */ var $42=$2;
 /** @type {number} */ var $43=(($42+68)|0);
 HEAP32[(($43)>>2)]=$41;
 /** @type {number} */ var $44=$ci;
 /** @type {number} */ var $45=(($44+18)|0);
 /** @type {number} */ var $46=HEAP8[($45)];
 /** @type {number} */ var $47=($46&255);
 /** @type {number} */ var $48=$47|32;
 /** @type {number} */ var $49=(($48)&255);
 HEAP8[($45)]=$49;
 /** @type {number} */ var $50=$3;
 /** @type {number} */ var $51=(($50)&255);
 /** @type {number} */ var $52=$ci;
 /** @type {number} */ var $53=(($52+24)|0);
 /** @type {number} */ var $54=$53;
 /** @type {number} */ var $55=(($54+13)|0);
 HEAP8[($55)]=$51;
 $1=1;
 label=4;break;
 case 4: 
 /** @type {number} */ var $57=$1;
 STACKTOP=sp;return $57;
 }
}
/**
 * @param {number} $L
 * @param {number} $ud
 * @return {number}
 */
function _unroll($L,$ud){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$L;
 $2=$ud;
 /** @type {number} */ var $3=$2;
 label=2;break;
 case 2: 
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($5+16)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=(($8+72)|0);
 /** @type {number} */ var $10=($7|0)==($9|0);
 if($10){label=3;break;}else{label=4;break;}
 case 3: 
 STACKTOP=sp;return;
 case 4: 
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=(($13+16)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=(($15+18)|0);
 /** @type {number} */ var $17=HEAP8[($16)];
 /** @type {number} */ var $18=($17&255);
 /** @type {number} */ var $19=$18&1;
 /** @type {number} */ var $20=($19|0)!=0;
 if($20){label=6;break;}else{label=5;break;}
 case 5: 
 /** @type {number} */ var $22=$1;
 _finishCcall($22);
 label=7;break;
 case 6: 
 /** @type {number} */ var $24=$1;
 _luaV_finishOp($24);
 /** @type {number} */ var $25=$1;
 _luaV_execute($25);
 label=7;break;
 case 7: 
 label=2;break;
 }
}
/**
 * @param {number} $L
 * @param {number} $errcode
 * @param {number} $oldtop
 * @return {number}
 */
function _seterrorobj($L,$errcode,$oldtop){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $io;
 /** @type {number} */ var $x_;
 /** @type {number} */ var $io1;
 /** @type {number} */ var $x_2;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io13;
 $1=$L;
 $2=$errcode;
 $3=$oldtop;
 /** @type {number} */ var $4=$2;
 if(($4|0)==4){ label=2;break;}else if(($4|0)==6){ label=3;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $6=$3;
 $io=$6;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=(($7+12)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=(($9+180)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 $x_=$11;
 /** @type {number} */ var $12=$x_;
 /** @type {number} */ var $13=$12;
 /** @type {number} */ var $14=$io;
 /** @type {number} */ var $15=(($14)|0);
 /** @type {number} */ var $16=$15;
 HEAP32[(($16)>>2)]=$13;
 /** @type {number} */ var $17=$x_;
 /** @type {number} */ var $18=$17;
 /** @type {number} */ var $19=(($18+4)|0);
 /** @type {number} */ var $20=HEAP8[($19)];
 /** @type {number} */ var $21=($20&255);
 /** @type {number} */ var $22=$21|64;
 /** @type {number} */ var $23=$io;
 /** @type {number} */ var $24=(($23+8)|0);
 HEAP32[(($24)>>2)]=$22;
 label=5;break;
 case 3: 
 /** @type {number} */ var $26=$3;
 $io1=$26;
 /** @type {number} */ var $27=$1;
 /** @type {number} */ var $28=_luaS_newlstr($27,3008,23);
 $x_2=$28;
 /** @type {number} */ var $29=$x_2;
 /** @type {number} */ var $30=$29;
 /** @type {number} */ var $31=$io1;
 /** @type {number} */ var $32=(($31)|0);
 /** @type {number} */ var $33=$32;
 HEAP32[(($33)>>2)]=$30;
 /** @type {number} */ var $34=$x_2;
 /** @type {number} */ var $35=$34;
 /** @type {number} */ var $36=(($35+4)|0);
 /** @type {number} */ var $37=HEAP8[($36)];
 /** @type {number} */ var $38=($37&255);
 /** @type {number} */ var $39=$38|64;
 /** @type {number} */ var $40=$io1;
 /** @type {number} */ var $41=(($40+8)|0);
 HEAP32[(($41)>>2)]=$39;
 label=5;break;
 case 4: 
 /** @type {number} */ var $43=$1;
 /** @type {number} */ var $44=(($43+8)|0);
 /** @type {number} */ var $45=HEAP32[(($44)>>2)];
 /** @type {number} */ var $46=((($45)-(16))|0);
 $io2=$46;
 /** @type {number} */ var $47=$3;
 $io13=$47;
 /** @type {number} */ var $48=$io13;
 /** @type {number} */ var $49=(($48)|0);
 /** @type {number} */ var $50=$io2;
 /** @type {number} */ var $51=(($50)|0);
 /** @type {number} */ var $52=$49;
 /** @type {number} */ var $53=$51;
 HEAP32[(($52)>>2)]=HEAP32[(($53)>>2)];HEAP32[((($52)+(4))>>2)]=HEAP32[((($53)+(4))>>2)];
 /** @type {number} */ var $54=$io2;
 /** @type {number} */ var $55=(($54+8)|0);
 /** @type {number} */ var $56=HEAP32[(($55)>>2)];
 /** @type {number} */ var $57=$io13;
 /** @type {number} */ var $58=(($57+8)|0);
 HEAP32[(($58)>>2)]=$56;
 label=5;break;
 case 5: 
 /** @type {number} */ var $60=$3;
 /** @type {number} */ var $61=(($60+16)|0);
 /** @type {number} */ var $62=$1;
 /** @type {number} */ var $63=(($62+8)|0);
 HEAP32[(($63)>>2)]=$61;
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $ud
 * @return {number}
 */
function _f_parser($L,$ud){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $i;
 /** @type {number} */ var $cl;
 /** @type {number} */ var $p;
 /** @type {number} */ var $c;
 /** @type {number} */ var $up;
 $1=$L;
 $2=$ud;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=$3;
 $p=$4;
 /** @type {number} */ var $5=$p;
 /** @type {number} */ var $6=(($5)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=(($7)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=((($9)-(1))|0);
 HEAP32[(($8)>>2)]=$10;
 /** @type {number} */ var $11=($9>>>0)>0;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $13=$p;
 /** @type {number} */ var $14=(($13)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=(($15+4)|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=(($17+1)|0);
 HEAP32[(($16)>>2)]=$18;
 /** @type {number} */ var $19=HEAP8[($17)];
 /** @type {number} */ var $20=($19&255);
 var $27=$20;label=4;break;
 case 3: 
 /** @type {number} */ var $22=$p;
 /** @type {number} */ var $23=(($22)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=_luaZ_fill($24);
 var $27=$25;label=4;break;
 case 4: 
 var $27;
 $c=$27;
 /** @type {number} */ var $28=$c;
 /** @type {number} */ var $29=HEAP8[(5352)];
 /** @type {number} */ var $30=(($29<<24)>>24);
 /** @type {number} */ var $31=($28|0)==($30|0);
 if($31){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $33=$1;
 /** @type {number} */ var $34=$p;
 /** @type {number} */ var $35=(($34+52)|0);
 /** @type {number} */ var $36=HEAP32[(($35)>>2)];
 _checkmode($33,$36,4184);
 /** @type {number} */ var $37=$1;
 /** @type {number} */ var $38=$p;
 /** @type {number} */ var $39=(($38)|0);
 /** @type {number} */ var $40=HEAP32[(($39)>>2)];
 /** @type {number} */ var $41=$p;
 /** @type {number} */ var $42=(($41+4)|0);
 /** @type {number} */ var $43=$p;
 /** @type {number} */ var $44=(($43+56)|0);
 /** @type {number} */ var $45=HEAP32[(($44)>>2)];
 /** @type {number} */ var $46=_luaU_undump($37,$40,$42,$45);
 $cl=$46;
 label=7;break;
 case 6: 
 /** @type {number} */ var $48=$1;
 /** @type {number} */ var $49=$p;
 /** @type {number} */ var $50=(($49+52)|0);
 /** @type {number} */ var $51=HEAP32[(($50)>>2)];
 _checkmode($48,$51,3848);
 /** @type {number} */ var $52=$1;
 /** @type {number} */ var $53=$p;
 /** @type {number} */ var $54=(($53)|0);
 /** @type {number} */ var $55=HEAP32[(($54)>>2)];
 /** @type {number} */ var $56=$p;
 /** @type {number} */ var $57=(($56+4)|0);
 /** @type {number} */ var $58=$p;
 /** @type {number} */ var $59=(($58+16)|0);
 /** @type {number} */ var $60=$p;
 /** @type {number} */ var $61=(($60+56)|0);
 /** @type {number} */ var $62=HEAP32[(($61)>>2)];
 /** @type {number} */ var $63=$c;
 /** @type {number} */ var $64=_luaY_parser($52,$55,$57,$59,$62,$63);
 $cl=$64;
 label=7;break;
 case 7: 
 $i=0;
 label=8;break;
 case 8: 
 /** @type {number} */ var $67=$i;
 /** @type {number} */ var $68=$cl;
 /** @type {number} */ var $69=$68;
 /** @type {number} */ var $70=(($69+6)|0);
 /** @type {number} */ var $71=HEAP8[($70)];
 /** @type {number} */ var $72=($71&255);
 /** @type {number} */ var $73=($67|0)<($72|0);
 if($73){label=9;break;}else{label=14;break;}
 case 9: 
 /** @type {number} */ var $75=$1;
 /** @type {number} */ var $76=_luaF_newupval($75);
 $up=$76;
 /** @type {number} */ var $77=$up;
 /** @type {number} */ var $78=$i;
 /** @type {number} */ var $79=$cl;
 /** @type {number} */ var $80=$79;
 /** @type {number} */ var $81=(($80+16)|0);
 /** @type {number} */ var $82=(($81+($78<<2))|0);
 HEAP32[(($82)>>2)]=$77;
 /** @type {number} */ var $83=$up;
 /** @type {number} */ var $84=$83;
 /** @type {number} */ var $85=$84;
 /** @type {number} */ var $86=(($85+5)|0);
 /** @type {number} */ var $87=HEAP8[($86)];
 /** @type {number} */ var $88=($87&255);
 /** @type {number} */ var $89=$88&3;
 /** @type {number} */ var $90=($89|0)!=0;
 if($90){label=10;break;}else{label=12;break;}
 case 10: 
 /** @type {number} */ var $92=$cl;
 /** @type {number} */ var $93=$92;
 /** @type {number} */ var $94=$93;
 /** @type {number} */ var $95=(($94+5)|0);
 /** @type {number} */ var $96=HEAP8[($95)];
 /** @type {number} */ var $97=($96&255);
 /** @type {number} */ var $98=$97&4;
 /** @type {number} */ var $99=($98|0)!=0;
 if($99){label=11;break;}else{label=12;break;}
 case 11: 
 /** @type {number} */ var $101=$1;
 /** @type {number} */ var $102=$cl;
 /** @type {number} */ var $103=$102;
 /** @type {number} */ var $104=$up;
 /** @type {number} */ var $105=$104;
 _luaC_barrier_($101,$103,$105);
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 /** @type {number} */ var $108=$i;
 /** @type {number} */ var $109=((($108)+(1))|0);
 $i=$109;
 label=8;break;
 case 14: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $msg
 * @param {number} $firstArg
 * @return {number}
 */
function _resume_error($L,$msg,$firstArg){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $io;
 /** @type {number} */ var $x_;
 $1=$L;
 $2=$msg;
 $3=$firstArg;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($5+8)|0);
 HEAP32[(($6)>>2)]=$4;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=(($7+8)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 $io=$9;
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=$2;
 /** @type {number} */ var $12=_luaS_new($10,$11);
 $x_=$12;
 /** @type {number} */ var $13=$x_;
 /** @type {number} */ var $14=$13;
 /** @type {number} */ var $15=$io;
 /** @type {number} */ var $16=(($15)|0);
 /** @type {number} */ var $17=$16;
 HEAP32[(($17)>>2)]=$14;
 /** @type {number} */ var $18=$x_;
 /** @type {number} */ var $19=$18;
 /** @type {number} */ var $20=(($19+4)|0);
 /** @type {number} */ var $21=HEAP8[($20)];
 /** @type {number} */ var $22=($21&255);
 /** @type {number} */ var $23=$22|64;
 /** @type {number} */ var $24=$io;
 /** @type {number} */ var $25=(($24+8)|0);
 HEAP32[(($25)>>2)]=$23;
 /** @type {number} */ var $26=$1;
 /** @type {number} */ var $27=(($26+8)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=(($28+16)|0);
 HEAP32[(($27)>>2)]=$29;
 /** @type {number} */ var $30=$1;
 /** @type {number} */ var $31=(($30+24)|0);
 /** @type {number} */ var $32=HEAP32[(($31)>>2)];
 /** @type {number} */ var $33=$1;
 /** @type {number} */ var $34=(($33+8)|0);
 /** @type {number} */ var $35=HEAP32[(($34)>>2)];
 /** @type {number} */ var $36=$32;
 /** @type {number} */ var $37=$35;
 /** @type {number} */ var $38=((($36)-($37))|0);
 /** @type {number} */ var $39=(((($38|0))/(16))&-1);
 /** @type {number} */ var $40=($39|0)<=0;
 if($40){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $42=$1;
 _luaD_growstack($42,0);
 label=4;break;
 case 3: 
 label=4;break;
 case 4: 
 /** @type {number} */ var $45=$1;
 _luaD_throw($45,-1);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _findpcall($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $ci;
 $2=$L;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=(($3+16)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $ci=$5;
 label=2;break;
 case 2: 
 /** @type {number} */ var $7=$ci;
 /** @type {number} */ var $8=($7|0)!=0;
 if($8){label=3;break;}else{label=7;break;}
 case 3: 
 /** @type {number} */ var $10=$ci;
 /** @type {number} */ var $11=(($10+18)|0);
 /** @type {number} */ var $12=HEAP8[($11)];
 /** @type {number} */ var $13=($12&255);
 /** @type {number} */ var $14=$13&16;
 /** @type {number} */ var $15=($14|0)!=0;
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $17=$ci;
 $1=$17;
 label=8;break;
 case 5: 
 label=6;break;
 case 6: 
 /** @type {number} */ var $20=$ci;
 /** @type {number} */ var $21=(($20+8)|0);
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 $ci=$22;
 label=2;break;
 case 7: 
 $1=0;
 label=8;break;
 case 8: 
 /** @type {number} */ var $25=$1;
 STACKTOP=sp;return $25;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _finishCcall($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $ci;
 /** @type {number} */ var $n;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+16)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $ci=$4;
 /** @type {number} */ var $5=$ci;
 /** @type {number} */ var $6=(($5+16)|0);
 /** @type {number} */ var $7=HEAP16[(($6)>>1)];
 /** @type {number} */ var $8=(($7<<16)>>16);
 /** @type {number} */ var $9=($8|0)==-1;
 if($9){label=2;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=(($11+16)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=(($13+4)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=(($16+8)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=($15>>>0)<($18>>>0);
 if($19){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=(($21+8)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 /** @type {number} */ var $24=$1;
 /** @type {number} */ var $25=(($24+16)|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 /** @type {number} */ var $27=(($26+4)|0);
 HEAP32[(($27)>>2)]=$23;
 label=4;break;
 case 4: 
 /** @type {number} */ var $29=$ci;
 /** @type {number} */ var $30=(($29+18)|0);
 /** @type {number} */ var $31=HEAP8[($30)];
 /** @type {number} */ var $32=($31&255);
 /** @type {number} */ var $33=$32&32;
 /** @type {number} */ var $34=($33|0)!=0;
 if($34){label=6;break;}else{label=5;break;}
 case 5: 
 /** @type {number} */ var $36=$ci;
 /** @type {number} */ var $37=(($36+24)|0);
 /** @type {number} */ var $38=$37;
 /** @type {number} */ var $39=(($38+13)|0);
 HEAP8[($39)]=1;
 label=6;break;
 case 6: 
 /** @type {number} */ var $41=$ci;
 /** @type {number} */ var $42=(($41+18)|0);
 /** @type {number} */ var $43=HEAP8[($42)];
 /** @type {number} */ var $44=($43&255);
 /** @type {number} */ var $45=$44&-49;
 /** @type {number} */ var $46=$45|8;
 /** @type {number} */ var $47=(($46)&255);
 /** @type {number} */ var $48=$ci;
 /** @type {number} */ var $49=(($48+18)|0);
 HEAP8[($49)]=$47;
 /** @type {number} */ var $50=$ci;
 /** @type {number} */ var $51=(($50+24)|0);
 /** @type {number} */ var $52=$51;
 /** @type {number} */ var $53=(($52+4)|0);
 /** @type {number} */ var $54=HEAP32[(($53)>>2)];
 /** @type {number} */ var $55=$1;
 /** @type {number} */ var $56=FUNCTION_TABLE[$54]($55);
 $n=$56;
 /** @type {number} */ var $57=$1;
 /** @type {number} */ var $58=$1;
 /** @type {number} */ var $59=(($58+8)|0);
 /** @type {number} */ var $60=HEAP32[(($59)>>2)];
 /** @type {number} */ var $61=$n;
 /** @type {number} */ var $62=(((-$61))|0);
 /** @type {number} */ var $63=(($60+($62<<4))|0);
 /** @type {number} */ var $64=_luaD_poscall($57,$63);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $mode
 * @param {number} $x
 * @return {number}
 */
function _checkmode($L,$mode,$x){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$L;
 $2=$mode;
 $3=$x;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=$3;
 /** @type {number} */ var $9=(($8)|0);
 /** @type {number} */ var $10=HEAP8[($9)];
 /** @type {number} */ var $11=(($10<<24)>>24);
 /** @type {number} */ var $12=_strchr($7,$11);
 /** @type {number} */ var $13=($12|0)==0;
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=$3;
 /** @type {number} */ var $17=$2;
 /** @type {number} */ var $18=_luaO_pushfstring($15,3360,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$16,HEAP32[(((tempVarArgs)+(8))>>2)]=$17,tempVarArgs)); STACKTOP=tempVarArgs;
 /** @type {number} */ var $19=$1;
 _luaD_throw($19,3);
 case 4: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $f
 * @param {number} $w
 * @param {number} $data
 * @param {number} $strip
 * @return {number}
 */
function _luaU_dump($L,$f,$w,$data,$strip){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 /** @type {number} */ var $D=sp;
 $1=$L;
 $2=$f;
 $3=$w;
 $4=$data;
 $5=$strip;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($D)|0);
 HEAP32[(($7)>>2)]=$6;
 /** @type {number} */ var $8=$3;
 /** @type {number} */ var $9=(($D+4)|0);
 HEAP32[(($9)>>2)]=$8;
 /** @type {number} */ var $10=$4;
 /** @type {number} */ var $11=(($D+8)|0);
 HEAP32[(($11)>>2)]=$10;
 /** @type {number} */ var $12=$5;
 /** @type {number} */ var $13=(($D+12)|0);
 HEAP32[(($13)>>2)]=$12;
 /** @type {number} */ var $14=(($D+16)|0);
 HEAP32[(($14)>>2)]=0;
 _DumpHeader($D);
 /** @type {number} */ var $15=$2;
 _DumpFunction($15,$D);
 /** @type {number} */ var $16=(($D+16)|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 STACKTOP=sp;return $17;
}
/**
 * @param {number} $D
 * @return {number}
 */
function _DumpHeader($D){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0;
 /** @type {number} */ var $1;
 /** @type {number} */ var $h=sp;
 $1=$D;
 /** @type {number} */ var $2=(($h)|0);
 _luaU_header($2);
 /** @type {number} */ var $3=(($h)|0);
 /** @type {number} */ var $4=$1;
 _DumpBlock($3,18,$4);
 STACKTOP=sp;return;
}
/**
 * @param {number} $f
 * @param {number} $D
 * @return {number}
 */
function _DumpFunction($f,$D){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$f;
 $2=$D;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+64)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=$2;
 _DumpInt($5,$6);
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=(($7+68)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=$2;
 _DumpInt($9,$10);
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=(($11+76)|0);
 /** @type {number} */ var $13=HEAP8[($12)];
 /** @type {number} */ var $14=($13&255);
 /** @type {number} */ var $15=$2;
 _DumpChar($14,$15);
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=(($16+77)|0);
 /** @type {number} */ var $18=HEAP8[($17)];
 /** @type {number} */ var $19=($18&255);
 /** @type {number} */ var $20=$2;
 _DumpChar($19,$20);
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=(($21+78)|0);
 /** @type {number} */ var $23=HEAP8[($22)];
 /** @type {number} */ var $24=($23&255);
 /** @type {number} */ var $25=$2;
 _DumpChar($24,$25);
 /** @type {number} */ var $26=$1;
 /** @type {number} */ var $27=(($26+12)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=$28;
 /** @type {number} */ var $30=$1;
 /** @type {number} */ var $31=(($30+48)|0);
 /** @type {number} */ var $32=HEAP32[(($31)>>2)];
 /** @type {number} */ var $33=$2;
 _DumpVector($29,$32,4,$33);
 /** @type {number} */ var $34=$1;
 /** @type {number} */ var $35=$2;
 _DumpConstants($34,$35);
 /** @type {number} */ var $36=$1;
 /** @type {number} */ var $37=$2;
 _DumpUpvalues($36,$37);
 /** @type {number} */ var $38=$1;
 /** @type {number} */ var $39=$2;
 _DumpDebug($38,$39);
 STACKTOP=sp;return;
}
/**
 * @param {number} $b
 * @param {number} $size
 * @param {number} $D
 * @return {number}
 */
function _DumpBlock($b,$size,$D){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$b;
 $2=$size;
 $3=$D;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=(($4+16)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=($6|0)==0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $9=$3;
 /** @type {number} */ var $10=(($9+4)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=$3;
 /** @type {number} */ var $13=(($12)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=$3;
 /** @type {number} */ var $18=(($17+8)|0);
 /** @type {number} */ var $19=HEAP32[(($18)>>2)];
 /** @type {number} */ var $20=FUNCTION_TABLE[$11]($14,$15,$16,$19);
 /** @type {number} */ var $21=$3;
 /** @type {number} */ var $22=(($21+16)|0);
 HEAP32[(($22)>>2)]=$20;
 label=3;break;
 case 3: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $x
 * @param {number} $D
 * @return {number}
 */
function _DumpInt($x,$D){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 /** @type {number} */ var $1=sp;
 /** @type {number} */ var $2;
 HEAP32[(($1)>>2)]=$x;
 $2=$D;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 _DumpBlock($3,4,$4);
 STACKTOP=sp;return;
}
/**
 * @param {number} $y
 * @param {number} $D
 * @return {number}
 */
function _DumpChar($y,$D){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $x=sp;
 $1=$y;
 $2=$D;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3)&255);
 HEAP8[($x)]=$4;
 /** @type {number} */ var $5=$2;
 _DumpBlock($x,1,$5);
 STACKTOP=sp;return;
}
/**
 * @param {number} $b
 * @param {number} $n
 * @param {number} $size
 * @param {number} $D
 * @return {number}
 */
function _DumpVector($b,$n,$size,$D){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 $1=$b;
 $2=$n;
 $3=$size;
 $4=$D;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$4;
 _DumpInt($5,$6);
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=$3;
 /** @type {number} */ var $10=(Math_imul($8,$9)|0);
 /** @type {number} */ var $11=$4;
 _DumpBlock($7,$10,$11);
 STACKTOP=sp;return;
}
/**
 * @param {number} $f
 * @param {number} $D
 * @return {number}
 */
function _DumpConstants($f,$D){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $i;
 /** @type {number} */ var $n;
 /** @type {number} */ var $o;
 $1=$f;
 $2=$D;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+44)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $n=$5;
 /** @type {number} */ var $6=$n;
 /** @type {number} */ var $7=$2;
 _DumpInt($6,$7);
 $i=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $9=$i;
 /** @type {number} */ var $10=$n;
 /** @type {number} */ var $11=($9|0)<($10|0);
 if($11){label=3;break;}else{label=11;break;}
 case 3: 
 /** @type {number} */ var $13=$i;
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=(($14+8)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=(($16+($13<<4))|0);
 $o=$17;
 /** @type {number} */ var $18=$o;
 /** @type {number} */ var $19=(($18+8)|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=$20&15;
 /** @type {number} */ var $22=$2;
 _DumpChar($21,$22);
 /** @type {number} */ var $23=$o;
 /** @type {number} */ var $24=(($23+8)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=$25&15;
 if(($26|0)==0){ label=4;break;}else if(($26|0)==1){ label=5;break;}else if(($26|0)==3){ label=6;break;}else if(($26|0)==4){ label=7;break;}else{label=8;break;}
 case 4: 
 label=9;break;
 case 5: 
 /** @type {number} */ var $29=$o;
 /** @type {number} */ var $30=(($29)|0);
 /** @type {number} */ var $31=$30;
 /** @type {number} */ var $32=HEAP32[(($31)>>2)];
 /** @type {number} */ var $33=$2;
 _DumpChar($32,$33);
 label=9;break;
 case 6: 
 /** @type {number} */ var $35=$o;
 /** @type {number} */ var $36=(($35)|0);
 /** @type {number} */ var $37=$36;
 /** @type {number} */ var $38=HEAPF64[(($37)>>3)];
 /** @type {number} */ var $39=$2;
 _DumpNumber($38,$39);
 label=9;break;
 case 7: 
 /** @type {number} */ var $41=$o;
 /** @type {number} */ var $42=(($41)|0);
 /** @type {number} */ var $43=$42;
 /** @type {number} */ var $44=HEAP32[(($43)>>2)];
 /** @type {number} */ var $45=$44;
 /** @type {number} */ var $46=$2;
 _DumpString($45,$46);
 label=9;break;
 case 8: 
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 /** @type {number} */ var $50=$i;
 /** @type {number} */ var $51=((($50)+(1))|0);
 $i=$51;
 label=2;break;
 case 11: 
 /** @type {number} */ var $53=$1;
 /** @type {number} */ var $54=(($53+56)|0);
 /** @type {number} */ var $55=HEAP32[(($54)>>2)];
 $n=$55;
 /** @type {number} */ var $56=$n;
 /** @type {number} */ var $57=$2;
 _DumpInt($56,$57);
 $i=0;
 label=12;break;
 case 12: 
 /** @type {number} */ var $59=$i;
 /** @type {number} */ var $60=$n;
 /** @type {number} */ var $61=($59|0)<($60|0);
 if($61){label=13;break;}else{label=15;break;}
 case 13: 
 /** @type {number} */ var $63=$i;
 /** @type {number} */ var $64=$1;
 /** @type {number} */ var $65=(($64+16)|0);
 /** @type {number} */ var $66=HEAP32[(($65)>>2)];
 /** @type {number} */ var $67=(($66+($63<<2))|0);
 /** @type {number} */ var $68=HEAP32[(($67)>>2)];
 /** @type {number} */ var $69=$2;
 _DumpFunction($68,$69);
 label=14;break;
 case 14: 
 /** @type {number} */ var $71=$i;
 /** @type {number} */ var $72=((($71)+(1))|0);
 $i=$72;
 label=12;break;
 case 15: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $f
 * @param {number} $D
 * @return {number}
 */
function _DumpUpvalues($f,$D){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $i;
 /** @type {number} */ var $n;
 $1=$f;
 $2=$D;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+40)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $n=$5;
 /** @type {number} */ var $6=$n;
 /** @type {number} */ var $7=$2;
 _DumpInt($6,$7);
 $i=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $9=$i;
 /** @type {number} */ var $10=$n;
 /** @type {number} */ var $11=($9|0)<($10|0);
 if($11){label=3;break;}else{label=5;break;}
 case 3: 
 /** @type {number} */ var $13=$i;
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=(($14+28)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=(($16+($13<<3))|0);
 /** @type {number} */ var $18=(($17+4)|0);
 /** @type {number} */ var $19=HEAP8[($18)];
 /** @type {number} */ var $20=($19&255);
 /** @type {number} */ var $21=$2;
 _DumpChar($20,$21);
 /** @type {number} */ var $22=$i;
 /** @type {number} */ var $23=$1;
 /** @type {number} */ var $24=(($23+28)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=(($25+($22<<3))|0);
 /** @type {number} */ var $27=(($26+5)|0);
 /** @type {number} */ var $28=HEAP8[($27)];
 /** @type {number} */ var $29=($28&255);
 /** @type {number} */ var $30=$2;
 _DumpChar($29,$30);
 label=4;break;
 case 4: 
 /** @type {number} */ var $32=$i;
 /** @type {number} */ var $33=((($32)+(1))|0);
 $i=$33;
 label=2;break;
 case 5: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $f
 * @param {number} $D
 * @return {number}
 */
function _DumpDebug($f,$D){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $i;
 /** @type {number} */ var $n;
 $1=$f;
 $2=$D;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=(($3+12)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $13=0;label=4;break;
 case 3: 
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=(($9+36)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 var $13=$11;label=4;break;
 case 4: 
 var $13;
 /** @type {number} */ var $14=$2;
 _DumpString($13,$14);
 /** @type {number} */ var $15=$2;
 /** @type {number} */ var $16=(($15+12)|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=($17|0)!=0;
 if($18){label=5;break;}else{label=6;break;}
 case 5: 
 var $25=0;label=7;break;
 case 6: 
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=(($21+52)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 var $25=$23;label=7;break;
 case 7: 
 var $25;
 $n=$25;
 /** @type {number} */ var $26=$1;
 /** @type {number} */ var $27=(($26+20)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=$28;
 /** @type {number} */ var $30=$n;
 /** @type {number} */ var $31=$2;
 _DumpVector($29,$30,4,$31);
 /** @type {number} */ var $32=$2;
 /** @type {number} */ var $33=(($32+12)|0);
 /** @type {number} */ var $34=HEAP32[(($33)>>2)];
 /** @type {number} */ var $35=($34|0)!=0;
 if($35){label=8;break;}else{label=9;break;}
 case 8: 
 var $42=0;label=10;break;
 case 9: 
 /** @type {number} */ var $38=$1;
 /** @type {number} */ var $39=(($38+60)|0);
 /** @type {number} */ var $40=HEAP32[(($39)>>2)];
 var $42=$40;label=10;break;
 case 10: 
 var $42;
 $n=$42;
 /** @type {number} */ var $43=$n;
 /** @type {number} */ var $44=$2;
 _DumpInt($43,$44);
 $i=0;
 label=11;break;
 case 11: 
 /** @type {number} */ var $46=$i;
 /** @type {number} */ var $47=$n;
 /** @type {number} */ var $48=($46|0)<($47|0);
 if($48){label=12;break;}else{label=14;break;}
 case 12: 
 /** @type {number} */ var $50=$i;
 /** @type {number} */ var $51=$1;
 /** @type {number} */ var $52=(($51+24)|0);
 /** @type {number} */ var $53=HEAP32[(($52)>>2)];
 /** @type {number} */ var $54=(($53+((($50)*(12))&-1))|0);
 /** @type {number} */ var $55=(($54)|0);
 /** @type {number} */ var $56=HEAP32[(($55)>>2)];
 /** @type {number} */ var $57=$2;
 _DumpString($56,$57);
 /** @type {number} */ var $58=$i;
 /** @type {number} */ var $59=$1;
 /** @type {number} */ var $60=(($59+24)|0);
 /** @type {number} */ var $61=HEAP32[(($60)>>2)];
 /** @type {number} */ var $62=(($61+((($58)*(12))&-1))|0);
 /** @type {number} */ var $63=(($62+4)|0);
 /** @type {number} */ var $64=HEAP32[(($63)>>2)];
 /** @type {number} */ var $65=$2;
 _DumpInt($64,$65);
 /** @type {number} */ var $66=$i;
 /** @type {number} */ var $67=$1;
 /** @type {number} */ var $68=(($67+24)|0);
 /** @type {number} */ var $69=HEAP32[(($68)>>2)];
 /** @type {number} */ var $70=(($69+((($66)*(12))&-1))|0);
 /** @type {number} */ var $71=(($70+8)|0);
 /** @type {number} */ var $72=HEAP32[(($71)>>2)];
 /** @type {number} */ var $73=$2;
 _DumpInt($72,$73);
 label=13;break;
 case 13: 
 /** @type {number} */ var $75=$i;
 /** @type {number} */ var $76=((($75)+(1))|0);
 $i=$76;
 label=11;break;
 case 14: 
 /** @type {number} */ var $78=$2;
 /** @type {number} */ var $79=(($78+12)|0);
 /** @type {number} */ var $80=HEAP32[(($79)>>2)];
 /** @type {number} */ var $81=($80|0)!=0;
 if($81){label=15;break;}else{label=16;break;}
 case 15: 
 var $88=0;label=17;break;
 case 16: 
 /** @type {number} */ var $84=$1;
 /** @type {number} */ var $85=(($84+40)|0);
 /** @type {number} */ var $86=HEAP32[(($85)>>2)];
 var $88=$86;label=17;break;
 case 17: 
 var $88;
 $n=$88;
 /** @type {number} */ var $89=$n;
 /** @type {number} */ var $90=$2;
 _DumpInt($89,$90);
 $i=0;
 label=18;break;
 case 18: 
 /** @type {number} */ var $92=$i;
 /** @type {number} */ var $93=$n;
 /** @type {number} */ var $94=($92|0)<($93|0);
 if($94){label=19;break;}else{label=21;break;}
 case 19: 
 /** @type {number} */ var $96=$i;
 /** @type {number} */ var $97=$1;
 /** @type {number} */ var $98=(($97+28)|0);
 /** @type {number} */ var $99=HEAP32[(($98)>>2)];
 /** @type {number} */ var $100=(($99+($96<<3))|0);
 /** @type {number} */ var $101=(($100)|0);
 /** @type {number} */ var $102=HEAP32[(($101)>>2)];
 /** @type {number} */ var $103=$2;
 _DumpString($102,$103);
 label=20;break;
 case 20: 
 /** @type {number} */ var $105=$i;
 /** @type {number} */ var $106=((($105)+(1))|0);
 $i=$106;
 label=18;break;
 case 21: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $x
 * @param {number} $D
 * @return {number}
 */
function _DumpNumber($x,$D){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 /** @type {number} */ var $1=sp;
 /** @type {number} */ var $2;
 HEAPF64[(($1)>>3)]=$x;
 $2=$D;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 _DumpBlock($3,8,$4);
 STACKTOP=sp;return;
}
/**
 * @param {number} $s
 * @param {number} $D
 * @return {number}
 */
function _DumpString($s,$D){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $size=sp;
 /** @type {number} */ var $size1=(sp)+(8);
 $1=$s;
 $2=$D;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=($3|0)==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 HEAP32[(($size)>>2)]=0;
 /** @type {number} */ var $6=$size;
 /** @type {number} */ var $7=$2;
 _DumpBlock($6,4,$7);
 label=4;break;
 case 3: 
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=$9;
 /** @type {number} */ var $11=(($10+12)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=((($12)+(1))|0);
 HEAP32[(($size1)>>2)]=$13;
 /** @type {number} */ var $14=$size1;
 /** @type {number} */ var $15=$2;
 _DumpBlock($14,4,$15);
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=(($16+16)|0);
 /** @type {number} */ var $18=$17;
 /** @type {number} */ var $19=HEAP32[(($size1)>>2)];
 /** @type {number} */ var $20=$19;
 /** @type {number} */ var $21=$2;
 _DumpBlock($18,$20,$21);
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $n
 * @return {number}
 */
function _luaF_newCclosure($L,$n){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $c;
 $1=$L;
 $2=$n;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=((($4)-(1))|0);
 /** @type {number} */ var $6=($5<<4);
 /** @type {number} */ var $7=((($6)+(32))|0);
 /** @type {number} */ var $8=_luaC_newobj($3,38,$7,0,0);
 /** @type {number} */ var $9=$8;
 $c=$9;
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=(($10)&255);
 /** @type {number} */ var $12=$c;
 /** @type {number} */ var $13=$12;
 /** @type {number} */ var $14=(($13+6)|0);
 HEAP8[($14)]=$11;
 /** @type {number} */ var $15=$c;
 STACKTOP=sp;return $15;
}
/**
 * @param {number} $L
 * @param {number} $n
 * @return {number}
 */
function _luaF_newLclosure($L,$n){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $c;
 $1=$L;
 $2=$n;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=((($4)-(1))|0);
 /** @type {number} */ var $6=($5<<2);
 /** @type {number} */ var $7=((($6)+(20))|0);
 /** @type {number} */ var $8=_luaC_newobj($3,6,$7,0,0);
 /** @type {number} */ var $9=$8;
 $c=$9;
 /** @type {number} */ var $10=$c;
 /** @type {number} */ var $11=$10;
 /** @type {number} */ var $12=(($11+12)|0);
 HEAP32[(($12)>>2)]=0;
 /** @type {number} */ var $13=$2;
 /** @type {number} */ var $14=(($13)&255);
 /** @type {number} */ var $15=$c;
 /** @type {number} */ var $16=$15;
 /** @type {number} */ var $17=(($16+6)|0);
 HEAP8[($17)]=$14;
 label=2;break;
 case 2: 
 /** @type {number} */ var $19=$2;
 /** @type {number} */ var $20=((($19)-(1))|0);
 $2=$20;
 /** @type {number} */ var $21=($19|0)!=0;
 if($21){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $23=$2;
 /** @type {number} */ var $24=$c;
 /** @type {number} */ var $25=$24;
 /** @type {number} */ var $26=(($25+16)|0);
 /** @type {number} */ var $27=(($26+($23<<2))|0);
 HEAP32[(($27)>>2)]=0;
 label=2;break;
 case 4: 
 /** @type {number} */ var $29=$c;
 STACKTOP=sp;return $29;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaF_newupval($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $uv;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaC_newobj($2,10,32,0,0);
 /** @type {number} */ var $4=$3;
 $uv=$4;
 /** @type {number} */ var $5=$uv;
 /** @type {number} */ var $6=(($5+16)|0);
 /** @type {number} */ var $7=$6;
 /** @type {number} */ var $8=$uv;
 /** @type {number} */ var $9=(($8+8)|0);
 HEAP32[(($9)>>2)]=$7;
 /** @type {number} */ var $10=$uv;
 /** @type {number} */ var $11=(($10+8)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=(($12+8)|0);
 HEAP32[(($13)>>2)]=0;
 /** @type {number} */ var $14=$uv;
 STACKTOP=sp;return $14;
}
/**
 * @param {number} $L
 * @param {number} $level
 * @return {number}
 */
function _luaF_findupval($L,$level){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $g;
 /** @type {number} */ var $pp;
 /** @type {number} */ var $p;
 /** @type {number} */ var $uv;
 /** @type {number} */ var $o;
 $2=$L;
 $3=$level;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=(($4+12)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 $g=$6;
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=(($7+56)|0);
 $pp=$8;
 label=2;break;
 case 2: 
 /** @type {number} */ var $10=$pp;
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=($11|0)!=0;
 if($12){label=3;break;}else{var $22=0;label=4;break;}
 case 3: 
 /** @type {number} */ var $14=$pp;
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=$15;
 $p=$16;
 /** @type {number} */ var $17=(($16+8)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=$3;
 /** @type {number} */ var $20=($18>>>0)>=($19>>>0);
 var $22=$20;label=4;break;
 case 4: 
 var $22;
 if($22){label=5;break;}else{label=10;break;}
 case 5: 
 /** @type {number} */ var $24=$p;
 /** @type {number} */ var $25=$24;
 $o=$25;
 /** @type {number} */ var $26=$p;
 /** @type {number} */ var $27=(($26+8)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=$3;
 /** @type {number} */ var $30=($28|0)==($29|0);
 if($30){label=6;break;}else{label=9;break;}
 case 6: 
 /** @type {number} */ var $32=$o;
 /** @type {number} */ var $33=$32;
 /** @type {number} */ var $34=(($33+5)|0);
 /** @type {number} */ var $35=HEAP8[($34)];
 /** @type {number} */ var $36=($35&255);
 /** @type {number} */ var $37=$36^3;
 /** @type {number} */ var $38=$g;
 /** @type {number} */ var $39=(($38+60)|0);
 /** @type {number} */ var $40=HEAP8[($39)];
 /** @type {number} */ var $41=($40&255);
 /** @type {number} */ var $42=$41^3;
 /** @type {number} */ var $43=$37&$42;
 /** @type {number} */ var $44=($43|0)!=0;
 if($44){label=8;break;}else{label=7;break;}
 case 7: 
 /** @type {number} */ var $46=$o;
 /** @type {number} */ var $47=$46;
 /** @type {number} */ var $48=(($47+5)|0);
 /** @type {number} */ var $49=HEAP8[($48)];
 /** @type {number} */ var $50=($49&255);
 /** @type {number} */ var $51=$50^3;
 /** @type {number} */ var $52=(($51)&255);
 HEAP8[($48)]=$52;
 label=8;break;
 case 8: 
 /** @type {number} */ var $54=$p;
 $1=$54;
 label=11;break;
 case 9: 
 /** @type {number} */ var $56=$o;
 /** @type {number} */ var $57=$56;
 /** @type {number} */ var $58=(($57+5)|0);
 /** @type {number} */ var $59=HEAP8[($58)];
 /** @type {number} */ var $60=($59&255);
 /** @type {number} */ var $61=$60&191;
 /** @type {number} */ var $62=(($61)&255);
 HEAP8[($58)]=$62;
 /** @type {number} */ var $63=$p;
 /** @type {number} */ var $64=(($63)|0);
 $pp=$64;
 label=2;break;
 case 10: 
 /** @type {number} */ var $66=$2;
 /** @type {number} */ var $67=$pp;
 /** @type {number} */ var $68=_luaC_newobj($66,10,32,$67,0);
 /** @type {number} */ var $69=$68;
 $uv=$69;
 /** @type {number} */ var $70=$3;
 /** @type {number} */ var $71=$uv;
 /** @type {number} */ var $72=(($71+8)|0);
 HEAP32[(($72)>>2)]=$70;
 /** @type {number} */ var $73=$g;
 /** @type {number} */ var $74=(($73+112)|0);
 /** @type {number} */ var $75=$uv;
 /** @type {number} */ var $76=(($75+16)|0);
 /** @type {number} */ var $77=$76;
 /** @type {number} */ var $78=(($77)|0);
 HEAP32[(($78)>>2)]=$74;
 /** @type {number} */ var $79=$g;
 /** @type {number} */ var $80=(($79+112)|0);
 /** @type {number} */ var $81=(($80+16)|0);
 /** @type {number} */ var $82=$81;
 /** @type {number} */ var $83=(($82+4)|0);
 /** @type {number} */ var $84=HEAP32[(($83)>>2)];
 /** @type {number} */ var $85=$uv;
 /** @type {number} */ var $86=(($85+16)|0);
 /** @type {number} */ var $87=$86;
 /** @type {number} */ var $88=(($87+4)|0);
 HEAP32[(($88)>>2)]=$84;
 /** @type {number} */ var $89=$uv;
 /** @type {number} */ var $90=$uv;
 /** @type {number} */ var $91=(($90+16)|0);
 /** @type {number} */ var $92=$91;
 /** @type {number} */ var $93=(($92+4)|0);
 /** @type {number} */ var $94=HEAP32[(($93)>>2)];
 /** @type {number} */ var $95=(($94+16)|0);
 /** @type {number} */ var $96=$95;
 /** @type {number} */ var $97=(($96)|0);
 HEAP32[(($97)>>2)]=$89;
 /** @type {number} */ var $98=$uv;
 /** @type {number} */ var $99=$g;
 /** @type {number} */ var $100=(($99+112)|0);
 /** @type {number} */ var $101=(($100+16)|0);
 /** @type {number} */ var $102=$101;
 /** @type {number} */ var $103=(($102+4)|0);
 HEAP32[(($103)>>2)]=$98;
 /** @type {number} */ var $104=$uv;
 $1=$104;
 label=11;break;
 case 11: 
 /** @type {number} */ var $106=$1;
 STACKTOP=sp;return $106;
 }
}
/**
 * @param {number} $L
 * @param {number} $uv
 * @return {number}
 */
function _luaF_freeupval($L,$uv){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$L;
 $2=$uv;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=(($3+8)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=(($6+16)|0);
 /** @type {number} */ var $8=$7;
 /** @type {number} */ var $9=($5|0)!=($8|0);
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $11=$2;
 _unlinkupval($11);
 label=3;break;
 case 3: 
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=$14;
 /** @type {number} */ var $16=_luaM_realloc_($13,$15,32,0);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $level
 * @return {number}
 */
function _luaF_close($L,$level){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $uv;
 /** @type {number} */ var $g;
 /** @type {number} */ var $o;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io1;
 $1=$L;
 $2=$level;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+12)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $g=$5;
 label=2;break;
 case 2: 
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=(($7+56)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=($9|0)!=0;
 if($10){label=3;break;}else{var $21=0;label=4;break;}
 case 3: 
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=(($12+56)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=$14;
 $uv=$15;
 /** @type {number} */ var $16=(($15+8)|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=$2;
 /** @type {number} */ var $19=($17>>>0)>=($18>>>0);
 var $21=$19;label=4;break;
 case 4: 
 var $21;
 if($21){label=5;break;}else{label=9;break;}
 case 5: 
 /** @type {number} */ var $23=$uv;
 /** @type {number} */ var $24=$23;
 $o=$24;
 /** @type {number} */ var $25=$uv;
 /** @type {number} */ var $26=(($25)|0);
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=$1;
 /** @type {number} */ var $29=(($28+56)|0);
 HEAP32[(($29)>>2)]=$27;
 /** @type {number} */ var $30=$o;
 /** @type {number} */ var $31=$30;
 /** @type {number} */ var $32=(($31+5)|0);
 /** @type {number} */ var $33=HEAP8[($32)];
 /** @type {number} */ var $34=($33&255);
 /** @type {number} */ var $35=$34^3;
 /** @type {number} */ var $36=$g;
 /** @type {number} */ var $37=(($36+60)|0);
 /** @type {number} */ var $38=HEAP8[($37)];
 /** @type {number} */ var $39=($38&255);
 /** @type {number} */ var $40=$39^3;
 /** @type {number} */ var $41=$35&$40;
 /** @type {number} */ var $42=($41|0)!=0;
 if($42){label=7;break;}else{label=6;break;}
 case 6: 
 /** @type {number} */ var $44=$1;
 /** @type {number} */ var $45=$uv;
 _luaF_freeupval($44,$45);
 label=8;break;
 case 7: 
 /** @type {number} */ var $47=$uv;
 _unlinkupval($47);
 /** @type {number} */ var $48=$uv;
 /** @type {number} */ var $49=(($48+8)|0);
 /** @type {number} */ var $50=HEAP32[(($49)>>2)];
 $io2=$50;
 /** @type {number} */ var $51=$uv;
 /** @type {number} */ var $52=(($51+16)|0);
 /** @type {number} */ var $53=$52;
 $io1=$53;
 /** @type {number} */ var $54=$io1;
 /** @type {number} */ var $55=(($54)|0);
 /** @type {number} */ var $56=$io2;
 /** @type {number} */ var $57=(($56)|0);
 /** @type {number} */ var $58=$55;
 /** @type {number} */ var $59=$57;
 HEAP32[(($58)>>2)]=HEAP32[(($59)>>2)];HEAP32[((($58)+(4))>>2)]=HEAP32[((($59)+(4))>>2)];
 /** @type {number} */ var $60=$io2;
 /** @type {number} */ var $61=(($60+8)|0);
 /** @type {number} */ var $62=HEAP32[(($61)>>2)];
 /** @type {number} */ var $63=$io1;
 /** @type {number} */ var $64=(($63+8)|0);
 HEAP32[(($64)>>2)]=$62;
 /** @type {number} */ var $65=$uv;
 /** @type {number} */ var $66=(($65+16)|0);
 /** @type {number} */ var $67=$66;
 /** @type {number} */ var $68=$uv;
 /** @type {number} */ var $69=(($68+8)|0);
 HEAP32[(($69)>>2)]=$67;
 /** @type {number} */ var $70=$g;
 /** @type {number} */ var $71=(($70+68)|0);
 /** @type {number} */ var $72=HEAP32[(($71)>>2)];
 /** @type {number} */ var $73=$o;
 /** @type {number} */ var $74=$73;
 /** @type {number} */ var $75=(($74)|0);
 HEAP32[(($75)>>2)]=$72;
 /** @type {number} */ var $76=$o;
 /** @type {number} */ var $77=$g;
 /** @type {number} */ var $78=(($77+68)|0);
 HEAP32[(($78)>>2)]=$76;
 /** @type {number} */ var $79=$g;
 /** @type {number} */ var $80=$uv;
 _luaC_checkupvalcolor($79,$80);
 label=8;break;
 case 8: 
 label=2;break;
 case 9: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaF_newproto($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $f;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaC_newobj($2,9,80,0,0);
 /** @type {number} */ var $4=$3;
 $f=$4;
 /** @type {number} */ var $5=$f;
 /** @type {number} */ var $6=(($5+8)|0);
 HEAP32[(($6)>>2)]=0;
 /** @type {number} */ var $7=$f;
 /** @type {number} */ var $8=(($7+44)|0);
 HEAP32[(($8)>>2)]=0;
 /** @type {number} */ var $9=$f;
 /** @type {number} */ var $10=(($9+16)|0);
 HEAP32[(($10)>>2)]=0;
 /** @type {number} */ var $11=$f;
 /** @type {number} */ var $12=(($11+56)|0);
 HEAP32[(($12)>>2)]=0;
 /** @type {number} */ var $13=$f;
 /** @type {number} */ var $14=(($13+12)|0);
 HEAP32[(($14)>>2)]=0;
 /** @type {number} */ var $15=$f;
 /** @type {number} */ var $16=(($15+32)|0);
 HEAP32[(($16)>>2)]=0;
 /** @type {number} */ var $17=$f;
 /** @type {number} */ var $18=(($17+48)|0);
 HEAP32[(($18)>>2)]=0;
 /** @type {number} */ var $19=$f;
 /** @type {number} */ var $20=(($19+20)|0);
 HEAP32[(($20)>>2)]=0;
 /** @type {number} */ var $21=$f;
 /** @type {number} */ var $22=(($21+52)|0);
 HEAP32[(($22)>>2)]=0;
 /** @type {number} */ var $23=$f;
 /** @type {number} */ var $24=(($23+28)|0);
 HEAP32[(($24)>>2)]=0;
 /** @type {number} */ var $25=$f;
 /** @type {number} */ var $26=(($25+40)|0);
 HEAP32[(($26)>>2)]=0;
 /** @type {number} */ var $27=$f;
 /** @type {number} */ var $28=(($27+76)|0);
 HEAP8[($28)]=0;
 /** @type {number} */ var $29=$f;
 /** @type {number} */ var $30=(($29+77)|0);
 HEAP8[($30)]=0;
 /** @type {number} */ var $31=$f;
 /** @type {number} */ var $32=(($31+78)|0);
 HEAP8[($32)]=0;
 /** @type {number} */ var $33=$f;
 /** @type {number} */ var $34=(($33+24)|0);
 HEAP32[(($34)>>2)]=0;
 /** @type {number} */ var $35=$f;
 /** @type {number} */ var $36=(($35+60)|0);
 HEAP32[(($36)>>2)]=0;
 /** @type {number} */ var $37=$f;
 /** @type {number} */ var $38=(($37+64)|0);
 HEAP32[(($38)>>2)]=0;
 /** @type {number} */ var $39=$f;
 /** @type {number} */ var $40=(($39+68)|0);
 HEAP32[(($40)>>2)]=0;
 /** @type {number} */ var $41=$f;
 /** @type {number} */ var $42=(($41+36)|0);
 HEAP32[(($42)>>2)]=0;
 /** @type {number} */ var $43=$f;
 STACKTOP=sp;return $43;
}
/**
 * @param {number} $L
 * @param {number} $f
 * @return {number}
 */
function _luaF_freeproto($L,$f){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$L;
 $2=$f;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=(($4+12)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=$6;
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=(($8+48)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=($10<<2);
 /** @type {number} */ var $12=_luaM_realloc_($3,$7,$11,0);
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=(($14+16)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=$16;
 /** @type {number} */ var $18=$2;
 /** @type {number} */ var $19=(($18+56)|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=($20<<2);
 /** @type {number} */ var $22=_luaM_realloc_($13,$17,$21,0);
 /** @type {number} */ var $23=$1;
 /** @type {number} */ var $24=$2;
 /** @type {number} */ var $25=(($24+8)|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 /** @type {number} */ var $27=$26;
 /** @type {number} */ var $28=$2;
 /** @type {number} */ var $29=(($28+44)|0);
 /** @type {number} */ var $30=HEAP32[(($29)>>2)];
 /** @type {number} */ var $31=($30<<4);
 /** @type {number} */ var $32=_luaM_realloc_($23,$27,$31,0);
 /** @type {number} */ var $33=$1;
 /** @type {number} */ var $34=$2;
 /** @type {number} */ var $35=(($34+20)|0);
 /** @type {number} */ var $36=HEAP32[(($35)>>2)];
 /** @type {number} */ var $37=$36;
 /** @type {number} */ var $38=$2;
 /** @type {number} */ var $39=(($38+52)|0);
 /** @type {number} */ var $40=HEAP32[(($39)>>2)];
 /** @type {number} */ var $41=($40<<2);
 /** @type {number} */ var $42=_luaM_realloc_($33,$37,$41,0);
 /** @type {number} */ var $43=$1;
 /** @type {number} */ var $44=$2;
 /** @type {number} */ var $45=(($44+24)|0);
 /** @type {number} */ var $46=HEAP32[(($45)>>2)];
 /** @type {number} */ var $47=$46;
 /** @type {number} */ var $48=$2;
 /** @type {number} */ var $49=(($48+60)|0);
 /** @type {number} */ var $50=HEAP32[(($49)>>2)];
 /** @type {number} */ var $51=((($50)*(12))&-1);
 /** @type {number} */ var $52=_luaM_realloc_($43,$47,$51,0);
 /** @type {number} */ var $53=$1;
 /** @type {number} */ var $54=$2;
 /** @type {number} */ var $55=(($54+28)|0);
 /** @type {number} */ var $56=HEAP32[(($55)>>2)];
 /** @type {number} */ var $57=$56;
 /** @type {number} */ var $58=$2;
 /** @type {number} */ var $59=(($58+40)|0);
 /** @type {number} */ var $60=HEAP32[(($59)>>2)];
 /** @type {number} */ var $61=($60<<3);
 /** @type {number} */ var $62=_luaM_realloc_($53,$57,$61,0);
 /** @type {number} */ var $63=$1;
 /** @type {number} */ var $64=$2;
 /** @type {number} */ var $65=$64;
 /** @type {number} */ var $66=_luaM_realloc_($63,$65,80,0);
 STACKTOP=sp;return;
}
/**
 * @param {number} $f
 * @param {number} $local_number
 * @param {number} $pc
 * @return {number}
 */
function _luaF_getlocalname($f,$local_number,$pc){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $i;
 $2=$f;
 $3=$local_number;
 $4=$pc;
 $i=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $6=$i;
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=(($7+60)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=($6|0)<($9|0);
 if($10){label=3;break;}else{label=10;break;}
 case 3: 
 /** @type {number} */ var $12=$i;
 /** @type {number} */ var $13=$2;
 /** @type {number} */ var $14=(($13+24)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=(($15+((($12)*(12))&-1))|0);
 /** @type {number} */ var $17=(($16+4)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=$4;
 /** @type {number} */ var $20=($18|0)<=($19|0);
 if($20){label=4;break;}else{label=10;break;}
 case 4: 
 /** @type {number} */ var $22=$4;
 /** @type {number} */ var $23=$i;
 /** @type {number} */ var $24=$2;
 /** @type {number} */ var $25=(($24+24)|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 /** @type {number} */ var $27=(($26+((($23)*(12))&-1))|0);
 /** @type {number} */ var $28=(($27+8)|0);
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 /** @type {number} */ var $30=($22|0)<($29|0);
 if($30){label=5;break;}else{label=8;break;}
 case 5: 
 /** @type {number} */ var $32=$3;
 /** @type {number} */ var $33=((($32)-(1))|0);
 $3=$33;
 /** @type {number} */ var $34=$3;
 /** @type {number} */ var $35=($34|0)==0;
 if($35){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $37=$i;
 /** @type {number} */ var $38=$2;
 /** @type {number} */ var $39=(($38+24)|0);
 /** @type {number} */ var $40=HEAP32[(($39)>>2)];
 /** @type {number} */ var $41=(($40+((($37)*(12))&-1))|0);
 /** @type {number} */ var $42=(($41)|0);
 /** @type {number} */ var $43=HEAP32[(($42)>>2)];
 /** @type {number} */ var $44=(($43+16)|0);
 /** @type {number} */ var $45=$44;
 $1=$45;
 label=11;break;
 case 7: 
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 /** @type {number} */ var $49=$i;
 /** @type {number} */ var $50=((($49)+(1))|0);
 $i=$50;
 label=2;break;
 case 10: 
 $1=0;
 label=11;break;
 case 11: 
 /** @type {number} */ var $53=$1;
 STACKTOP=sp;return $53;
 }
}
/**
 * @param {number} $uv
 * @return {number}
 */
function _unlinkupval($uv){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$uv;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+16)|0);
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=(($4)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=(($7+16)|0);
 /** @type {number} */ var $9=$8;
 /** @type {number} */ var $10=(($9+4)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=(($11+16)|0);
 /** @type {number} */ var $13=$12;
 /** @type {number} */ var $14=(($13)|0);
 HEAP32[(($14)>>2)]=$6;
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=(($15+16)|0);
 /** @type {number} */ var $17=$16;
 /** @type {number} */ var $18=(($17+4)|0);
 /** @type {number} */ var $19=HEAP32[(($18)>>2)];
 /** @type {number} */ var $20=$1;
 /** @type {number} */ var $21=(($20+16)|0);
 /** @type {number} */ var $22=$21;
 /** @type {number} */ var $23=(($22)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=(($24+16)|0);
 /** @type {number} */ var $26=$25;
 /** @type {number} */ var $27=(($26+4)|0);
 HEAP32[(($27)>>2)]=$19;
 STACKTOP=sp;return;
}
/**
 * @param {number} $L
 * @param {number} $o
 * @param {number} $v
 * @return {number}
 */
function _luaC_barrier_($L,$o,$v){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $g;
 $1=$L;
 $2=$o;
 $3=$v;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+12)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 $g=$6;
 /** @type {number} */ var $7=$g;
 /** @type {number} */ var $8=(($7+62)|0);
 /** @type {number} */ var $9=HEAP8[($8)];
 /** @type {number} */ var $10=($9&255);
 /** @type {number} */ var $11=($10|0)==2;
 if($11){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $13=$g;
 /** @type {number} */ var $14=(($13+61)|0);
 /** @type {number} */ var $15=HEAP8[($14)];
 /** @type {number} */ var $16=($15&255);
 /** @type {number} */ var $17=($16|0)<=1;
 if($17){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $19=$g;
 /** @type {number} */ var $20=$3;
 _reallymarkobject($19,$20);
 label=5;break;
 case 4: 
 /** @type {number} */ var $22=$2;
 /** @type {number} */ var $23=$22;
 /** @type {number} */ var $24=(($23+5)|0);
 /** @type {number} */ var $25=HEAP8[($24)];
 /** @type {number} */ var $26=($25&255);
 /** @type {number} */ var $27=$26&-72;
 /** @type {number} */ var $28=$g;
 /** @type {number} */ var $29=(($28+60)|0);
 /** @type {number} */ var $30=HEAP8[($29)];
 /** @type {number} */ var $31=($30&255);
 /** @type {number} */ var $32=$31&3;
 /** @type {number} */ var $33=(($32)&255);
 /** @type {number} */ var $34=($33&255);
 /** @type {number} */ var $35=$27|$34;
 /** @type {number} */ var $36=(($35)&255);
 /** @type {number} */ var $37=$2;
 /** @type {number} */ var $38=$37;
 /** @type {number} */ var $39=(($38+5)|0);
 HEAP8[($39)]=$36;
 label=5;break;
 case 5: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $o
 * @return {number}
 */
function _luaC_barrierback_($L,$o){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $g;
 $1=$L;
 $2=$o;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+12)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $g=$5;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=$6;
 /** @type {number} */ var $8=(($7+5)|0);
 /** @type {number} */ var $9=HEAP8[($8)];
 /** @type {number} */ var $10=($9&255);
 /** @type {number} */ var $11=$10&251;
 /** @type {number} */ var $12=(($11)&255);
 HEAP8[($8)]=$12;
 /** @type {number} */ var $13=$g;
 /** @type {number} */ var $14=(($13+88)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=$16;
 /** @type {number} */ var $18=(($17+24)|0);
 HEAP32[(($18)>>2)]=$15;
 /** @type {number} */ var $19=$2;
 /** @type {number} */ var $20=$g;
 /** @type {number} */ var $21=(($20+88)|0);
 HEAP32[(($21)>>2)]=$19;
 STACKTOP=sp;return;
}
/**
 * @param {number} $L
 * @param {number} $p
 * @param {number} $c
 * @return {number}
 */
function _luaC_barrierproto_($L,$p,$c){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $g;
 $1=$L;
 $2=$p;
 $3=$c;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+12)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 $g=$6;
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=(($7+32)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=($9|0)==0;
 if($10){label=2;break;}else{label=6;break;}
 case 2: 
 /** @type {number} */ var $12=$3;
 /** @type {number} */ var $13=$12;
 /** @type {number} */ var $14=$13;
 /** @type {number} */ var $15=(($14+5)|0);
 /** @type {number} */ var $16=HEAP8[($15)];
 /** @type {number} */ var $17=($16&255);
 /** @type {number} */ var $18=$17&3;
 /** @type {number} */ var $19=($18|0)!=0;
 if($19){label=3;break;}else{label=5;break;}
 case 3: 
 /** @type {number} */ var $21=$2;
 /** @type {number} */ var $22=$21;
 /** @type {number} */ var $23=$22;
 /** @type {number} */ var $24=(($23+5)|0);
 /** @type {number} */ var $25=HEAP8[($24)];
 /** @type {number} */ var $26=($25&255);
 /** @type {number} */ var $27=$26&4;
 /** @type {number} */ var $28=($27|0)!=0;
 if($28){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $30=$1;
 /** @type {number} */ var $31=$2;
 /** @type {number} */ var $32=$31;
 /** @type {number} */ var $33=$3;
 /** @type {number} */ var $34=$33;
 _luaC_barrier_($30,$32,$34);
 label=5;break;
 case 5: 
 label=7;break;
 case 6: 
 /** @type {number} */ var $37=$2;
 /** @type {number} */ var $38=$37;
 /** @type {number} */ var $39=$38;
 /** @type {number} */ var $40=(($39+5)|0);
 /** @type {number} */ var $41=HEAP8[($40)];
 /** @type {number} */ var $42=($41&255);
 /** @type {number} */ var $43=$42&251;
 /** @type {number} */ var $44=(($43)&255);
 HEAP8[($40)]=$44;
 /** @type {number} */ var $45=$g;
 /** @type {number} */ var $46=(($45+88)|0);
 /** @type {number} */ var $47=HEAP32[(($46)>>2)];
 /** @type {number} */ var $48=$2;
 /** @type {number} */ var $49=(($48+72)|0);
 HEAP32[(($49)>>2)]=$47;
 /** @type {number} */ var $50=$2;
 /** @type {number} */ var $51=$50;
 /** @type {number} */ var $52=$g;
 /** @type {number} */ var $53=(($52+88)|0);
 HEAP32[(($53)>>2)]=$51;
 label=7;break;
 case 7: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $g
 * @param {number} $uv
 * @return {number}
 */
function _luaC_checkupvalcolor($g,$uv){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $o;
 $1=$g;
 $2=$uv;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=$3;
 $o=$4;
 /** @type {number} */ var $5=$o;
 /** @type {number} */ var $6=$5;
 /** @type {number} */ var $7=(($6+5)|0);
 /** @type {number} */ var $8=HEAP8[($7)];
 /** @type {number} */ var $9=($8&255);
 /** @type {number} */ var $10=$9&7;
 /** @type {number} */ var $11=($10|0)!=0;
 if($11){label=10;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=(($13+62)|0);
 /** @type {number} */ var $15=HEAP8[($14)];
 /** @type {number} */ var $16=($15&255);
 /** @type {number} */ var $17=($16|0)==2;
 if($17){label=4;break;}else{label=3;break;}
 case 3: 
 /** @type {number} */ var $19=$1;
 /** @type {number} */ var $20=(($19+61)|0);
 /** @type {number} */ var $21=HEAP8[($20)];
 /** @type {number} */ var $22=($21&255);
 /** @type {number} */ var $23=($22|0)<=1;
 if($23){label=4;break;}else{label=8;break;}
 case 4: 
 /** @type {number} */ var $25=$o;
 /** @type {number} */ var $26=$25;
 /** @type {number} */ var $27=(($26+5)|0);
 /** @type {number} */ var $28=HEAP8[($27)];
 /** @type {number} */ var $29=($28&255);
 /** @type {number} */ var $30=$29&191;
 /** @type {number} */ var $31=(($30)&255);
 HEAP8[($27)]=$31;
 /** @type {number} */ var $32=$o;
 /** @type {number} */ var $33=$32;
 /** @type {number} */ var $34=(($33+5)|0);
 /** @type {number} */ var $35=HEAP8[($34)];
 /** @type {number} */ var $36=($35&255);
 /** @type {number} */ var $37=$36|4;
 /** @type {number} */ var $38=(($37)&255);
 HEAP8[($34)]=$38;
 /** @type {number} */ var $39=$2;
 /** @type {number} */ var $40=(($39+8)|0);
 /** @type {number} */ var $41=HEAP32[(($40)>>2)];
 /** @type {number} */ var $42=(($41+8)|0);
 /** @type {number} */ var $43=HEAP32[(($42)>>2)];
 /** @type {number} */ var $44=$43&64;
 /** @type {number} */ var $45=($44|0)!=0;
 if($45){label=5;break;}else{label=7;break;}
 case 5: 
 /** @type {number} */ var $47=$2;
 /** @type {number} */ var $48=(($47+8)|0);
 /** @type {number} */ var $49=HEAP32[(($48)>>2)];
 /** @type {number} */ var $50=(($49)|0);
 /** @type {number} */ var $51=$50;
 /** @type {number} */ var $52=HEAP32[(($51)>>2)];
 /** @type {number} */ var $53=$52;
 /** @type {number} */ var $54=(($53+5)|0);
 /** @type {number} */ var $55=HEAP8[($54)];
 /** @type {number} */ var $56=($55&255);
 /** @type {number} */ var $57=$56&3;
 /** @type {number} */ var $58=($57|0)!=0;
 if($58){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $60=$1;
 /** @type {number} */ var $61=$2;
 /** @type {number} */ var $62=(($61+8)|0);
 /** @type {number} */ var $63=HEAP32[(($62)>>2)];
 /** @type {number} */ var $64=(($63)|0);
 /** @type {number} */ var $65=$64;
 /** @type {number} */ var $66=HEAP32[(($65)>>2)];
 _reallymarkobject($60,$66);
 label=7;break;
 case 7: 
 label=9;break;
 case 8: 
 /** @type {number} */ var $69=$o;
 /** @type {number} */ var $70=$69;
 /** @type {number} */ var $71=(($70+5)|0);
 /** @type {number} */ var $72=HEAP8[($71)];
 /** @type {number} */ var $73=($72&255);
 /** @type {number} */ var $74=$73&-72;
 /** @type {number} */ var $75=$1;
 /** @type {number} */ var $76=(($75+60)|0);
 /** @type {number} */ var $77=HEAP8[($76)];
 /** @type {number} */ var $78=($77&255);
 /** @type {number} */ var $79=$78&3;
 /** @type {number} */ var $80=(($79)&255);
 /** @type {number} */ var $81=($80&255);
 /** @type {number} */ var $82=$74|$81;
 /** @type {number} */ var $83=(($82)&255);
 /** @type {number} */ var $84=$o;
 /** @type {number} */ var $85=$84;
 /** @type {number} */ var $86=(($85+5)|0);
 HEAP8[($86)]=$83;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $tt
 * @param {number} $sz
 * @param {number} $list
 * @param {number} $offset
 * @return {number}
 */
function _luaC_newobj($L,$tt,$sz,$list,$offset){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 /** @type {number} */ var $g;
 /** @type {number} */ var $raw;
 /** @type {number} */ var $o;
 $1=$L;
 $2=$tt;
 $3=$sz;
 $4=$list;
 $5=$offset;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+12)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 $g=$8;
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=$10&15;
 /** @type {number} */ var $12=$3;
 /** @type {number} */ var $13=_luaM_realloc_($9,0,$11,$12);
 $raw=$13;
 /** @type {number} */ var $14=$raw;
 /** @type {number} */ var $15=$5;
 /** @type {number} */ var $16=(($14+$15)|0);
 /** @type {number} */ var $17=$16;
 $o=$17;
 /** @type {number} */ var $18=$4;
 /** @type {number} */ var $19=($18|0)==0;
 if($19){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $21=$g;
 /** @type {number} */ var $22=(($21+68)|0);
 $4=$22;
 label=3;break;
 case 3: 
 /** @type {number} */ var $24=$g;
 /** @type {number} */ var $25=(($24+60)|0);
 /** @type {number} */ var $26=HEAP8[($25)];
 /** @type {number} */ var $27=($26&255);
 /** @type {number} */ var $28=$27&3;
 /** @type {number} */ var $29=(($28)&255);
 /** @type {number} */ var $30=$o;
 /** @type {number} */ var $31=$30;
 /** @type {number} */ var $32=(($31+5)|0);
 HEAP8[($32)]=$29;
 /** @type {number} */ var $33=$2;
 /** @type {number} */ var $34=(($33)&255);
 /** @type {number} */ var $35=$o;
 /** @type {number} */ var $36=$35;
 /** @type {number} */ var $37=(($36+4)|0);
 HEAP8[($37)]=$34;
 /** @type {number} */ var $38=$4;
 /** @type {number} */ var $39=HEAP32[(($38)>>2)];
 /** @type {number} */ var $40=$o;
 /** @type {number} */ var $41=$40;
 /** @type {number} */ var $42=(($41)|0);
 HEAP32[(($42)>>2)]=$39;
 /** @type {number} */ var $43=$o;
 /** @type {number} */ var $44=$4;
 HEAP32[(($44)>>2)]=$43;
 /** @type {number} */ var $45=$o;
 STACKTOP=sp;return $45;
 }
}
/**
 * @param {number} $L
 * @param {number} $o
 * @param {number} $mt
 * @return {number}
 */
function _luaC_checkfinalizer($L,$o,$mt){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $g;
 /** @type {number} */ var $p;
 /** @type {number} */ var $ho;
 $1=$L;
 $2=$o;
 $3=$mt;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+12)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 $g=$6;
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=$7;
 /** @type {number} */ var $9=(($8+5)|0);
 /** @type {number} */ var $10=HEAP8[($9)];
 /** @type {number} */ var $11=($10&255);
 /** @type {number} */ var $12=$11&16;
 /** @type {number} */ var $13=($12|0)!=0;
 if($13){label=10;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $15=$2;
 /** @type {number} */ var $16=$15;
 /** @type {number} */ var $17=(($16+5)|0);
 /** @type {number} */ var $18=HEAP8[($17)];
 /** @type {number} */ var $19=($18&255);
 /** @type {number} */ var $20=$19&8;
 /** @type {number} */ var $21=($20|0)!=0;
 if($21){label=10;break;}else{label=3;break;}
 case 3: 
 /** @type {number} */ var $23=$3;
 /** @type {number} */ var $24=($23|0)==0;
 if($24){label=4;break;}else{label=5;break;}
 case 4: 
 var $44=0;label=9;break;
 case 5: 
 /** @type {number} */ var $27=$3;
 /** @type {number} */ var $28=(($27+6)|0);
 /** @type {number} */ var $29=HEAP8[($28)];
 /** @type {number} */ var $30=($29&255);
 /** @type {number} */ var $31=$30&4;
 /** @type {number} */ var $32=($31|0)!=0;
 if($32){label=6;break;}else{label=7;break;}
 case 6: 
 var $42=0;label=8;break;
 case 7: 
 /** @type {number} */ var $35=$3;
 /** @type {number} */ var $36=$g;
 /** @type {number} */ var $37=(($36+184)|0);
 /** @type {number} */ var $38=(($37+8)|0);
 /** @type {number} */ var $39=HEAP32[(($38)>>2)];
 /** @type {number} */ var $40=_luaT_gettm($35,2,$39);
 var $42=$40;label=8;break;
 case 8: 
 var $42;
 var $44=$42;label=9;break;
 case 9: 
 var $44;
 /** @type {number} */ var $45=($44|0)==0;
 if($45){label=10;break;}else{label=11;break;}
 case 10: 
 label=22;break;
 case 11: 
 /** @type {number} */ var $48=$2;
 /** @type {number} */ var $49=$48;
 $ho=$49;
 /** @type {number} */ var $50=$g;
 /** @type {number} */ var $51=(($50+76)|0);
 /** @type {number} */ var $52=HEAP32[(($51)>>2)];
 /** @type {number} */ var $53=$ho;
 /** @type {number} */ var $54=(($53)|0);
 /** @type {number} */ var $55=($52|0)==($54|0);
 if($55){label=12;break;}else{label=13;break;}
 case 12: 
 /** @type {number} */ var $57=$1;
 /** @type {number} */ var $58=$g;
 /** @type {number} */ var $59=(($58+76)|0);
 /** @type {number} */ var $60=HEAP32[(($59)>>2)];
 /** @type {number} */ var $61=_sweeptolive($57,$60,0);
 /** @type {number} */ var $62=$g;
 /** @type {number} */ var $63=(($62+76)|0);
 HEAP32[(($63)>>2)]=$61;
 label=13;break;
 case 13: 
 /** @type {number} */ var $65=$g;
 /** @type {number} */ var $66=(($65+68)|0);
 $p=$66;
 label=14;break;
 case 14: 
 /** @type {number} */ var $68=$p;
 /** @type {number} */ var $69=HEAP32[(($68)>>2)];
 /** @type {number} */ var $70=$2;
 /** @type {number} */ var $71=($69|0)!=($70|0);
 if($71){label=15;break;}else{label=17;break;}
 case 15: 
 label=16;break;
 case 16: 
 /** @type {number} */ var $74=$p;
 /** @type {number} */ var $75=HEAP32[(($74)>>2)];
 /** @type {number} */ var $76=$75;
 /** @type {number} */ var $77=(($76)|0);
 $p=$77;
 label=14;break;
 case 17: 
 /** @type {number} */ var $79=$ho;
 /** @type {number} */ var $80=(($79)|0);
 /** @type {number} */ var $81=HEAP32[(($80)>>2)];
 /** @type {number} */ var $82=$p;
 HEAP32[(($82)>>2)]=$81;
 /** @type {number} */ var $83=$g;
 /** @type {number} */ var $84=(($83+72)|0);
 /** @type {number} */ var $85=HEAP32[(($84)>>2)];
 /** @type {number} */ var $86=$ho;
 /** @type {number} */ var $87=(($86)|0);
 HEAP32[(($87)>>2)]=$85;
 /** @type {number} */ var $88=$2;
 /** @type {number} */ var $89=$g;
 /** @type {number} */ var $90=(($89+72)|0);
 HEAP32[(($90)>>2)]=$88;
 /** @type {number} */ var $91=$ho;
 /** @type {number} */ var $92=(($91+5)|0);
 /** @type {number} */ var $93=HEAP8[($92)];
 /** @type {number} */ var $94=($93&255);
 /** @type {number} */ var $95=$94|16;
 /** @type {number} */ var $96=(($95)&255);
 HEAP8[($92)]=$96;
 /** @type {number} */ var $97=$g;
 /** @type {number} */ var $98=(($97+62)|0);
 /** @type {number} */ var $99=HEAP8[($98)];
 /** @type {number} */ var $100=($99&255);
 /** @type {number} */ var $101=($100|0)==2;
 if($101){label=20;break;}else{label=18;break;}
 case 18: 
 /** @type {number} */ var $103=$g;
 /** @type {number} */ var $104=(($103+61)|0);
 /** @type {number} */ var $105=HEAP8[($104)];
 /** @type {number} */ var $106=($105&255);
 /** @type {number} */ var $107=($106|0)<=1;
 if($107){label=20;break;}else{label=19;break;}
 case 19: 
 /** @type {number} */ var $109=$2;
 /** @type {number} */ var $110=$109;
 /** @type {number} */ var $111=(($110+5)|0);
 /** @type {number} */ var $112=HEAP8[($111)];
 /** @type {number} */ var $113=($112&255);
 /** @type {number} */ var $114=$113&-72;
 /** @type {number} */ var $115=$g;
 /** @type {number} */ var $116=(($115+60)|0);
 /** @type {number} */ var $117=HEAP8[($116)];
 /** @type {number} */ var $118=($117&255);
 /** @type {number} */ var $119=$118&3;
 /** @type {number} */ var $120=(($119)&255);
 /** @type {number} */ var $121=($120&255);
 /** @type {number} */ var $122=$114|$121;
 /** @type {number} */ var $123=(($122)&255);
 /** @type {number} */ var $124=$2;
 /** @type {number} */ var $125=$124;
 /** @type {number} */ var $126=(($125+5)|0);
 HEAP8[($126)]=$123;
 label=21;break;
 case 20: 
 /** @type {number} */ var $128=$2;
 /** @type {number} */ var $129=$128;
 /** @type {number} */ var $130=(($129+5)|0);
 /** @type {number} */ var $131=HEAP8[($130)];
 /** @type {number} */ var $132=($131&255);
 /** @type {number} */ var $133=$132&191;
 /** @type {number} */ var $134=(($133)&255);
 HEAP8[($130)]=$134;
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $mode
 * @return {number}
 */
function _luaC_changemode($L,$mode){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $g;
 $1=$L;
 $2=$mode;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+12)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $g=$5;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=$g;
 /** @type {number} */ var $8=(($7+62)|0);
 /** @type {number} */ var $9=HEAP8[($8)];
 /** @type {number} */ var $10=($9&255);
 /** @type {number} */ var $11=($6|0)==($10|0);
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 label=6;break;
 case 3: 
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=($14|0)==2;
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $17=$1;
 _luaC_runtilstate($17,1);
 /** @type {number} */ var $18=$g;
 /** @type {number} */ var $19=(($18+8)|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=$g;
 /** @type {number} */ var $22=(($21+12)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 /** @type {number} */ var $24=((($20)+($23))|0);
 /** @type {number} */ var $25=$g;
 /** @type {number} */ var $26=(($25+20)|0);
 HEAP32[(($26)>>2)]=$24;
 /** @type {number} */ var $27=$g;
 /** @type {number} */ var $28=(($27+62)|0);
 HEAP8[($28)]=2;
 label=6;break;
 case 5: 
 /** @type {number} */ var $30=$g;
 /** @type {number} */ var $31=(($30+62)|0);
 HEAP8[($31)]=0;
 /** @type {number} */ var $32=$1;
 /** @type {number} */ var $33=_entersweep($32);
 /** @type {number} */ var $34=$1;
 _luaC_runtilstate($34,-29);
 label=6;break;
 case 6: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $statesmask
 * @return {number}
 */
function _luaC_runtilstate($L,$statesmask){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $g;
 $1=$L;
 $2=$statesmask;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+12)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $g=$5;
 label=2;break;
 case 2: 
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=$g;
 /** @type {number} */ var $9=(($8+61)|0);
 /** @type {number} */ var $10=HEAP8[($9)];
 /** @type {number} */ var $11=($10&255);
 /** @type {number} */ var $12=1<<$11;
 /** @type {number} */ var $13=$7&$12;
 /** @type {number} */ var $14=($13|0)!=0;
 /** @type {number} */ var $15=$14^1;
 if($15){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=_singlestep($17);
 label=2;break;
 case 4: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaC_freeallobjects($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $g;
 /** @type {number} */ var $i;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+12)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $g=$4;
 /** @type {number} */ var $5=$1;
 _separatetobefnz($5,1);
 /** @type {number} */ var $6=$1;
 _callallpendingfinalizers($6,0);
 /** @type {number} */ var $7=$g;
 /** @type {number} */ var $8=(($7+60)|0);
 HEAP8[($8)]=3;
 /** @type {number} */ var $9=$g;
 /** @type {number} */ var $10=(($9+62)|0);
 HEAP8[($10)]=0;
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=$g;
 /** @type {number} */ var $13=(($12+72)|0);
 /** @type {number} */ var $14=_sweeplist($11,$13,-3);
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=$g;
 /** @type {number} */ var $17=(($16+68)|0);
 /** @type {number} */ var $18=_sweeplist($15,$17,-3);
 $i=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $20=$i;
 /** @type {number} */ var $21=$g;
 /** @type {number} */ var $22=(($21+24)|0);
 /** @type {number} */ var $23=(($22+8)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=($20|0)<($24|0);
 if($25){label=3;break;}else{label=5;break;}
 case 3: 
 /** @type {number} */ var $27=$1;
 /** @type {number} */ var $28=$i;
 /** @type {number} */ var $29=$g;
 /** @type {number} */ var $30=(($29+24)|0);
 /** @type {number} */ var $31=(($30)|0);
 /** @type {number} */ var $32=HEAP32[(($31)>>2)];
 /** @type {number} */ var $33=(($32+($28<<2))|0);
 /** @type {number} */ var $34=_sweeplist($27,$33,-3);
 label=4;break;
 case 4: 
 /** @type {number} */ var $36=$i;
 /** @type {number} */ var $37=((($36)+(1))|0);
 $i=$37;
 label=2;break;
 case 5: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaC_forcestep($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $g;
 /** @type {number} */ var $i;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+12)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $g=$4;
 /** @type {number} */ var $5=$g;
 /** @type {number} */ var $6=(($5+62)|0);
 /** @type {number} */ var $7=HEAP8[($6)];
 /** @type {number} */ var $8=($7&255);
 /** @type {number} */ var $9=($8|0)==2;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $11=$1;
 _generationalcollection($11);
 label=4;break;
 case 3: 
 /** @type {number} */ var $13=$1;
 _incstep($13);
 label=4;break;
 case 4: 
 $i=0;
 label=5;break;
 case 5: 
 /** @type {number} */ var $16=$g;
 /** @type {number} */ var $17=(($16+104)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=($18|0)!=0;
 if($19){label=6;break;}else{label=10;break;}
 case 6: 
 /** @type {number} */ var $21=$i;
 /** @type {number} */ var $22=($21|0)<4;
 if($22){label=8;break;}else{label=7;break;}
 case 7: 
 /** @type {number} */ var $24=$g;
 /** @type {number} */ var $25=(($24+61)|0);
 /** @type {number} */ var $26=HEAP8[($25)];
 /** @type {number} */ var $27=($26&255);
 /** @type {number} */ var $28=($27|0)==5;
 if($28){label=8;break;}else{label=10;break;}
 case 8: 
 /** @type {number} */ var $30=$1;
 _GCTM($30,1);
 label=9;break;
 case 9: 
 /** @type {number} */ var $32=$i;
 /** @type {number} */ var $33=((($32)+(1))|0);
 $i=$33;
 label=5;break;
 case 10: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaC_step($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $g;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+12)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $g=$4;
 /** @type {number} */ var $5=$g;
 /** @type {number} */ var $6=(($5+63)|0);
 /** @type {number} */ var $7=HEAP8[($6)];
 /** @type {number} */ var $8=(($7<<24)>>24)!=0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $10=$1;
 _luaC_forcestep($10);
 label=4;break;
 case 3: 
 /** @type {number} */ var $12=$g;
 _luaE_setdebt($12,-1600);
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $isemergency
 * @return {number}
 */
function _luaC_fullgc($L,$isemergency){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $g;
 /** @type {number} */ var $origkind;
 /** @type {number} */ var $someblack;
 $1=$L;
 $2=$isemergency;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+12)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $g=$5;
 /** @type {number} */ var $6=$g;
 /** @type {number} */ var $7=(($6+62)|0);
 /** @type {number} */ var $8=HEAP8[($7)];
 /** @type {number} */ var $9=($8&255);
 $origkind=$9;
 /** @type {number} */ var $10=$g;
 /** @type {number} */ var $11=(($10+62)|0);
 /** @type {number} */ var $12=HEAP8[($11)];
 /** @type {number} */ var $13=($12&255);
 /** @type {number} */ var $14=($13|0)==2;
 if($14){var $22=1;label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $16=$g;
 /** @type {number} */ var $17=(($16+61)|0);
 /** @type {number} */ var $18=HEAP8[($17)];
 /** @type {number} */ var $19=($18&255);
 /** @type {number} */ var $20=($19|0)<=1;
 var $22=$20;label=3;break;
 case 3: 
 var $22;
 /** @type {number} */ var $23=($22&1);
 $someblack=$23;
 /** @type {number} */ var $24=$2;
 /** @type {number} */ var $25=($24|0)!=0;
 if($25){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $27=$g;
 /** @type {number} */ var $28=(($27+62)|0);
 HEAP8[($28)]=1;
 label=6;break;
 case 5: 
 /** @type {number} */ var $30=$g;
 /** @type {number} */ var $31=(($30+62)|0);
 HEAP8[($31)]=0;
 /** @type {number} */ var $32=$1;
 _callallpendingfinalizers($32,1);
 label=6;break;
 case 6: 
 /** @type {number} */ var $34=$someblack;
 /** @type {number} */ var $35=($34|0)!=0;
 if($35){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $37=$1;
 /** @type {number} */ var $38=_entersweep($37);
 label=8;break;
 case 8: 
 /** @type {number} */ var $40=$1;
 _luaC_runtilstate($40,32);
 /** @type {number} */ var $41=$1;
 _luaC_runtilstate($41,-33);
 /** @type {number} */ var $42=$1;
 _luaC_runtilstate($42,32);
 /** @type {number} */ var $43=$origkind;
 /** @type {number} */ var $44=($43|0)==2;
 if($44){label=9;break;}else{label=10;break;}
 case 9: 
 /** @type {number} */ var $46=$1;
 _luaC_runtilstate($46,1);
 label=10;break;
 case 10: 
 /** @type {number} */ var $48=$origkind;
 /** @type {number} */ var $49=(($48)&255);
 /** @type {number} */ var $50=$g;
 /** @type {number} */ var $51=(($50+62)|0);
 HEAP8[($51)]=$49;
 /** @type {number} */ var $52=$g;
 /** @type {number} */ var $53=$g;
 /** @type {number} */ var $54=(($53+8)|0);
 /** @type {number} */ var $55=HEAP32[(($54)>>2)];
 /** @type {number} */ var $56=$g;
 /** @type {number} */ var $57=(($56+12)|0);
 /** @type {number} */ var $58=HEAP32[(($57)>>2)];
 /** @type {number} */ var $59=((($55)+($58))|0);
 /** @type {number} */ var $60=(((($59>>>0))/(200))&-1);
 /** @type {number} */ var $61=(((-$60))|0);
 /** @type {number} */ var $62=$g;
 /** @type {number} */ var $63=(($62+156)|0);
 /** @type {number} */ var $64=HEAP32[(($63)>>2)];
 /** @type {number} */ var $65=(Math_imul($61,$64)|0);
 _luaE_setdebt($52,$65);
 /** @type {number} */ var $66=$2;
 /** @type {number} */ var $67=($66|0)!=0;
 if($67){label=12;break;}else{label=11;break;}
 case 11: 
 /** @type {number} */ var $69=$1;
 _callallpendingfinalizers($69,1);
 label=12;break;
 case 12: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $g
 * @param {number} $o
 * @return {number}
 */
function _reallymarkobject($g,$o){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $size;
 /** @type {number} */ var $mt;
 /** @type {number} */ var $uv;
 $1=$g;
 $2=$o;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=(($4+5)|0);
 /** @type {number} */ var $6=HEAP8[($5)];
 /** @type {number} */ var $7=($6&255);
 /** @type {number} */ var $8=$7&252;
 /** @type {number} */ var $9=(($8)&255);
 HEAP8[($5)]=$9;
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=$10;
 /** @type {number} */ var $12=(($11+4)|0);
 /** @type {number} */ var $13=HEAP8[($12)];
 /** @type {number} */ var $14=($13&255);
 switch(($14|0)){case 10:{ label=10;break;}case 6:{ label=16;break;}case 38:{ label=17;break;}case 5:{ label=18;break;}case 8:{ label=19;break;}case 4:case 20:{ label=2;break;}case 9:{ label=20;break;}case 7:{ label=3;break;}default:{label=21;break;}}break;
 case 2: 
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=$16;
 /** @type {number} */ var $18=$17;
 /** @type {number} */ var $19=(($18+12)|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=((($20)+(1))|0);
 /** @type {number} */ var $22=$21;
 /** @type {number} */ var $23=((($22)+(16))|0);
 $size=$23;
 label=22;break;
 case 3: 
 /** @type {number} */ var $25=$2;
 /** @type {number} */ var $26=$25;
 /** @type {number} */ var $27=$26;
 /** @type {number} */ var $28=(($27+8)|0);
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 $mt=$29;
 /** @type {number} */ var $30=$mt;
 /** @type {number} */ var $31=($30|0)!=0;
 if($31){label=4;break;}else{label=6;break;}
 case 4: 
 /** @type {number} */ var $33=$mt;
 /** @type {number} */ var $34=$33;
 /** @type {number} */ var $35=$34;
 /** @type {number} */ var $36=(($35+5)|0);
 /** @type {number} */ var $37=HEAP8[($36)];
 /** @type {number} */ var $38=($37&255);
 /** @type {number} */ var $39=$38&3;
 /** @type {number} */ var $40=($39|0)!=0;
 if($40){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $42=$1;
 /** @type {number} */ var $43=$mt;
 /** @type {number} */ var $44=$43;
 _reallymarkobject($42,$44);
 label=6;break;
 case 6: 
 /** @type {number} */ var $46=$2;
 /** @type {number} */ var $47=$46;
 /** @type {number} */ var $48=$47;
 /** @type {number} */ var $49=(($48+12)|0);
 /** @type {number} */ var $50=HEAP32[(($49)>>2)];
 /** @type {number} */ var $51=($50|0)!=0;
 if($51){label=7;break;}else{label=9;break;}
 case 7: 
 /** @type {number} */ var $53=$2;
 /** @type {number} */ var $54=$53;
 /** @type {number} */ var $55=$54;
 /** @type {number} */ var $56=(($55+12)|0);
 /** @type {number} */ var $57=HEAP32[(($56)>>2)];
 /** @type {number} */ var $58=$57;
 /** @type {number} */ var $59=$58;
 /** @type {number} */ var $60=(($59+5)|0);
 /** @type {number} */ var $61=HEAP8[($60)];
 /** @type {number} */ var $62=($61&255);
 /** @type {number} */ var $63=$62&3;
 /** @type {number} */ var $64=($63|0)!=0;
 if($64){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $66=$1;
 /** @type {number} */ var $67=$2;
 /** @type {number} */ var $68=$67;
 /** @type {number} */ var $69=$68;
 /** @type {number} */ var $70=(($69+12)|0);
 /** @type {number} */ var $71=HEAP32[(($70)>>2)];
 /** @type {number} */ var $72=$71;
 _reallymarkobject($66,$72);
 label=9;break;
 case 9: 
 /** @type {number} */ var $74=$2;
 /** @type {number} */ var $75=$74;
 /** @type {number} */ var $76=$75;
 /** @type {number} */ var $77=(($76+16)|0);
 /** @type {number} */ var $78=HEAP32[(($77)>>2)];
 /** @type {number} */ var $79=((($78)+(24))|0);
 $size=$79;
 label=22;break;
 case 10: 
 /** @type {number} */ var $81=$2;
 /** @type {number} */ var $82=$81;
 $uv=$82;
 /** @type {number} */ var $83=$uv;
 /** @type {number} */ var $84=(($83+8)|0);
 /** @type {number} */ var $85=HEAP32[(($84)>>2)];
 /** @type {number} */ var $86=(($85+8)|0);
 /** @type {number} */ var $87=HEAP32[(($86)>>2)];
 /** @type {number} */ var $88=$87&64;
 /** @type {number} */ var $89=($88|0)!=0;
 if($89){label=11;break;}else{label=13;break;}
 case 11: 
 /** @type {number} */ var $91=$uv;
 /** @type {number} */ var $92=(($91+8)|0);
 /** @type {number} */ var $93=HEAP32[(($92)>>2)];
 /** @type {number} */ var $94=(($93)|0);
 /** @type {number} */ var $95=$94;
 /** @type {number} */ var $96=HEAP32[(($95)>>2)];
 /** @type {number} */ var $97=$96;
 /** @type {number} */ var $98=(($97+5)|0);
 /** @type {number} */ var $99=HEAP8[($98)];
 /** @type {number} */ var $100=($99&255);
 /** @type {number} */ var $101=$100&3;
 /** @type {number} */ var $102=($101|0)!=0;
 if($102){label=12;break;}else{label=13;break;}
 case 12: 
 /** @type {number} */ var $104=$1;
 /** @type {number} */ var $105=$uv;
 /** @type {number} */ var $106=(($105+8)|0);
 /** @type {number} */ var $107=HEAP32[(($106)>>2)];
 /** @type {number} */ var $108=(($107)|0);
 /** @type {number} */ var $109=$108;
 /** @type {number} */ var $110=HEAP32[(($109)>>2)];
 _reallymarkobject($104,$110);
 label=13;break;
 case 13: 
 /** @type {number} */ var $112=$uv;
 /** @type {number} */ var $113=(($112+8)|0);
 /** @type {number} */ var $114=HEAP32[(($113)>>2)];
 /** @type {number} */ var $115=$uv;
 /** @type {number} */ var $116=(($115+16)|0);
 /** @type {number} */ var $117=$116;
 /** @type {number} */ var $118=($114|0)!=($117|0);
 if($118){label=14;break;}else{label=15;break;}
 case 14: 
 label=23;break;
 case 15: 
 $size=32;
 label=22;break;
 case 16: 
 /** @type {number} */ var $122=$1;
 /** @type {number} */ var $123=(($122+84)|0);
 /** @type {number} */ var $124=HEAP32[(($123)>>2)];
 /** @type {number} */ var $125=$2;
 /** @type {number} */ var $126=$125;
 /** @type {number} */ var $127=$126;
 /** @type {number} */ var $128=(($127+8)|0);
 HEAP32[(($128)>>2)]=$124;
 /** @type {number} */ var $129=$2;
 /** @type {number} */ var $130=$1;
 /** @type {number} */ var $131=(($130+84)|0);
 HEAP32[(($131)>>2)]=$129;
 label=23;break;
 case 17: 
 /** @type {number} */ var $133=$1;
 /** @type {number} */ var $134=(($133+84)|0);
 /** @type {number} */ var $135=HEAP32[(($134)>>2)];
 /** @type {number} */ var $136=$2;
 /** @type {number} */ var $137=$136;
 /** @type {number} */ var $138=$137;
 /** @type {number} */ var $139=(($138+8)|0);
 HEAP32[(($139)>>2)]=$135;
 /** @type {number} */ var $140=$2;
 /** @type {number} */ var $141=$1;
 /** @type {number} */ var $142=(($141+84)|0);
 HEAP32[(($142)>>2)]=$140;
 label=23;break;
 case 18: 
 /** @type {number} */ var $144=$1;
 /** @type {number} */ var $145=(($144+84)|0);
 /** @type {number} */ var $146=HEAP32[(($145)>>2)];
 /** @type {number} */ var $147=$2;
 /** @type {number} */ var $148=$147;
 /** @type {number} */ var $149=(($148+24)|0);
 HEAP32[(($149)>>2)]=$146;
 /** @type {number} */ var $150=$2;
 /** @type {number} */ var $151=$150;
 /** @type {number} */ var $152=$151;
 /** @type {number} */ var $153=$1;
 /** @type {number} */ var $154=(($153+84)|0);
 HEAP32[(($154)>>2)]=$152;
 label=23;break;
 case 19: 
 /** @type {number} */ var $156=$1;
 /** @type {number} */ var $157=(($156+84)|0);
 /** @type {number} */ var $158=HEAP32[(($157)>>2)];
 /** @type {number} */ var $159=$2;
 /** @type {number} */ var $160=$159;
 /** @type {number} */ var $161=(($160+60)|0);
 HEAP32[(($161)>>2)]=$158;
 /** @type {number} */ var $162=$2;
 /** @type {number} */ var $163=$1;
 /** @type {number} */ var $164=(($163+84)|0);
 HEAP32[(($164)>>2)]=$162;
 label=23;break;
 case 20: 
 /** @type {number} */ var $166=$1;
 /** @type {number} */ var $167=(($166+84)|0);
 /** @type {number} */ var $168=HEAP32[(($167)>>2)];
 /** @type {number} */ var $169=$2;
 /** @type {number} */ var $170=$169;
 /** @type {number} */ var $171=(($170+72)|0);
 HEAP32[(($171)>>2)]=$168;
 /** @type {number} */ var $172=$2;
 /** @type {number} */ var $173=$1;
 /** @type {number} */ var $174=(($173+84)|0);
 HEAP32[(($174)>>2)]=$172;
 label=23;break;
 case 21: 
 label=23;break;
 case 22: 
 /** @type {number} */ var $177=$2;
 /** @type {number} */ var $178=$177;
 /** @type {number} */ var $179=(($178+5)|0);
 /** @type {number} */ var $180=HEAP8[($179)];
 /** @type {number} */ var $181=($180&255);
 /** @type {number} */ var $182=$181|4;
 /** @type {number} */ var $183=(($182)&255);
 HEAP8[($179)]=$183;
 /** @type {number} */ var $184=$size;
 /** @type {number} */ var $185=$1;
 /** @type {number} */ var $186=(($185+16)|0);
 /** @type {number} */ var $187=HEAP32[(($186)>>2)];
 /** @type {number} */ var $188=((($187)+($184))|0);
 HEAP32[(($186)>>2)]=$188;
 label=23;break;
 case 23: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $p
 * @param {number} $n
 * @return {number}
 */
function _sweeptolive($L,$p,$n){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $old;
 /** @type {number} */ var $i;
 $1=$L;
 $2=$p;
 $3=$n;
 /** @type {number} */ var $4=$2;
 $old=$4;
 $i=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $6=$i;
 /** @type {number} */ var $7=((($6)+(1))|0);
 $i=$7;
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=_sweeplist($8,$9,1);
 $2=$10;
 label=3;break;
 case 3: 
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=$old;
 /** @type {number} */ var $14=($12|0)==($13|0);
 if($14){label=2;break;}else{label=4;break;}
 case 4: 
 /** @type {number} */ var $16=$3;
 /** @type {number} */ var $17=($16|0)!=0;
 if($17){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $19=$i;
 /** @type {number} */ var $20=$3;
 /** @type {number} */ var $21=HEAP32[(($20)>>2)];
 /** @type {number} */ var $22=((($21)+($19))|0);
 HEAP32[(($20)>>2)]=$22;
 label=6;break;
 case 6: 
 /** @type {number} */ var $24=$2;
 STACKTOP=sp;return $24;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _entersweep($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 /** @type {number} */ var $1;
 /** @type {number} */ var $g;
 /** @type {number} */ var $n=sp;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+12)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $g=$4;
 HEAP32[(($n)>>2)]=0;
 /** @type {number} */ var $5=$g;
 /** @type {number} */ var $6=(($5+61)|0);
 HEAP8[($6)]=2;
 /** @type {number} */ var $7=$g;
 /** @type {number} */ var $8=(($7+64)|0);
 HEAP32[(($8)>>2)]=0;
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=$g;
 /** @type {number} */ var $11=(($10+72)|0);
 /** @type {number} */ var $12=_sweeptolive($9,$11,$n);
 /** @type {number} */ var $13=$g;
 /** @type {number} */ var $14=(($13+80)|0);
 HEAP32[(($14)>>2)]=$12;
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=$g;
 /** @type {number} */ var $17=(($16+68)|0);
 /** @type {number} */ var $18=_sweeptolive($15,$17,$n);
 /** @type {number} */ var $19=$g;
 /** @type {number} */ var $20=(($19+76)|0);
 HEAP32[(($20)>>2)]=$18;
 /** @type {number} */ var $21=HEAP32[(($n)>>2)];
 STACKTOP=sp;return $21;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _singlestep($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $g;
 /** @type {number} */ var $oldtrav;
 /** @type {number} */ var $work;
 /** @type {number} */ var $sw;
 /** @type {number} */ var $i;
 /** @type {number} */ var $mt=sp;
 $2=$L;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=(($3+12)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $g=$5;
 /** @type {number} */ var $6=$g;
 /** @type {number} */ var $7=(($6+61)|0);
 /** @type {number} */ var $8=HEAP8[($7)];
 /** @type {number} */ var $9=($8&255);
 switch(($9|0)){case 3:{ label=16;break;}case 4:{ label=19;break;}case 5:{ label=2;break;}case 0:{ label=5;break;}case 2:{ label=8;break;}default:{label=22;break;}}break;
 case 2: 
 /** @type {number} */ var $11=$g;
 /** @type {number} */ var $12=(($11+16)|0);
 HEAP32[(($12)>>2)]=0;
 /** @type {number} */ var $13=$g;
 /** @type {number} */ var $14=(($13+62)|0);
 /** @type {number} */ var $15=HEAP8[($14)];
 /** @type {number} */ var $16=($15&255);
 /** @type {number} */ var $17=($16|0)==2;
 if($17){label=4;break;}else{label=3;break;}
 case 3: 
 /** @type {number} */ var $19=$g;
 _markroot($19);
 label=4;break;
 case 4: 
 /** @type {number} */ var $21=$g;
 /** @type {number} */ var $22=(($21+61)|0);
 HEAP8[($22)]=0;
 /** @type {number} */ var $23=$g;
 /** @type {number} */ var $24=(($23+16)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 $1=$25;
 label=23;break;
 case 5: 
 /** @type {number} */ var $27=$g;
 /** @type {number} */ var $28=(($27+84)|0);
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 /** @type {number} */ var $30=($29|0)!=0;
 if($30){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $32=$g;
 /** @type {number} */ var $33=(($32+16)|0);
 /** @type {number} */ var $34=HEAP32[(($33)>>2)];
 $oldtrav=$34;
 /** @type {number} */ var $35=$g;
 _propagatemark($35);
 /** @type {number} */ var $36=$g;
 /** @type {number} */ var $37=(($36+16)|0);
 /** @type {number} */ var $38=HEAP32[(($37)>>2)];
 /** @type {number} */ var $39=$oldtrav;
 /** @type {number} */ var $40=((($38)-($39))|0);
 $1=$40;
 label=23;break;
 case 7: 
 /** @type {number} */ var $42=$g;
 /** @type {number} */ var $43=(($42+61)|0);
 HEAP8[($43)]=1;
 /** @type {number} */ var $44=$g;
 /** @type {number} */ var $45=(($44+16)|0);
 /** @type {number} */ var $46=HEAP32[(($45)>>2)];
 /** @type {number} */ var $47=$g;
 /** @type {number} */ var $48=(($47+20)|0);
 HEAP32[(($48)>>2)]=$46;
 /** @type {number} */ var $49=$2;
 /** @type {number} */ var $50=_atomic($49);
 $work=$50;
 /** @type {number} */ var $51=$work;
 /** @type {number} */ var $52=$g;
 /** @type {number} */ var $53=(($52+20)|0);
 /** @type {number} */ var $54=HEAP32[(($53)>>2)];
 /** @type {number} */ var $55=((($54)+($51))|0);
 HEAP32[(($53)>>2)]=$55;
 /** @type {number} */ var $56=$2;
 /** @type {number} */ var $57=_entersweep($56);
 $sw=$57;
 /** @type {number} */ var $58=$work;
 /** @type {number} */ var $59=$sw;
 /** @type {number} */ var $60=((($59)*(5))&-1);
 /** @type {number} */ var $61=((($58)+($60))|0);
 $1=$61;
 label=23;break;
 case 8: 
 $i=0;
 label=9;break;
 case 9: 
 /** @type {number} */ var $64=$i;
 /** @type {number} */ var $65=($64|0)<80;
 if($65){label=10;break;}else{label=13;break;}
 case 10: 
 /** @type {number} */ var $67=$g;
 /** @type {number} */ var $68=(($67+64)|0);
 /** @type {number} */ var $69=HEAP32[(($68)>>2)];
 /** @type {number} */ var $70=$i;
 /** @type {number} */ var $71=((($69)+($70))|0);
 /** @type {number} */ var $72=$g;
 /** @type {number} */ var $73=(($72+24)|0);
 /** @type {number} */ var $74=(($73+8)|0);
 /** @type {number} */ var $75=HEAP32[(($74)>>2)];
 /** @type {number} */ var $76=($71|0)<($75|0);
 if($76){label=11;break;}else{label=13;break;}
 case 11: 
 /** @type {number} */ var $78=$2;
 /** @type {number} */ var $79=$g;
 /** @type {number} */ var $80=(($79+64)|0);
 /** @type {number} */ var $81=HEAP32[(($80)>>2)];
 /** @type {number} */ var $82=$i;
 /** @type {number} */ var $83=((($81)+($82))|0);
 /** @type {number} */ var $84=$g;
 /** @type {number} */ var $85=(($84+24)|0);
 /** @type {number} */ var $86=(($85)|0);
 /** @type {number} */ var $87=HEAP32[(($86)>>2)];
 /** @type {number} */ var $88=(($87+($83<<2))|0);
 /** @type {number} */ var $89=_sweeplist($78,$88,-3);
 label=12;break;
 case 12: 
 /** @type {number} */ var $91=$i;
 /** @type {number} */ var $92=((($91)+(1))|0);
 $i=$92;
 label=9;break;
 case 13: 
 /** @type {number} */ var $94=$i;
 /** @type {number} */ var $95=$g;
 /** @type {number} */ var $96=(($95+64)|0);
 /** @type {number} */ var $97=HEAP32[(($96)>>2)];
 /** @type {number} */ var $98=((($97)+($94))|0);
 HEAP32[(($96)>>2)]=$98;
 /** @type {number} */ var $99=$g;
 /** @type {number} */ var $100=(($99+64)|0);
 /** @type {number} */ var $101=HEAP32[(($100)>>2)];
 /** @type {number} */ var $102=$g;
 /** @type {number} */ var $103=(($102+24)|0);
 /** @type {number} */ var $104=(($103+8)|0);
 /** @type {number} */ var $105=HEAP32[(($104)>>2)];
 /** @type {number} */ var $106=($101|0)>=($105|0);
 if($106){label=14;break;}else{label=15;break;}
 case 14: 
 /** @type {number} */ var $108=$g;
 /** @type {number} */ var $109=(($108+61)|0);
 HEAP8[($109)]=3;
 label=15;break;
 case 15: 
 /** @type {number} */ var $111=$i;
 /** @type {number} */ var $112=((($111)*(5))&-1);
 $1=$112;
 label=23;break;
 case 16: 
 /** @type {number} */ var $114=$g;
 /** @type {number} */ var $115=(($114+80)|0);
 /** @type {number} */ var $116=HEAP32[(($115)>>2)];
 /** @type {number} */ var $117=($116|0)!=0;
 if($117){label=17;break;}else{label=18;break;}
 case 17: 
 /** @type {number} */ var $119=$2;
 /** @type {number} */ var $120=$g;
 /** @type {number} */ var $121=(($120+80)|0);
 /** @type {number} */ var $122=HEAP32[(($121)>>2)];
 /** @type {number} */ var $123=_sweeplist($119,$122,80);
 /** @type {number} */ var $124=$g;
 /** @type {number} */ var $125=(($124+80)|0);
 HEAP32[(($125)>>2)]=$123;
 $1=400;
 label=23;break;
 case 18: 
 /** @type {number} */ var $127=$g;
 /** @type {number} */ var $128=(($127+61)|0);
 HEAP8[($128)]=4;
 $1=0;
 label=23;break;
 case 19: 
 /** @type {number} */ var $130=$g;
 /** @type {number} */ var $131=(($130+76)|0);
 /** @type {number} */ var $132=HEAP32[(($131)>>2)];
 /** @type {number} */ var $133=($132|0)!=0;
 if($133){label=20;break;}else{label=21;break;}
 case 20: 
 /** @type {number} */ var $135=$2;
 /** @type {number} */ var $136=$g;
 /** @type {number} */ var $137=(($136+76)|0);
 /** @type {number} */ var $138=HEAP32[(($137)>>2)];
 /** @type {number} */ var $139=_sweeplist($135,$138,80);
 /** @type {number} */ var $140=$g;
 /** @type {number} */ var $141=(($140+76)|0);
 HEAP32[(($141)>>2)]=$139;
 $1=400;
 label=23;break;
 case 21: 
 /** @type {number} */ var $143=$g;
 /** @type {number} */ var $144=(($143+172)|0);
 /** @type {number} */ var $145=HEAP32[(($144)>>2)];
 /** @type {number} */ var $146=$145;
 HEAP32[(($mt)>>2)]=$146;
 /** @type {number} */ var $147=$2;
 /** @type {number} */ var $148=_sweeplist($147,$mt,1);
 /** @type {number} */ var $149=$2;
 _checkSizes($149);
 /** @type {number} */ var $150=$g;
 /** @type {number} */ var $151=(($150+61)|0);
 HEAP8[($151)]=5;
 $1=5;
 label=23;break;
 case 22: 
 $1=0;
 label=23;break;
 case 23: 
 /** @type {number} */ var $154=$1;
 STACKTOP=sp;return $154;
 }
}
/**
 * @param {number} $L
 * @param {number} $all
 * @return {number}
 */
function _separatetobefnz($L,$all){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $g;
 /** @type {number} */ var $p;
 /** @type {number} */ var $curr;
 /** @type {number} */ var $lastnext;
 $1=$L;
 $2=$all;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+12)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $g=$5;
 /** @type {number} */ var $6=$g;
 /** @type {number} */ var $7=(($6+72)|0);
 $p=$7;
 /** @type {number} */ var $8=$g;
 /** @type {number} */ var $9=(($8+104)|0);
 $lastnext=$9;
 label=2;break;
 case 2: 
 /** @type {number} */ var $11=$lastnext;
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=($12|0)!=0;
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $15=$lastnext;
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=$16;
 /** @type {number} */ var $18=(($17)|0);
 $lastnext=$18;
 label=2;break;
 case 4: 
 label=5;break;
 case 5: 
 /** @type {number} */ var $21=$p;
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 $curr=$22;
 /** @type {number} */ var $23=($22|0)!=0;
 if($23){label=6;break;}else{label=11;break;}
 case 6: 
 /** @type {number} */ var $25=$2;
 /** @type {number} */ var $26=($25|0)!=0;
 if($26){label=9;break;}else{label=7;break;}
 case 7: 
 /** @type {number} */ var $28=$curr;
 /** @type {number} */ var $29=$28;
 /** @type {number} */ var $30=(($29+5)|0);
 /** @type {number} */ var $31=HEAP8[($30)];
 /** @type {number} */ var $32=($31&255);
 /** @type {number} */ var $33=$32&3;
 /** @type {number} */ var $34=($33|0)!=0;
 if($34){label=9;break;}else{label=8;break;}
 case 8: 
 /** @type {number} */ var $36=$curr;
 /** @type {number} */ var $37=$36;
 /** @type {number} */ var $38=(($37)|0);
 $p=$38;
 label=10;break;
 case 9: 
 /** @type {number} */ var $40=$curr;
 /** @type {number} */ var $41=$40;
 /** @type {number} */ var $42=(($41+5)|0);
 /** @type {number} */ var $43=HEAP8[($42)];
 /** @type {number} */ var $44=($43&255);
 /** @type {number} */ var $45=$44|8;
 /** @type {number} */ var $46=(($45)&255);
 HEAP8[($42)]=$46;
 /** @type {number} */ var $47=$curr;
 /** @type {number} */ var $48=$47;
 /** @type {number} */ var $49=(($48)|0);
 /** @type {number} */ var $50=HEAP32[(($49)>>2)];
 /** @type {number} */ var $51=$p;
 HEAP32[(($51)>>2)]=$50;
 /** @type {number} */ var $52=$lastnext;
 /** @type {number} */ var $53=HEAP32[(($52)>>2)];
 /** @type {number} */ var $54=$curr;
 /** @type {number} */ var $55=$54;
 /** @type {number} */ var $56=(($55)|0);
 HEAP32[(($56)>>2)]=$53;
 /** @type {number} */ var $57=$curr;
 /** @type {number} */ var $58=$lastnext;
 HEAP32[(($58)>>2)]=$57;
 /** @type {number} */ var $59=$curr;
 /** @type {number} */ var $60=$59;
 /** @type {number} */ var $61=(($60)|0);
 $lastnext=$61;
 label=10;break;
 case 10: 
 label=5;break;
 case 11: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $propagateerrors
 * @return {number}
 */
function _callallpendingfinalizers($L,$propagateerrors){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $g;
 $1=$L;
 $2=$propagateerrors;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+12)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $g=$5;
 label=2;break;
 case 2: 
 /** @type {number} */ var $7=$g;
 /** @type {number} */ var $8=(($7+104)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=($9|0)!=0;
 if($10){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $12=$g;
 /** @type {number} */ var $13=(($12+104)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=$14;
 /** @type {number} */ var $16=(($15+5)|0);
 /** @type {number} */ var $17=HEAP8[($16)];
 /** @type {number} */ var $18=($17&255);
 /** @type {number} */ var $19=$18&191;
 /** @type {number} */ var $20=(($19)&255);
 HEAP8[($16)]=$20;
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=$2;
 _GCTM($21,$22);
 label=2;break;
 case 4: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $p
 * @param {number} $count
 * @return {number}
 */
function _sweeplist($L,$p,$count){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $g;
 /** @type {number} */ var $ow;
 /** @type {number} */ var $toclear;
 /** @type {number} */ var $toset;
 /** @type {number} */ var $tostop;
 /** @type {number} */ var $curr;
 /** @type {number} */ var $marked;
 $2=$L;
 $3=$p;
 $4=$count;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=(($5+12)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 $g=$7;
 /** @type {number} */ var $8=$g;
 /** @type {number} */ var $9=(($8+60)|0);
 /** @type {number} */ var $10=HEAP8[($9)];
 /** @type {number} */ var $11=($10&255);
 /** @type {number} */ var $12=$11^3;
 $ow=$12;
 /** @type {number} */ var $13=$g;
 /** @type {number} */ var $14=(($13+62)|0);
 /** @type {number} */ var $15=HEAP8[($14)];
 /** @type {number} */ var $16=($15&255);
 /** @type {number} */ var $17=($16|0)==2;
 if($17){label=2;break;}else{label=3;break;}
 case 2: 
 $toclear=-1;
 $toset=64;
 $tostop=64;
 label=4;break;
 case 3: 
 $toclear=-72;
 /** @type {number} */ var $20=$g;
 /** @type {number} */ var $21=(($20+60)|0);
 /** @type {number} */ var $22=HEAP8[($21)];
 /** @type {number} */ var $23=($22&255);
 /** @type {number} */ var $24=$23&3;
 /** @type {number} */ var $25=(($24)&255);
 /** @type {number} */ var $26=($25&255);
 $toset=$26;
 $tostop=0;
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 /** @type {number} */ var $29=$3;
 /** @type {number} */ var $30=HEAP32[(($29)>>2)];
 /** @type {number} */ var $31=($30|0)!=0;
 if($31){label=6;break;}else{var $37=0;label=7;break;}
 case 6: 
 /** @type {number} */ var $33=$4;
 /** @type {number} */ var $34=((($33)-(1))|0);
 $4=$34;
 /** @type {number} */ var $35=($33>>>0)>0;
 var $37=$35;label=7;break;
 case 7: 
 var $37;
 if($37){label=8;break;}else{label=16;break;}
 case 8: 
 /** @type {number} */ var $39=$3;
 /** @type {number} */ var $40=HEAP32[(($39)>>2)];
 $curr=$40;
 /** @type {number} */ var $41=$curr;
 /** @type {number} */ var $42=$41;
 /** @type {number} */ var $43=(($42+5)|0);
 /** @type {number} */ var $44=HEAP8[($43)];
 /** @type {number} */ var $45=($44&255);
 $marked=$45;
 /** @type {number} */ var $46=$marked;
 /** @type {number} */ var $47=$46^3;
 /** @type {number} */ var $48=$ow;
 /** @type {number} */ var $49=$47&$48;
 /** @type {number} */ var $50=($49|0)!=0;
 if($50){label=10;break;}else{label=9;break;}
 case 9: 
 /** @type {number} */ var $52=$curr;
 /** @type {number} */ var $53=$52;
 /** @type {number} */ var $54=(($53)|0);
 /** @type {number} */ var $55=HEAP32[(($54)>>2)];
 /** @type {number} */ var $56=$3;
 HEAP32[(($56)>>2)]=$55;
 /** @type {number} */ var $57=$2;
 /** @type {number} */ var $58=$curr;
 _freeobj($57,$58);
 label=15;break;
 case 10: 
 /** @type {number} */ var $60=$marked;
 /** @type {number} */ var $61=$tostop;
 /** @type {number} */ var $62=$60&$61;
 /** @type {number} */ var $63=($62|0)!=0;
 if($63){label=11;break;}else{label=12;break;}
 case 11: 
 $1=0;
 label=20;break;
 case 12: 
 /** @type {number} */ var $66=$curr;
 /** @type {number} */ var $67=$66;
 /** @type {number} */ var $68=(($67+4)|0);
 /** @type {number} */ var $69=HEAP8[($68)];
 /** @type {number} */ var $70=($69&255);
 /** @type {number} */ var $71=($70|0)==8;
 if($71){label=13;break;}else{label=14;break;}
 case 13: 
 /** @type {number} */ var $73=$2;
 /** @type {number} */ var $74=$curr;
 /** @type {number} */ var $75=$74;
 _sweepthread($73,$75);
 label=14;break;
 case 14: 
 /** @type {number} */ var $77=$marked;
 /** @type {number} */ var $78=$toclear;
 /** @type {number} */ var $79=$77&$78;
 /** @type {number} */ var $80=$toset;
 /** @type {number} */ var $81=$79|$80;
 /** @type {number} */ var $82=(($81)&255);
 /** @type {number} */ var $83=$curr;
 /** @type {number} */ var $84=$83;
 /** @type {number} */ var $85=(($84+5)|0);
 HEAP8[($85)]=$82;
 /** @type {number} */ var $86=$curr;
 /** @type {number} */ var $87=$86;
 /** @type {number} */ var $88=(($87)|0);
 $3=$88;
 label=15;break;
 case 15: 
 label=5;break;
 case 16: 
 /** @type {number} */ var $91=$3;
 /** @type {number} */ var $92=HEAP32[(($91)>>2)];
 /** @type {number} */ var $93=($92|0)==0;
 if($93){label=17;break;}else{label=18;break;}
 case 17: 
 var $98=0;label=19;break;
 case 18: 
 /** @type {number} */ var $96=$3;
 var $98=$96;label=19;break;
 case 19: 
 var $98;
 $1=$98;
 label=20;break;
 case 20: 
 /** @type {number} */ var $100=$1;
 STACKTOP=sp;return $100;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _generationalcollection($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $g;
 /** @type {number} */ var $estimate;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+12)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $g=$4;
 /** @type {number} */ var $5=$g;
 /** @type {number} */ var $6=(($5+20)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=($7|0)==0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $10=$1;
 _luaC_fullgc($10,0);
 /** @type {number} */ var $11=$g;
 /** @type {number} */ var $12=(($11+8)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=$g;
 /** @type {number} */ var $15=(($14+12)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=((($13)+($16))|0);
 /** @type {number} */ var $18=$g;
 /** @type {number} */ var $19=(($18+20)|0);
 HEAP32[(($19)>>2)]=$17;
 label=6;break;
 case 3: 
 /** @type {number} */ var $21=$g;
 /** @type {number} */ var $22=(($21+20)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 $estimate=$23;
 /** @type {number} */ var $24=$1;
 _luaC_runtilstate($24,-33);
 /** @type {number} */ var $25=$1;
 _luaC_runtilstate($25,32);
 /** @type {number} */ var $26=$g;
 /** @type {number} */ var $27=(($26+8)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=$g;
 /** @type {number} */ var $30=(($29+12)|0);
 /** @type {number} */ var $31=HEAP32[(($30)>>2)];
 /** @type {number} */ var $32=((($28)+($31))|0);
 /** @type {number} */ var $33=$estimate;
 /** @type {number} */ var $34=(((($33>>>0))/(100))&-1);
 /** @type {number} */ var $35=$g;
 /** @type {number} */ var $36=(($35+160)|0);
 /** @type {number} */ var $37=HEAP32[(($36)>>2)];
 /** @type {number} */ var $38=(Math_imul($34,$37)|0);
 /** @type {number} */ var $39=($32>>>0)>($38>>>0);
 if($39){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $41=$g;
 /** @type {number} */ var $42=(($41+20)|0);
 HEAP32[(($42)>>2)]=0;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 /** @type {number} */ var $45=$g;
 /** @type {number} */ var $46=$g;
 /** @type {number} */ var $47=(($46+8)|0);
 /** @type {number} */ var $48=HEAP32[(($47)>>2)];
 /** @type {number} */ var $49=$g;
 /** @type {number} */ var $50=(($49+12)|0);
 /** @type {number} */ var $51=HEAP32[(($50)>>2)];
 /** @type {number} */ var $52=((($48)+($51))|0);
 /** @type {number} */ var $53=(((($52>>>0))/(200))&-1);
 /** @type {number} */ var $54=(((-$53))|0);
 /** @type {number} */ var $55=$g;
 /** @type {number} */ var $56=(($55+156)|0);
 /** @type {number} */ var $57=HEAP32[(($56)>>2)];
 /** @type {number} */ var $58=(Math_imul($54,$57)|0);
 _luaE_setdebt($45,$58);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _incstep($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $g;
 /** @type {number} */ var $debt;
 /** @type {number} */ var $stepmul;
 /** @type {number} */ var $work;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+12)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $g=$4;
 /** @type {number} */ var $5=$g;
 /** @type {number} */ var $6=(($5+12)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 $debt=$7;
 /** @type {number} */ var $8=$g;
 /** @type {number} */ var $9=(($8+164)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 $stepmul=$10;
 /** @type {number} */ var $11=$stepmul;
 /** @type {number} */ var $12=($11|0)<40;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 $stepmul=40;
 label=3;break;
 case 3: 
 /** @type {number} */ var $15=$debt;
 /** @type {number} */ var $16=(((($15|0))/(200))&-1);
 /** @type {number} */ var $17=((($16)+(1))|0);
 $debt=$17;
 /** @type {number} */ var $18=$debt;
 /** @type {number} */ var $19=$stepmul;
 /** @type {number} */ var $20=(((2147483644)/(($19|0)))&-1);
 /** @type {number} */ var $21=($18|0)<($20|0);
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $23=$debt;
 /** @type {number} */ var $24=$stepmul;
 /** @type {number} */ var $25=(Math_imul($23,$24)|0);
 var $28=$25;label=6;break;
 case 5: 
 var $28=2147483644;label=6;break;
 case 6: 
 var $28;
 $debt=$28;
 label=7;break;
 case 7: 
 /** @type {number} */ var $30=$1;
 /** @type {number} */ var $31=_singlestep($30);
 $work=$31;
 /** @type {number} */ var $32=$work;
 /** @type {number} */ var $33=$debt;
 /** @type {number} */ var $34=((($33)-($32))|0);
 $debt=$34;
 label=8;break;
 case 8: 
 /** @type {number} */ var $36=$debt;
 /** @type {number} */ var $37=($36|0)>-1600;
 if($37){label=9;break;}else{var $45=0;label=10;break;}
 case 9: 
 /** @type {number} */ var $39=$g;
 /** @type {number} */ var $40=(($39+61)|0);
 /** @type {number} */ var $41=HEAP8[($40)];
 /** @type {number} */ var $42=($41&255);
 /** @type {number} */ var $43=($42|0)!=5;
 var $45=$43;label=10;break;
 case 10: 
 var $45;
 if($45){label=7;break;}else{label=11;break;}
 case 11: 
 /** @type {number} */ var $47=$g;
 /** @type {number} */ var $48=(($47+61)|0);
 /** @type {number} */ var $49=HEAP8[($48)];
 /** @type {number} */ var $50=($49&255);
 /** @type {number} */ var $51=($50|0)==5;
 if($51){label=12;break;}else{label=13;break;}
 case 12: 
 /** @type {number} */ var $53=$g;
 /** @type {number} */ var $54=(($53+20)|0);
 /** @type {number} */ var $55=HEAP32[(($54)>>2)];
 /** @type {number} */ var $56=(((($55>>>0))/(200))&-1);
 /** @type {number} */ var $57=(((-$56))|0);
 /** @type {number} */ var $58=$g;
 /** @type {number} */ var $59=(($58+156)|0);
 /** @type {number} */ var $60=HEAP32[(($59)>>2)];
 /** @type {number} */ var $61=(Math_imul($57,$60)|0);
 $debt=$61;
 label=14;break;
 case 13: 
 /** @type {number} */ var $63=$debt;
 /** @type {number} */ var $64=$stepmul;
 /** @type {number} */ var $65=(((($63|0))/(($64|0)))&-1);
 /** @type {number} */ var $66=((($65)*(200))&-1);
 $debt=$66;
 label=14;break;
 case 14: 
 /** @type {number} */ var $68=$g;
 /** @type {number} */ var $69=$debt;
 _luaE_setdebt($68,$69);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $propagateerrors
 * @return {number}
 */
function _GCTM($L,$propagateerrors){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $g;
 /** @type {number} */ var $tm;
 /** @type {number} */ var $v=sp;
 /** @type {number} */ var $io;
 /** @type {number} */ var $i_g;
 /** @type {number} */ var $status;
 /** @type {number} */ var $oldah;
 /** @type {number} */ var $running;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io1;
 /** @type {number} */ var $io21;
 /** @type {number} */ var $io12;
 /** @type {number} */ var $msg;
 $1=$L;
 $2=$propagateerrors;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+12)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $g=$5;
 $io=$v;
 /** @type {number} */ var $6=$g;
 /** @type {number} */ var $7=_udata2finalize($6);
 $i_g=$7;
 /** @type {number} */ var $8=$i_g;
 /** @type {number} */ var $9=$io;
 /** @type {number} */ var $10=(($9)|0);
 /** @type {number} */ var $11=$10;
 HEAP32[(($11)>>2)]=$8;
 /** @type {number} */ var $12=$i_g;
 /** @type {number} */ var $13=$12;
 /** @type {number} */ var $14=(($13+4)|0);
 /** @type {number} */ var $15=HEAP8[($14)];
 /** @type {number} */ var $16=($15&255);
 /** @type {number} */ var $17=$16|64;
 /** @type {number} */ var $18=$io;
 /** @type {number} */ var $19=(($18+8)|0);
 HEAP32[(($19)>>2)]=$17;
 /** @type {number} */ var $20=$1;
 /** @type {number} */ var $21=_luaT_gettmbyobj($20,$v,2);
 $tm=$21;
 /** @type {number} */ var $22=$tm;
 /** @type {number} */ var $23=($22|0)!=0;
 if($23){label=2;break;}else{label=12;break;}
 case 2: 
 /** @type {number} */ var $25=$tm;
 /** @type {number} */ var $26=(($25+8)|0);
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=$27&15;
 /** @type {number} */ var $29=($28|0)==6;
 if($29){label=3;break;}else{label=12;break;}
 case 3: 
 /** @type {number} */ var $31=$1;
 /** @type {number} */ var $32=(($31+41)|0);
 /** @type {number} */ var $33=HEAP8[($32)];
 $oldah=$33;
 /** @type {number} */ var $34=$g;
 /** @type {number} */ var $35=(($34+63)|0);
 /** @type {number} */ var $36=HEAP8[($35)];
 /** @type {number} */ var $37=($36&255);
 $running=$37;
 /** @type {number} */ var $38=$1;
 /** @type {number} */ var $39=(($38+41)|0);
 HEAP8[($39)]=0;
 /** @type {number} */ var $40=$g;
 /** @type {number} */ var $41=(($40+63)|0);
 HEAP8[($41)]=0;
 /** @type {number} */ var $42=$tm;
 $io2=$42;
 /** @type {number} */ var $43=$1;
 /** @type {number} */ var $44=(($43+8)|0);
 /** @type {number} */ var $45=HEAP32[(($44)>>2)];
 $io1=$45;
 /** @type {number} */ var $46=$io1;
 /** @type {number} */ var $47=(($46)|0);
 /** @type {number} */ var $48=$io2;
 /** @type {number} */ var $49=(($48)|0);
 /** @type {number} */ var $50=$47;
 /** @type {number} */ var $51=$49;
 HEAP32[(($50)>>2)]=HEAP32[(($51)>>2)];HEAP32[((($50)+(4))>>2)]=HEAP32[((($51)+(4))>>2)];
 /** @type {number} */ var $52=$io2;
 /** @type {number} */ var $53=(($52+8)|0);
 /** @type {number} */ var $54=HEAP32[(($53)>>2)];
 /** @type {number} */ var $55=$io1;
 /** @type {number} */ var $56=(($55+8)|0);
 HEAP32[(($56)>>2)]=$54;
 $io21=$v;
 /** @type {number} */ var $57=$1;
 /** @type {number} */ var $58=(($57+8)|0);
 /** @type {number} */ var $59=HEAP32[(($58)>>2)];
 /** @type {number} */ var $60=(($59+16)|0);
 $io12=$60;
 /** @type {number} */ var $61=$io12;
 /** @type {number} */ var $62=(($61)|0);
 /** @type {number} */ var $63=$io21;
 /** @type {number} */ var $64=(($63)|0);
 /** @type {number} */ var $65=$62;
 /** @type {number} */ var $66=$64;
 HEAP32[(($65)>>2)]=HEAP32[(($66)>>2)];HEAP32[((($65)+(4))>>2)]=HEAP32[((($66)+(4))>>2)];
 /** @type {number} */ var $67=$io21;
 /** @type {number} */ var $68=(($67+8)|0);
 /** @type {number} */ var $69=HEAP32[(($68)>>2)];
 /** @type {number} */ var $70=$io12;
 /** @type {number} */ var $71=(($70+8)|0);
 HEAP32[(($71)>>2)]=$69;
 /** @type {number} */ var $72=$1;
 /** @type {number} */ var $73=(($72+8)|0);
 /** @type {number} */ var $74=HEAP32[(($73)>>2)];
 /** @type {number} */ var $75=(($74+32)|0);
 HEAP32[(($73)>>2)]=$75;
 /** @type {number} */ var $76=$1;
 /** @type {number} */ var $77=$1;
 /** @type {number} */ var $78=(($77+8)|0);
 /** @type {number} */ var $79=HEAP32[(($78)>>2)];
 /** @type {number} */ var $80=((($79)-(32))|0);
 /** @type {number} */ var $81=$80;
 /** @type {number} */ var $82=$1;
 /** @type {number} */ var $83=(($82+28)|0);
 /** @type {number} */ var $84=HEAP32[(($83)>>2)];
 /** @type {number} */ var $85=$84;
 /** @type {number} */ var $86=$81;
 /** @type {number} */ var $87=$85;
 /** @type {number} */ var $88=((($86)-($87))|0);
 /** @type {number} */ var $89=_luaD_pcall($76,20,0,$88,0);
 $status=$89;
 /** @type {number} */ var $90=$oldah;
 /** @type {number} */ var $91=$1;
 /** @type {number} */ var $92=(($91+41)|0);
 HEAP8[($92)]=$90;
 /** @type {number} */ var $93=$running;
 /** @type {number} */ var $94=(($93)&255);
 /** @type {number} */ var $95=$g;
 /** @type {number} */ var $96=(($95+63)|0);
 HEAP8[($96)]=$94;
 /** @type {number} */ var $97=$status;
 /** @type {number} */ var $98=($97|0)!=0;
 if($98){label=4;break;}else{label=11;break;}
 case 4: 
 /** @type {number} */ var $100=$2;
 /** @type {number} */ var $101=($100|0)!=0;
 if($101){label=5;break;}else{label=11;break;}
 case 5: 
 /** @type {number} */ var $103=$status;
 /** @type {number} */ var $104=($103|0)==2;
 if($104){label=6;break;}else{label=10;break;}
 case 6: 
 /** @type {number} */ var $106=$1;
 /** @type {number} */ var $107=(($106+8)|0);
 /** @type {number} */ var $108=HEAP32[(($107)>>2)];
 /** @type {number} */ var $109=((($108)-(16))|0);
 /** @type {number} */ var $110=(($109+8)|0);
 /** @type {number} */ var $111=HEAP32[(($110)>>2)];
 /** @type {number} */ var $112=$111&15;
 /** @type {number} */ var $113=($112|0)==4;
 if($113){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $115=$1;
 /** @type {number} */ var $116=(($115+8)|0);
 /** @type {number} */ var $117=HEAP32[(($116)>>2)];
 /** @type {number} */ var $118=((($117)-(16))|0);
 /** @type {number} */ var $119=(($118)|0);
 /** @type {number} */ var $120=$119;
 /** @type {number} */ var $121=HEAP32[(($120)>>2)];
 /** @type {number} */ var $122=$121;
 /** @type {number} */ var $123=(($122+16)|0);
 /** @type {number} */ var $124=$123;
 var $127=$124;label=9;break;
 case 8: 
 var $127=3952;label=9;break;
 case 9: 
 var $127;
 $msg=$127;
 /** @type {number} */ var $128=$1;
 /** @type {number} */ var $129=$msg;
 /** @type {number} */ var $130=_luaO_pushfstring($128,10368,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$129,tempVarArgs)); STACKTOP=tempVarArgs;
 $status=5;
 label=10;break;
 case 10: 
 /** @type {number} */ var $132=$1;
 /** @type {number} */ var $133=$status;
 _luaD_throw($132,$133);
 case 11: 
 label=12;break;
 case 12: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $g
 * @return {number}
 */
function _markroot($g){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 $1=$g;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+88)|0);
 HEAP32[(($3)>>2)]=0;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+84)|0);
 HEAP32[(($5)>>2)]=0;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+96)|0);
 HEAP32[(($7)>>2)]=0;
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=(($8+100)|0);
 HEAP32[(($9)>>2)]=0;
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=(($10+92)|0);
 HEAP32[(($11)>>2)]=0;
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=(($12+172)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=($14|0)!=0;
 if($15){label=2;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=(($17+172)|0);
 /** @type {number} */ var $19=HEAP32[(($18)>>2)];
 /** @type {number} */ var $20=$19;
 /** @type {number} */ var $21=$20;
 /** @type {number} */ var $22=(($21+5)|0);
 /** @type {number} */ var $23=HEAP8[($22)];
 /** @type {number} */ var $24=($23&255);
 /** @type {number} */ var $25=$24&3;
 /** @type {number} */ var $26=($25|0)!=0;
 if($26){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $28=$1;
 /** @type {number} */ var $29=$1;
 /** @type {number} */ var $30=(($29+172)|0);
 /** @type {number} */ var $31=HEAP32[(($30)>>2)];
 /** @type {number} */ var $32=$31;
 _reallymarkobject($28,$32);
 label=4;break;
 case 4: 
 /** @type {number} */ var $34=$1;
 /** @type {number} */ var $35=(($34+40)|0);
 /** @type {number} */ var $36=(($35+8)|0);
 /** @type {number} */ var $37=HEAP32[(($36)>>2)];
 /** @type {number} */ var $38=$37&64;
 /** @type {number} */ var $39=($38|0)!=0;
 if($39){label=5;break;}else{label=7;break;}
 case 5: 
 /** @type {number} */ var $41=$1;
 /** @type {number} */ var $42=(($41+40)|0);
 /** @type {number} */ var $43=(($42)|0);
 /** @type {number} */ var $44=$43;
 /** @type {number} */ var $45=HEAP32[(($44)>>2)];
 /** @type {number} */ var $46=$45;
 /** @type {number} */ var $47=(($46+5)|0);
 /** @type {number} */ var $48=HEAP8[($47)];
 /** @type {number} */ var $49=($48&255);
 /** @type {number} */ var $50=$49&3;
 /** @type {number} */ var $51=($50|0)!=0;
 if($51){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $53=$1;
 /** @type {number} */ var $54=$1;
 /** @type {number} */ var $55=(($54+40)|0);
 /** @type {number} */ var $56=(($55)|0);
 /** @type {number} */ var $57=$56;
 /** @type {number} */ var $58=HEAP32[(($57)>>2)];
 _reallymarkobject($53,$58);
 label=7;break;
 case 7: 
 /** @type {number} */ var $60=$1;
 _markmt($60);
 /** @type {number} */ var $61=$1;
 _markbeingfnz($61);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $g
 * @return {number}
 */
function _propagatemark($g){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $size;
 /** @type {number} */ var $o;
 /** @type {number} */ var $h;
 /** @type {number} */ var $cl;
 /** @type {number} */ var $cl1;
 /** @type {number} */ var $th;
 /** @type {number} */ var $p;
 $1=$g;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+84)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $o=$4;
 /** @type {number} */ var $5=$o;
 /** @type {number} */ var $6=$5;
 /** @type {number} */ var $7=(($6+5)|0);
 /** @type {number} */ var $8=HEAP8[($7)];
 /** @type {number} */ var $9=($8&255);
 /** @type {number} */ var $10=$9|4;
 /** @type {number} */ var $11=(($10)&255);
 HEAP8[($7)]=$11;
 /** @type {number} */ var $12=$o;
 /** @type {number} */ var $13=$12;
 /** @type {number} */ var $14=(($13+4)|0);
 /** @type {number} */ var $15=HEAP8[($14)];
 /** @type {number} */ var $16=($15&255);
 switch(($16|0)){case 5:{ label=2;break;}case 6:{ label=3;break;}case 38:{ label=4;break;}case 8:{ label=5;break;}case 9:{ label=6;break;}default:{label=7;break;}}break;
 case 2: 
 /** @type {number} */ var $18=$o;
 /** @type {number} */ var $19=$18;
 $h=$19;
 /** @type {number} */ var $20=$h;
 /** @type {number} */ var $21=(($20+24)|0);
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 /** @type {number} */ var $23=$1;
 /** @type {number} */ var $24=(($23+84)|0);
 HEAP32[(($24)>>2)]=$22;
 /** @type {number} */ var $25=$1;
 /** @type {number} */ var $26=$h;
 /** @type {number} */ var $27=_traversetable($25,$26);
 $size=$27;
 label=8;break;
 case 3: 
 /** @type {number} */ var $29=$o;
 /** @type {number} */ var $30=$29;
 /** @type {number} */ var $31=$30;
 $cl=$31;
 /** @type {number} */ var $32=$cl;
 /** @type {number} */ var $33=(($32+8)|0);
 /** @type {number} */ var $34=HEAP32[(($33)>>2)];
 /** @type {number} */ var $35=$1;
 /** @type {number} */ var $36=(($35+84)|0);
 HEAP32[(($36)>>2)]=$34;
 /** @type {number} */ var $37=$1;
 /** @type {number} */ var $38=$cl;
 /** @type {number} */ var $39=_traverseLclosure($37,$38);
 $size=$39;
 label=8;break;
 case 4: 
 /** @type {number} */ var $41=$o;
 /** @type {number} */ var $42=$41;
 /** @type {number} */ var $43=$42;
 $cl1=$43;
 /** @type {number} */ var $44=$cl1;
 /** @type {number} */ var $45=(($44+8)|0);
 /** @type {number} */ var $46=HEAP32[(($45)>>2)];
 /** @type {number} */ var $47=$1;
 /** @type {number} */ var $48=(($47+84)|0);
 HEAP32[(($48)>>2)]=$46;
 /** @type {number} */ var $49=$1;
 /** @type {number} */ var $50=$cl1;
 /** @type {number} */ var $51=_traverseCclosure($49,$50);
 $size=$51;
 label=8;break;
 case 5: 
 /** @type {number} */ var $53=$o;
 /** @type {number} */ var $54=$53;
 $th=$54;
 /** @type {number} */ var $55=$th;
 /** @type {number} */ var $56=(($55+60)|0);
 /** @type {number} */ var $57=HEAP32[(($56)>>2)];
 /** @type {number} */ var $58=$1;
 /** @type {number} */ var $59=(($58+84)|0);
 HEAP32[(($59)>>2)]=$57;
 /** @type {number} */ var $60=$1;
 /** @type {number} */ var $61=(($60+88)|0);
 /** @type {number} */ var $62=HEAP32[(($61)>>2)];
 /** @type {number} */ var $63=$th;
 /** @type {number} */ var $64=(($63+60)|0);
 HEAP32[(($64)>>2)]=$62;
 /** @type {number} */ var $65=$o;
 /** @type {number} */ var $66=$1;
 /** @type {number} */ var $67=(($66+88)|0);
 HEAP32[(($67)>>2)]=$65;
 /** @type {number} */ var $68=$o;
 /** @type {number} */ var $69=$68;
 /** @type {number} */ var $70=(($69+5)|0);
 /** @type {number} */ var $71=HEAP8[($70)];
 /** @type {number} */ var $72=($71&255);
 /** @type {number} */ var $73=$72&251;
 /** @type {number} */ var $74=(($73)&255);
 HEAP8[($70)]=$74;
 /** @type {number} */ var $75=$1;
 /** @type {number} */ var $76=$th;
 /** @type {number} */ var $77=_traversestack($75,$76);
 $size=$77;
 label=8;break;
 case 6: 
 /** @type {number} */ var $79=$o;
 /** @type {number} */ var $80=$79;
 $p=$80;
 /** @type {number} */ var $81=$p;
 /** @type {number} */ var $82=(($81+72)|0);
 /** @type {number} */ var $83=HEAP32[(($82)>>2)];
 /** @type {number} */ var $84=$1;
 /** @type {number} */ var $85=(($84+84)|0);
 HEAP32[(($85)>>2)]=$83;
 /** @type {number} */ var $86=$1;
 /** @type {number} */ var $87=$p;
 /** @type {number} */ var $88=_traverseproto($86,$87);
 $size=$88;
 label=8;break;
 case 7: 
 label=9;break;
 case 8: 
 /** @type {number} */ var $91=$size;
 /** @type {number} */ var $92=$1;
 /** @type {number} */ var $93=(($92+16)|0);
 /** @type {number} */ var $94=HEAP32[(($93)>>2)];
 /** @type {number} */ var $95=((($94)+($91))|0);
 HEAP32[(($93)>>2)]=$95;
 label=9;break;
 case 9: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _atomic($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $g;
 /** @type {number} */ var $work;
 /** @type {number} */ var $origweak;
 /** @type {number} */ var $origall;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+12)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $g=$4;
 /** @type {number} */ var $5=$g;
 /** @type {number} */ var $6=(($5+16)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=(((-$7))|0);
 $work=$8;
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=($9|0)!=0;
 if($10){label=2;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=$12;
 /** @type {number} */ var $14=$13;
 /** @type {number} */ var $15=(($14+5)|0);
 /** @type {number} */ var $16=HEAP8[($15)];
 /** @type {number} */ var $17=($16&255);
 /** @type {number} */ var $18=$17&3;
 /** @type {number} */ var $19=($18|0)!=0;
 if($19){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $21=$g;
 /** @type {number} */ var $22=$1;
 /** @type {number} */ var $23=$22;
 _reallymarkobject($21,$23);
 label=4;break;
 case 4: 
 /** @type {number} */ var $25=$g;
 /** @type {number} */ var $26=(($25+40)|0);
 /** @type {number} */ var $27=(($26+8)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=$28&64;
 /** @type {number} */ var $30=($29|0)!=0;
 if($30){label=5;break;}else{label=7;break;}
 case 5: 
 /** @type {number} */ var $32=$g;
 /** @type {number} */ var $33=(($32+40)|0);
 /** @type {number} */ var $34=(($33)|0);
 /** @type {number} */ var $35=$34;
 /** @type {number} */ var $36=HEAP32[(($35)>>2)];
 /** @type {number} */ var $37=$36;
 /** @type {number} */ var $38=(($37+5)|0);
 /** @type {number} */ var $39=HEAP8[($38)];
 /** @type {number} */ var $40=($39&255);
 /** @type {number} */ var $41=$40&3;
 /** @type {number} */ var $42=($41|0)!=0;
 if($42){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $44=$g;
 /** @type {number} */ var $45=$g;
 /** @type {number} */ var $46=(($45+40)|0);
 /** @type {number} */ var $47=(($46)|0);
 /** @type {number} */ var $48=$47;
 /** @type {number} */ var $49=HEAP32[(($48)>>2)];
 _reallymarkobject($44,$49);
 label=7;break;
 case 7: 
 /** @type {number} */ var $51=$g;
 _markmt($51);
 /** @type {number} */ var $52=$g;
 _remarkupvals($52);
 /** @type {number} */ var $53=$g;
 _propagateall($53);
 /** @type {number} */ var $54=$g;
 /** @type {number} */ var $55=(($54+16)|0);
 /** @type {number} */ var $56=HEAP32[(($55)>>2)];
 /** @type {number} */ var $57=$work;
 /** @type {number} */ var $58=((($57)+($56))|0);
 $work=$58;
 /** @type {number} */ var $59=$g;
 _retraversegrays($59);
 /** @type {number} */ var $60=$g;
 /** @type {number} */ var $61=(($60+16)|0);
 /** @type {number} */ var $62=HEAP32[(($61)>>2)];
 /** @type {number} */ var $63=$work;
 /** @type {number} */ var $64=((($63)-($62))|0);
 $work=$64;
 /** @type {number} */ var $65=$g;
 _convergeephemerons($65);
 /** @type {number} */ var $66=$g;
 /** @type {number} */ var $67=$g;
 /** @type {number} */ var $68=(($67+92)|0);
 /** @type {number} */ var $69=HEAP32[(($68)>>2)];
 _clearvalues($66,$69,0);
 /** @type {number} */ var $70=$g;
 /** @type {number} */ var $71=$g;
 /** @type {number} */ var $72=(($71+100)|0);
 /** @type {number} */ var $73=HEAP32[(($72)>>2)];
 _clearvalues($70,$73,0);
 /** @type {number} */ var $74=$g;
 /** @type {number} */ var $75=(($74+92)|0);
 /** @type {number} */ var $76=HEAP32[(($75)>>2)];
 $origweak=$76;
 /** @type {number} */ var $77=$g;
 /** @type {number} */ var $78=(($77+100)|0);
 /** @type {number} */ var $79=HEAP32[(($78)>>2)];
 $origall=$79;
 /** @type {number} */ var $80=$g;
 /** @type {number} */ var $81=(($80+16)|0);
 /** @type {number} */ var $82=HEAP32[(($81)>>2)];
 /** @type {number} */ var $83=$work;
 /** @type {number} */ var $84=((($83)+($82))|0);
 $work=$84;
 /** @type {number} */ var $85=$1;
 _separatetobefnz($85,0);
 /** @type {number} */ var $86=$g;
 _markbeingfnz($86);
 /** @type {number} */ var $87=$g;
 _propagateall($87);
 /** @type {number} */ var $88=$g;
 /** @type {number} */ var $89=(($88+16)|0);
 /** @type {number} */ var $90=HEAP32[(($89)>>2)];
 /** @type {number} */ var $91=$work;
 /** @type {number} */ var $92=((($91)-($90))|0);
 $work=$92;
 /** @type {number} */ var $93=$g;
 _convergeephemerons($93);
 /** @type {number} */ var $94=$g;
 /** @type {number} */ var $95=$g;
 /** @type {number} */ var $96=(($95+96)|0);
 /** @type {number} */ var $97=HEAP32[(($96)>>2)];
 _clearkeys($94,$97,0);
 /** @type {number} */ var $98=$g;
 /** @type {number} */ var $99=$g;
 /** @type {number} */ var $100=(($99+100)|0);
 /** @type {number} */ var $101=HEAP32[(($100)>>2)];
 _clearkeys($98,$101,0);
 /** @type {number} */ var $102=$g;
 /** @type {number} */ var $103=$g;
 /** @type {number} */ var $104=(($103+92)|0);
 /** @type {number} */ var $105=HEAP32[(($104)>>2)];
 /** @type {number} */ var $106=$origweak;
 _clearvalues($102,$105,$106);
 /** @type {number} */ var $107=$g;
 /** @type {number} */ var $108=$g;
 /** @type {number} */ var $109=(($108+100)|0);
 /** @type {number} */ var $110=HEAP32[(($109)>>2)];
 /** @type {number} */ var $111=$origall;
 _clearvalues($107,$110,$111);
 /** @type {number} */ var $112=$g;
 /** @type {number} */ var $113=(($112+60)|0);
 /** @type {number} */ var $114=HEAP8[($113)];
 /** @type {number} */ var $115=($114&255);
 /** @type {number} */ var $116=$115^3;
 /** @type {number} */ var $117=(($116)&255);
 /** @type {number} */ var $118=$g;
 /** @type {number} */ var $119=(($118+60)|0);
 HEAP8[($119)]=$117;
 /** @type {number} */ var $120=$g;
 /** @type {number} */ var $121=(($120+16)|0);
 /** @type {number} */ var $122=HEAP32[(($121)>>2)];
 /** @type {number} */ var $123=$work;
 /** @type {number} */ var $124=((($123)+($122))|0);
 $work=$124;
 /** @type {number} */ var $125=$work;
 STACKTOP=sp;return $125;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _checkSizes($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $g;
 /** @type {number} */ var $hs;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+12)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $g=$4;
 /** @type {number} */ var $5=$g;
 /** @type {number} */ var $6=(($5+62)|0);
 /** @type {number} */ var $7=HEAP8[($6)];
 /** @type {number} */ var $8=($7&255);
 /** @type {number} */ var $9=($8|0)!=1;
 if($9){label=2;break;}else{label=5;break;}
 case 2: 
 /** @type {number} */ var $11=$g;
 /** @type {number} */ var $12=(($11+24)|0);
 /** @type {number} */ var $13=(($12+8)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=(((($14|0))/(2))&-1);
 $hs=$15;
 /** @type {number} */ var $16=$g;
 /** @type {number} */ var $17=(($16+24)|0);
 /** @type {number} */ var $18=(($17+4)|0);
 /** @type {number} */ var $19=HEAP32[(($18)>>2)];
 /** @type {number} */ var $20=$hs;
 /** @type {number} */ var $21=($19>>>0)<($20>>>0);
 if($21){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $23=$1;
 /** @type {number} */ var $24=$hs;
 _luaS_resize($23,$24);
 label=4;break;
 case 4: 
 /** @type {number} */ var $26=$1;
 /** @type {number} */ var $27=$g;
 /** @type {number} */ var $28=(($27+144)|0);
 /** @type {number} */ var $29=(($28)|0);
 /** @type {number} */ var $30=HEAP32[(($29)>>2)];
 /** @type {number} */ var $31=$g;
 /** @type {number} */ var $32=(($31+144)|0);
 /** @type {number} */ var $33=(($32+8)|0);
 /** @type {number} */ var $34=HEAP32[(($33)>>2)];
 /** @type {number} */ var $35=$34;
 /** @type {number} */ var $36=_luaM_realloc_($26,$30,$35,0);
 /** @type {number} */ var $37=$g;
 /** @type {number} */ var $38=(($37+144)|0);
 /** @type {number} */ var $39=(($38)|0);
 HEAP32[(($39)>>2)]=$36;
 /** @type {number} */ var $40=$g;
 /** @type {number} */ var $41=(($40+144)|0);
 /** @type {number} */ var $42=(($41+8)|0);
 HEAP32[(($42)>>2)]=0;
 label=5;break;
 case 5: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $o
 * @return {number}
 */
function _freeobj($L,$o){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$L;
 $2=$o;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=(($4+4)|0);
 /** @type {number} */ var $6=HEAP8[($5)];
 /** @type {number} */ var $7=($6&255);
 switch(($7|0)){case 20:{ label=10;break;}case 9:{ label=2;break;}case 6:{ label=3;break;}case 38:{ label=4;break;}case 10:{ label=5;break;}case 5:{ label=6;break;}case 8:{ label=7;break;}case 7:{ label=8;break;}case 4:{ label=9;break;}default:{label=11;break;}}break;
 case 2: 
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=$10;
 _luaF_freeproto($9,$11);
 label=12;break;
 case 3: 
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=$14;
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=$16;
 /** @type {number} */ var $18=$17;
 /** @type {number} */ var $19=(($18+6)|0);
 /** @type {number} */ var $20=HEAP8[($19)];
 /** @type {number} */ var $21=($20&255);
 /** @type {number} */ var $22=((($21)-(1))|0);
 /** @type {number} */ var $23=($22<<2);
 /** @type {number} */ var $24=((($23)+(20))|0);
 /** @type {number} */ var $25=_luaM_realloc_($13,$15,$24,0);
 label=12;break;
 case 4: 
 /** @type {number} */ var $27=$1;
 /** @type {number} */ var $28=$2;
 /** @type {number} */ var $29=$28;
 /** @type {number} */ var $30=$2;
 /** @type {number} */ var $31=$30;
 /** @type {number} */ var $32=$31;
 /** @type {number} */ var $33=(($32+6)|0);
 /** @type {number} */ var $34=HEAP8[($33)];
 /** @type {number} */ var $35=($34&255);
 /** @type {number} */ var $36=((($35)-(1))|0);
 /** @type {number} */ var $37=($36<<4);
 /** @type {number} */ var $38=((($37)+(32))|0);
 /** @type {number} */ var $39=_luaM_realloc_($27,$29,$38,0);
 label=12;break;
 case 5: 
 /** @type {number} */ var $41=$1;
 /** @type {number} */ var $42=$2;
 /** @type {number} */ var $43=$42;
 _luaF_freeupval($41,$43);
 label=12;break;
 case 6: 
 /** @type {number} */ var $45=$1;
 /** @type {number} */ var $46=$2;
 /** @type {number} */ var $47=$46;
 _luaH_free($45,$47);
 label=12;break;
 case 7: 
 /** @type {number} */ var $49=$1;
 /** @type {number} */ var $50=$2;
 /** @type {number} */ var $51=$50;
 _luaE_freethread($49,$51);
 label=12;break;
 case 8: 
 /** @type {number} */ var $53=$1;
 /** @type {number} */ var $54=$2;
 /** @type {number} */ var $55=$54;
 /** @type {number} */ var $56=$2;
 /** @type {number} */ var $57=$56;
 /** @type {number} */ var $58=$57;
 /** @type {number} */ var $59=(($58+16)|0);
 /** @type {number} */ var $60=HEAP32[(($59)>>2)];
 /** @type {number} */ var $61=((($60)+(24))|0);
 /** @type {number} */ var $62=_luaM_realloc_($53,$55,$61,0);
 label=12;break;
 case 9: 
 /** @type {number} */ var $64=$1;
 /** @type {number} */ var $65=(($64+12)|0);
 /** @type {number} */ var $66=HEAP32[(($65)>>2)];
 /** @type {number} */ var $67=(($66+24)|0);
 /** @type {number} */ var $68=(($67+4)|0);
 /** @type {number} */ var $69=HEAP32[(($68)>>2)];
 /** @type {number} */ var $70=((($69)-(1))|0);
 HEAP32[(($68)>>2)]=$70;
 label=10;break;
 case 10: 
 /** @type {number} */ var $72=$1;
 /** @type {number} */ var $73=$2;
 /** @type {number} */ var $74=$73;
 /** @type {number} */ var $75=$2;
 /** @type {number} */ var $76=$75;
 /** @type {number} */ var $77=$76;
 /** @type {number} */ var $78=(($77+12)|0);
 /** @type {number} */ var $79=HEAP32[(($78)>>2)];
 /** @type {number} */ var $80=((($79)+(1))|0);
 /** @type {number} */ var $81=$80;
 /** @type {number} */ var $82=((($81)+(16))|0);
 /** @type {number} */ var $83=_luaM_realloc_($72,$74,$82,0);
 label=12;break;
 case 11: 
 label=12;break;
 case 12: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $L1
 * @return {number}
 */
function _sweepthread($L,$L1){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$L;
 $2=$L1;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=(($3+28)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 label=5;break;
 case 3: 
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=(($10+56)|0);
 /** @type {number} */ var $12=_sweeplist($9,$11,-3);
 /** @type {number} */ var $13=$2;
 _luaE_freeCI($13);
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=(($14+12)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=(($16+62)|0);
 /** @type {number} */ var $18=HEAP8[($17)];
 /** @type {number} */ var $19=($18&255);
 /** @type {number} */ var $20=($19|0)!=1;
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $22=$2;
 _luaD_shrinkstack($22);
 label=5;break;
 case 5: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $g
 * @return {number}
 */
function _udata2finalize($g){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $o;
 $1=$g;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+104)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $o=$4;
 /** @type {number} */ var $5=$o;
 /** @type {number} */ var $6=$5;
 /** @type {number} */ var $7=(($6)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=(($9+104)|0);
 HEAP32[(($10)>>2)]=$8;
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=(($11+68)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=$o;
 /** @type {number} */ var $15=$14;
 /** @type {number} */ var $16=(($15)|0);
 HEAP32[(($16)>>2)]=$13;
 /** @type {number} */ var $17=$o;
 /** @type {number} */ var $18=$1;
 /** @type {number} */ var $19=(($18+68)|0);
 HEAP32[(($19)>>2)]=$17;
 /** @type {number} */ var $20=$o;
 /** @type {number} */ var $21=$20;
 /** @type {number} */ var $22=(($21+5)|0);
 /** @type {number} */ var $23=HEAP8[($22)];
 /** @type {number} */ var $24=($23&255);
 /** @type {number} */ var $25=$24&239;
 /** @type {number} */ var $26=(($25)&255);
 HEAP8[($22)]=$26;
 /** @type {number} */ var $27=$1;
 /** @type {number} */ var $28=(($27+62)|0);
 /** @type {number} */ var $29=HEAP8[($28)];
 /** @type {number} */ var $30=($29&255);
 /** @type {number} */ var $31=($30|0)==2;
 if($31){label=4;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $33=$1;
 /** @type {number} */ var $34=(($33+61)|0);
 /** @type {number} */ var $35=HEAP8[($34)];
 /** @type {number} */ var $36=($35&255);
 /** @type {number} */ var $37=($36|0)<=1;
 if($37){label=4;break;}else{label=3;break;}
 case 3: 
 /** @type {number} */ var $39=$o;
 /** @type {number} */ var $40=$39;
 /** @type {number} */ var $41=(($40+5)|0);
 /** @type {number} */ var $42=HEAP8[($41)];
 /** @type {number} */ var $43=($42&255);
 /** @type {number} */ var $44=$43&-72;
 /** @type {number} */ var $45=$1;
 /** @type {number} */ var $46=(($45+60)|0);
 /** @type {number} */ var $47=HEAP8[($46)];
 /** @type {number} */ var $48=($47&255);
 /** @type {number} */ var $49=$48&3;
 /** @type {number} */ var $50=(($49)&255);
 /** @type {number} */ var $51=($50&255);
 /** @type {number} */ var $52=$44|$51;
 /** @type {number} */ var $53=(($52)&255);
 /** @type {number} */ var $54=$o;
 /** @type {number} */ var $55=$54;
 /** @type {number} */ var $56=(($55+5)|0);
 HEAP8[($56)]=$53;
 label=4;break;
 case 4: 
 /** @type {number} */ var $58=$o;
 STACKTOP=sp;return $58;
 }
}
/**
 * @param {number} $L
 * @param {number} $ud
 * @return {number}
 */
function _dothecall($L,$ud){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$L;
 $2=$ud;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($5+8)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=((($7)-(32))|0);
 _luaD_call($4,$8,0,0);
 STACKTOP=sp;return;
}
/**
 * @param {number} $g
 * @return {number}
 */
function _markmt($g){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $i;
 $1=$g;
 $i=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $3=$i;
 /** @type {number} */ var $4=($3|0)<9;
 if($4){label=3;break;}else{label=8;break;}
 case 3: 
 /** @type {number} */ var $6=$i;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=(($7+252)|0);
 /** @type {number} */ var $9=(($8+($6<<2))|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=($10|0)!=0;
 if($11){label=4;break;}else{label=6;break;}
 case 4: 
 /** @type {number} */ var $13=$i;
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=(($14+252)|0);
 /** @type {number} */ var $16=(($15+($13<<2))|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=$17;
 /** @type {number} */ var $19=$18;
 /** @type {number} */ var $20=(($19+5)|0);
 /** @type {number} */ var $21=HEAP8[($20)];
 /** @type {number} */ var $22=($21&255);
 /** @type {number} */ var $23=$22&3;
 /** @type {number} */ var $24=($23|0)!=0;
 if($24){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $26=$1;
 /** @type {number} */ var $27=$i;
 /** @type {number} */ var $28=$1;
 /** @type {number} */ var $29=(($28+252)|0);
 /** @type {number} */ var $30=(($29+($27<<2))|0);
 /** @type {number} */ var $31=HEAP32[(($30)>>2)];
 /** @type {number} */ var $32=$31;
 _reallymarkobject($26,$32);
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 /** @type {number} */ var $35=$i;
 /** @type {number} */ var $36=((($35)+(1))|0);
 $i=$36;
 label=2;break;
 case 8: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $g
 * @return {number}
 */
function _markbeingfnz($g){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $o;
 $1=$g;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+104)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $o=$4;
 label=2;break;
 case 2: 
 /** @type {number} */ var $6=$o;
 /** @type {number} */ var $7=($6|0)!=0;
 if($7){label=3;break;}else{label=5;break;}
 case 3: 
 /** @type {number} */ var $9=$o;
 /** @type {number} */ var $10=$9;
 /** @type {number} */ var $11=(($10+5)|0);
 /** @type {number} */ var $12=HEAP8[($11)];
 /** @type {number} */ var $13=($12&255);
 /** @type {number} */ var $14=$13&-72;
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=(($15+60)|0);
 /** @type {number} */ var $17=HEAP8[($16)];
 /** @type {number} */ var $18=($17&255);
 /** @type {number} */ var $19=$18&3;
 /** @type {number} */ var $20=(($19)&255);
 /** @type {number} */ var $21=($20&255);
 /** @type {number} */ var $22=$14|$21;
 /** @type {number} */ var $23=(($22)&255);
 /** @type {number} */ var $24=$o;
 /** @type {number} */ var $25=$24;
 /** @type {number} */ var $26=(($25+5)|0);
 HEAP8[($26)]=$23;
 /** @type {number} */ var $27=$1;
 /** @type {number} */ var $28=$o;
 _reallymarkobject($27,$28);
 label=4;break;
 case 4: 
 /** @type {number} */ var $30=$o;
 /** @type {number} */ var $31=$30;
 /** @type {number} */ var $32=(($31)|0);
 /** @type {number} */ var $33=HEAP32[(($32)>>2)];
 $o=$33;
 label=2;break;
 case 5: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $g
 * @param {number} $h
 * @return {number}
 */
function _traversetable($g,$h){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $weakkey;
 /** @type {number} */ var $weakvalue;
 /** @type {number} */ var $mode;
 $1=$g;
 $2=$h;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=(($3+8)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $30=0;label=7;break;
 case 3: 
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=(($9+8)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=(($11+6)|0);
 /** @type {number} */ var $13=HEAP8[($12)];
 /** @type {number} */ var $14=($13&255);
 /** @type {number} */ var $15=$14&8;
 /** @type {number} */ var $16=($15|0)!=0;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $28=0;label=6;break;
 case 5: 
 /** @type {number} */ var $19=$2;
 /** @type {number} */ var $20=(($19+8)|0);
 /** @type {number} */ var $21=HEAP32[(($20)>>2)];
 /** @type {number} */ var $22=$1;
 /** @type {number} */ var $23=(($22+184)|0);
 /** @type {number} */ var $24=(($23+12)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=_luaT_gettm($21,3,$25);
 var $28=$26;label=6;break;
 case 6: 
 var $28;
 var $30=$28;label=7;break;
 case 7: 
 var $30;
 $mode=$30;
 /** @type {number} */ var $31=$2;
 /** @type {number} */ var $32=(($31+8)|0);
 /** @type {number} */ var $33=HEAP32[(($32)>>2)];
 /** @type {number} */ var $34=($33|0)!=0;
 if($34){label=8;break;}else{label=10;break;}
 case 8: 
 /** @type {number} */ var $36=$2;
 /** @type {number} */ var $37=(($36+8)|0);
 /** @type {number} */ var $38=HEAP32[(($37)>>2)];
 /** @type {number} */ var $39=$38;
 /** @type {number} */ var $40=$39;
 /** @type {number} */ var $41=(($40+5)|0);
 /** @type {number} */ var $42=HEAP8[($41)];
 /** @type {number} */ var $43=($42&255);
 /** @type {number} */ var $44=$43&3;
 /** @type {number} */ var $45=($44|0)!=0;
 if($45){label=9;break;}else{label=10;break;}
 case 9: 
 /** @type {number} */ var $47=$1;
 /** @type {number} */ var $48=$2;
 /** @type {number} */ var $49=(($48+8)|0);
 /** @type {number} */ var $50=HEAP32[(($49)>>2)];
 /** @type {number} */ var $51=$50;
 _reallymarkobject($47,$51);
 label=10;break;
 case 10: 
 /** @type {number} */ var $53=$mode;
 /** @type {number} */ var $54=($53|0)!=0;
 if($54){label=11;break;}else{label=22;break;}
 case 11: 
 /** @type {number} */ var $56=$mode;
 /** @type {number} */ var $57=(($56+8)|0);
 /** @type {number} */ var $58=HEAP32[(($57)>>2)];
 /** @type {number} */ var $59=$58&15;
 /** @type {number} */ var $60=($59|0)==4;
 if($60){label=12;break;}else{label=22;break;}
 case 12: 
 /** @type {number} */ var $62=$mode;
 /** @type {number} */ var $63=(($62)|0);
 /** @type {number} */ var $64=$63;
 /** @type {number} */ var $65=HEAP32[(($64)>>2)];
 /** @type {number} */ var $66=$65;
 /** @type {number} */ var $67=(($66+16)|0);
 /** @type {number} */ var $68=$67;
 /** @type {number} */ var $69=_strchr($68,107);
 $weakkey=$69;
 /** @type {number} */ var $70=$mode;
 /** @type {number} */ var $71=(($70)|0);
 /** @type {number} */ var $72=$71;
 /** @type {number} */ var $73=HEAP32[(($72)>>2)];
 /** @type {number} */ var $74=$73;
 /** @type {number} */ var $75=(($74+16)|0);
 /** @type {number} */ var $76=$75;
 /** @type {number} */ var $77=_strchr($76,118);
 $weakvalue=$77;
 /** @type {number} */ var $78=$weakkey;
 /** @type {number} */ var $79=($78|0)!=0;
 if($79){var $84=1;label=14;break;}else{label=13;break;}
 case 13: 
 /** @type {number} */ var $81=$weakvalue;
 /** @type {number} */ var $82=($81|0)!=0;
 var $84=$82;label=14;break;
 case 14: 
 var $84;
 if($84){label=15;break;}else{label=22;break;}
 case 15: 
 /** @type {number} */ var $86=$2;
 /** @type {number} */ var $87=$86;
 /** @type {number} */ var $88=$87;
 /** @type {number} */ var $89=(($88+5)|0);
 /** @type {number} */ var $90=HEAP8[($89)];
 /** @type {number} */ var $91=($90&255);
 /** @type {number} */ var $92=$91&251;
 /** @type {number} */ var $93=(($92)&255);
 HEAP8[($89)]=$93;
 /** @type {number} */ var $94=$weakkey;
 /** @type {number} */ var $95=($94|0)!=0;
 if($95){label=17;break;}else{label=16;break;}
 case 16: 
 /** @type {number} */ var $97=$1;
 /** @type {number} */ var $98=$2;
 _traverseweakvalue($97,$98);
 label=21;break;
 case 17: 
 /** @type {number} */ var $100=$weakvalue;
 /** @type {number} */ var $101=($100|0)!=0;
 if($101){label=19;break;}else{label=18;break;}
 case 18: 
 /** @type {number} */ var $103=$1;
 /** @type {number} */ var $104=$2;
 /** @type {number} */ var $105=_traverseephemeron($103,$104);
 label=20;break;
 case 19: 
 /** @type {number} */ var $107=$1;
 /** @type {number} */ var $108=(($107+100)|0);
 /** @type {number} */ var $109=HEAP32[(($108)>>2)];
 /** @type {number} */ var $110=$2;
 /** @type {number} */ var $111=(($110+24)|0);
 HEAP32[(($111)>>2)]=$109;
 /** @type {number} */ var $112=$2;
 /** @type {number} */ var $113=$112;
 /** @type {number} */ var $114=$1;
 /** @type {number} */ var $115=(($114+100)|0);
 HEAP32[(($115)>>2)]=$113;
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 label=23;break;
 case 22: 
 /** @type {number} */ var $119=$1;
 /** @type {number} */ var $120=$2;
 _traversestrongtable($119,$120);
 label=23;break;
 case 23: 
 /** @type {number} */ var $122=$2;
 /** @type {number} */ var $123=(($122+28)|0);
 /** @type {number} */ var $124=HEAP32[(($123)>>2)];
 /** @type {number} */ var $125=($124<<4);
 /** @type {number} */ var $126=((($125)+(32))|0);
 /** @type {number} */ var $127=$2;
 /** @type {number} */ var $128=(($127+7)|0);
 /** @type {number} */ var $129=HEAP8[($128)];
 /** @type {number} */ var $130=($129&255);
 /** @type {number} */ var $131=1<<$130;
 /** @type {number} */ var $132=($131<<5);
 /** @type {number} */ var $133=((($126)+($132))|0);
 STACKTOP=sp;return $133;
 }
}
/**
 * @param {number} $g
 * @param {number} $cl
 * @return {number}
 */
function _traverseLclosure($g,$cl){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $i;
 $1=$g;
 $2=$cl;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=(($3+12)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=(($8+12)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=$10;
 /** @type {number} */ var $12=$11;
 /** @type {number} */ var $13=(($12+5)|0);
 /** @type {number} */ var $14=HEAP8[($13)];
 /** @type {number} */ var $15=($14&255);
 /** @type {number} */ var $16=$15&3;
 /** @type {number} */ var $17=($16|0)!=0;
 if($17){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $19=$1;
 /** @type {number} */ var $20=$2;
 /** @type {number} */ var $21=(($20+12)|0);
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 /** @type {number} */ var $23=$22;
 _reallymarkobject($19,$23);
 label=4;break;
 case 4: 
 $i=0;
 label=5;break;
 case 5: 
 /** @type {number} */ var $26=$i;
 /** @type {number} */ var $27=$2;
 /** @type {number} */ var $28=(($27+6)|0);
 /** @type {number} */ var $29=HEAP8[($28)];
 /** @type {number} */ var $30=($29&255);
 /** @type {number} */ var $31=($26|0)<($30|0);
 if($31){label=6;break;}else{label=11;break;}
 case 6: 
 /** @type {number} */ var $33=$i;
 /** @type {number} */ var $34=$2;
 /** @type {number} */ var $35=(($34+16)|0);
 /** @type {number} */ var $36=(($35+($33<<2))|0);
 /** @type {number} */ var $37=HEAP32[(($36)>>2)];
 /** @type {number} */ var $38=($37|0)!=0;
 if($38){label=7;break;}else{label=9;break;}
 case 7: 
 /** @type {number} */ var $40=$i;
 /** @type {number} */ var $41=$2;
 /** @type {number} */ var $42=(($41+16)|0);
 /** @type {number} */ var $43=(($42+($40<<2))|0);
 /** @type {number} */ var $44=HEAP32[(($43)>>2)];
 /** @type {number} */ var $45=$44;
 /** @type {number} */ var $46=$45;
 /** @type {number} */ var $47=(($46+5)|0);
 /** @type {number} */ var $48=HEAP8[($47)];
 /** @type {number} */ var $49=($48&255);
 /** @type {number} */ var $50=$49&3;
 /** @type {number} */ var $51=($50|0)!=0;
 if($51){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $53=$1;
 /** @type {number} */ var $54=$i;
 /** @type {number} */ var $55=$2;
 /** @type {number} */ var $56=(($55+16)|0);
 /** @type {number} */ var $57=(($56+($54<<2))|0);
 /** @type {number} */ var $58=HEAP32[(($57)>>2)];
 /** @type {number} */ var $59=$58;
 _reallymarkobject($53,$59);
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 /** @type {number} */ var $62=$i;
 /** @type {number} */ var $63=((($62)+(1))|0);
 $i=$63;
 label=5;break;
 case 11: 
 /** @type {number} */ var $65=$2;
 /** @type {number} */ var $66=(($65+6)|0);
 /** @type {number} */ var $67=HEAP8[($66)];
 /** @type {number} */ var $68=($67&255);
 /** @type {number} */ var $69=((($68)-(1))|0);
 /** @type {number} */ var $70=($69<<2);
 /** @type {number} */ var $71=((($70)+(20))|0);
 STACKTOP=sp;return $71;
 }
}
/**
 * @param {number} $g
 * @param {number} $cl
 * @return {number}
 */
function _traverseCclosure($g,$cl){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $i;
 $1=$g;
 $2=$cl;
 $i=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $4=$i;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=(($5+6)|0);
 /** @type {number} */ var $7=HEAP8[($6)];
 /** @type {number} */ var $8=($7&255);
 /** @type {number} */ var $9=($4|0)<($8|0);
 if($9){label=3;break;}else{label=8;break;}
 case 3: 
 /** @type {number} */ var $11=$i;
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=(($12+16)|0);
 /** @type {number} */ var $14=(($13+($11<<4))|0);
 /** @type {number} */ var $15=(($14+8)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=$16&64;
 /** @type {number} */ var $18=($17|0)!=0;
 if($18){label=4;break;}else{label=6;break;}
 case 4: 
 /** @type {number} */ var $20=$i;
 /** @type {number} */ var $21=$2;
 /** @type {number} */ var $22=(($21+16)|0);
 /** @type {number} */ var $23=(($22+($20<<4))|0);
 /** @type {number} */ var $24=(($23)|0);
 /** @type {number} */ var $25=$24;
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 /** @type {number} */ var $27=$26;
 /** @type {number} */ var $28=(($27+5)|0);
 /** @type {number} */ var $29=HEAP8[($28)];
 /** @type {number} */ var $30=($29&255);
 /** @type {number} */ var $31=$30&3;
 /** @type {number} */ var $32=($31|0)!=0;
 if($32){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $34=$1;
 /** @type {number} */ var $35=$i;
 /** @type {number} */ var $36=$2;
 /** @type {number} */ var $37=(($36+16)|0);
 /** @type {number} */ var $38=(($37+($35<<4))|0);
 /** @type {number} */ var $39=(($38)|0);
 /** @type {number} */ var $40=$39;
 /** @type {number} */ var $41=HEAP32[(($40)>>2)];
 _reallymarkobject($34,$41);
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 /** @type {number} */ var $44=$i;
 /** @type {number} */ var $45=((($44)+(1))|0);
 $i=$45;
 label=2;break;
 case 8: 
 /** @type {number} */ var $47=$2;
 /** @type {number} */ var $48=(($47+6)|0);
 /** @type {number} */ var $49=HEAP8[($48)];
 /** @type {number} */ var $50=($49&255);
 /** @type {number} */ var $51=((($50)-(1))|0);
 /** @type {number} */ var $52=($51<<4);
 /** @type {number} */ var $53=((($52)+(32))|0);
 STACKTOP=sp;return $53;
 }
}
/**
 * @param {number} $g
 * @param {number} $th
 * @return {number}
 */
function _traversestack($g,$th){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $o;
 /** @type {number} */ var $lim;
 $2=$g;
 $3=$th;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=(($4+28)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 $o=$6;
 /** @type {number} */ var $7=$o;
 /** @type {number} */ var $8=($7|0)==0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=1;
 label=17;break;
 case 3: 
 label=4;break;
 case 4: 
 /** @type {number} */ var $12=$o;
 /** @type {number} */ var $13=$3;
 /** @type {number} */ var $14=(($13+8)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=($12>>>0)<($15>>>0);
 if($16){label=5;break;}else{label=10;break;}
 case 5: 
 /** @type {number} */ var $18=$o;
 /** @type {number} */ var $19=(($18+8)|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=$20&64;
 /** @type {number} */ var $22=($21|0)!=0;
 if($22){label=6;break;}else{label=8;break;}
 case 6: 
 /** @type {number} */ var $24=$o;
 /** @type {number} */ var $25=(($24)|0);
 /** @type {number} */ var $26=$25;
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=$27;
 /** @type {number} */ var $29=(($28+5)|0);
 /** @type {number} */ var $30=HEAP8[($29)];
 /** @type {number} */ var $31=($30&255);
 /** @type {number} */ var $32=$31&3;
 /** @type {number} */ var $33=($32|0)!=0;
 if($33){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $35=$2;
 /** @type {number} */ var $36=$o;
 /** @type {number} */ var $37=(($36)|0);
 /** @type {number} */ var $38=$37;
 /** @type {number} */ var $39=HEAP32[(($38)>>2)];
 _reallymarkobject($35,$39);
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 /** @type {number} */ var $42=$o;
 /** @type {number} */ var $43=(($42+16)|0);
 $o=$43;
 label=4;break;
 case 10: 
 /** @type {number} */ var $45=$2;
 /** @type {number} */ var $46=(($45+61)|0);
 /** @type {number} */ var $47=HEAP8[($46)];
 /** @type {number} */ var $48=($47&255);
 /** @type {number} */ var $49=($48|0)==1;
 if($49){label=11;break;}else{label=16;break;}
 case 11: 
 /** @type {number} */ var $51=$3;
 /** @type {number} */ var $52=(($51+28)|0);
 /** @type {number} */ var $53=HEAP32[(($52)>>2)];
 /** @type {number} */ var $54=$3;
 /** @type {number} */ var $55=(($54+32)|0);
 /** @type {number} */ var $56=HEAP32[(($55)>>2)];
 /** @type {number} */ var $57=(($53+($56<<4))|0);
 $lim=$57;
 label=12;break;
 case 12: 
 /** @type {number} */ var $59=$o;
 /** @type {number} */ var $60=$lim;
 /** @type {number} */ var $61=($59>>>0)<($60>>>0);
 if($61){label=13;break;}else{label=15;break;}
 case 13: 
 /** @type {number} */ var $63=$o;
 /** @type {number} */ var $64=(($63+8)|0);
 HEAP32[(($64)>>2)]=0;
 label=14;break;
 case 14: 
 /** @type {number} */ var $66=$o;
 /** @type {number} */ var $67=(($66+16)|0);
 $o=$67;
 label=12;break;
 case 15: 
 label=16;break;
 case 16: 
 /** @type {number} */ var $70=$3;
 /** @type {number} */ var $71=(($70+32)|0);
 /** @type {number} */ var $72=HEAP32[(($71)>>2)];
 /** @type {number} */ var $73=($72<<4);
 /** @type {number} */ var $74=((($73)+(112))|0);
 $1=$74;
 label=17;break;
 case 17: 
 /** @type {number} */ var $76=$1;
 STACKTOP=sp;return $76;
 }
}
/**
 * @param {number} $g
 * @param {number} $f
 * @return {number}
 */
function _traverseproto($g,$f){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $i;
 $1=$g;
 $2=$f;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=(($3+32)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=(($8+32)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=$10;
 /** @type {number} */ var $12=$11;
 /** @type {number} */ var $13=(($12+5)|0);
 /** @type {number} */ var $14=HEAP8[($13)];
 /** @type {number} */ var $15=($14&255);
 /** @type {number} */ var $16=$15&3;
 /** @type {number} */ var $17=($16|0)!=0;
 if($17){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $19=$2;
 /** @type {number} */ var $20=(($19+32)|0);
 HEAP32[(($20)>>2)]=0;
 label=4;break;
 case 4: 
 /** @type {number} */ var $22=$2;
 /** @type {number} */ var $23=(($22+36)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=($24|0)!=0;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 /** @type {number} */ var $27=$2;
 /** @type {number} */ var $28=(($27+36)|0);
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 /** @type {number} */ var $30=$29;
 /** @type {number} */ var $31=$30;
 /** @type {number} */ var $32=(($31+5)|0);
 /** @type {number} */ var $33=HEAP8[($32)];
 /** @type {number} */ var $34=($33&255);
 /** @type {number} */ var $35=$34&3;
 /** @type {number} */ var $36=($35|0)!=0;
 if($36){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $38=$1;
 /** @type {number} */ var $39=$2;
 /** @type {number} */ var $40=(($39+36)|0);
 /** @type {number} */ var $41=HEAP32[(($40)>>2)];
 /** @type {number} */ var $42=$41;
 _reallymarkobject($38,$42);
 label=7;break;
 case 7: 
 $i=0;
 label=8;break;
 case 8: 
 /** @type {number} */ var $45=$i;
 /** @type {number} */ var $46=$2;
 /** @type {number} */ var $47=(($46+44)|0);
 /** @type {number} */ var $48=HEAP32[(($47)>>2)];
 /** @type {number} */ var $49=($45|0)<($48|0);
 if($49){label=9;break;}else{label=14;break;}
 case 9: 
 /** @type {number} */ var $51=$i;
 /** @type {number} */ var $52=$2;
 /** @type {number} */ var $53=(($52+8)|0);
 /** @type {number} */ var $54=HEAP32[(($53)>>2)];
 /** @type {number} */ var $55=(($54+($51<<4))|0);
 /** @type {number} */ var $56=(($55+8)|0);
 /** @type {number} */ var $57=HEAP32[(($56)>>2)];
 /** @type {number} */ var $58=$57&64;
 /** @type {number} */ var $59=($58|0)!=0;
 if($59){label=10;break;}else{label=12;break;}
 case 10: 
 /** @type {number} */ var $61=$i;
 /** @type {number} */ var $62=$2;
 /** @type {number} */ var $63=(($62+8)|0);
 /** @type {number} */ var $64=HEAP32[(($63)>>2)];
 /** @type {number} */ var $65=(($64+($61<<4))|0);
 /** @type {number} */ var $66=(($65)|0);
 /** @type {number} */ var $67=$66;
 /** @type {number} */ var $68=HEAP32[(($67)>>2)];
 /** @type {number} */ var $69=$68;
 /** @type {number} */ var $70=(($69+5)|0);
 /** @type {number} */ var $71=HEAP8[($70)];
 /** @type {number} */ var $72=($71&255);
 /** @type {number} */ var $73=$72&3;
 /** @type {number} */ var $74=($73|0)!=0;
 if($74){label=11;break;}else{label=12;break;}
 case 11: 
 /** @type {number} */ var $76=$1;
 /** @type {number} */ var $77=$i;
 /** @type {number} */ var $78=$2;
 /** @type {number} */ var $79=(($78+8)|0);
 /** @type {number} */ var $80=HEAP32[(($79)>>2)];
 /** @type {number} */ var $81=(($80+($77<<4))|0);
 /** @type {number} */ var $82=(($81)|0);
 /** @type {number} */ var $83=$82;
 /** @type {number} */ var $84=HEAP32[(($83)>>2)];
 _reallymarkobject($76,$84);
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 /** @type {number} */ var $87=$i;
 /** @type {number} */ var $88=((($87)+(1))|0);
 $i=$88;
 label=8;break;
 case 14: 
 $i=0;
 label=15;break;
 case 15: 
 /** @type {number} */ var $91=$i;
 /** @type {number} */ var $92=$2;
 /** @type {number} */ var $93=(($92+40)|0);
 /** @type {number} */ var $94=HEAP32[(($93)>>2)];
 /** @type {number} */ var $95=($91|0)<($94|0);
 if($95){label=16;break;}else{label=21;break;}
 case 16: 
 /** @type {number} */ var $97=$i;
 /** @type {number} */ var $98=$2;
 /** @type {number} */ var $99=(($98+28)|0);
 /** @type {number} */ var $100=HEAP32[(($99)>>2)];
 /** @type {number} */ var $101=(($100+($97<<3))|0);
 /** @type {number} */ var $102=(($101)|0);
 /** @type {number} */ var $103=HEAP32[(($102)>>2)];
 /** @type {number} */ var $104=($103|0)!=0;
 if($104){label=17;break;}else{label=19;break;}
 case 17: 
 /** @type {number} */ var $106=$i;
 /** @type {number} */ var $107=$2;
 /** @type {number} */ var $108=(($107+28)|0);
 /** @type {number} */ var $109=HEAP32[(($108)>>2)];
 /** @type {number} */ var $110=(($109+($106<<3))|0);
 /** @type {number} */ var $111=(($110)|0);
 /** @type {number} */ var $112=HEAP32[(($111)>>2)];
 /** @type {number} */ var $113=$112;
 /** @type {number} */ var $114=$113;
 /** @type {number} */ var $115=(($114+5)|0);
 /** @type {number} */ var $116=HEAP8[($115)];
 /** @type {number} */ var $117=($116&255);
 /** @type {number} */ var $118=$117&3;
 /** @type {number} */ var $119=($118|0)!=0;
 if($119){label=18;break;}else{label=19;break;}
 case 18: 
 /** @type {number} */ var $121=$1;
 /** @type {number} */ var $122=$i;
 /** @type {number} */ var $123=$2;
 /** @type {number} */ var $124=(($123+28)|0);
 /** @type {number} */ var $125=HEAP32[(($124)>>2)];
 /** @type {number} */ var $126=(($125+($122<<3))|0);
 /** @type {number} */ var $127=(($126)|0);
 /** @type {number} */ var $128=HEAP32[(($127)>>2)];
 /** @type {number} */ var $129=$128;
 _reallymarkobject($121,$129);
 label=19;break;
 case 19: 
 label=20;break;
 case 20: 
 /** @type {number} */ var $132=$i;
 /** @type {number} */ var $133=((($132)+(1))|0);
 $i=$133;
 label=15;break;
 case 21: 
 $i=0;
 label=22;break;
 case 22: 
 /** @type {number} */ var $136=$i;
 /** @type {number} */ var $137=$2;
 /** @type {number} */ var $138=(($137+56)|0);
 /** @type {number} */ var $139=HEAP32[(($138)>>2)];
 /** @type {number} */ var $140=($136|0)<($139|0);
 if($140){label=23;break;}else{label=28;break;}
 case 23: 
 /** @type {number} */ var $142=$i;
 /** @type {number} */ var $143=$2;
 /** @type {number} */ var $144=(($143+16)|0);
 /** @type {number} */ var $145=HEAP32[(($144)>>2)];
 /** @type {number} */ var $146=(($145+($142<<2))|0);
 /** @type {number} */ var $147=HEAP32[(($146)>>2)];
 /** @type {number} */ var $148=($147|0)!=0;
 if($148){label=24;break;}else{label=26;break;}
 case 24: 
 /** @type {number} */ var $150=$i;
 /** @type {number} */ var $151=$2;
 /** @type {number} */ var $152=(($151+16)|0);
 /** @type {number} */ var $153=HEAP32[(($152)>>2)];
 /** @type {number} */ var $154=(($153+($150<<2))|0);
 /** @type {number} */ var $155=HEAP32[(($154)>>2)];
 /** @type {number} */ var $156=$155;
 /** @type {number} */ var $157=$156;
 /** @type {number} */ var $158=(($157+5)|0);
 /** @type {number} */ var $159=HEAP8[($158)];
 /** @type {number} */ var $160=($159&255);
 /** @type {number} */ var $161=$160&3;
 /** @type {number} */ var $162=($161|0)!=0;
 if($162){label=25;break;}else{label=26;break;}
 case 25: 
 /** @type {number} */ var $164=$1;
 /** @type {number} */ var $165=$i;
 /** @type {number} */ var $166=$2;
 /** @type {number} */ var $167=(($166+16)|0);
 /** @type {number} */ var $168=HEAP32[(($167)>>2)];
 /** @type {number} */ var $169=(($168+($165<<2))|0);
 /** @type {number} */ var $170=HEAP32[(($169)>>2)];
 /** @type {number} */ var $171=$170;
 _reallymarkobject($164,$171);
 label=26;break;
 case 26: 
 label=27;break;
 case 27: 
 /** @type {number} */ var $174=$i;
 /** @type {number} */ var $175=((($174)+(1))|0);
 $i=$175;
 label=22;break;
 case 28: 
 $i=0;
 label=29;break;
 case 29: 
 /** @type {number} */ var $178=$i;
 /** @type {number} */ var $179=$2;
 /** @type {number} */ var $180=(($179+60)|0);
 /** @type {number} */ var $181=HEAP32[(($180)>>2)];
 /** @type {number} */ var $182=($178|0)<($181|0);
 if($182){label=30;break;}else{label=35;break;}
 case 30: 
 /** @type {number} */ var $184=$i;
 /** @type {number} */ var $185=$2;
 /** @type {number} */ var $186=(($185+24)|0);
 /** @type {number} */ var $187=HEAP32[(($186)>>2)];
 /** @type {number} */ var $188=(($187+((($184)*(12))&-1))|0);
 /** @type {number} */ var $189=(($188)|0);
 /** @type {number} */ var $190=HEAP32[(($189)>>2)];
 /** @type {number} */ var $191=($190|0)!=0;
 if($191){label=31;break;}else{label=33;break;}
 case 31: 
 /** @type {number} */ var $193=$i;
 /** @type {number} */ var $194=$2;
 /** @type {number} */ var $195=(($194+24)|0);
 /** @type {number} */ var $196=HEAP32[(($195)>>2)];
 /** @type {number} */ var $197=(($196+((($193)*(12))&-1))|0);
 /** @type {number} */ var $198=(($197)|0);
 /** @type {number} */ var $199=HEAP32[(($198)>>2)];
 /** @type {number} */ var $200=$199;
 /** @type {number} */ var $201=$200;
 /** @type {number} */ var $202=(($201+5)|0);
 /** @type {number} */ var $203=HEAP8[($202)];
 /** @type {number} */ var $204=($203&255);
 /** @type {number} */ var $205=$204&3;
 /** @type {number} */ var $206=($205|0)!=0;
 if($206){label=32;break;}else{label=33;break;}
 case 32: 
 /** @type {number} */ var $208=$1;
 /** @type {number} */ var $209=$i;
 /** @type {number} */ var $210=$2;
 /** @type {number} */ var $211=(($210+24)|0);
 /** @type {number} */ var $212=HEAP32[(($211)>>2)];
 /** @type {number} */ var $213=(($212+((($209)*(12))&-1))|0);
 /** @type {number} */ var $214=(($213)|0);
 /** @type {number} */ var $215=HEAP32[(($214)>>2)];
 /** @type {number} */ var $216=$215;
 _reallymarkobject($208,$216);
 label=33;break;
 case 33: 
 label=34;break;
 case 34: 
 /** @type {number} */ var $219=$i;
 /** @type {number} */ var $220=((($219)+(1))|0);
 $i=$220;
 label=29;break;
 case 35: 
 /** @type {number} */ var $222=$2;
 /** @type {number} */ var $223=(($222+48)|0);
 /** @type {number} */ var $224=HEAP32[(($223)>>2)];
 /** @type {number} */ var $225=($224<<2);
 /** @type {number} */ var $226=((($225)+(80))|0);
 /** @type {number} */ var $227=$2;
 /** @type {number} */ var $228=(($227+56)|0);
 /** @type {number} */ var $229=HEAP32[(($228)>>2)];
 /** @type {number} */ var $230=($229<<2);
 /** @type {number} */ var $231=((($226)+($230))|0);
 /** @type {number} */ var $232=$2;
 /** @type {number} */ var $233=(($232+44)|0);
 /** @type {number} */ var $234=HEAP32[(($233)>>2)];
 /** @type {number} */ var $235=($234<<4);
 /** @type {number} */ var $236=((($231)+($235))|0);
 /** @type {number} */ var $237=$2;
 /** @type {number} */ var $238=(($237+52)|0);
 /** @type {number} */ var $239=HEAP32[(($238)>>2)];
 /** @type {number} */ var $240=($239<<2);
 /** @type {number} */ var $241=((($236)+($240))|0);
 /** @type {number} */ var $242=$2;
 /** @type {number} */ var $243=(($242+60)|0);
 /** @type {number} */ var $244=HEAP32[(($243)>>2)];
 /** @type {number} */ var $245=((($244)*(12))&-1);
 /** @type {number} */ var $246=((($241)+($245))|0);
 /** @type {number} */ var $247=$2;
 /** @type {number} */ var $248=(($247+40)|0);
 /** @type {number} */ var $249=HEAP32[(($248)>>2)];
 /** @type {number} */ var $250=($249<<3);
 /** @type {number} */ var $251=((($246)+($250))|0);
 STACKTOP=sp;return $251;
 }
}
/**
 * @param {number} $g
 * @return {number}
 */
function _remarkupvals($g){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $uv;
 $1=$g;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+112)|0);
 /** @type {number} */ var $4=(($3+16)|0);
 /** @type {number} */ var $5=$4;
 /** @type {number} */ var $6=(($5+4)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 $uv=$7;
 label=2;break;
 case 2: 
 /** @type {number} */ var $9=$uv;
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=(($10+112)|0);
 /** @type {number} */ var $12=($9|0)!=($11|0);
 if($12){label=3;break;}else{label=10;break;}
 case 3: 
 /** @type {number} */ var $14=$uv;
 /** @type {number} */ var $15=$14;
 /** @type {number} */ var $16=$15;
 /** @type {number} */ var $17=(($16+5)|0);
 /** @type {number} */ var $18=HEAP8[($17)];
 /** @type {number} */ var $19=($18&255);
 /** @type {number} */ var $20=$19&7;
 /** @type {number} */ var $21=($20|0)!=0;
 if($21){label=8;break;}else{label=4;break;}
 case 4: 
 /** @type {number} */ var $23=$uv;
 /** @type {number} */ var $24=(($23+8)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=(($25+8)|0);
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=$27&64;
 /** @type {number} */ var $29=($28|0)!=0;
 if($29){label=5;break;}else{label=7;break;}
 case 5: 
 /** @type {number} */ var $31=$uv;
 /** @type {number} */ var $32=(($31+8)|0);
 /** @type {number} */ var $33=HEAP32[(($32)>>2)];
 /** @type {number} */ var $34=(($33)|0);
 /** @type {number} */ var $35=$34;
 /** @type {number} */ var $36=HEAP32[(($35)>>2)];
 /** @type {number} */ var $37=$36;
 /** @type {number} */ var $38=(($37+5)|0);
 /** @type {number} */ var $39=HEAP8[($38)];
 /** @type {number} */ var $40=($39&255);
 /** @type {number} */ var $41=$40&3;
 /** @type {number} */ var $42=($41|0)!=0;
 if($42){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $44=$1;
 /** @type {number} */ var $45=$uv;
 /** @type {number} */ var $46=(($45+8)|0);
 /** @type {number} */ var $47=HEAP32[(($46)>>2)];
 /** @type {number} */ var $48=(($47)|0);
 /** @type {number} */ var $49=$48;
 /** @type {number} */ var $50=HEAP32[(($49)>>2)];
 _reallymarkobject($44,$50);
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 /** @type {number} */ var $54=$uv;
 /** @type {number} */ var $55=(($54+16)|0);
 /** @type {number} */ var $56=$55;
 /** @type {number} */ var $57=(($56+4)|0);
 /** @type {number} */ var $58=HEAP32[(($57)>>2)];
 $uv=$58;
 label=2;break;
 case 10: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $g
 * @return {number}
 */
function _propagateall($g){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 $1=$g;
 label=2;break;
 case 2: 
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+84)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=($5|0)!=0;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $8=$1;
 _propagatemark($8);
 label=2;break;
 case 4: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $g
 * @return {number}
 */
function _retraversegrays($g){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $weak;
 /** @type {number} */ var $grayagain;
 /** @type {number} */ var $ephemeron;
 $1=$g;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+92)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $weak=$4;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($5+88)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 $grayagain=$7;
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=(($8+96)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 $ephemeron=$10;
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=(($11+96)|0);
 HEAP32[(($12)>>2)]=0;
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=(($13+88)|0);
 HEAP32[(($14)>>2)]=0;
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=(($15+92)|0);
 HEAP32[(($16)>>2)]=0;
 /** @type {number} */ var $17=$1;
 _propagateall($17);
 /** @type {number} */ var $18=$1;
 /** @type {number} */ var $19=$grayagain;
 _propagatelist($18,$19);
 /** @type {number} */ var $20=$1;
 /** @type {number} */ var $21=$weak;
 _propagatelist($20,$21);
 /** @type {number} */ var $22=$1;
 /** @type {number} */ var $23=$ephemeron;
 _propagatelist($22,$23);
 STACKTOP=sp;return;
}
/**
 * @param {number} $g
 * @return {number}
 */
function _convergeephemerons($g){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $changed;
 /** @type {number} */ var $w;
 /** @type {number} */ var $next;
 $1=$g;
 label=2;break;
 case 2: 
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+96)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $next=$5;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+96)|0);
 HEAP32[(($7)>>2)]=0;
 $changed=0;
 label=3;break;
 case 3: 
 /** @type {number} */ var $9=$next;
 $w=$9;
 /** @type {number} */ var $10=($9|0)!=0;
 if($10){label=4;break;}else{label=7;break;}
 case 4: 
 /** @type {number} */ var $12=$w;
 /** @type {number} */ var $13=$12;
 /** @type {number} */ var $14=(($13+24)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 $next=$15;
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=$w;
 /** @type {number} */ var $18=$17;
 /** @type {number} */ var $19=_traverseephemeron($16,$18);
 /** @type {number} */ var $20=($19|0)!=0;
 if($20){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $22=$1;
 _propagateall($22);
 $changed=1;
 label=6;break;
 case 6: 
 label=3;break;
 case 7: 
 label=8;break;
 case 8: 
 /** @type {number} */ var $26=$changed;
 /** @type {number} */ var $27=($26|0)!=0;
 if($27){label=2;break;}else{label=9;break;}
 case 9: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $g
 * @param {number} $l
 * @param {number} $f
 * @return {number}
 */
function _clearvalues($g,$l,$f){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $h;
 /** @type {number} */ var $n;
 /** @type {number} */ var $limit;
 /** @type {number} */ var $i;
 /** @type {number} */ var $o;
 $1=$g;
 $2=$l;
 $3=$f;
 label=2;break;
 case 2: 
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$3;
 /** @type {number} */ var $7=($5|0)!=($6|0);
 if($7){label=3;break;}else{label=18;break;}
 case 3: 
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=$9;
 $h=$10;
 /** @type {number} */ var $11=$h;
 /** @type {number} */ var $12=(($11+7)|0);
 /** @type {number} */ var $13=HEAP8[($12)];
 /** @type {number} */ var $14=($13&255);
 /** @type {number} */ var $15=1<<$14;
 /** @type {number} */ var $16=$h;
 /** @type {number} */ var $17=(($16+16)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=(($18+($15<<5))|0);
 $limit=$19;
 $i=0;
 label=4;break;
 case 4: 
 /** @type {number} */ var $21=$i;
 /** @type {number} */ var $22=$h;
 /** @type {number} */ var $23=(($22+28)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=($21|0)<($24|0);
 if($25){label=5;break;}else{label=9;break;}
 case 5: 
 /** @type {number} */ var $27=$i;
 /** @type {number} */ var $28=$h;
 /** @type {number} */ var $29=(($28+12)|0);
 /** @type {number} */ var $30=HEAP32[(($29)>>2)];
 /** @type {number} */ var $31=(($30+($27<<4))|0);
 $o=$31;
 /** @type {number} */ var $32=$1;
 /** @type {number} */ var $33=$o;
 /** @type {number} */ var $34=_iscleared($32,$33);
 /** @type {number} */ var $35=($34|0)!=0;
 if($35){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $37=$o;
 /** @type {number} */ var $38=(($37+8)|0);
 HEAP32[(($38)>>2)]=0;
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 /** @type {number} */ var $41=$i;
 /** @type {number} */ var $42=((($41)+(1))|0);
 $i=$42;
 label=4;break;
 case 9: 
 /** @type {number} */ var $44=$h;
 /** @type {number} */ var $45=(($44+16)|0);
 /** @type {number} */ var $46=HEAP32[(($45)>>2)];
 /** @type {number} */ var $47=(($46)|0);
 $n=$47;
 label=10;break;
 case 10: 
 /** @type {number} */ var $49=$n;
 /** @type {number} */ var $50=$limit;
 /** @type {number} */ var $51=($49>>>0)<($50>>>0);
 if($51){label=11;break;}else{label=16;break;}
 case 11: 
 /** @type {number} */ var $53=$n;
 /** @type {number} */ var $54=(($53)|0);
 /** @type {number} */ var $55=(($54+8)|0);
 /** @type {number} */ var $56=HEAP32[(($55)>>2)];
 /** @type {number} */ var $57=($56|0)==0;
 if($57){label=14;break;}else{label=12;break;}
 case 12: 
 /** @type {number} */ var $59=$1;
 /** @type {number} */ var $60=$n;
 /** @type {number} */ var $61=(($60)|0);
 /** @type {number} */ var $62=_iscleared($59,$61);
 /** @type {number} */ var $63=($62|0)!=0;
 if($63){label=13;break;}else{label=14;break;}
 case 13: 
 /** @type {number} */ var $65=$n;
 /** @type {number} */ var $66=(($65)|0);
 /** @type {number} */ var $67=(($66+8)|0);
 HEAP32[(($67)>>2)]=0;
 /** @type {number} */ var $68=$n;
 _removeentry($68);
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 /** @type {number} */ var $71=$n;
 /** @type {number} */ var $72=(($71+32)|0);
 $n=$72;
 label=10;break;
 case 16: 
 label=17;break;
 case 17: 
 /** @type {number} */ var $75=$2;
 /** @type {number} */ var $76=$75;
 /** @type {number} */ var $77=(($76+24)|0);
 /** @type {number} */ var $78=HEAP32[(($77)>>2)];
 $2=$78;
 label=2;break;
 case 18: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $g
 * @param {number} $l
 * @param {number} $f
 * @return {number}
 */
function _clearkeys($g,$l,$f){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $h;
 /** @type {number} */ var $n;
 /** @type {number} */ var $limit;
 $1=$g;
 $2=$l;
 $3=$f;
 label=2;break;
 case 2: 
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$3;
 /** @type {number} */ var $7=($5|0)!=($6|0);
 if($7){label=3;break;}else{label=12;break;}
 case 3: 
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=$9;
 $h=$10;
 /** @type {number} */ var $11=$h;
 /** @type {number} */ var $12=(($11+7)|0);
 /** @type {number} */ var $13=HEAP8[($12)];
 /** @type {number} */ var $14=($13&255);
 /** @type {number} */ var $15=1<<$14;
 /** @type {number} */ var $16=$h;
 /** @type {number} */ var $17=(($16+16)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=(($18+($15<<5))|0);
 $limit=$19;
 /** @type {number} */ var $20=$h;
 /** @type {number} */ var $21=(($20+16)|0);
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 /** @type {number} */ var $23=(($22)|0);
 $n=$23;
 label=4;break;
 case 4: 
 /** @type {number} */ var $25=$n;
 /** @type {number} */ var $26=$limit;
 /** @type {number} */ var $27=($25>>>0)<($26>>>0);
 if($27){label=5;break;}else{label=10;break;}
 case 5: 
 /** @type {number} */ var $29=$n;
 /** @type {number} */ var $30=(($29)|0);
 /** @type {number} */ var $31=(($30+8)|0);
 /** @type {number} */ var $32=HEAP32[(($31)>>2)];
 /** @type {number} */ var $33=($32|0)==0;
 if($33){label=8;break;}else{label=6;break;}
 case 6: 
 /** @type {number} */ var $35=$1;
 /** @type {number} */ var $36=$n;
 /** @type {number} */ var $37=(($36+16)|0);
 /** @type {number} */ var $38=$37;
 /** @type {number} */ var $39=_iscleared($35,$38);
 /** @type {number} */ var $40=($39|0)!=0;
 if($40){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $42=$n;
 /** @type {number} */ var $43=(($42)|0);
 /** @type {number} */ var $44=(($43+8)|0);
 HEAP32[(($44)>>2)]=0;
 /** @type {number} */ var $45=$n;
 _removeentry($45);
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 /** @type {number} */ var $48=$n;
 /** @type {number} */ var $49=(($48+32)|0);
 $n=$49;
 label=4;break;
 case 10: 
 label=11;break;
 case 11: 
 /** @type {number} */ var $52=$2;
 /** @type {number} */ var $53=$52;
 /** @type {number} */ var $54=(($53+24)|0);
 /** @type {number} */ var $55=HEAP32[(($54)>>2)];
 $2=$55;
 label=2;break;
 case 12: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $g
 * @param {number} $h
 * @return {number}
 */
function _traverseweakvalue($g,$h){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $n;
 /** @type {number} */ var $limit;
 /** @type {number} */ var $hasclears;
 $1=$g;
 $2=$h;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=(($3+7)|0);
 /** @type {number} */ var $5=HEAP8[($4)];
 /** @type {number} */ var $6=($5&255);
 /** @type {number} */ var $7=1<<$6;
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=(($8+16)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=(($10+($7<<5))|0);
 $limit=$11;
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=(($12+28)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=($14|0)>0;
 /** @type {number} */ var $16=($15&1);
 $hasclears=$16;
 /** @type {number} */ var $17=$2;
 /** @type {number} */ var $18=(($17+16)|0);
 /** @type {number} */ var $19=HEAP32[(($18)>>2)];
 /** @type {number} */ var $20=(($19)|0);
 $n=$20;
 label=2;break;
 case 2: 
 /** @type {number} */ var $22=$n;
 /** @type {number} */ var $23=$limit;
 /** @type {number} */ var $24=($22>>>0)<($23>>>0);
 if($24){label=3;break;}else{label=14;break;}
 case 3: 
 /** @type {number} */ var $26=$n;
 /** @type {number} */ var $27=(($26)|0);
 /** @type {number} */ var $28=(($27+8)|0);
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 /** @type {number} */ var $30=($29|0)==0;
 if($30){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $32=$n;
 _removeentry($32);
 label=12;break;
 case 5: 
 /** @type {number} */ var $34=$n;
 /** @type {number} */ var $35=(($34+16)|0);
 /** @type {number} */ var $36=$35;
 /** @type {number} */ var $37=(($36+8)|0);
 /** @type {number} */ var $38=HEAP32[(($37)>>2)];
 /** @type {number} */ var $39=$38&64;
 /** @type {number} */ var $40=($39|0)!=0;
 if($40){label=6;break;}else{label=8;break;}
 case 6: 
 /** @type {number} */ var $42=$n;
 /** @type {number} */ var $43=(($42+16)|0);
 /** @type {number} */ var $44=$43;
 /** @type {number} */ var $45=(($44)|0);
 /** @type {number} */ var $46=$45;
 /** @type {number} */ var $47=HEAP32[(($46)>>2)];
 /** @type {number} */ var $48=$47;
 /** @type {number} */ var $49=(($48+5)|0);
 /** @type {number} */ var $50=HEAP8[($49)];
 /** @type {number} */ var $51=($50&255);
 /** @type {number} */ var $52=$51&3;
 /** @type {number} */ var $53=($52|0)!=0;
 if($53){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $55=$1;
 /** @type {number} */ var $56=$n;
 /** @type {number} */ var $57=(($56+16)|0);
 /** @type {number} */ var $58=$57;
 /** @type {number} */ var $59=(($58)|0);
 /** @type {number} */ var $60=$59;
 /** @type {number} */ var $61=HEAP32[(($60)>>2)];
 _reallymarkobject($55,$61);
 label=8;break;
 case 8: 
 /** @type {number} */ var $63=$hasclears;
 /** @type {number} */ var $64=($63|0)!=0;
 if($64){label=11;break;}else{label=9;break;}
 case 9: 
 /** @type {number} */ var $66=$1;
 /** @type {number} */ var $67=$n;
 /** @type {number} */ var $68=(($67)|0);
 /** @type {number} */ var $69=_iscleared($66,$68);
 /** @type {number} */ var $70=($69|0)!=0;
 if($70){label=10;break;}else{label=11;break;}
 case 10: 
 $hasclears=1;
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 /** @type {number} */ var $75=$n;
 /** @type {number} */ var $76=(($75+32)|0);
 $n=$76;
 label=2;break;
 case 14: 
 /** @type {number} */ var $78=$hasclears;
 /** @type {number} */ var $79=($78|0)!=0;
 if($79){label=15;break;}else{label=16;break;}
 case 15: 
 /** @type {number} */ var $81=$1;
 /** @type {number} */ var $82=(($81+92)|0);
 /** @type {number} */ var $83=HEAP32[(($82)>>2)];
 /** @type {number} */ var $84=$2;
 /** @type {number} */ var $85=(($84+24)|0);
 HEAP32[(($85)>>2)]=$83;
 /** @type {number} */ var $86=$2;
 /** @type {number} */ var $87=$86;
 /** @type {number} */ var $88=$1;
 /** @type {number} */ var $89=(($88+92)|0);
 HEAP32[(($89)>>2)]=$87;
 label=17;break;
 case 16: 
 /** @type {number} */ var $91=$1;
 /** @type {number} */ var $92=(($91+88)|0);
 /** @type {number} */ var $93=HEAP32[(($92)>>2)];
 /** @type {number} */ var $94=$2;
 /** @type {number} */ var $95=(($94+24)|0);
 HEAP32[(($95)>>2)]=$93;
 /** @type {number} */ var $96=$2;
 /** @type {number} */ var $97=$96;
 /** @type {number} */ var $98=$1;
 /** @type {number} */ var $99=(($98+88)|0);
 HEAP32[(($99)>>2)]=$97;
 label=17;break;
 case 17: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $g
 * @param {number} $h
 * @return {number}
 */
function _traverseephemeron($g,$h){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $marked;
 /** @type {number} */ var $hasclears;
 /** @type {number} */ var $prop;
 /** @type {number} */ var $n;
 /** @type {number} */ var $limit;
 /** @type {number} */ var $i;
 $1=$g;
 $2=$h;
 $marked=0;
 $hasclears=0;
 $prop=0;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=(($3+7)|0);
 /** @type {number} */ var $5=HEAP8[($4)];
 /** @type {number} */ var $6=($5&255);
 /** @type {number} */ var $7=1<<$6;
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=(($8+16)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=(($10+($7<<5))|0);
 $limit=$11;
 $i=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $13=$i;
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=(($14+28)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=($13|0)<($16|0);
 if($17){label=3;break;}else{label=8;break;}
 case 3: 
 /** @type {number} */ var $19=$i;
 /** @type {number} */ var $20=$2;
 /** @type {number} */ var $21=(($20+12)|0);
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 /** @type {number} */ var $23=(($22+($19<<4))|0);
 /** @type {number} */ var $24=(($23+8)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=$25&64;
 /** @type {number} */ var $27=($26|0)!=0;
 if($27){label=4;break;}else{label=6;break;}
 case 4: 
 /** @type {number} */ var $29=$i;
 /** @type {number} */ var $30=$2;
 /** @type {number} */ var $31=(($30+12)|0);
 /** @type {number} */ var $32=HEAP32[(($31)>>2)];
 /** @type {number} */ var $33=(($32+($29<<4))|0);
 /** @type {number} */ var $34=(($33)|0);
 /** @type {number} */ var $35=$34;
 /** @type {number} */ var $36=HEAP32[(($35)>>2)];
 /** @type {number} */ var $37=$36;
 /** @type {number} */ var $38=(($37+5)|0);
 /** @type {number} */ var $39=HEAP8[($38)];
 /** @type {number} */ var $40=($39&255);
 /** @type {number} */ var $41=$40&3;
 /** @type {number} */ var $42=($41|0)!=0;
 if($42){label=5;break;}else{label=6;break;}
 case 5: 
 $marked=1;
 /** @type {number} */ var $44=$1;
 /** @type {number} */ var $45=$i;
 /** @type {number} */ var $46=$2;
 /** @type {number} */ var $47=(($46+12)|0);
 /** @type {number} */ var $48=HEAP32[(($47)>>2)];
 /** @type {number} */ var $49=(($48+($45<<4))|0);
 /** @type {number} */ var $50=(($49)|0);
 /** @type {number} */ var $51=$50;
 /** @type {number} */ var $52=HEAP32[(($51)>>2)];
 _reallymarkobject($44,$52);
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 /** @type {number} */ var $55=$i;
 /** @type {number} */ var $56=((($55)+(1))|0);
 $i=$56;
 label=2;break;
 case 8: 
 /** @type {number} */ var $58=$2;
 /** @type {number} */ var $59=(($58+16)|0);
 /** @type {number} */ var $60=HEAP32[(($59)>>2)];
 /** @type {number} */ var $61=(($60)|0);
 $n=$61;
 label=9;break;
 case 9: 
 /** @type {number} */ var $63=$n;
 /** @type {number} */ var $64=$limit;
 /** @type {number} */ var $65=($63>>>0)<($64>>>0);
 if($65){label=10;break;}else{label=24;break;}
 case 10: 
 /** @type {number} */ var $67=$n;
 /** @type {number} */ var $68=(($67)|0);
 /** @type {number} */ var $69=(($68+8)|0);
 /** @type {number} */ var $70=HEAP32[(($69)>>2)];
 /** @type {number} */ var $71=($70|0)==0;
 if($71){label=11;break;}else{label=12;break;}
 case 11: 
 /** @type {number} */ var $73=$n;
 _removeentry($73);
 label=22;break;
 case 12: 
 /** @type {number} */ var $75=$1;
 /** @type {number} */ var $76=$n;
 /** @type {number} */ var $77=(($76+16)|0);
 /** @type {number} */ var $78=$77;
 /** @type {number} */ var $79=_iscleared($75,$78);
 /** @type {number} */ var $80=($79|0)!=0;
 if($80){label=13;break;}else{label=17;break;}
 case 13: 
 $hasclears=1;
 /** @type {number} */ var $82=$n;
 /** @type {number} */ var $83=(($82)|0);
 /** @type {number} */ var $84=(($83+8)|0);
 /** @type {number} */ var $85=HEAP32[(($84)>>2)];
 /** @type {number} */ var $86=$85&64;
 /** @type {number} */ var $87=($86|0)!=0;
 if($87){label=14;break;}else{label=16;break;}
 case 14: 
 /** @type {number} */ var $89=$n;
 /** @type {number} */ var $90=(($89)|0);
 /** @type {number} */ var $91=(($90)|0);
 /** @type {number} */ var $92=$91;
 /** @type {number} */ var $93=HEAP32[(($92)>>2)];
 /** @type {number} */ var $94=$93;
 /** @type {number} */ var $95=(($94+5)|0);
 /** @type {number} */ var $96=HEAP8[($95)];
 /** @type {number} */ var $97=($96&255);
 /** @type {number} */ var $98=$97&3;
 /** @type {number} */ var $99=($98|0)!=0;
 if($99){label=15;break;}else{label=16;break;}
 case 15: 
 $prop=1;
 label=16;break;
 case 16: 
 label=21;break;
 case 17: 
 /** @type {number} */ var $103=$n;
 /** @type {number} */ var $104=(($103)|0);
 /** @type {number} */ var $105=(($104+8)|0);
 /** @type {number} */ var $106=HEAP32[(($105)>>2)];
 /** @type {number} */ var $107=$106&64;
 /** @type {number} */ var $108=($107|0)!=0;
 if($108){label=18;break;}else{label=20;break;}
 case 18: 
 /** @type {number} */ var $110=$n;
 /** @type {number} */ var $111=(($110)|0);
 /** @type {number} */ var $112=(($111)|0);
 /** @type {number} */ var $113=$112;
 /** @type {number} */ var $114=HEAP32[(($113)>>2)];
 /** @type {number} */ var $115=$114;
 /** @type {number} */ var $116=(($115+5)|0);
 /** @type {number} */ var $117=HEAP8[($116)];
 /** @type {number} */ var $118=($117&255);
 /** @type {number} */ var $119=$118&3;
 /** @type {number} */ var $120=($119|0)!=0;
 if($120){label=19;break;}else{label=20;break;}
 case 19: 
 $marked=1;
 /** @type {number} */ var $122=$1;
 /** @type {number} */ var $123=$n;
 /** @type {number} */ var $124=(($123)|0);
 /** @type {number} */ var $125=(($124)|0);
 /** @type {number} */ var $126=$125;
 /** @type {number} */ var $127=HEAP32[(($126)>>2)];
 _reallymarkobject($122,$127);
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 /** @type {number} */ var $132=$n;
 /** @type {number} */ var $133=(($132+32)|0);
 $n=$133;
 label=9;break;
 case 24: 
 /** @type {number} */ var $135=$prop;
 /** @type {number} */ var $136=($135|0)!=0;
 if($136){label=25;break;}else{label=26;break;}
 case 25: 
 /** @type {number} */ var $138=$1;
 /** @type {number} */ var $139=(($138+96)|0);
 /** @type {number} */ var $140=HEAP32[(($139)>>2)];
 /** @type {number} */ var $141=$2;
 /** @type {number} */ var $142=(($141+24)|0);
 HEAP32[(($142)>>2)]=$140;
 /** @type {number} */ var $143=$2;
 /** @type {number} */ var $144=$143;
 /** @type {number} */ var $145=$1;
 /** @type {number} */ var $146=(($145+96)|0);
 HEAP32[(($146)>>2)]=$144;
 label=30;break;
 case 26: 
 /** @type {number} */ var $148=$hasclears;
 /** @type {number} */ var $149=($148|0)!=0;
 if($149){label=27;break;}else{label=28;break;}
 case 27: 
 /** @type {number} */ var $151=$1;
 /** @type {number} */ var $152=(($151+100)|0);
 /** @type {number} */ var $153=HEAP32[(($152)>>2)];
 /** @type {number} */ var $154=$2;
 /** @type {number} */ var $155=(($154+24)|0);
 HEAP32[(($155)>>2)]=$153;
 /** @type {number} */ var $156=$2;
 /** @type {number} */ var $157=$156;
 /** @type {number} */ var $158=$1;
 /** @type {number} */ var $159=(($158+100)|0);
 HEAP32[(($159)>>2)]=$157;
 label=29;break;
 case 28: 
 /** @type {number} */ var $161=$1;
 /** @type {number} */ var $162=(($161+88)|0);
 /** @type {number} */ var $163=HEAP32[(($162)>>2)];
 /** @type {number} */ var $164=$2;
 /** @type {number} */ var $165=(($164+24)|0);
 HEAP32[(($165)>>2)]=$163;
 /** @type {number} */ var $166=$2;
 /** @type {number} */ var $167=$166;
 /** @type {number} */ var $168=$1;
 /** @type {number} */ var $169=(($168+88)|0);
 HEAP32[(($169)>>2)]=$167;
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 /** @type {number} */ var $172=$marked;
 STACKTOP=sp;return $172;
 }
}
/**
 * @param {number} $g
 * @param {number} $h
 * @return {number}
 */
function _traversestrongtable($g,$h){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $n;
 /** @type {number} */ var $limit;
 /** @type {number} */ var $i;
 $1=$g;
 $2=$h;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=(($3+7)|0);
 /** @type {number} */ var $5=HEAP8[($4)];
 /** @type {number} */ var $6=($5&255);
 /** @type {number} */ var $7=1<<$6;
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=(($8+16)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=(($10+($7<<5))|0);
 $limit=$11;
 $i=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $13=$i;
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=(($14+28)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=($13|0)<($16|0);
 if($17){label=3;break;}else{label=8;break;}
 case 3: 
 /** @type {number} */ var $19=$i;
 /** @type {number} */ var $20=$2;
 /** @type {number} */ var $21=(($20+12)|0);
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 /** @type {number} */ var $23=(($22+($19<<4))|0);
 /** @type {number} */ var $24=(($23+8)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=$25&64;
 /** @type {number} */ var $27=($26|0)!=0;
 if($27){label=4;break;}else{label=6;break;}
 case 4: 
 /** @type {number} */ var $29=$i;
 /** @type {number} */ var $30=$2;
 /** @type {number} */ var $31=(($30+12)|0);
 /** @type {number} */ var $32=HEAP32[(($31)>>2)];
 /** @type {number} */ var $33=(($32+($29<<4))|0);
 /** @type {number} */ var $34=(($33)|0);
 /** @type {number} */ var $35=$34;
 /** @type {number} */ var $36=HEAP32[(($35)>>2)];
 /** @type {number} */ var $37=$36;
 /** @type {number} */ var $38=(($37+5)|0);
 /** @type {number} */ var $39=HEAP8[($38)];
 /** @type {number} */ var $40=($39&255);
 /** @type {number} */ var $41=$40&3;
 /** @type {number} */ var $42=($41|0)!=0;
 if($42){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $44=$1;
 /** @type {number} */ var $45=$i;
 /** @type {number} */ var $46=$2;
 /** @type {number} */ var $47=(($46+12)|0);
 /** @type {number} */ var $48=HEAP32[(($47)>>2)];
 /** @type {number} */ var $49=(($48+($45<<4))|0);
 /** @type {number} */ var $50=(($49)|0);
 /** @type {number} */ var $51=$50;
 /** @type {number} */ var $52=HEAP32[(($51)>>2)];
 _reallymarkobject($44,$52);
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 /** @type {number} */ var $55=$i;
 /** @type {number} */ var $56=((($55)+(1))|0);
 $i=$56;
 label=2;break;
 case 8: 
 /** @type {number} */ var $58=$2;
 /** @type {number} */ var $59=(($58+16)|0);
 /** @type {number} */ var $60=HEAP32[(($59)>>2)];
 /** @type {number} */ var $61=(($60)|0);
 $n=$61;
 label=9;break;
 case 9: 
 /** @type {number} */ var $63=$n;
 /** @type {number} */ var $64=$limit;
 /** @type {number} */ var $65=($63>>>0)<($64>>>0);
 if($65){label=10;break;}else{label=21;break;}
 case 10: 
 /** @type {number} */ var $67=$n;
 /** @type {number} */ var $68=(($67)|0);
 /** @type {number} */ var $69=(($68+8)|0);
 /** @type {number} */ var $70=HEAP32[(($69)>>2)];
 /** @type {number} */ var $71=($70|0)==0;
 if($71){label=11;break;}else{label=12;break;}
 case 11: 
 /** @type {number} */ var $73=$n;
 _removeentry($73);
 label=19;break;
 case 12: 
 /** @type {number} */ var $75=$n;
 /** @type {number} */ var $76=(($75+16)|0);
 /** @type {number} */ var $77=$76;
 /** @type {number} */ var $78=(($77+8)|0);
 /** @type {number} */ var $79=HEAP32[(($78)>>2)];
 /** @type {number} */ var $80=$79&64;
 /** @type {number} */ var $81=($80|0)!=0;
 if($81){label=13;break;}else{label=15;break;}
 case 13: 
 /** @type {number} */ var $83=$n;
 /** @type {number} */ var $84=(($83+16)|0);
 /** @type {number} */ var $85=$84;
 /** @type {number} */ var $86=(($85)|0);
 /** @type {number} */ var $87=$86;
 /** @type {number} */ var $88=HEAP32[(($87)>>2)];
 /** @type {number} */ var $89=$88;
 /** @type {number} */ var $90=(($89+5)|0);
 /** @type {number} */ var $91=HEAP8[($90)];
 /** @type {number} */ var $92=($91&255);
 /** @type {number} */ var $93=$92&3;
 /** @type {number} */ var $94=($93|0)!=0;
 if($94){label=14;break;}else{label=15;break;}
 case 14: 
 /** @type {number} */ var $96=$1;
 /** @type {number} */ var $97=$n;
 /** @type {number} */ var $98=(($97+16)|0);
 /** @type {number} */ var $99=$98;
 /** @type {number} */ var $100=(($99)|0);
 /** @type {number} */ var $101=$100;
 /** @type {number} */ var $102=HEAP32[(($101)>>2)];
 _reallymarkobject($96,$102);
 label=15;break;
 case 15: 
 /** @type {number} */ var $104=$n;
 /** @type {number} */ var $105=(($104)|0);
 /** @type {number} */ var $106=(($105+8)|0);
 /** @type {number} */ var $107=HEAP32[(($106)>>2)];
 /** @type {number} */ var $108=$107&64;
 /** @type {number} */ var $109=($108|0)!=0;
 if($109){label=16;break;}else{label=18;break;}
 case 16: 
 /** @type {number} */ var $111=$n;
 /** @type {number} */ var $112=(($111)|0);
 /** @type {number} */ var $113=(($112)|0);
 /** @type {number} */ var $114=$113;
 /** @type {number} */ var $115=HEAP32[(($114)>>2)];
 /** @type {number} */ var $116=$115;
 /** @type {number} */ var $117=(($116+5)|0);
 /** @type {number} */ var $118=HEAP8[($117)];
 /** @type {number} */ var $119=($118&255);
 /** @type {number} */ var $120=$119&3;
 /** @type {number} */ var $121=($120|0)!=0;
 if($121){label=17;break;}else{label=18;break;}
 case 17: 
 /** @type {number} */ var $123=$1;
 /** @type {number} */ var $124=$n;
 /** @type {number} */ var $125=(($124)|0);
 /** @type {number} */ var $126=(($125)|0);
 /** @type {number} */ var $127=$126;
 /** @type {number} */ var $128=HEAP32[(($127)>>2)];
 _reallymarkobject($123,$128);
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 label=20;break;
 case 20: 
 /** @type {number} */ var $132=$n;
 /** @type {number} */ var $133=(($132+32)|0);
 $n=$133;
 label=9;break;
 case 21: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $g
 * @param {number} $l
 * @return {number}
 */
function _propagatelist($g,$l){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$g;
 $2=$l;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+84)|0);
 HEAP32[(($5)>>2)]=$3;
 /** @type {number} */ var $6=$1;
 _propagateall($6);
 STACKTOP=sp;return;
}
/**
 * @param {number} $g
 * @param {number} $o
 * @return {number}
 */
function _iscleared($g,$o){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $2=$g;
 $3=$o;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=(($4+8)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=$6&64;
 /** @type {number} */ var $8=($7|0)!=0;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 $1=0;
 label=9;break;
 case 3: 
 /** @type {number} */ var $11=$3;
 /** @type {number} */ var $12=(($11+8)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=$13&15;
 /** @type {number} */ var $15=($14|0)==4;
 if($15){label=4;break;}else{label=8;break;}
 case 4: 
 /** @type {number} */ var $17=$3;
 /** @type {number} */ var $18=(($17)|0);
 /** @type {number} */ var $19=$18;
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=$20;
 /** @type {number} */ var $22=($21|0)!=0;
 if($22){label=5;break;}else{label=7;break;}
 case 5: 
 /** @type {number} */ var $24=$3;
 /** @type {number} */ var $25=(($24)|0);
 /** @type {number} */ var $26=$25;
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=$27;
 /** @type {number} */ var $29=$28;
 /** @type {number} */ var $30=$29;
 /** @type {number} */ var $31=(($30+5)|0);
 /** @type {number} */ var $32=HEAP8[($31)];
 /** @type {number} */ var $33=($32&255);
 /** @type {number} */ var $34=$33&3;
 /** @type {number} */ var $35=($34|0)!=0;
 if($35){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $37=$2;
 /** @type {number} */ var $38=$3;
 /** @type {number} */ var $39=(($38)|0);
 /** @type {number} */ var $40=$39;
 /** @type {number} */ var $41=HEAP32[(($40)>>2)];
 /** @type {number} */ var $42=$41;
 /** @type {number} */ var $43=$42;
 _reallymarkobject($37,$43);
 label=7;break;
 case 7: 
 $1=0;
 label=9;break;
 case 8: 
 /** @type {number} */ var $46=$3;
 /** @type {number} */ var $47=(($46)|0);
 /** @type {number} */ var $48=$47;
 /** @type {number} */ var $49=HEAP32[(($48)>>2)];
 /** @type {number} */ var $50=$49;
 /** @type {number} */ var $51=(($50+5)|0);
 /** @type {number} */ var $52=HEAP8[($51)];
 /** @type {number} */ var $53=($52&255);
 /** @type {number} */ var $54=$53&3;
 $1=$54;
 label=9;break;
 case 9: 
 /** @type {number} */ var $56=$1;
 STACKTOP=sp;return $56;
 }
}
/**
 * @param {number} $n
 * @return {number}
 */
function _removeentry($n){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 $1=$n;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+16)|0);
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=(($4+8)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=$6&64;
 /** @type {number} */ var $8=($7|0)!=0;
 if($8){label=2;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=(($10+16)|0);
 /** @type {number} */ var $12=$11;
 /** @type {number} */ var $13=(($12)|0);
 /** @type {number} */ var $14=$13;
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=$15;
 /** @type {number} */ var $17=(($16+5)|0);
 /** @type {number} */ var $18=HEAP8[($17)];
 /** @type {number} */ var $19=($18&255);
 /** @type {number} */ var $20=$19&3;
 /** @type {number} */ var $21=($20|0)!=0;
 if($21){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $23=$1;
 /** @type {number} */ var $24=(($23+16)|0);
 /** @type {number} */ var $25=$24;
 /** @type {number} */ var $26=(($25+8)|0);
 HEAP32[(($26)>>2)]=11;
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaX_init($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $i;
 /** @type {number} */ var $ts;
 $1=$L;
 $i=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $3=$i;
 /** @type {number} */ var $4=($3|0)<22;
 if($4){label=3;break;}else{label=5;break;}
 case 3: 
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=$i;
 /** @type {number} */ var $8=((984+($7<<2))|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=_luaS_new($6,$9);
 $ts=$10;
 /** @type {number} */ var $11=$ts;
 /** @type {number} */ var $12=$11;
 /** @type {number} */ var $13=(($12+5)|0);
 /** @type {number} */ var $14=HEAP8[($13)];
 /** @type {number} */ var $15=($14&255);
 /** @type {number} */ var $16=$15|32;
 /** @type {number} */ var $17=(($16)&255);
 HEAP8[($13)]=$17;
 /** @type {number} */ var $18=$i;
 /** @type {number} */ var $19=((($18)+(1))|0);
 /** @type {number} */ var $20=(($19)&255);
 /** @type {number} */ var $21=$ts;
 /** @type {number} */ var $22=$21;
 /** @type {number} */ var $23=(($22+6)|0);
 HEAP8[($23)]=$20;
 label=4;break;
 case 4: 
 /** @type {number} */ var $25=$i;
 /** @type {number} */ var $26=((($25)+(1))|0);
 $i=$26;
 label=2;break;
 case 5: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $token
 * @return {number}
 */
function _luaX_token2str($ls,$token){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $s;
 $2=$ls;
 $3=$token;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=($4|0)<257;
 if($5){label=2;break;}else{label=6;break;}
 case 2: 
 /** @type {number} */ var $7=$3;
 /** @type {number} */ var $8=((($7)+(1))|0);
 /** @type {number} */ var $9=((704+$8)|0);
 /** @type {number} */ var $10=HEAP8[($9)];
 /** @type {number} */ var $11=($10&255);
 /** @type {number} */ var $12=$11&4;
 /** @type {number} */ var $13=($12|0)!=0;
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $15=$2;
 /** @type {number} */ var $16=(($15+52)|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=$3;
 /** @type {number} */ var $19=_luaO_pushfstring($17,3144,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$18,tempVarArgs)); STACKTOP=tempVarArgs;
 var $27=$19;label=5;break;
 case 4: 
 /** @type {number} */ var $21=$2;
 /** @type {number} */ var $22=(($21+52)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 /** @type {number} */ var $24=$3;
 /** @type {number} */ var $25=_luaO_pushfstring($23,9936,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$24,tempVarArgs)); STACKTOP=tempVarArgs;
 var $27=$25;label=5;break;
 case 5: 
 var $27;
 $1=$27;
 label=9;break;
 case 6: 
 /** @type {number} */ var $29=$3;
 /** @type {number} */ var $30=((($29)-(257))|0);
 /** @type {number} */ var $31=((984+($30<<2))|0);
 /** @type {number} */ var $32=HEAP32[(($31)>>2)];
 $s=$32;
 /** @type {number} */ var $33=$3;
 /** @type {number} */ var $34=($33|0)<286;
 if($34){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $36=$2;
 /** @type {number} */ var $37=(($36+52)|0);
 /** @type {number} */ var $38=HEAP32[(($37)>>2)];
 /** @type {number} */ var $39=$s;
 /** @type {number} */ var $40=_luaO_pushfstring($38,7664,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$39,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=$40;
 label=9;break;
 case 8: 
 /** @type {number} */ var $42=$s;
 $1=$42;
 label=9;break;
 case 9: 
 /** @type {number} */ var $44=$1;
 STACKTOP=sp;return $44;
 }
}
/**
 * @param {number} $ls
 * @param {number} $msg
 * @return {number}
 */
function _luaX_syntaxerror($ls,$msg){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$ls;
 $2=$msg;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($5+16)|0);
 /** @type {number} */ var $7=(($6)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 _lexerror($3,$4,$8);
 STACKTOP=sp;return;
}
/**
 * @param {number} $ls
 * @param {number} $str
 * @param {number} $l
 * @return {number}
 */
function _luaX_newstring($ls,$str,$l){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $L;
 /** @type {number} */ var $o;
 /** @type {number} */ var $ts;
 /** @type {number} */ var $io;
 /** @type {number} */ var $x_;
 /** @type {number} */ var $io1;
 $1=$ls;
 $2=$str;
 $3=$l;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+52)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 $L=$6;
 /** @type {number} */ var $7=$L;
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=$3;
 /** @type {number} */ var $10=_luaS_newlstr($7,$8,$9);
 $ts=$10;
 /** @type {number} */ var $11=$L;
 /** @type {number} */ var $12=(($11+8)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=(($13+16)|0);
 HEAP32[(($12)>>2)]=$14;
 $io=$13;
 /** @type {number} */ var $15=$ts;
 $x_=$15;
 /** @type {number} */ var $16=$x_;
 /** @type {number} */ var $17=$16;
 /** @type {number} */ var $18=$io;
 /** @type {number} */ var $19=(($18)|0);
 /** @type {number} */ var $20=$19;
 HEAP32[(($20)>>2)]=$17;
 /** @type {number} */ var $21=$x_;
 /** @type {number} */ var $22=$21;
 /** @type {number} */ var $23=(($22+4)|0);
 /** @type {number} */ var $24=HEAP8[($23)];
 /** @type {number} */ var $25=($24&255);
 /** @type {number} */ var $26=$25|64;
 /** @type {number} */ var $27=$io;
 /** @type {number} */ var $28=(($27+8)|0);
 HEAP32[(($28)>>2)]=$26;
 /** @type {number} */ var $29=$L;
 /** @type {number} */ var $30=$1;
 /** @type {number} */ var $31=(($30+48)|0);
 /** @type {number} */ var $32=HEAP32[(($31)>>2)];
 /** @type {number} */ var $33=(($32+4)|0);
 /** @type {number} */ var $34=HEAP32[(($33)>>2)];
 /** @type {number} */ var $35=$L;
 /** @type {number} */ var $36=(($35+8)|0);
 /** @type {number} */ var $37=HEAP32[(($36)>>2)];
 /** @type {number} */ var $38=((($37)-(16))|0);
 /** @type {number} */ var $39=_luaH_set($29,$34,$38);
 $o=$39;
 /** @type {number} */ var $40=$o;
 /** @type {number} */ var $41=(($40+8)|0);
 /** @type {number} */ var $42=HEAP32[(($41)>>2)];
 /** @type {number} */ var $43=($42|0)==0;
 if($43){label=2;break;}else{label=5;break;}
 case 2: 
 /** @type {number} */ var $45=$o;
 $io1=$45;
 /** @type {number} */ var $46=$io1;
 /** @type {number} */ var $47=(($46)|0);
 /** @type {number} */ var $48=$47;
 HEAP32[(($48)>>2)]=1;
 /** @type {number} */ var $49=$io1;
 /** @type {number} */ var $50=(($49+8)|0);
 HEAP32[(($50)>>2)]=1;
 /** @type {number} */ var $51=$L;
 /** @type {number} */ var $52=(($51+12)|0);
 /** @type {number} */ var $53=HEAP32[(($52)>>2)];
 /** @type {number} */ var $54=(($53+12)|0);
 /** @type {number} */ var $55=HEAP32[(($54)>>2)];
 /** @type {number} */ var $56=($55|0)>0;
 if($56){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $58=$L;
 _luaC_step($58);
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 /** @type {number} */ var $61=$L;
 /** @type {number} */ var $62=(($61+8)|0);
 /** @type {number} */ var $63=HEAP32[(($62)>>2)];
 /** @type {number} */ var $64=((($63)-(16))|0);
 HEAP32[(($62)>>2)]=$64;
 /** @type {number} */ var $65=$ts;
 STACKTOP=sp;return $65;
 }
}
/**
 * @param {number} $L
 * @param {number} $ls
 * @param {number} $z
 * @param {number} $source
 * @param {number} $firstchar
 * @return {number}
 */
function _luaX_setinput($L,$ls,$z,$source,$firstchar){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 $1=$L;
 $2=$ls;
 $3=$z;
 $4=$source;
 $5=$firstchar;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=(($6+76)|0);
 HEAP8[($7)]=46;
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=(($9+52)|0);
 HEAP32[(($10)>>2)]=$8;
 /** @type {number} */ var $11=$5;
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=(($12)|0);
 HEAP32[(($13)>>2)]=$11;
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=(($14+32)|0);
 /** @type {number} */ var $16=(($15)|0);
 HEAP32[(($16)>>2)]=286;
 /** @type {number} */ var $17=$3;
 /** @type {number} */ var $18=$2;
 /** @type {number} */ var $19=(($18+56)|0);
 HEAP32[(($19)>>2)]=$17;
 /** @type {number} */ var $20=$2;
 /** @type {number} */ var $21=(($20+48)|0);
 HEAP32[(($21)>>2)]=0;
 /** @type {number} */ var $22=$2;
 /** @type {number} */ var $23=(($22+4)|0);
 HEAP32[(($23)>>2)]=1;
 /** @type {number} */ var $24=$2;
 /** @type {number} */ var $25=(($24+8)|0);
 HEAP32[(($25)>>2)]=1;
 /** @type {number} */ var $26=$4;
 /** @type {number} */ var $27=$2;
 /** @type {number} */ var $28=(($27+68)|0);
 HEAP32[(($28)>>2)]=$26;
 /** @type {number} */ var $29=$1;
 /** @type {number} */ var $30=_luaS_new($29,6024);
 /** @type {number} */ var $31=$2;
 /** @type {number} */ var $32=(($31+72)|0);
 HEAP32[(($32)>>2)]=$30;
 /** @type {number} */ var $33=$2;
 /** @type {number} */ var $34=(($33+72)|0);
 /** @type {number} */ var $35=HEAP32[(($34)>>2)];
 /** @type {number} */ var $36=$35;
 /** @type {number} */ var $37=(($36+5)|0);
 /** @type {number} */ var $38=HEAP8[($37)];
 /** @type {number} */ var $39=($38&255);
 /** @type {number} */ var $40=$39|32;
 /** @type {number} */ var $41=(($40)&255);
 HEAP8[($37)]=$41;
 /** @type {number} */ var $42=$2;
 /** @type {number} */ var $43=(($42+52)|0);
 /** @type {number} */ var $44=HEAP32[(($43)>>2)];
 /** @type {number} */ var $45=$2;
 /** @type {number} */ var $46=(($45+60)|0);
 /** @type {number} */ var $47=HEAP32[(($46)>>2)];
 /** @type {number} */ var $48=(($47)|0);
 /** @type {number} */ var $49=HEAP32[(($48)>>2)];
 /** @type {number} */ var $50=$2;
 /** @type {number} */ var $51=(($50+60)|0);
 /** @type {number} */ var $52=HEAP32[(($51)>>2)];
 /** @type {number} */ var $53=(($52+8)|0);
 /** @type {number} */ var $54=HEAP32[(($53)>>2)];
 /** @type {number} */ var $55=$54;
 /** @type {number} */ var $56=_luaM_realloc_($44,$49,$55,32);
 /** @type {number} */ var $57=$2;
 /** @type {number} */ var $58=(($57+60)|0);
 /** @type {number} */ var $59=HEAP32[(($58)>>2)];
 /** @type {number} */ var $60=(($59)|0);
 HEAP32[(($60)>>2)]=$56;
 /** @type {number} */ var $61=$2;
 /** @type {number} */ var $62=(($61+60)|0);
 /** @type {number} */ var $63=HEAP32[(($62)>>2)];
 /** @type {number} */ var $64=(($63+8)|0);
 HEAP32[(($64)>>2)]=32;
 STACKTOP=sp;return;
}
/**
 * @param {number} $ls
 * @return {number}
 */
function _luaX_next($ls){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 $1=$ls;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+4)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($5+8)|0);
 HEAP32[(($6)>>2)]=$4;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=(($7+32)|0);
 /** @type {number} */ var $9=(($8)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=($10|0)!=286;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=(($13+16)|0);
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=(($15+32)|0);
 /** @type {number} */ var $17=$14;
 /** @type {number} */ var $18=$16;
 HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];HEAP32[((($17)+(12))>>2)]=HEAP32[((($18)+(12))>>2)];
 /** @type {number} */ var $19=$1;
 /** @type {number} */ var $20=(($19+32)|0);
 /** @type {number} */ var $21=(($20)|0);
 HEAP32[(($21)>>2)]=286;
 label=4;break;
 case 3: 
 /** @type {number} */ var $23=$1;
 /** @type {number} */ var $24=$1;
 /** @type {number} */ var $25=(($24+16)|0);
 /** @type {number} */ var $26=(($25+8)|0);
 /** @type {number} */ var $27=_llex($23,$26);
 /** @type {number} */ var $28=$1;
 /** @type {number} */ var $29=(($28+16)|0);
 /** @type {number} */ var $30=(($29)|0);
 HEAP32[(($30)>>2)]=$27;
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @return {number}
 */
function _luaX_lookahead($ls){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$ls;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+32)|0);
 /** @type {number} */ var $5=(($4+8)|0);
 /** @type {number} */ var $6=_llex($2,$5);
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=(($7+32)|0);
 /** @type {number} */ var $9=(($8)|0);
 HEAP32[(($9)>>2)]=$6;
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=(($10+32)|0);
 /** @type {number} */ var $12=(($11)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 STACKTOP=sp;return $13;
}
/**
 * @param {number} $ls
 * @param {number} $msg
 * @param {number} $token
 * @return {number}
 */
function _lexerror($ls,$msg,$token){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $buff=sp;
 $1=$ls;
 $2=$msg;
 $3=$token;
 /** @type {number} */ var $4=(($buff)|0);
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($5+68)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=(($7+16)|0);
 /** @type {number} */ var $9=$8;
 _luaO_chunkid($4,$9,60);
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=(($10+52)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=(($buff)|0);
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=(($14+4)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=$2;
 /** @type {number} */ var $18=_luaO_pushfstring($12,9504,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,HEAP32[((tempVarArgs)>>2)]=$13,HEAP32[(((tempVarArgs)+(8))>>2)]=$16,HEAP32[(((tempVarArgs)+(16))>>2)]=$17,tempVarArgs)); STACKTOP=tempVarArgs;
 $2=$18;
 /** @type {number} */ var $19=$3;
 /** @type {number} */ var $20=($19|0)!=0;
 if($20){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $22=$1;
 /** @type {number} */ var $23=(($22+52)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=$2;
 /** @type {number} */ var $26=$1;
 /** @type {number} */ var $27=$3;
 /** @type {number} */ var $28=_txtToken($26,$27);
 /** @type {number} */ var $29=_luaO_pushfstring($24,9264,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$25,HEAP32[(((tempVarArgs)+(8))>>2)]=$28,tempVarArgs)); STACKTOP=tempVarArgs;
 label=3;break;
 case 3: 
 /** @type {number} */ var $31=$1;
 /** @type {number} */ var $32=(($31+52)|0);
 /** @type {number} */ var $33=HEAP32[(($32)>>2)];
 _luaD_throw($33,3);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $seminfo
 * @return {number}
 */
function _llex($ls,$seminfo){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $sep;
 /** @type {number} */ var $sep1;
 /** @type {number} */ var $ts;
 /** @type {number} */ var $c;
 $2=$ls;
 $3=$seminfo;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=(($4+60)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=(($6+4)|0);
 HEAP32[(($7)>>2)]=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=(($9)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 switch(($11|0)){case 10:case 13:{ label=3;break;}case 91:{ label=30;break;}case 61:{ label=35;break;}case 32:case 12:case 9:case 11:{ label=4;break;}case 60:{ label=44;break;}case 62:{ label=53;break;}case 126:{ label=62;break;}case 58:{ label=71;break;}case 45:{ label=8;break;}case 34:case 39:{ label=80;break;}case 46:{ label=81;break;}case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:{ label=92;break;}case -1:{ label=93;break;}default:{label=94;break;}}break;
 case 3: 
 /** @type {number} */ var $13=$2;
 _inclinenumber($13);
 label=109;break;
 case 4: 
 /** @type {number} */ var $15=$2;
 /** @type {number} */ var $16=(($15+56)|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=(($17)|0);
 /** @type {number} */ var $19=HEAP32[(($18)>>2)];
 /** @type {number} */ var $20=((($19)-(1))|0);
 HEAP32[(($18)>>2)]=$20;
 /** @type {number} */ var $21=($19>>>0)>0;
 if($21){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $23=$2;
 /** @type {number} */ var $24=(($23+56)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=(($25+4)|0);
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=(($27+1)|0);
 HEAP32[(($26)>>2)]=$28;
 /** @type {number} */ var $29=HEAP8[($27)];
 /** @type {number} */ var $30=($29&255);
 var $37=$30;label=7;break;
 case 6: 
 /** @type {number} */ var $32=$2;
 /** @type {number} */ var $33=(($32+56)|0);
 /** @type {number} */ var $34=HEAP32[(($33)>>2)];
 /** @type {number} */ var $35=_luaZ_fill($34);
 var $37=$35;label=7;break;
 case 7: 
 var $37;
 /** @type {number} */ var $38=$2;
 /** @type {number} */ var $39=(($38)|0);
 HEAP32[(($39)>>2)]=$37;
 label=109;break;
 case 8: 
 /** @type {number} */ var $41=$2;
 /** @type {number} */ var $42=(($41+56)|0);
 /** @type {number} */ var $43=HEAP32[(($42)>>2)];
 /** @type {number} */ var $44=(($43)|0);
 /** @type {number} */ var $45=HEAP32[(($44)>>2)];
 /** @type {number} */ var $46=((($45)-(1))|0);
 HEAP32[(($44)>>2)]=$46;
 /** @type {number} */ var $47=($45>>>0)>0;
 if($47){label=9;break;}else{label=10;break;}
 case 9: 
 /** @type {number} */ var $49=$2;
 /** @type {number} */ var $50=(($49+56)|0);
 /** @type {number} */ var $51=HEAP32[(($50)>>2)];
 /** @type {number} */ var $52=(($51+4)|0);
 /** @type {number} */ var $53=HEAP32[(($52)>>2)];
 /** @type {number} */ var $54=(($53+1)|0);
 HEAP32[(($52)>>2)]=$54;
 /** @type {number} */ var $55=HEAP8[($53)];
 /** @type {number} */ var $56=($55&255);
 var $63=$56;label=11;break;
 case 10: 
 /** @type {number} */ var $58=$2;
 /** @type {number} */ var $59=(($58+56)|0);
 /** @type {number} */ var $60=HEAP32[(($59)>>2)];
 /** @type {number} */ var $61=_luaZ_fill($60);
 var $63=$61;label=11;break;
 case 11: 
 var $63;
 /** @type {number} */ var $64=$2;
 /** @type {number} */ var $65=(($64)|0);
 HEAP32[(($65)>>2)]=$63;
 /** @type {number} */ var $66=$2;
 /** @type {number} */ var $67=(($66)|0);
 /** @type {number} */ var $68=HEAP32[(($67)>>2)];
 /** @type {number} */ var $69=($68|0)!=45;
 if($69){label=12;break;}else{label=13;break;}
 case 12: 
 $1=45;
 label=110;break;
 case 13: 
 /** @type {number} */ var $72=$2;
 /** @type {number} */ var $73=(($72+56)|0);
 /** @type {number} */ var $74=HEAP32[(($73)>>2)];
 /** @type {number} */ var $75=(($74)|0);
 /** @type {number} */ var $76=HEAP32[(($75)>>2)];
 /** @type {number} */ var $77=((($76)-(1))|0);
 HEAP32[(($75)>>2)]=$77;
 /** @type {number} */ var $78=($76>>>0)>0;
 if($78){label=14;break;}else{label=15;break;}
 case 14: 
 /** @type {number} */ var $80=$2;
 /** @type {number} */ var $81=(($80+56)|0);
 /** @type {number} */ var $82=HEAP32[(($81)>>2)];
 /** @type {number} */ var $83=(($82+4)|0);
 /** @type {number} */ var $84=HEAP32[(($83)>>2)];
 /** @type {number} */ var $85=(($84+1)|0);
 HEAP32[(($83)>>2)]=$85;
 /** @type {number} */ var $86=HEAP8[($84)];
 /** @type {number} */ var $87=($86&255);
 var $94=$87;label=16;break;
 case 15: 
 /** @type {number} */ var $89=$2;
 /** @type {number} */ var $90=(($89+56)|0);
 /** @type {number} */ var $91=HEAP32[(($90)>>2)];
 /** @type {number} */ var $92=_luaZ_fill($91);
 var $94=$92;label=16;break;
 case 16: 
 var $94;
 /** @type {number} */ var $95=$2;
 /** @type {number} */ var $96=(($95)|0);
 HEAP32[(($96)>>2)]=$94;
 /** @type {number} */ var $97=$2;
 /** @type {number} */ var $98=(($97)|0);
 /** @type {number} */ var $99=HEAP32[(($98)>>2)];
 /** @type {number} */ var $100=($99|0)==91;
 if($100){label=17;break;}else{label=20;break;}
 case 17: 
 /** @type {number} */ var $102=$2;
 /** @type {number} */ var $103=_skip_sep($102);
 $sep=$103;
 /** @type {number} */ var $104=$2;
 /** @type {number} */ var $105=(($104+60)|0);
 /** @type {number} */ var $106=HEAP32[(($105)>>2)];
 /** @type {number} */ var $107=(($106+4)|0);
 HEAP32[(($107)>>2)]=0;
 /** @type {number} */ var $108=$sep;
 /** @type {number} */ var $109=($108|0)>=0;
 if($109){label=18;break;}else{label=19;break;}
 case 18: 
 /** @type {number} */ var $111=$2;
 /** @type {number} */ var $112=$sep;
 _read_long_string($111,0,$112);
 /** @type {number} */ var $113=$2;
 /** @type {number} */ var $114=(($113+60)|0);
 /** @type {number} */ var $115=HEAP32[(($114)>>2)];
 /** @type {number} */ var $116=(($115+4)|0);
 HEAP32[(($116)>>2)]=0;
 label=109;break;
 case 19: 
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 /** @type {number} */ var $120=$2;
 /** @type {number} */ var $121=(($120)|0);
 /** @type {number} */ var $122=HEAP32[(($121)>>2)];
 /** @type {number} */ var $123=($122|0)==10;
 if($123){var $135=0;label=24;break;}else{label=22;break;}
 case 22: 
 /** @type {number} */ var $125=$2;
 /** @type {number} */ var $126=(($125)|0);
 /** @type {number} */ var $127=HEAP32[(($126)>>2)];
 /** @type {number} */ var $128=($127|0)==13;
 if($128){var $135=0;label=24;break;}else{label=23;break;}
 case 23: 
 /** @type {number} */ var $130=$2;
 /** @type {number} */ var $131=(($130)|0);
 /** @type {number} */ var $132=HEAP32[(($131)>>2)];
 /** @type {number} */ var $133=($132|0)!=-1;
 var $135=$133;label=24;break;
 case 24: 
 var $135;
 if($135){label=25;break;}else{label=29;break;}
 case 25: 
 /** @type {number} */ var $137=$2;
 /** @type {number} */ var $138=(($137+56)|0);
 /** @type {number} */ var $139=HEAP32[(($138)>>2)];
 /** @type {number} */ var $140=(($139)|0);
 /** @type {number} */ var $141=HEAP32[(($140)>>2)];
 /** @type {number} */ var $142=((($141)-(1))|0);
 HEAP32[(($140)>>2)]=$142;
 /** @type {number} */ var $143=($141>>>0)>0;
 if($143){label=26;break;}else{label=27;break;}
 case 26: 
 /** @type {number} */ var $145=$2;
 /** @type {number} */ var $146=(($145+56)|0);
 /** @type {number} */ var $147=HEAP32[(($146)>>2)];
 /** @type {number} */ var $148=(($147+4)|0);
 /** @type {number} */ var $149=HEAP32[(($148)>>2)];
 /** @type {number} */ var $150=(($149+1)|0);
 HEAP32[(($148)>>2)]=$150;
 /** @type {number} */ var $151=HEAP8[($149)];
 /** @type {number} */ var $152=($151&255);
 var $159=$152;label=28;break;
 case 27: 
 /** @type {number} */ var $154=$2;
 /** @type {number} */ var $155=(($154+56)|0);
 /** @type {number} */ var $156=HEAP32[(($155)>>2)];
 /** @type {number} */ var $157=_luaZ_fill($156);
 var $159=$157;label=28;break;
 case 28: 
 var $159;
 /** @type {number} */ var $160=$2;
 /** @type {number} */ var $161=(($160)|0);
 HEAP32[(($161)>>2)]=$159;
 label=21;break;
 case 29: 
 label=109;break;
 case 30: 
 /** @type {number} */ var $164=$2;
 /** @type {number} */ var $165=_skip_sep($164);
 $sep1=$165;
 /** @type {number} */ var $166=$sep1;
 /** @type {number} */ var $167=($166|0)>=0;
 if($167){label=31;break;}else{label=32;break;}
 case 31: 
 /** @type {number} */ var $169=$2;
 /** @type {number} */ var $170=$3;
 /** @type {number} */ var $171=$sep1;
 _read_long_string($169,$170,$171);
 $1=289;
 label=110;break;
 case 32: 
 /** @type {number} */ var $173=$sep1;
 /** @type {number} */ var $174=($173|0)==-1;
 if($174){label=33;break;}else{label=34;break;}
 case 33: 
 $1=91;
 label=110;break;
 case 34: 
 /** @type {number} */ var $177=$2;
 _lexerror($177,4736,289);
 case 35: 
 /** @type {number} */ var $179=$2;
 /** @type {number} */ var $180=(($179+56)|0);
 /** @type {number} */ var $181=HEAP32[(($180)>>2)];
 /** @type {number} */ var $182=(($181)|0);
 /** @type {number} */ var $183=HEAP32[(($182)>>2)];
 /** @type {number} */ var $184=((($183)-(1))|0);
 HEAP32[(($182)>>2)]=$184;
 /** @type {number} */ var $185=($183>>>0)>0;
 if($185){label=36;break;}else{label=37;break;}
 case 36: 
 /** @type {number} */ var $187=$2;
 /** @type {number} */ var $188=(($187+56)|0);
 /** @type {number} */ var $189=HEAP32[(($188)>>2)];
 /** @type {number} */ var $190=(($189+4)|0);
 /** @type {number} */ var $191=HEAP32[(($190)>>2)];
 /** @type {number} */ var $192=(($191+1)|0);
 HEAP32[(($190)>>2)]=$192;
 /** @type {number} */ var $193=HEAP8[($191)];
 /** @type {number} */ var $194=($193&255);
 var $201=$194;label=38;break;
 case 37: 
 /** @type {number} */ var $196=$2;
 /** @type {number} */ var $197=(($196+56)|0);
 /** @type {number} */ var $198=HEAP32[(($197)>>2)];
 /** @type {number} */ var $199=_luaZ_fill($198);
 var $201=$199;label=38;break;
 case 38: 
 var $201;
 /** @type {number} */ var $202=$2;
 /** @type {number} */ var $203=(($202)|0);
 HEAP32[(($203)>>2)]=$201;
 /** @type {number} */ var $204=$2;
 /** @type {number} */ var $205=(($204)|0);
 /** @type {number} */ var $206=HEAP32[(($205)>>2)];
 /** @type {number} */ var $207=($206|0)!=61;
 if($207){label=39;break;}else{label=40;break;}
 case 39: 
 $1=61;
 label=110;break;
 case 40: 
 /** @type {number} */ var $210=$2;
 /** @type {number} */ var $211=(($210+56)|0);
 /** @type {number} */ var $212=HEAP32[(($211)>>2)];
 /** @type {number} */ var $213=(($212)|0);
 /** @type {number} */ var $214=HEAP32[(($213)>>2)];
 /** @type {number} */ var $215=((($214)-(1))|0);
 HEAP32[(($213)>>2)]=$215;
 /** @type {number} */ var $216=($214>>>0)>0;
 if($216){label=41;break;}else{label=42;break;}
 case 41: 
 /** @type {number} */ var $218=$2;
 /** @type {number} */ var $219=(($218+56)|0);
 /** @type {number} */ var $220=HEAP32[(($219)>>2)];
 /** @type {number} */ var $221=(($220+4)|0);
 /** @type {number} */ var $222=HEAP32[(($221)>>2)];
 /** @type {number} */ var $223=(($222+1)|0);
 HEAP32[(($221)>>2)]=$223;
 /** @type {number} */ var $224=HEAP8[($222)];
 /** @type {number} */ var $225=($224&255);
 var $232=$225;label=43;break;
 case 42: 
 /** @type {number} */ var $227=$2;
 /** @type {number} */ var $228=(($227+56)|0);
 /** @type {number} */ var $229=HEAP32[(($228)>>2)];
 /** @type {number} */ var $230=_luaZ_fill($229);
 var $232=$230;label=43;break;
 case 43: 
 var $232;
 /** @type {number} */ var $233=$2;
 /** @type {number} */ var $234=(($233)|0);
 HEAP32[(($234)>>2)]=$232;
 $1=281;
 label=110;break;
 case 44: 
 /** @type {number} */ var $236=$2;
 /** @type {number} */ var $237=(($236+56)|0);
 /** @type {number} */ var $238=HEAP32[(($237)>>2)];
 /** @type {number} */ var $239=(($238)|0);
 /** @type {number} */ var $240=HEAP32[(($239)>>2)];
 /** @type {number} */ var $241=((($240)-(1))|0);
 HEAP32[(($239)>>2)]=$241;
 /** @type {number} */ var $242=($240>>>0)>0;
 if($242){label=45;break;}else{label=46;break;}
 case 45: 
 /** @type {number} */ var $244=$2;
 /** @type {number} */ var $245=(($244+56)|0);
 /** @type {number} */ var $246=HEAP32[(($245)>>2)];
 /** @type {number} */ var $247=(($246+4)|0);
 /** @type {number} */ var $248=HEAP32[(($247)>>2)];
 /** @type {number} */ var $249=(($248+1)|0);
 HEAP32[(($247)>>2)]=$249;
 /** @type {number} */ var $250=HEAP8[($248)];
 /** @type {number} */ var $251=($250&255);
 var $258=$251;label=47;break;
 case 46: 
 /** @type {number} */ var $253=$2;
 /** @type {number} */ var $254=(($253+56)|0);
 /** @type {number} */ var $255=HEAP32[(($254)>>2)];
 /** @type {number} */ var $256=_luaZ_fill($255);
 var $258=$256;label=47;break;
 case 47: 
 var $258;
 /** @type {number} */ var $259=$2;
 /** @type {number} */ var $260=(($259)|0);
 HEAP32[(($260)>>2)]=$258;
 /** @type {number} */ var $261=$2;
 /** @type {number} */ var $262=(($261)|0);
 /** @type {number} */ var $263=HEAP32[(($262)>>2)];
 /** @type {number} */ var $264=($263|0)!=61;
 if($264){label=48;break;}else{label=49;break;}
 case 48: 
 $1=60;
 label=110;break;
 case 49: 
 /** @type {number} */ var $267=$2;
 /** @type {number} */ var $268=(($267+56)|0);
 /** @type {number} */ var $269=HEAP32[(($268)>>2)];
 /** @type {number} */ var $270=(($269)|0);
 /** @type {number} */ var $271=HEAP32[(($270)>>2)];
 /** @type {number} */ var $272=((($271)-(1))|0);
 HEAP32[(($270)>>2)]=$272;
 /** @type {number} */ var $273=($271>>>0)>0;
 if($273){label=50;break;}else{label=51;break;}
 case 50: 
 /** @type {number} */ var $275=$2;
 /** @type {number} */ var $276=(($275+56)|0);
 /** @type {number} */ var $277=HEAP32[(($276)>>2)];
 /** @type {number} */ var $278=(($277+4)|0);
 /** @type {number} */ var $279=HEAP32[(($278)>>2)];
 /** @type {number} */ var $280=(($279+1)|0);
 HEAP32[(($278)>>2)]=$280;
 /** @type {number} */ var $281=HEAP8[($279)];
 /** @type {number} */ var $282=($281&255);
 var $289=$282;label=52;break;
 case 51: 
 /** @type {number} */ var $284=$2;
 /** @type {number} */ var $285=(($284+56)|0);
 /** @type {number} */ var $286=HEAP32[(($285)>>2)];
 /** @type {number} */ var $287=_luaZ_fill($286);
 var $289=$287;label=52;break;
 case 52: 
 var $289;
 /** @type {number} */ var $290=$2;
 /** @type {number} */ var $291=(($290)|0);
 HEAP32[(($291)>>2)]=$289;
 $1=283;
 label=110;break;
 case 53: 
 /** @type {number} */ var $293=$2;
 /** @type {number} */ var $294=(($293+56)|0);
 /** @type {number} */ var $295=HEAP32[(($294)>>2)];
 /** @type {number} */ var $296=(($295)|0);
 /** @type {number} */ var $297=HEAP32[(($296)>>2)];
 /** @type {number} */ var $298=((($297)-(1))|0);
 HEAP32[(($296)>>2)]=$298;
 /** @type {number} */ var $299=($297>>>0)>0;
 if($299){label=54;break;}else{label=55;break;}
 case 54: 
 /** @type {number} */ var $301=$2;
 /** @type {number} */ var $302=(($301+56)|0);
 /** @type {number} */ var $303=HEAP32[(($302)>>2)];
 /** @type {number} */ var $304=(($303+4)|0);
 /** @type {number} */ var $305=HEAP32[(($304)>>2)];
 /** @type {number} */ var $306=(($305+1)|0);
 HEAP32[(($304)>>2)]=$306;
 /** @type {number} */ var $307=HEAP8[($305)];
 /** @type {number} */ var $308=($307&255);
 var $315=$308;label=56;break;
 case 55: 
 /** @type {number} */ var $310=$2;
 /** @type {number} */ var $311=(($310+56)|0);
 /** @type {number} */ var $312=HEAP32[(($311)>>2)];
 /** @type {number} */ var $313=_luaZ_fill($312);
 var $315=$313;label=56;break;
 case 56: 
 var $315;
 /** @type {number} */ var $316=$2;
 /** @type {number} */ var $317=(($316)|0);
 HEAP32[(($317)>>2)]=$315;
 /** @type {number} */ var $318=$2;
 /** @type {number} */ var $319=(($318)|0);
 /** @type {number} */ var $320=HEAP32[(($319)>>2)];
 /** @type {number} */ var $321=($320|0)!=61;
 if($321){label=57;break;}else{label=58;break;}
 case 57: 
 $1=62;
 label=110;break;
 case 58: 
 /** @type {number} */ var $324=$2;
 /** @type {number} */ var $325=(($324+56)|0);
 /** @type {number} */ var $326=HEAP32[(($325)>>2)];
 /** @type {number} */ var $327=(($326)|0);
 /** @type {number} */ var $328=HEAP32[(($327)>>2)];
 /** @type {number} */ var $329=((($328)-(1))|0);
 HEAP32[(($327)>>2)]=$329;
 /** @type {number} */ var $330=($328>>>0)>0;
 if($330){label=59;break;}else{label=60;break;}
 case 59: 
 /** @type {number} */ var $332=$2;
 /** @type {number} */ var $333=(($332+56)|0);
 /** @type {number} */ var $334=HEAP32[(($333)>>2)];
 /** @type {number} */ var $335=(($334+4)|0);
 /** @type {number} */ var $336=HEAP32[(($335)>>2)];
 /** @type {number} */ var $337=(($336+1)|0);
 HEAP32[(($335)>>2)]=$337;
 /** @type {number} */ var $338=HEAP8[($336)];
 /** @type {number} */ var $339=($338&255);
 var $346=$339;label=61;break;
 case 60: 
 /** @type {number} */ var $341=$2;
 /** @type {number} */ var $342=(($341+56)|0);
 /** @type {number} */ var $343=HEAP32[(($342)>>2)];
 /** @type {number} */ var $344=_luaZ_fill($343);
 var $346=$344;label=61;break;
 case 61: 
 var $346;
 /** @type {number} */ var $347=$2;
 /** @type {number} */ var $348=(($347)|0);
 HEAP32[(($348)>>2)]=$346;
 $1=282;
 label=110;break;
 case 62: 
 /** @type {number} */ var $350=$2;
 /** @type {number} */ var $351=(($350+56)|0);
 /** @type {number} */ var $352=HEAP32[(($351)>>2)];
 /** @type {number} */ var $353=(($352)|0);
 /** @type {number} */ var $354=HEAP32[(($353)>>2)];
 /** @type {number} */ var $355=((($354)-(1))|0);
 HEAP32[(($353)>>2)]=$355;
 /** @type {number} */ var $356=($354>>>0)>0;
 if($356){label=63;break;}else{label=64;break;}
 case 63: 
 /** @type {number} */ var $358=$2;
 /** @type {number} */ var $359=(($358+56)|0);
 /** @type {number} */ var $360=HEAP32[(($359)>>2)];
 /** @type {number} */ var $361=(($360+4)|0);
 /** @type {number} */ var $362=HEAP32[(($361)>>2)];
 /** @type {number} */ var $363=(($362+1)|0);
 HEAP32[(($361)>>2)]=$363;
 /** @type {number} */ var $364=HEAP8[($362)];
 /** @type {number} */ var $365=($364&255);
 var $372=$365;label=65;break;
 case 64: 
 /** @type {number} */ var $367=$2;
 /** @type {number} */ var $368=(($367+56)|0);
 /** @type {number} */ var $369=HEAP32[(($368)>>2)];
 /** @type {number} */ var $370=_luaZ_fill($369);
 var $372=$370;label=65;break;
 case 65: 
 var $372;
 /** @type {number} */ var $373=$2;
 /** @type {number} */ var $374=(($373)|0);
 HEAP32[(($374)>>2)]=$372;
 /** @type {number} */ var $375=$2;
 /** @type {number} */ var $376=(($375)|0);
 /** @type {number} */ var $377=HEAP32[(($376)>>2)];
 /** @type {number} */ var $378=($377|0)!=61;
 if($378){label=66;break;}else{label=67;break;}
 case 66: 
 $1=126;
 label=110;break;
 case 67: 
 /** @type {number} */ var $381=$2;
 /** @type {number} */ var $382=(($381+56)|0);
 /** @type {number} */ var $383=HEAP32[(($382)>>2)];
 /** @type {number} */ var $384=(($383)|0);
 /** @type {number} */ var $385=HEAP32[(($384)>>2)];
 /** @type {number} */ var $386=((($385)-(1))|0);
 HEAP32[(($384)>>2)]=$386;
 /** @type {number} */ var $387=($385>>>0)>0;
 if($387){label=68;break;}else{label=69;break;}
 case 68: 
 /** @type {number} */ var $389=$2;
 /** @type {number} */ var $390=(($389+56)|0);
 /** @type {number} */ var $391=HEAP32[(($390)>>2)];
 /** @type {number} */ var $392=(($391+4)|0);
 /** @type {number} */ var $393=HEAP32[(($392)>>2)];
 /** @type {number} */ var $394=(($393+1)|0);
 HEAP32[(($392)>>2)]=$394;
 /** @type {number} */ var $395=HEAP8[($393)];
 /** @type {number} */ var $396=($395&255);
 var $403=$396;label=70;break;
 case 69: 
 /** @type {number} */ var $398=$2;
 /** @type {number} */ var $399=(($398+56)|0);
 /** @type {number} */ var $400=HEAP32[(($399)>>2)];
 /** @type {number} */ var $401=_luaZ_fill($400);
 var $403=$401;label=70;break;
 case 70: 
 var $403;
 /** @type {number} */ var $404=$2;
 /** @type {number} */ var $405=(($404)|0);
 HEAP32[(($405)>>2)]=$403;
 $1=284;
 label=110;break;
 case 71: 
 /** @type {number} */ var $407=$2;
 /** @type {number} */ var $408=(($407+56)|0);
 /** @type {number} */ var $409=HEAP32[(($408)>>2)];
 /** @type {number} */ var $410=(($409)|0);
 /** @type {number} */ var $411=HEAP32[(($410)>>2)];
 /** @type {number} */ var $412=((($411)-(1))|0);
 HEAP32[(($410)>>2)]=$412;
 /** @type {number} */ var $413=($411>>>0)>0;
 if($413){label=72;break;}else{label=73;break;}
 case 72: 
 /** @type {number} */ var $415=$2;
 /** @type {number} */ var $416=(($415+56)|0);
 /** @type {number} */ var $417=HEAP32[(($416)>>2)];
 /** @type {number} */ var $418=(($417+4)|0);
 /** @type {number} */ var $419=HEAP32[(($418)>>2)];
 /** @type {number} */ var $420=(($419+1)|0);
 HEAP32[(($418)>>2)]=$420;
 /** @type {number} */ var $421=HEAP8[($419)];
 /** @type {number} */ var $422=($421&255);
 var $429=$422;label=74;break;
 case 73: 
 /** @type {number} */ var $424=$2;
 /** @type {number} */ var $425=(($424+56)|0);
 /** @type {number} */ var $426=HEAP32[(($425)>>2)];
 /** @type {number} */ var $427=_luaZ_fill($426);
 var $429=$427;label=74;break;
 case 74: 
 var $429;
 /** @type {number} */ var $430=$2;
 /** @type {number} */ var $431=(($430)|0);
 HEAP32[(($431)>>2)]=$429;
 /** @type {number} */ var $432=$2;
 /** @type {number} */ var $433=(($432)|0);
 /** @type {number} */ var $434=HEAP32[(($433)>>2)];
 /** @type {number} */ var $435=($434|0)!=58;
 if($435){label=75;break;}else{label=76;break;}
 case 75: 
 $1=58;
 label=110;break;
 case 76: 
 /** @type {number} */ var $438=$2;
 /** @type {number} */ var $439=(($438+56)|0);
 /** @type {number} */ var $440=HEAP32[(($439)>>2)];
 /** @type {number} */ var $441=(($440)|0);
 /** @type {number} */ var $442=HEAP32[(($441)>>2)];
 /** @type {number} */ var $443=((($442)-(1))|0);
 HEAP32[(($441)>>2)]=$443;
 /** @type {number} */ var $444=($442>>>0)>0;
 if($444){label=77;break;}else{label=78;break;}
 case 77: 
 /** @type {number} */ var $446=$2;
 /** @type {number} */ var $447=(($446+56)|0);
 /** @type {number} */ var $448=HEAP32[(($447)>>2)];
 /** @type {number} */ var $449=(($448+4)|0);
 /** @type {number} */ var $450=HEAP32[(($449)>>2)];
 /** @type {number} */ var $451=(($450+1)|0);
 HEAP32[(($449)>>2)]=$451;
 /** @type {number} */ var $452=HEAP8[($450)];
 /** @type {number} */ var $453=($452&255);
 var $460=$453;label=79;break;
 case 78: 
 /** @type {number} */ var $455=$2;
 /** @type {number} */ var $456=(($455+56)|0);
 /** @type {number} */ var $457=HEAP32[(($456)>>2)];
 /** @type {number} */ var $458=_luaZ_fill($457);
 var $460=$458;label=79;break;
 case 79: 
 var $460;
 /** @type {number} */ var $461=$2;
 /** @type {number} */ var $462=(($461)|0);
 HEAP32[(($462)>>2)]=$460;
 $1=285;
 label=110;break;
 case 80: 
 /** @type {number} */ var $464=$2;
 /** @type {number} */ var $465=$2;
 /** @type {number} */ var $466=(($465)|0);
 /** @type {number} */ var $467=HEAP32[(($466)>>2)];
 /** @type {number} */ var $468=$3;
 _read_string($464,$467,$468);
 $1=289;
 label=110;break;
 case 81: 
 /** @type {number} */ var $470=$2;
 /** @type {number} */ var $471=$2;
 /** @type {number} */ var $472=(($471)|0);
 /** @type {number} */ var $473=HEAP32[(($472)>>2)];
 _save($470,$473);
 /** @type {number} */ var $474=$2;
 /** @type {number} */ var $475=(($474+56)|0);
 /** @type {number} */ var $476=HEAP32[(($475)>>2)];
 /** @type {number} */ var $477=(($476)|0);
 /** @type {number} */ var $478=HEAP32[(($477)>>2)];
 /** @type {number} */ var $479=((($478)-(1))|0);
 HEAP32[(($477)>>2)]=$479;
 /** @type {number} */ var $480=($478>>>0)>0;
 if($480){label=82;break;}else{label=83;break;}
 case 82: 
 /** @type {number} */ var $482=$2;
 /** @type {number} */ var $483=(($482+56)|0);
 /** @type {number} */ var $484=HEAP32[(($483)>>2)];
 /** @type {number} */ var $485=(($484+4)|0);
 /** @type {number} */ var $486=HEAP32[(($485)>>2)];
 /** @type {number} */ var $487=(($486+1)|0);
 HEAP32[(($485)>>2)]=$487;
 /** @type {number} */ var $488=HEAP8[($486)];
 /** @type {number} */ var $489=($488&255);
 var $496=$489;label=84;break;
 case 83: 
 /** @type {number} */ var $491=$2;
 /** @type {number} */ var $492=(($491+56)|0);
 /** @type {number} */ var $493=HEAP32[(($492)>>2)];
 /** @type {number} */ var $494=_luaZ_fill($493);
 var $496=$494;label=84;break;
 case 84: 
 var $496;
 /** @type {number} */ var $497=$2;
 /** @type {number} */ var $498=(($497)|0);
 HEAP32[(($498)>>2)]=$496;
 /** @type {number} */ var $499=$2;
 /** @type {number} */ var $500=_check_next($499,3976);
 /** @type {number} */ var $501=($500|0)!=0;
 if($501){label=85;break;}else{label=88;break;}
 case 85: 
 /** @type {number} */ var $503=$2;
 /** @type {number} */ var $504=_check_next($503,3976);
 /** @type {number} */ var $505=($504|0)!=0;
 if($505){label=86;break;}else{label=87;break;}
 case 86: 
 $1=280;
 label=110;break;
 case 87: 
 $1=279;
 label=110;break;
 case 88: 
 /** @type {number} */ var $509=$2;
 /** @type {number} */ var $510=(($509)|0);
 /** @type {number} */ var $511=HEAP32[(($510)>>2)];
 /** @type {number} */ var $512=((($511)+(1))|0);
 /** @type {number} */ var $513=((704+$512)|0);
 /** @type {number} */ var $514=HEAP8[($513)];
 /** @type {number} */ var $515=($514&255);
 /** @type {number} */ var $516=$515&2;
 /** @type {number} */ var $517=($516|0)!=0;
 if($517){label=90;break;}else{label=89;break;}
 case 89: 
 $1=46;
 label=110;break;
 case 90: 
 label=91;break;
 case 91: 
 label=92;break;
 case 92: 
 /** @type {number} */ var $522=$2;
 /** @type {number} */ var $523=$3;
 _read_numeral($522,$523);
 $1=287;
 label=110;break;
 case 93: 
 $1=286;
 label=110;break;
 case 94: 
 /** @type {number} */ var $526=$2;
 /** @type {number} */ var $527=(($526)|0);
 /** @type {number} */ var $528=HEAP32[(($527)>>2)];
 /** @type {number} */ var $529=((($528)+(1))|0);
 /** @type {number} */ var $530=((704+$529)|0);
 /** @type {number} */ var $531=HEAP8[($530)];
 /** @type {number} */ var $532=($531&255);
 /** @type {number} */ var $533=$532&1;
 /** @type {number} */ var $534=($533|0)!=0;
 if($534){label=95;break;}else{label=105;break;}
 case 95: 
 label=96;break;
 case 96: 
 /** @type {number} */ var $537=$2;
 /** @type {number} */ var $538=$2;
 /** @type {number} */ var $539=(($538)|0);
 /** @type {number} */ var $540=HEAP32[(($539)>>2)];
 _save($537,$540);
 /** @type {number} */ var $541=$2;
 /** @type {number} */ var $542=(($541+56)|0);
 /** @type {number} */ var $543=HEAP32[(($542)>>2)];
 /** @type {number} */ var $544=(($543)|0);
 /** @type {number} */ var $545=HEAP32[(($544)>>2)];
 /** @type {number} */ var $546=((($545)-(1))|0);
 HEAP32[(($544)>>2)]=$546;
 /** @type {number} */ var $547=($545>>>0)>0;
 if($547){label=97;break;}else{label=98;break;}
 case 97: 
 /** @type {number} */ var $549=$2;
 /** @type {number} */ var $550=(($549+56)|0);
 /** @type {number} */ var $551=HEAP32[(($550)>>2)];
 /** @type {number} */ var $552=(($551+4)|0);
 /** @type {number} */ var $553=HEAP32[(($552)>>2)];
 /** @type {number} */ var $554=(($553+1)|0);
 HEAP32[(($552)>>2)]=$554;
 /** @type {number} */ var $555=HEAP8[($553)];
 /** @type {number} */ var $556=($555&255);
 var $563=$556;label=99;break;
 case 98: 
 /** @type {number} */ var $558=$2;
 /** @type {number} */ var $559=(($558+56)|0);
 /** @type {number} */ var $560=HEAP32[(($559)>>2)];
 /** @type {number} */ var $561=_luaZ_fill($560);
 var $563=$561;label=99;break;
 case 99: 
 var $563;
 /** @type {number} */ var $564=$2;
 /** @type {number} */ var $565=(($564)|0);
 HEAP32[(($565)>>2)]=$563;
 label=100;break;
 case 100: 
 /** @type {number} */ var $567=$2;
 /** @type {number} */ var $568=(($567)|0);
 /** @type {number} */ var $569=HEAP32[(($568)>>2)];
 /** @type {number} */ var $570=((($569)+(1))|0);
 /** @type {number} */ var $571=((704+$570)|0);
 /** @type {number} */ var $572=HEAP8[($571)];
 /** @type {number} */ var $573=($572&255);
 /** @type {number} */ var $574=$573&3;
 /** @type {number} */ var $575=($574|0)!=0;
 if($575){label=96;break;}else{label=101;break;}
 case 101: 
 /** @type {number} */ var $577=$2;
 /** @type {number} */ var $578=$2;
 /** @type {number} */ var $579=(($578+60)|0);
 /** @type {number} */ var $580=HEAP32[(($579)>>2)];
 /** @type {number} */ var $581=(($580)|0);
 /** @type {number} */ var $582=HEAP32[(($581)>>2)];
 /** @type {number} */ var $583=$2;
 /** @type {number} */ var $584=(($583+60)|0);
 /** @type {number} */ var $585=HEAP32[(($584)>>2)];
 /** @type {number} */ var $586=(($585+4)|0);
 /** @type {number} */ var $587=HEAP32[(($586)>>2)];
 /** @type {number} */ var $588=_luaX_newstring($577,$582,$587);
 $ts=$588;
 /** @type {number} */ var $589=$ts;
 /** @type {number} */ var $590=$3;
 /** @type {number} */ var $591=$590;
 HEAP32[(($591)>>2)]=$589;
 /** @type {number} */ var $592=$ts;
 /** @type {number} */ var $593=$592;
 /** @type {number} */ var $594=(($593+4)|0);
 /** @type {number} */ var $595=HEAP8[($594)];
 /** @type {number} */ var $596=($595&255);
 /** @type {number} */ var $597=($596|0)==4;
 if($597){label=102;break;}else{label=104;break;}
 case 102: 
 /** @type {number} */ var $599=$ts;
 /** @type {number} */ var $600=$599;
 /** @type {number} */ var $601=(($600+6)|0);
 /** @type {number} */ var $602=HEAP8[($601)];
 /** @type {number} */ var $603=($602&255);
 /** @type {number} */ var $604=($603|0)>0;
 if($604){label=103;break;}else{label=104;break;}
 case 103: 
 /** @type {number} */ var $606=$ts;
 /** @type {number} */ var $607=$606;
 /** @type {number} */ var $608=(($607+6)|0);
 /** @type {number} */ var $609=HEAP8[($608)];
 /** @type {number} */ var $610=($609&255);
 /** @type {number} */ var $611=((($610)-(1))|0);
 /** @type {number} */ var $612=((($611)+(257))|0);
 $1=$612;
 label=110;break;
 case 104: 
 $1=288;
 label=110;break;
 case 105: 
 /** @type {number} */ var $615=$2;
 /** @type {number} */ var $616=(($615)|0);
 /** @type {number} */ var $617=HEAP32[(($616)>>2)];
 $c=$617;
 /** @type {number} */ var $618=$2;
 /** @type {number} */ var $619=(($618+56)|0);
 /** @type {number} */ var $620=HEAP32[(($619)>>2)];
 /** @type {number} */ var $621=(($620)|0);
 /** @type {number} */ var $622=HEAP32[(($621)>>2)];
 /** @type {number} */ var $623=((($622)-(1))|0);
 HEAP32[(($621)>>2)]=$623;
 /** @type {number} */ var $624=($622>>>0)>0;
 if($624){label=106;break;}else{label=107;break;}
 case 106: 
 /** @type {number} */ var $626=$2;
 /** @type {number} */ var $627=(($626+56)|0);
 /** @type {number} */ var $628=HEAP32[(($627)>>2)];
 /** @type {number} */ var $629=(($628+4)|0);
 /** @type {number} */ var $630=HEAP32[(($629)>>2)];
 /** @type {number} */ var $631=(($630+1)|0);
 HEAP32[(($629)>>2)]=$631;
 /** @type {number} */ var $632=HEAP8[($630)];
 /** @type {number} */ var $633=($632&255);
 var $640=$633;label=108;break;
 case 107: 
 /** @type {number} */ var $635=$2;
 /** @type {number} */ var $636=(($635+56)|0);
 /** @type {number} */ var $637=HEAP32[(($636)>>2)];
 /** @type {number} */ var $638=_luaZ_fill($637);
 var $640=$638;label=108;break;
 case 108: 
 var $640;
 /** @type {number} */ var $641=$2;
 /** @type {number} */ var $642=(($641)|0);
 HEAP32[(($642)>>2)]=$640;
 /** @type {number} */ var $643=$c;
 $1=$643;
 label=110;break;
 case 109: 
 label=2;break;
 case 110: 
 /** @type {number} */ var $646=$1;
 STACKTOP=sp;return $646;
 }
}
/**
 * @param {number} $ls
 * @param {number} $token
 * @return {number}
 */
function _txtToken($ls,$token){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $2=$ls;
 $3=$token;
 /** @type {number} */ var $4=$3;
 if(($4|0)==288|($4|0)==289|($4|0)==287){ label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $6=$2;
 _save($6,0);
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=(($7+52)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=(($10+60)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=(($12)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=_luaO_pushfstring($9,7664,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$14,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=$15;
 label=4;break;
 case 3: 
 /** @type {number} */ var $17=$2;
 /** @type {number} */ var $18=$3;
 /** @type {number} */ var $19=_luaX_token2str($17,$18);
 $1=$19;
 label=4;break;
 case 4: 
 /** @type {number} */ var $21=$1;
 STACKTOP=sp;return $21;
 }
}
/**
 * @param {number} $ls
 * @return {number}
 */
function _inclinenumber($ls){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $old;
 $1=$ls;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $old=$4;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($5+56)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=(($7)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=((($9)-(1))|0);
 HEAP32[(($8)>>2)]=$10;
 /** @type {number} */ var $11=($9>>>0)>0;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=(($13+56)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=(($15+4)|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=(($17+1)|0);
 HEAP32[(($16)>>2)]=$18;
 /** @type {number} */ var $19=HEAP8[($17)];
 /** @type {number} */ var $20=($19&255);
 var $27=$20;label=4;break;
 case 3: 
 /** @type {number} */ var $22=$1;
 /** @type {number} */ var $23=(($22+56)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=_luaZ_fill($24);
 var $27=$25;label=4;break;
 case 4: 
 var $27;
 /** @type {number} */ var $28=$1;
 /** @type {number} */ var $29=(($28)|0);
 HEAP32[(($29)>>2)]=$27;
 /** @type {number} */ var $30=$1;
 /** @type {number} */ var $31=(($30)|0);
 /** @type {number} */ var $32=HEAP32[(($31)>>2)];
 /** @type {number} */ var $33=($32|0)==10;
 if($33){label=6;break;}else{label=5;break;}
 case 5: 
 /** @type {number} */ var $35=$1;
 /** @type {number} */ var $36=(($35)|0);
 /** @type {number} */ var $37=HEAP32[(($36)>>2)];
 /** @type {number} */ var $38=($37|0)==13;
 if($38){label=6;break;}else{label=11;break;}
 case 6: 
 /** @type {number} */ var $40=$1;
 /** @type {number} */ var $41=(($40)|0);
 /** @type {number} */ var $42=HEAP32[(($41)>>2)];
 /** @type {number} */ var $43=$old;
 /** @type {number} */ var $44=($42|0)!=($43|0);
 if($44){label=7;break;}else{label=11;break;}
 case 7: 
 /** @type {number} */ var $46=$1;
 /** @type {number} */ var $47=(($46+56)|0);
 /** @type {number} */ var $48=HEAP32[(($47)>>2)];
 /** @type {number} */ var $49=(($48)|0);
 /** @type {number} */ var $50=HEAP32[(($49)>>2)];
 /** @type {number} */ var $51=((($50)-(1))|0);
 HEAP32[(($49)>>2)]=$51;
 /** @type {number} */ var $52=($50>>>0)>0;
 if($52){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $54=$1;
 /** @type {number} */ var $55=(($54+56)|0);
 /** @type {number} */ var $56=HEAP32[(($55)>>2)];
 /** @type {number} */ var $57=(($56+4)|0);
 /** @type {number} */ var $58=HEAP32[(($57)>>2)];
 /** @type {number} */ var $59=(($58+1)|0);
 HEAP32[(($57)>>2)]=$59;
 /** @type {number} */ var $60=HEAP8[($58)];
 /** @type {number} */ var $61=($60&255);
 var $68=$61;label=10;break;
 case 9: 
 /** @type {number} */ var $63=$1;
 /** @type {number} */ var $64=(($63+56)|0);
 /** @type {number} */ var $65=HEAP32[(($64)>>2)];
 /** @type {number} */ var $66=_luaZ_fill($65);
 var $68=$66;label=10;break;
 case 10: 
 var $68;
 /** @type {number} */ var $69=$1;
 /** @type {number} */ var $70=(($69)|0);
 HEAP32[(($70)>>2)]=$68;
 label=11;break;
 case 11: 
 /** @type {number} */ var $72=$1;
 /** @type {number} */ var $73=(($72+4)|0);
 /** @type {number} */ var $74=HEAP32[(($73)>>2)];
 /** @type {number} */ var $75=((($74)+(1))|0);
 HEAP32[(($73)>>2)]=$75;
 /** @type {number} */ var $76=($75|0)>=2147483645;
 if($76){label=12;break;}else{label=13;break;}
 case 12: 
 /** @type {number} */ var $78=$1;
 _luaX_syntaxerror($78,9712);
 case 13: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @return {number}
 */
function _skip_sep($ls){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $count;
 /** @type {number} */ var $s;
 $1=$ls;
 $count=0;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $s=$4;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 _save($5,$8);
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=(($9+56)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=(($11)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=((($13)-(1))|0);
 HEAP32[(($12)>>2)]=$14;
 /** @type {number} */ var $15=($13>>>0)>0;
 if($15){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=(($17+56)|0);
 /** @type {number} */ var $19=HEAP32[(($18)>>2)];
 /** @type {number} */ var $20=(($19+4)|0);
 /** @type {number} */ var $21=HEAP32[(($20)>>2)];
 /** @type {number} */ var $22=(($21+1)|0);
 HEAP32[(($20)>>2)]=$22;
 /** @type {number} */ var $23=HEAP8[($21)];
 /** @type {number} */ var $24=($23&255);
 var $31=$24;label=4;break;
 case 3: 
 /** @type {number} */ var $26=$1;
 /** @type {number} */ var $27=(($26+56)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=_luaZ_fill($28);
 var $31=$29;label=4;break;
 case 4: 
 var $31;
 /** @type {number} */ var $32=$1;
 /** @type {number} */ var $33=(($32)|0);
 HEAP32[(($33)>>2)]=$31;
 label=5;break;
 case 5: 
 /** @type {number} */ var $35=$1;
 /** @type {number} */ var $36=(($35)|0);
 /** @type {number} */ var $37=HEAP32[(($36)>>2)];
 /** @type {number} */ var $38=($37|0)==61;
 if($38){label=6;break;}else{label=10;break;}
 case 6: 
 /** @type {number} */ var $40=$1;
 /** @type {number} */ var $41=$1;
 /** @type {number} */ var $42=(($41)|0);
 /** @type {number} */ var $43=HEAP32[(($42)>>2)];
 _save($40,$43);
 /** @type {number} */ var $44=$1;
 /** @type {number} */ var $45=(($44+56)|0);
 /** @type {number} */ var $46=HEAP32[(($45)>>2)];
 /** @type {number} */ var $47=(($46)|0);
 /** @type {number} */ var $48=HEAP32[(($47)>>2)];
 /** @type {number} */ var $49=((($48)-(1))|0);
 HEAP32[(($47)>>2)]=$49;
 /** @type {number} */ var $50=($48>>>0)>0;
 if($50){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $52=$1;
 /** @type {number} */ var $53=(($52+56)|0);
 /** @type {number} */ var $54=HEAP32[(($53)>>2)];
 /** @type {number} */ var $55=(($54+4)|0);
 /** @type {number} */ var $56=HEAP32[(($55)>>2)];
 /** @type {number} */ var $57=(($56+1)|0);
 HEAP32[(($55)>>2)]=$57;
 /** @type {number} */ var $58=HEAP8[($56)];
 /** @type {number} */ var $59=($58&255);
 var $66=$59;label=9;break;
 case 8: 
 /** @type {number} */ var $61=$1;
 /** @type {number} */ var $62=(($61+56)|0);
 /** @type {number} */ var $63=HEAP32[(($62)>>2)];
 /** @type {number} */ var $64=_luaZ_fill($63);
 var $66=$64;label=9;break;
 case 9: 
 var $66;
 /** @type {number} */ var $67=$1;
 /** @type {number} */ var $68=(($67)|0);
 HEAP32[(($68)>>2)]=$66;
 /** @type {number} */ var $69=$count;
 /** @type {number} */ var $70=((($69)+(1))|0);
 $count=$70;
 label=5;break;
 case 10: 
 /** @type {number} */ var $72=$1;
 /** @type {number} */ var $73=(($72)|0);
 /** @type {number} */ var $74=HEAP32[(($73)>>2)];
 /** @type {number} */ var $75=$s;
 /** @type {number} */ var $76=($74|0)==($75|0);
 if($76){label=11;break;}else{label=12;break;}
 case 11: 
 /** @type {number} */ var $78=$count;
 var $84=$78;label=13;break;
 case 12: 
 /** @type {number} */ var $80=$count;
 /** @type {number} */ var $81=(((-$80))|0);
 /** @type {number} */ var $82=((($81)-(1))|0);
 var $84=$82;label=13;break;
 case 13: 
 var $84;
 STACKTOP=sp;return $84;
 }
}
/**
 * @param {number} $ls
 * @param {number} $seminfo
 * @param {number} $sep
 * @return {number}
 */
function _read_long_string($ls,$seminfo,$sep){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$ls;
 $2=$seminfo;
 $3=$sep;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($5)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 _save($4,$7);
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=(($8+56)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=(($10)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=((($12)-(1))|0);
 HEAP32[(($11)>>2)]=$13;
 /** @type {number} */ var $14=($12>>>0)>0;
 if($14){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=(($16+56)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=(($18+4)|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=(($20+1)|0);
 HEAP32[(($19)>>2)]=$21;
 /** @type {number} */ var $22=HEAP8[($20)];
 /** @type {number} */ var $23=($22&255);
 var $30=$23;label=4;break;
 case 3: 
 /** @type {number} */ var $25=$1;
 /** @type {number} */ var $26=(($25+56)|0);
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=_luaZ_fill($27);
 var $30=$28;label=4;break;
 case 4: 
 var $30;
 /** @type {number} */ var $31=$1;
 /** @type {number} */ var $32=(($31)|0);
 HEAP32[(($32)>>2)]=$30;
 /** @type {number} */ var $33=$1;
 /** @type {number} */ var $34=(($33)|0);
 /** @type {number} */ var $35=HEAP32[(($34)>>2)];
 /** @type {number} */ var $36=($35|0)==10;
 if($36){label=6;break;}else{label=5;break;}
 case 5: 
 /** @type {number} */ var $38=$1;
 /** @type {number} */ var $39=(($38)|0);
 /** @type {number} */ var $40=HEAP32[(($39)>>2)];
 /** @type {number} */ var $41=($40|0)==13;
 if($41){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $43=$1;
 _inclinenumber($43);
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 /** @type {number} */ var $46=$1;
 /** @type {number} */ var $47=(($46)|0);
 /** @type {number} */ var $48=HEAP32[(($47)>>2)];
 if(($48|0)==93){ label=10;break;}else if(($48|0)==10|($48|0)==13){ label=16;break;}else if(($48|0)==-1){ label=9;break;}else{label=19;break;}
 case 9: 
 /** @type {number} */ var $50=$1;
 /** @type {number} */ var $51=$2;
 /** @type {number} */ var $52=($51|0)!=0;
 /** @type {number} */ var $53=($52?10168:9960);
 _lexerror($50,$53,286);
 case 10: 
 /** @type {number} */ var $55=$1;
 /** @type {number} */ var $56=_skip_sep($55);
 /** @type {number} */ var $57=$3;
 /** @type {number} */ var $58=($56|0)==($57|0);
 if($58){label=11;break;}else{label=15;break;}
 case 11: 
 /** @type {number} */ var $60=$1;
 /** @type {number} */ var $61=$1;
 /** @type {number} */ var $62=(($61)|0);
 /** @type {number} */ var $63=HEAP32[(($62)>>2)];
 _save($60,$63);
 /** @type {number} */ var $64=$1;
 /** @type {number} */ var $65=(($64+56)|0);
 /** @type {number} */ var $66=HEAP32[(($65)>>2)];
 /** @type {number} */ var $67=(($66)|0);
 /** @type {number} */ var $68=HEAP32[(($67)>>2)];
 /** @type {number} */ var $69=((($68)-(1))|0);
 HEAP32[(($67)>>2)]=$69;
 /** @type {number} */ var $70=($68>>>0)>0;
 if($70){label=12;break;}else{label=13;break;}
 case 12: 
 /** @type {number} */ var $72=$1;
 /** @type {number} */ var $73=(($72+56)|0);
 /** @type {number} */ var $74=HEAP32[(($73)>>2)];
 /** @type {number} */ var $75=(($74+4)|0);
 /** @type {number} */ var $76=HEAP32[(($75)>>2)];
 /** @type {number} */ var $77=(($76+1)|0);
 HEAP32[(($75)>>2)]=$77;
 /** @type {number} */ var $78=HEAP8[($76)];
 /** @type {number} */ var $79=($78&255);
 var $86=$79;label=14;break;
 case 13: 
 /** @type {number} */ var $81=$1;
 /** @type {number} */ var $82=(($81+56)|0);
 /** @type {number} */ var $83=HEAP32[(($82)>>2)];
 /** @type {number} */ var $84=_luaZ_fill($83);
 var $86=$84;label=14;break;
 case 14: 
 var $86;
 /** @type {number} */ var $87=$1;
 /** @type {number} */ var $88=(($87)|0);
 HEAP32[(($88)>>2)]=$86;
 label=30;break;
 case 15: 
 label=29;break;
 case 16: 
 /** @type {number} */ var $91=$1;
 _save($91,10);
 /** @type {number} */ var $92=$1;
 _inclinenumber($92);
 /** @type {number} */ var $93=$2;
 /** @type {number} */ var $94=($93|0)!=0;
 if($94){label=18;break;}else{label=17;break;}
 case 17: 
 /** @type {number} */ var $96=$1;
 /** @type {number} */ var $97=(($96+60)|0);
 /** @type {number} */ var $98=HEAP32[(($97)>>2)];
 /** @type {number} */ var $99=(($98+4)|0);
 HEAP32[(($99)>>2)]=0;
 label=18;break;
 case 18: 
 label=29;break;
 case 19: 
 /** @type {number} */ var $102=$2;
 /** @type {number} */ var $103=($102|0)!=0;
 if($103){label=20;break;}else{label=24;break;}
 case 20: 
 /** @type {number} */ var $105=$1;
 /** @type {number} */ var $106=$1;
 /** @type {number} */ var $107=(($106)|0);
 /** @type {number} */ var $108=HEAP32[(($107)>>2)];
 _save($105,$108);
 /** @type {number} */ var $109=$1;
 /** @type {number} */ var $110=(($109+56)|0);
 /** @type {number} */ var $111=HEAP32[(($110)>>2)];
 /** @type {number} */ var $112=(($111)|0);
 /** @type {number} */ var $113=HEAP32[(($112)>>2)];
 /** @type {number} */ var $114=((($113)-(1))|0);
 HEAP32[(($112)>>2)]=$114;
 /** @type {number} */ var $115=($113>>>0)>0;
 if($115){label=21;break;}else{label=22;break;}
 case 21: 
 /** @type {number} */ var $117=$1;
 /** @type {number} */ var $118=(($117+56)|0);
 /** @type {number} */ var $119=HEAP32[(($118)>>2)];
 /** @type {number} */ var $120=(($119+4)|0);
 /** @type {number} */ var $121=HEAP32[(($120)>>2)];
 /** @type {number} */ var $122=(($121+1)|0);
 HEAP32[(($120)>>2)]=$122;
 /** @type {number} */ var $123=HEAP8[($121)];
 /** @type {number} */ var $124=($123&255);
 var $131=$124;label=23;break;
 case 22: 
 /** @type {number} */ var $126=$1;
 /** @type {number} */ var $127=(($126+56)|0);
 /** @type {number} */ var $128=HEAP32[(($127)>>2)];
 /** @type {number} */ var $129=_luaZ_fill($128);
 var $131=$129;label=23;break;
 case 23: 
 var $131;
 /** @type {number} */ var $132=$1;
 /** @type {number} */ var $133=(($132)|0);
 HEAP32[(($133)>>2)]=$131;
 label=28;break;
 case 24: 
 /** @type {number} */ var $135=$1;
 /** @type {number} */ var $136=(($135+56)|0);
 /** @type {number} */ var $137=HEAP32[(($136)>>2)];
 /** @type {number} */ var $138=(($137)|0);
 /** @type {number} */ var $139=HEAP32[(($138)>>2)];
 /** @type {number} */ var $140=((($139)-(1))|0);
 HEAP32[(($138)>>2)]=$140;
 /** @type {number} */ var $141=($139>>>0)>0;
 if($141){label=25;break;}else{label=26;break;}
 case 25: 
 /** @type {number} */ var $143=$1;
 /** @type {number} */ var $144=(($143+56)|0);
 /** @type {number} */ var $145=HEAP32[(($144)>>2)];
 /** @type {number} */ var $146=(($145+4)|0);
 /** @type {number} */ var $147=HEAP32[(($146)>>2)];
 /** @type {number} */ var $148=(($147+1)|0);
 HEAP32[(($146)>>2)]=$148;
 /** @type {number} */ var $149=HEAP8[($147)];
 /** @type {number} */ var $150=($149&255);
 var $157=$150;label=27;break;
 case 26: 
 /** @type {number} */ var $152=$1;
 /** @type {number} */ var $153=(($152+56)|0);
 /** @type {number} */ var $154=HEAP32[(($153)>>2)];
 /** @type {number} */ var $155=_luaZ_fill($154);
 var $157=$155;label=27;break;
 case 27: 
 var $157;
 /** @type {number} */ var $158=$1;
 /** @type {number} */ var $159=(($158)|0);
 HEAP32[(($159)>>2)]=$157;
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 label=8;break;
 case 30: 
 /** @type {number} */ var $163=$2;
 /** @type {number} */ var $164=($163|0)!=0;
 if($164){label=31;break;}else{label=32;break;}
 case 31: 
 /** @type {number} */ var $166=$1;
 /** @type {number} */ var $167=$1;
 /** @type {number} */ var $168=(($167+60)|0);
 /** @type {number} */ var $169=HEAP32[(($168)>>2)];
 /** @type {number} */ var $170=(($169)|0);
 /** @type {number} */ var $171=HEAP32[(($170)>>2)];
 /** @type {number} */ var $172=$3;
 /** @type {number} */ var $173=((($172)+(2))|0);
 /** @type {number} */ var $174=(($171+$173)|0);
 /** @type {number} */ var $175=$1;
 /** @type {number} */ var $176=(($175+60)|0);
 /** @type {number} */ var $177=HEAP32[(($176)>>2)];
 /** @type {number} */ var $178=(($177+4)|0);
 /** @type {number} */ var $179=HEAP32[(($178)>>2)];
 /** @type {number} */ var $180=$3;
 /** @type {number} */ var $181=((($180)+(2))|0);
 /** @type {number} */ var $182=($181<<1);
 /** @type {number} */ var $183=((($179)-($182))|0);
 /** @type {number} */ var $184=_luaX_newstring($166,$174,$183);
 /** @type {number} */ var $185=$2;
 /** @type {number} */ var $186=$185;
 HEAP32[(($186)>>2)]=$184;
 label=32;break;
 case 32: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $del
 * @param {number} $seminfo
 * @return {number}
 */
function _read_string($ls,$del,$seminfo){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $c;
 $1=$ls;
 $2=$del;
 $3=$seminfo;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($5)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 _save($4,$7);
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=(($8+56)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=(($10)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=((($12)-(1))|0);
 HEAP32[(($11)>>2)]=$13;
 /** @type {number} */ var $14=($12>>>0)>0;
 if($14){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=(($16+56)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=(($18+4)|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=(($20+1)|0);
 HEAP32[(($19)>>2)]=$21;
 /** @type {number} */ var $22=HEAP8[($20)];
 /** @type {number} */ var $23=($22&255);
 var $30=$23;label=4;break;
 case 3: 
 /** @type {number} */ var $25=$1;
 /** @type {number} */ var $26=(($25+56)|0);
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=_luaZ_fill($27);
 var $30=$28;label=4;break;
 case 4: 
 var $30;
 /** @type {number} */ var $31=$1;
 /** @type {number} */ var $32=(($31)|0);
 HEAP32[(($32)>>2)]=$30;
 label=5;break;
 case 5: 
 /** @type {number} */ var $34=$1;
 /** @type {number} */ var $35=(($34)|0);
 /** @type {number} */ var $36=HEAP32[(($35)>>2)];
 /** @type {number} */ var $37=$2;
 /** @type {number} */ var $38=($36|0)!=($37|0);
 if($38){label=6;break;}else{label=52;break;}
 case 6: 
 /** @type {number} */ var $40=$1;
 /** @type {number} */ var $41=(($40)|0);
 /** @type {number} */ var $42=HEAP32[(($41)>>2)];
 if(($42|0)==-1){ label=7;break;}else if(($42|0)==10|($42|0)==13){ label=8;break;}else if(($42|0)==92){ label=9;break;}else{label=47;break;}
 case 7: 
 /** @type {number} */ var $44=$1;
 _lexerror($44,11072,286);
 case 8: 
 /** @type {number} */ var $46=$1;
 _lexerror($46,11072,289);
 case 9: 
 /** @type {number} */ var $48=$1;
 /** @type {number} */ var $49=(($48+56)|0);
 /** @type {number} */ var $50=HEAP32[(($49)>>2)];
 /** @type {number} */ var $51=(($50)|0);
 /** @type {number} */ var $52=HEAP32[(($51)>>2)];
 /** @type {number} */ var $53=((($52)-(1))|0);
 HEAP32[(($51)>>2)]=$53;
 /** @type {number} */ var $54=($52>>>0)>0;
 if($54){label=10;break;}else{label=11;break;}
 case 10: 
 /** @type {number} */ var $56=$1;
 /** @type {number} */ var $57=(($56+56)|0);
 /** @type {number} */ var $58=HEAP32[(($57)>>2)];
 /** @type {number} */ var $59=(($58+4)|0);
 /** @type {number} */ var $60=HEAP32[(($59)>>2)];
 /** @type {number} */ var $61=(($60+1)|0);
 HEAP32[(($59)>>2)]=$61;
 /** @type {number} */ var $62=HEAP8[($60)];
 /** @type {number} */ var $63=($62&255);
 var $70=$63;label=12;break;
 case 11: 
 /** @type {number} */ var $65=$1;
 /** @type {number} */ var $66=(($65+56)|0);
 /** @type {number} */ var $67=HEAP32[(($66)>>2)];
 /** @type {number} */ var $68=_luaZ_fill($67);
 var $70=$68;label=12;break;
 case 12: 
 var $70;
 /** @type {number} */ var $71=$1;
 /** @type {number} */ var $72=(($71)|0);
 HEAP32[(($72)>>2)]=$70;
 /** @type {number} */ var $73=$1;
 /** @type {number} */ var $74=(($73)|0);
 /** @type {number} */ var $75=HEAP32[(($74)>>2)];
 switch(($75|0)){case 97:{ label=13;break;}case 98:{ label=14;break;}case 102:{ label=15;break;}case 110:{ label=16;break;}case 114:{ label=17;break;}case 116:{ label=18;break;}case 118:{ label=19;break;}case 120:{ label=20;break;}case 10:case 13:{ label=21;break;}case 92:case 34:case 39:{ label=22;break;}case -1:{ label=23;break;}case 122:{ label=24;break;}default:{label=38;break;}}break;
 case 13: 
 $c=7;
 label=41;break;
 case 14: 
 $c=8;
 label=41;break;
 case 15: 
 $c=12;
 label=41;break;
 case 16: 
 $c=10;
 label=41;break;
 case 17: 
 $c=13;
 label=41;break;
 case 18: 
 $c=9;
 label=41;break;
 case 19: 
 $c=11;
 label=41;break;
 case 20: 
 /** @type {number} */ var $84=$1;
 /** @type {number} */ var $85=_readhexaesc($84);
 $c=$85;
 label=41;break;
 case 21: 
 /** @type {number} */ var $87=$1;
 _inclinenumber($87);
 $c=10;
 label=45;break;
 case 22: 
 /** @type {number} */ var $89=$1;
 /** @type {number} */ var $90=(($89)|0);
 /** @type {number} */ var $91=HEAP32[(($90)>>2)];
 $c=$91;
 label=41;break;
 case 23: 
 label=46;break;
 case 24: 
 /** @type {number} */ var $94=$1;
 /** @type {number} */ var $95=(($94+56)|0);
 /** @type {number} */ var $96=HEAP32[(($95)>>2)];
 /** @type {number} */ var $97=(($96)|0);
 /** @type {number} */ var $98=HEAP32[(($97)>>2)];
 /** @type {number} */ var $99=((($98)-(1))|0);
 HEAP32[(($97)>>2)]=$99;
 /** @type {number} */ var $100=($98>>>0)>0;
 if($100){label=25;break;}else{label=26;break;}
 case 25: 
 /** @type {number} */ var $102=$1;
 /** @type {number} */ var $103=(($102+56)|0);
 /** @type {number} */ var $104=HEAP32[(($103)>>2)];
 /** @type {number} */ var $105=(($104+4)|0);
 /** @type {number} */ var $106=HEAP32[(($105)>>2)];
 /** @type {number} */ var $107=(($106+1)|0);
 HEAP32[(($105)>>2)]=$107;
 /** @type {number} */ var $108=HEAP8[($106)];
 /** @type {number} */ var $109=($108&255);
 var $116=$109;label=27;break;
 case 26: 
 /** @type {number} */ var $111=$1;
 /** @type {number} */ var $112=(($111+56)|0);
 /** @type {number} */ var $113=HEAP32[(($112)>>2)];
 /** @type {number} */ var $114=_luaZ_fill($113);
 var $116=$114;label=27;break;
 case 27: 
 var $116;
 /** @type {number} */ var $117=$1;
 /** @type {number} */ var $118=(($117)|0);
 HEAP32[(($118)>>2)]=$116;
 label=28;break;
 case 28: 
 /** @type {number} */ var $120=$1;
 /** @type {number} */ var $121=(($120)|0);
 /** @type {number} */ var $122=HEAP32[(($121)>>2)];
 /** @type {number} */ var $123=((($122)+(1))|0);
 /** @type {number} */ var $124=((704+$123)|0);
 /** @type {number} */ var $125=HEAP8[($124)];
 /** @type {number} */ var $126=($125&255);
 /** @type {number} */ var $127=$126&8;
 /** @type {number} */ var $128=($127|0)!=0;
 if($128){label=29;break;}else{label=37;break;}
 case 29: 
 /** @type {number} */ var $130=$1;
 /** @type {number} */ var $131=(($130)|0);
 /** @type {number} */ var $132=HEAP32[(($131)>>2)];
 /** @type {number} */ var $133=($132|0)==10;
 if($133){label=31;break;}else{label=30;break;}
 case 30: 
 /** @type {number} */ var $135=$1;
 /** @type {number} */ var $136=(($135)|0);
 /** @type {number} */ var $137=HEAP32[(($136)>>2)];
 /** @type {number} */ var $138=($137|0)==13;
 if($138){label=31;break;}else{label=32;break;}
 case 31: 
 /** @type {number} */ var $140=$1;
 _inclinenumber($140);
 label=36;break;
 case 32: 
 /** @type {number} */ var $142=$1;
 /** @type {number} */ var $143=(($142+56)|0);
 /** @type {number} */ var $144=HEAP32[(($143)>>2)];
 /** @type {number} */ var $145=(($144)|0);
 /** @type {number} */ var $146=HEAP32[(($145)>>2)];
 /** @type {number} */ var $147=((($146)-(1))|0);
 HEAP32[(($145)>>2)]=$147;
 /** @type {number} */ var $148=($146>>>0)>0;
 if($148){label=33;break;}else{label=34;break;}
 case 33: 
 /** @type {number} */ var $150=$1;
 /** @type {number} */ var $151=(($150+56)|0);
 /** @type {number} */ var $152=HEAP32[(($151)>>2)];
 /** @type {number} */ var $153=(($152+4)|0);
 /** @type {number} */ var $154=HEAP32[(($153)>>2)];
 /** @type {number} */ var $155=(($154+1)|0);
 HEAP32[(($153)>>2)]=$155;
 /** @type {number} */ var $156=HEAP8[($154)];
 /** @type {number} */ var $157=($156&255);
 var $164=$157;label=35;break;
 case 34: 
 /** @type {number} */ var $159=$1;
 /** @type {number} */ var $160=(($159+56)|0);
 /** @type {number} */ var $161=HEAP32[(($160)>>2)];
 /** @type {number} */ var $162=_luaZ_fill($161);
 var $164=$162;label=35;break;
 case 35: 
 var $164;
 /** @type {number} */ var $165=$1;
 /** @type {number} */ var $166=(($165)|0);
 HEAP32[(($166)>>2)]=$164;
 label=36;break;
 case 36: 
 label=28;break;
 case 37: 
 label=46;break;
 case 38: 
 /** @type {number} */ var $170=$1;
 /** @type {number} */ var $171=(($170)|0);
 /** @type {number} */ var $172=HEAP32[(($171)>>2)];
 /** @type {number} */ var $173=((($172)+(1))|0);
 /** @type {number} */ var $174=((704+$173)|0);
 /** @type {number} */ var $175=HEAP8[($174)];
 /** @type {number} */ var $176=($175&255);
 /** @type {number} */ var $177=$176&2;
 /** @type {number} */ var $178=($177|0)!=0;
 if($178){label=40;break;}else{label=39;break;}
 case 39: 
 /** @type {number} */ var $180=$1;
 /** @type {number} */ var $181=$1;
 /** @type {number} */ var $182=(($181)|0);
 _escerror($180,$182,1,10816);
 label=40;break;
 case 40: 
 /** @type {number} */ var $184=$1;
 /** @type {number} */ var $185=_readdecesc($184);
 $c=$185;
 label=45;break;
 case 41: 
 /** @type {number} */ var $187=$1;
 /** @type {number} */ var $188=(($187+56)|0);
 /** @type {number} */ var $189=HEAP32[(($188)>>2)];
 /** @type {number} */ var $190=(($189)|0);
 /** @type {number} */ var $191=HEAP32[(($190)>>2)];
 /** @type {number} */ var $192=((($191)-(1))|0);
 HEAP32[(($190)>>2)]=$192;
 /** @type {number} */ var $193=($191>>>0)>0;
 if($193){label=42;break;}else{label=43;break;}
 case 42: 
 /** @type {number} */ var $195=$1;
 /** @type {number} */ var $196=(($195+56)|0);
 /** @type {number} */ var $197=HEAP32[(($196)>>2)];
 /** @type {number} */ var $198=(($197+4)|0);
 /** @type {number} */ var $199=HEAP32[(($198)>>2)];
 /** @type {number} */ var $200=(($199+1)|0);
 HEAP32[(($198)>>2)]=$200;
 /** @type {number} */ var $201=HEAP8[($199)];
 /** @type {number} */ var $202=($201&255);
 var $209=$202;label=44;break;
 case 43: 
 /** @type {number} */ var $204=$1;
 /** @type {number} */ var $205=(($204+56)|0);
 /** @type {number} */ var $206=HEAP32[(($205)>>2)];
 /** @type {number} */ var $207=_luaZ_fill($206);
 var $209=$207;label=44;break;
 case 44: 
 var $209;
 /** @type {number} */ var $210=$1;
 /** @type {number} */ var $211=(($210)|0);
 HEAP32[(($211)>>2)]=$209;
 label=45;break;
 case 45: 
 /** @type {number} */ var $213=$1;
 /** @type {number} */ var $214=$c;
 _save($213,$214);
 label=46;break;
 case 46: 
 label=51;break;
 case 47: 
 /** @type {number} */ var $217=$1;
 /** @type {number} */ var $218=$1;
 /** @type {number} */ var $219=(($218)|0);
 /** @type {number} */ var $220=HEAP32[(($219)>>2)];
 _save($217,$220);
 /** @type {number} */ var $221=$1;
 /** @type {number} */ var $222=(($221+56)|0);
 /** @type {number} */ var $223=HEAP32[(($222)>>2)];
 /** @type {number} */ var $224=(($223)|0);
 /** @type {number} */ var $225=HEAP32[(($224)>>2)];
 /** @type {number} */ var $226=((($225)-(1))|0);
 HEAP32[(($224)>>2)]=$226;
 /** @type {number} */ var $227=($225>>>0)>0;
 if($227){label=48;break;}else{label=49;break;}
 case 48: 
 /** @type {number} */ var $229=$1;
 /** @type {number} */ var $230=(($229+56)|0);
 /** @type {number} */ var $231=HEAP32[(($230)>>2)];
 /** @type {number} */ var $232=(($231+4)|0);
 /** @type {number} */ var $233=HEAP32[(($232)>>2)];
 /** @type {number} */ var $234=(($233+1)|0);
 HEAP32[(($232)>>2)]=$234;
 /** @type {number} */ var $235=HEAP8[($233)];
 /** @type {number} */ var $236=($235&255);
 var $243=$236;label=50;break;
 case 49: 
 /** @type {number} */ var $238=$1;
 /** @type {number} */ var $239=(($238+56)|0);
 /** @type {number} */ var $240=HEAP32[(($239)>>2)];
 /** @type {number} */ var $241=_luaZ_fill($240);
 var $243=$241;label=50;break;
 case 50: 
 var $243;
 /** @type {number} */ var $244=$1;
 /** @type {number} */ var $245=(($244)|0);
 HEAP32[(($245)>>2)]=$243;
 label=51;break;
 case 51: 
 label=5;break;
 case 52: 
 /** @type {number} */ var $248=$1;
 /** @type {number} */ var $249=$1;
 /** @type {number} */ var $250=(($249)|0);
 /** @type {number} */ var $251=HEAP32[(($250)>>2)];
 _save($248,$251);
 /** @type {number} */ var $252=$1;
 /** @type {number} */ var $253=(($252+56)|0);
 /** @type {number} */ var $254=HEAP32[(($253)>>2)];
 /** @type {number} */ var $255=(($254)|0);
 /** @type {number} */ var $256=HEAP32[(($255)>>2)];
 /** @type {number} */ var $257=((($256)-(1))|0);
 HEAP32[(($255)>>2)]=$257;
 /** @type {number} */ var $258=($256>>>0)>0;
 if($258){label=53;break;}else{label=54;break;}
 case 53: 
 /** @type {number} */ var $260=$1;
 /** @type {number} */ var $261=(($260+56)|0);
 /** @type {number} */ var $262=HEAP32[(($261)>>2)];
 /** @type {number} */ var $263=(($262+4)|0);
 /** @type {number} */ var $264=HEAP32[(($263)>>2)];
 /** @type {number} */ var $265=(($264+1)|0);
 HEAP32[(($263)>>2)]=$265;
 /** @type {number} */ var $266=HEAP8[($264)];
 /** @type {number} */ var $267=($266&255);
 var $274=$267;label=55;break;
 case 54: 
 /** @type {number} */ var $269=$1;
 /** @type {number} */ var $270=(($269+56)|0);
 /** @type {number} */ var $271=HEAP32[(($270)>>2)];
 /** @type {number} */ var $272=_luaZ_fill($271);
 var $274=$272;label=55;break;
 case 55: 
 var $274;
 /** @type {number} */ var $275=$1;
 /** @type {number} */ var $276=(($275)|0);
 HEAP32[(($276)>>2)]=$274;
 /** @type {number} */ var $277=$1;
 /** @type {number} */ var $278=$1;
 /** @type {number} */ var $279=(($278+60)|0);
 /** @type {number} */ var $280=HEAP32[(($279)>>2)];
 /** @type {number} */ var $281=(($280)|0);
 /** @type {number} */ var $282=HEAP32[(($281)>>2)];
 /** @type {number} */ var $283=(($282+1)|0);
 /** @type {number} */ var $284=$1;
 /** @type {number} */ var $285=(($284+60)|0);
 /** @type {number} */ var $286=HEAP32[(($285)>>2)];
 /** @type {number} */ var $287=(($286+4)|0);
 /** @type {number} */ var $288=HEAP32[(($287)>>2)];
 /** @type {number} */ var $289=((($288)-(2))|0);
 /** @type {number} */ var $290=_luaX_newstring($277,$283,$289);
 /** @type {number} */ var $291=$3;
 /** @type {number} */ var $292=$291;
 HEAP32[(($292)>>2)]=$290;
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $c
 * @return {number}
 */
function _save($ls,$c){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $b;
 /** @type {number} */ var $newsize;
 $1=$ls;
 $2=$c;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+60)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $b=$5;
 /** @type {number} */ var $6=$b;
 /** @type {number} */ var $7=(($6+4)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=((($8)+(1))|0);
 /** @type {number} */ var $10=$b;
 /** @type {number} */ var $11=(($10+8)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=($9>>>0)>($12>>>0);
 if($13){label=2;break;}else{label=8;break;}
 case 2: 
 /** @type {number} */ var $15=$b;
 /** @type {number} */ var $16=(($15+8)|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=($17>>>0)>=2147483646;
 if($18){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $20=$1;
 _lexerror($20,11312,0);
 case 4: 
 /** @type {number} */ var $22=$b;
 /** @type {number} */ var $23=(($22+8)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=($24<<1);
 $newsize=$25;
 /** @type {number} */ var $26=$newsize;
 /** @type {number} */ var $27=((($26)+(1))|0);
 /** @type {number} */ var $28=($27>>>0)>4294967293;
 if($28){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $30=$1;
 /** @type {number} */ var $31=(($30+52)|0);
 /** @type {number} */ var $32=HEAP32[(($31)>>2)];
 _luaM_toobig($32);
 label=7;break;
 case 6: 
 /** @type {number} */ var $35=$1;
 /** @type {number} */ var $36=(($35+52)|0);
 /** @type {number} */ var $37=HEAP32[(($36)>>2)];
 /** @type {number} */ var $38=$b;
 /** @type {number} */ var $39=(($38)|0);
 /** @type {number} */ var $40=HEAP32[(($39)>>2)];
 /** @type {number} */ var $41=$b;
 /** @type {number} */ var $42=(($41+8)|0);
 /** @type {number} */ var $43=HEAP32[(($42)>>2)];
 /** @type {number} */ var $44=$43;
 /** @type {number} */ var $45=$newsize;
 /** @type {number} */ var $46=$45;
 /** @type {number} */ var $47=_luaM_realloc_($37,$40,$44,$46);
 var $49=$47;label=7;break;
 case 7: 
 var $49;
 /** @type {number} */ var $50=$b;
 /** @type {number} */ var $51=(($50)|0);
 HEAP32[(($51)>>2)]=$49;
 /** @type {number} */ var $52=$newsize;
 /** @type {number} */ var $53=$b;
 /** @type {number} */ var $54=(($53+8)|0);
 HEAP32[(($54)>>2)]=$52;
 label=8;break;
 case 8: 
 /** @type {number} */ var $56=$2;
 /** @type {number} */ var $57=(($56)&255);
 /** @type {number} */ var $58=$b;
 /** @type {number} */ var $59=(($58+4)|0);
 /** @type {number} */ var $60=HEAP32[(($59)>>2)];
 /** @type {number} */ var $61=((($60)+(1))|0);
 HEAP32[(($59)>>2)]=$61;
 /** @type {number} */ var $62=$b;
 /** @type {number} */ var $63=(($62)|0);
 /** @type {number} */ var $64=HEAP32[(($63)>>2)];
 /** @type {number} */ var $65=(($64+$60)|0);
 HEAP8[($65)]=$57;
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $set
 * @return {number}
 */
function _check_next($ls,$set){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $2=$ls;
 $3=$set;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=(($4)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=($6|0)==0;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $9=$3;
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=(($10)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=_strchr($9,$12);
 /** @type {number} */ var $14=($13|0)!=0;
 if($14){label=4;break;}else{label=3;break;}
 case 3: 
 $1=0;
 label=8;break;
 case 4: 
 /** @type {number} */ var $17=$2;
 /** @type {number} */ var $18=$2;
 /** @type {number} */ var $19=(($18)|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 _save($17,$20);
 /** @type {number} */ var $21=$2;
 /** @type {number} */ var $22=(($21+56)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 /** @type {number} */ var $24=(($23)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=((($25)-(1))|0);
 HEAP32[(($24)>>2)]=$26;
 /** @type {number} */ var $27=($25>>>0)>0;
 if($27){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $29=$2;
 /** @type {number} */ var $30=(($29+56)|0);
 /** @type {number} */ var $31=HEAP32[(($30)>>2)];
 /** @type {number} */ var $32=(($31+4)|0);
 /** @type {number} */ var $33=HEAP32[(($32)>>2)];
 /** @type {number} */ var $34=(($33+1)|0);
 HEAP32[(($32)>>2)]=$34;
 /** @type {number} */ var $35=HEAP8[($33)];
 /** @type {number} */ var $36=($35&255);
 var $43=$36;label=7;break;
 case 6: 
 /** @type {number} */ var $38=$2;
 /** @type {number} */ var $39=(($38+56)|0);
 /** @type {number} */ var $40=HEAP32[(($39)>>2)];
 /** @type {number} */ var $41=_luaZ_fill($40);
 var $43=$41;label=7;break;
 case 7: 
 var $43;
 /** @type {number} */ var $44=$2;
 /** @type {number} */ var $45=(($44)|0);
 HEAP32[(($45)>>2)]=$43;
 $1=1;
 label=8;break;
 case 8: 
 /** @type {number} */ var $47=$1;
 STACKTOP=sp;return $47;
 }
}
/**
 * @param {number} $ls
 * @param {number} $seminfo
 * @return {number}
 */
function _read_numeral($ls,$seminfo){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $expo;
 /** @type {number} */ var $first;
 $1=$ls;
 $2=$seminfo;
 $expo=3520;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $first=$5;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=(($7)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 _save($6,$9);
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=(($10+56)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=(($12)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=((($14)-(1))|0);
 HEAP32[(($13)>>2)]=$15;
 /** @type {number} */ var $16=($14>>>0)>0;
 if($16){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $18=$1;
 /** @type {number} */ var $19=(($18+56)|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=(($20+4)|0);
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 /** @type {number} */ var $23=(($22+1)|0);
 HEAP32[(($21)>>2)]=$23;
 /** @type {number} */ var $24=HEAP8[($22)];
 /** @type {number} */ var $25=($24&255);
 var $32=$25;label=4;break;
 case 3: 
 /** @type {number} */ var $27=$1;
 /** @type {number} */ var $28=(($27+56)|0);
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 /** @type {number} */ var $30=_luaZ_fill($29);
 var $32=$30;label=4;break;
 case 4: 
 var $32;
 /** @type {number} */ var $33=$1;
 /** @type {number} */ var $34=(($33)|0);
 HEAP32[(($34)>>2)]=$32;
 /** @type {number} */ var $35=$first;
 /** @type {number} */ var $36=($35|0)==48;
 if($36){label=5;break;}else{label=7;break;}
 case 5: 
 /** @type {number} */ var $38=$1;
 /** @type {number} */ var $39=_check_next($38,3152);
 /** @type {number} */ var $40=($39|0)!=0;
 if($40){label=6;break;}else{label=7;break;}
 case 6: 
 $expo=2816;
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 /** @type {number} */ var $44=$1;
 /** @type {number} */ var $45=$expo;
 /** @type {number} */ var $46=_check_next($44,$45);
 /** @type {number} */ var $47=($46|0)!=0;
 if($47){label=9;break;}else{label=10;break;}
 case 9: 
 /** @type {number} */ var $49=$1;
 /** @type {number} */ var $50=_check_next($49,2584);
 label=10;break;
 case 10: 
 /** @type {number} */ var $52=$1;
 /** @type {number} */ var $53=(($52)|0);
 /** @type {number} */ var $54=HEAP32[(($53)>>2)];
 /** @type {number} */ var $55=((($54)+(1))|0);
 /** @type {number} */ var $56=((704+$55)|0);
 /** @type {number} */ var $57=HEAP8[($56)];
 /** @type {number} */ var $58=($57&255);
 /** @type {number} */ var $59=$58&16;
 /** @type {number} */ var $60=($59|0)!=0;
 if($60){label=12;break;}else{label=11;break;}
 case 11: 
 /** @type {number} */ var $62=$1;
 /** @type {number} */ var $63=(($62)|0);
 /** @type {number} */ var $64=HEAP32[(($63)>>2)];
 /** @type {number} */ var $65=($64|0)==46;
 if($65){label=12;break;}else{label=16;break;}
 case 12: 
 /** @type {number} */ var $67=$1;
 /** @type {number} */ var $68=$1;
 /** @type {number} */ var $69=(($68)|0);
 /** @type {number} */ var $70=HEAP32[(($69)>>2)];
 _save($67,$70);
 /** @type {number} */ var $71=$1;
 /** @type {number} */ var $72=(($71+56)|0);
 /** @type {number} */ var $73=HEAP32[(($72)>>2)];
 /** @type {number} */ var $74=(($73)|0);
 /** @type {number} */ var $75=HEAP32[(($74)>>2)];
 /** @type {number} */ var $76=((($75)-(1))|0);
 HEAP32[(($74)>>2)]=$76;
 /** @type {number} */ var $77=($75>>>0)>0;
 if($77){label=13;break;}else{label=14;break;}
 case 13: 
 /** @type {number} */ var $79=$1;
 /** @type {number} */ var $80=(($79+56)|0);
 /** @type {number} */ var $81=HEAP32[(($80)>>2)];
 /** @type {number} */ var $82=(($81+4)|0);
 /** @type {number} */ var $83=HEAP32[(($82)>>2)];
 /** @type {number} */ var $84=(($83+1)|0);
 HEAP32[(($82)>>2)]=$84;
 /** @type {number} */ var $85=HEAP8[($83)];
 /** @type {number} */ var $86=($85&255);
 var $93=$86;label=15;break;
 case 14: 
 /** @type {number} */ var $88=$1;
 /** @type {number} */ var $89=(($88+56)|0);
 /** @type {number} */ var $90=HEAP32[(($89)>>2)];
 /** @type {number} */ var $91=_luaZ_fill($90);
 var $93=$91;label=15;break;
 case 15: 
 var $93;
 /** @type {number} */ var $94=$1;
 /** @type {number} */ var $95=(($94)|0);
 HEAP32[(($95)>>2)]=$93;
 label=17;break;
 case 16: 
 label=18;break;
 case 17: 
 label=8;break;
 case 18: 
 /** @type {number} */ var $99=$1;
 _save($99,0);
 /** @type {number} */ var $100=$1;
 /** @type {number} */ var $101=$1;
 /** @type {number} */ var $102=(($101+76)|0);
 /** @type {number} */ var $103=HEAP8[($102)];
 _buffreplace($100,46,$103);
 /** @type {number} */ var $104=$1;
 /** @type {number} */ var $105=(($104+60)|0);
 /** @type {number} */ var $106=HEAP32[(($105)>>2)];
 /** @type {number} */ var $107=(($106)|0);
 /** @type {number} */ var $108=HEAP32[(($107)>>2)];
 /** @type {number} */ var $109=$1;
 /** @type {number} */ var $110=(($109+60)|0);
 /** @type {number} */ var $111=HEAP32[(($110)>>2)];
 /** @type {number} */ var $112=(($111+4)|0);
 /** @type {number} */ var $113=HEAP32[(($112)>>2)];
 /** @type {number} */ var $114=((($113)-(1))|0);
 /** @type {number} */ var $115=$2;
 /** @type {number} */ var $116=$115;
 /** @type {number} */ var $117=_luaO_str2d($108,$114,$116);
 /** @type {number} */ var $118=($117|0)!=0;
 if($118){label=20;break;}else{label=19;break;}
 case 19: 
 /** @type {number} */ var $120=$1;
 /** @type {number} */ var $121=$2;
 _trydecpoint($120,$121);
 label=20;break;
 case 20: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @return {number}
 */
function _readhexaesc($ls){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $c=sp;
 /** @type {number} */ var $i;
 /** @type {number} */ var $r;
 $1=$ls;
 $r=0;
 /** @type {number} */ var $2=(($c)|0);
 HEAP32[(($2)>>2)]=120;
 $i=1;
 label=2;break;
 case 2: 
 /** @type {number} */ var $4=$i;
 /** @type {number} */ var $5=($4|0)<3;
 if($5){label=3;break;}else{label=10;break;}
 case 3: 
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=(($7+56)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=(($9)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=((($11)-(1))|0);
 HEAP32[(($10)>>2)]=$12;
 /** @type {number} */ var $13=($11>>>0)>0;
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=(($15+56)|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=(($17+4)|0);
 /** @type {number} */ var $19=HEAP32[(($18)>>2)];
 /** @type {number} */ var $20=(($19+1)|0);
 HEAP32[(($18)>>2)]=$20;
 /** @type {number} */ var $21=HEAP8[($19)];
 /** @type {number} */ var $22=($21&255);
 var $29=$22;label=6;break;
 case 5: 
 /** @type {number} */ var $24=$1;
 /** @type {number} */ var $25=(($24+56)|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 /** @type {number} */ var $27=_luaZ_fill($26);
 var $29=$27;label=6;break;
 case 6: 
 var $29;
 /** @type {number} */ var $30=$1;
 /** @type {number} */ var $31=(($30)|0);
 HEAP32[(($31)>>2)]=$29;
 /** @type {number} */ var $32=$i;
 /** @type {number} */ var $33=(($c+($32<<2))|0);
 HEAP32[(($33)>>2)]=$29;
 /** @type {number} */ var $34=$i;
 /** @type {number} */ var $35=(($c+($34<<2))|0);
 /** @type {number} */ var $36=HEAP32[(($35)>>2)];
 /** @type {number} */ var $37=((($36)+(1))|0);
 /** @type {number} */ var $38=((704+$37)|0);
 /** @type {number} */ var $39=HEAP8[($38)];
 /** @type {number} */ var $40=($39&255);
 /** @type {number} */ var $41=$40&16;
 /** @type {number} */ var $42=($41|0)!=0;
 if($42){label=8;break;}else{label=7;break;}
 case 7: 
 /** @type {number} */ var $44=$1;
 /** @type {number} */ var $45=(($c)|0);
 /** @type {number} */ var $46=$i;
 /** @type {number} */ var $47=((($46)+(1))|0);
 _escerror($44,$45,$47,10432);
 label=8;break;
 case 8: 
 /** @type {number} */ var $49=$r;
 /** @type {number} */ var $50=$49<<4;
 /** @type {number} */ var $51=$i;
 /** @type {number} */ var $52=(($c+($51<<2))|0);
 /** @type {number} */ var $53=HEAP32[(($52)>>2)];
 /** @type {number} */ var $54=_luaO_hexavalue($53);
 /** @type {number} */ var $55=((($50)+($54))|0);
 $r=$55;
 label=9;break;
 case 9: 
 /** @type {number} */ var $57=$i;
 /** @type {number} */ var $58=((($57)+(1))|0);
 $i=$58;
 label=2;break;
 case 10: 
 /** @type {number} */ var $60=$r;
 STACKTOP=sp;return $60;
 }
}
/**
 * @param {number} $ls
 * @param {number} $c
 * @param {number} $n
 * @param {number} $msg
 * @return {number}
 */
function _escerror($ls,$c,$n,$msg){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $i;
 $1=$ls;
 $2=$c;
 $3=$n;
 $4=$msg;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($5+60)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=(($7+4)|0);
 HEAP32[(($8)>>2)]=0;
 /** @type {number} */ var $9=$1;
 _save($9,92);
 $i=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $11=$i;
 /** @type {number} */ var $12=$3;
 /** @type {number} */ var $13=($11|0)<($12|0);
 if($13){label=3;break;}else{label=6;break;}
 case 3: 
 /** @type {number} */ var $15=$i;
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=(($16+($15<<2))|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=($18|0)!=-1;
 if($19){label=4;break;}else{label=6;break;}
 case 4: 
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=$i;
 /** @type {number} */ var $23=$2;
 /** @type {number} */ var $24=(($23+($22<<2))|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 _save($21,$25);
 label=5;break;
 case 5: 
 /** @type {number} */ var $27=$i;
 /** @type {number} */ var $28=((($27)+(1))|0);
 $i=$28;
 label=2;break;
 case 6: 
 /** @type {number} */ var $30=$1;
 /** @type {number} */ var $31=$4;
 _lexerror($30,$31,289);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @return {number}
 */
function _readdecesc($ls){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $c=sp;
 /** @type {number} */ var $i;
 /** @type {number} */ var $r;
 $1=$ls;
 $r=0;
 $i=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $3=$i;
 /** @type {number} */ var $4=($3|0)<3;
 if($4){label=3;break;}else{label=9;break;}
 case 3: 
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=((($8)+(1))|0);
 /** @type {number} */ var $10=((704+$9)|0);
 /** @type {number} */ var $11=HEAP8[($10)];
 /** @type {number} */ var $12=($11&255);
 /** @type {number} */ var $13=$12&2;
 /** @type {number} */ var $14=($13|0)!=0;
 if($14){label=4;break;}else{label=9;break;}
 case 4: 
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=(($16)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=$i;
 /** @type {number} */ var $20=(($c+($19<<2))|0);
 HEAP32[(($20)>>2)]=$18;
 /** @type {number} */ var $21=$r;
 /** @type {number} */ var $22=((($21)*(10))&-1);
 /** @type {number} */ var $23=$i;
 /** @type {number} */ var $24=(($c+($23<<2))|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=((($22)+($25))|0);
 /** @type {number} */ var $27=((($26)-(48))|0);
 $r=$27;
 /** @type {number} */ var $28=$1;
 /** @type {number} */ var $29=(($28+56)|0);
 /** @type {number} */ var $30=HEAP32[(($29)>>2)];
 /** @type {number} */ var $31=(($30)|0);
 /** @type {number} */ var $32=HEAP32[(($31)>>2)];
 /** @type {number} */ var $33=((($32)-(1))|0);
 HEAP32[(($31)>>2)]=$33;
 /** @type {number} */ var $34=($32>>>0)>0;
 if($34){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $36=$1;
 /** @type {number} */ var $37=(($36+56)|0);
 /** @type {number} */ var $38=HEAP32[(($37)>>2)];
 /** @type {number} */ var $39=(($38+4)|0);
 /** @type {number} */ var $40=HEAP32[(($39)>>2)];
 /** @type {number} */ var $41=(($40+1)|0);
 HEAP32[(($39)>>2)]=$41;
 /** @type {number} */ var $42=HEAP8[($40)];
 /** @type {number} */ var $43=($42&255);
 var $50=$43;label=7;break;
 case 6: 
 /** @type {number} */ var $45=$1;
 /** @type {number} */ var $46=(($45+56)|0);
 /** @type {number} */ var $47=HEAP32[(($46)>>2)];
 /** @type {number} */ var $48=_luaZ_fill($47);
 var $50=$48;label=7;break;
 case 7: 
 var $50;
 /** @type {number} */ var $51=$1;
 /** @type {number} */ var $52=(($51)|0);
 HEAP32[(($52)>>2)]=$50;
 label=8;break;
 case 8: 
 /** @type {number} */ var $54=$i;
 /** @type {number} */ var $55=((($54)+(1))|0);
 $i=$55;
 label=2;break;
 case 9: 
 /** @type {number} */ var $57=$r;
 /** @type {number} */ var $58=($57|0)>255;
 if($58){label=10;break;}else{label=11;break;}
 case 10: 
 /** @type {number} */ var $60=$1;
 /** @type {number} */ var $61=(($c)|0);
 /** @type {number} */ var $62=$i;
 _escerror($60,$61,$62,10600);
 label=11;break;
 case 11: 
 /** @type {number} */ var $64=$r;
 STACKTOP=sp;return $64;
 }
}
/**
 * @param {number} $ls
 * @param {number} $from
 * @param {number} $to
 * @return {number}
 */
function _buffreplace($ls,$from,$to){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $n;
 /** @type {number} */ var $p;
 $1=$ls;
 $2=$from;
 $3=$to;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+60)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=(($6+4)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 $n=$8;
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=(($9+60)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=(($11)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 $p=$13;
 label=2;break;
 case 2: 
 /** @type {number} */ var $15=$n;
 /** @type {number} */ var $16=((($15)-(1))|0);
 $n=$16;
 /** @type {number} */ var $17=($15|0)!=0;
 if($17){label=3;break;}else{label=6;break;}
 case 3: 
 /** @type {number} */ var $19=$n;
 /** @type {number} */ var $20=$p;
 /** @type {number} */ var $21=(($20+$19)|0);
 /** @type {number} */ var $22=HEAP8[($21)];
 /** @type {number} */ var $23=(($22<<24)>>24);
 /** @type {number} */ var $24=$2;
 /** @type {number} */ var $25=(($24<<24)>>24);
 /** @type {number} */ var $26=($23|0)==($25|0);
 if($26){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $28=$3;
 /** @type {number} */ var $29=$n;
 /** @type {number} */ var $30=$p;
 /** @type {number} */ var $31=(($30+$29)|0);
 HEAP8[($31)]=$28;
 label=5;break;
 case 5: 
 label=2;break;
 case 6: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $seminfo
 * @return {number}
 */
function _trydecpoint($ls,$seminfo){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $old;
 $1=$ls;
 $2=$seminfo;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+76)|0);
 /** @type {number} */ var $5=HEAP8[($4)];
 $old=$5;
 /** @type {number} */ var $6=_localeconv();
 /** @type {number} */ var $7=(($6)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=(($8)|0);
 /** @type {number} */ var $10=HEAP8[($9)];
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=(($11+76)|0);
 HEAP8[($12)]=$10;
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=$old;
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=(($15+76)|0);
 /** @type {number} */ var $17=HEAP8[($16)];
 _buffreplace($13,$14,$17);
 /** @type {number} */ var $18=$1;
 /** @type {number} */ var $19=(($18+60)|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=(($20)|0);
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 /** @type {number} */ var $23=$1;
 /** @type {number} */ var $24=(($23+60)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=(($25+4)|0);
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=((($27)-(1))|0);
 /** @type {number} */ var $29=$2;
 /** @type {number} */ var $30=$29;
 /** @type {number} */ var $31=_luaO_str2d($22,$28,$30);
 /** @type {number} */ var $32=($31|0)!=0;
 if($32){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $34=$1;
 /** @type {number} */ var $35=$1;
 /** @type {number} */ var $36=(($35+76)|0);
 /** @type {number} */ var $37=HEAP8[($36)];
 _buffreplace($34,$37,46);
 /** @type {number} */ var $38=$1;
 _lexerror($38,11720,287);
 case 3: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $block
 * @param {number} $size
 * @param {number} $size_elems
 * @param {number} $limit
 * @param {number} $what
 * @return {number}
 */
function _luaM_growaux_($L,$block,$size,$size_elems,$limit,$what){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 /** @type {number} */ var $6;
 /** @type {number} */ var $newblock;
 /** @type {number} */ var $newsize;
 $1=$L;
 $2=$block;
 $3=$size;
 $4=$size_elems;
 $5=$limit;
 $6=$what;
 /** @type {number} */ var $7=$3;
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=$5;
 /** @type {number} */ var $10=(((($9|0))/(2))&-1);
 /** @type {number} */ var $11=($8|0)>=($10|0);
 if($11){label=2;break;}else{label=5;break;}
 case 2: 
 /** @type {number} */ var $13=$3;
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=$5;
 /** @type {number} */ var $16=($14|0)>=($15|0);
 if($16){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $18=$1;
 /** @type {number} */ var $19=$6;
 /** @type {number} */ var $20=$5;
 _luaG_runerror($18,11680,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$19,HEAP32[(((tempVarArgs)+(8))>>2)]=$20,tempVarArgs)); STACKTOP=tempVarArgs;
 case 4: 
 /** @type {number} */ var $22=$5;
 $newsize=$22;
 label=8;break;
 case 5: 
 /** @type {number} */ var $24=$3;
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=($25<<1);
 $newsize=$26;
 /** @type {number} */ var $27=$newsize;
 /** @type {number} */ var $28=($27|0)<4;
 if($28){label=6;break;}else{label=7;break;}
 case 6: 
 $newsize=4;
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 /** @type {number} */ var $32=$newsize;
 /** @type {number} */ var $33=((($32)+(1))|0);
 /** @type {number} */ var $34=$4;
 /** @type {number} */ var $35=(((4294967293)/(($34>>>0)))&-1);
 /** @type {number} */ var $36=($33>>>0)>($35>>>0);
 if($36){label=9;break;}else{label=10;break;}
 case 9: 
 /** @type {number} */ var $38=$1;
 _luaM_toobig($38);
 label=11;break;
 case 10: 
 /** @type {number} */ var $41=$1;
 /** @type {number} */ var $42=$2;
 /** @type {number} */ var $43=$3;
 /** @type {number} */ var $44=HEAP32[(($43)>>2)];
 /** @type {number} */ var $45=$4;
 /** @type {number} */ var $46=(Math_imul($44,$45)|0);
 /** @type {number} */ var $47=$newsize;
 /** @type {number} */ var $48=$4;
 /** @type {number} */ var $49=(Math_imul($47,$48)|0);
 /** @type {number} */ var $50=_luaM_realloc_($41,$42,$46,$49);
 var $52=$50;label=11;break;
 case 11: 
 var $52;
 $newblock=$52;
 /** @type {number} */ var $53=$newsize;
 /** @type {number} */ var $54=$3;
 HEAP32[(($54)>>2)]=$53;
 /** @type {number} */ var $55=$newblock;
 STACKTOP=sp;return $55;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaM_toobig($L){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 _luaG_runerror($2,11640,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}
/**
 * @param {number} $L
 * @param {number} $block
 * @param {number} $osize
 * @param {number} $nsize
 * @return {number}
 */
function _luaM_realloc_($L,$block,$osize,$nsize){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $newblock;
 /** @type {number} */ var $g;
 /** @type {number} */ var $realosize;
 $1=$L;
 $2=$block;
 $3=$osize;
 $4=$nsize;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($5+12)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 $g=$7;
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=($8|0)!=0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $11=$3;
 var $14=$11;label=4;break;
 case 3: 
 var $14=0;label=4;break;
 case 4: 
 var $14;
 $realosize=$14;
 /** @type {number} */ var $15=$g;
 /** @type {number} */ var $16=(($15)|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=$g;
 /** @type {number} */ var $19=(($18+4)|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=$2;
 /** @type {number} */ var $22=$3;
 /** @type {number} */ var $23=$4;
 /** @type {number} */ var $24=FUNCTION_TABLE[$17]($20,$21,$22,$23);
 $newblock=$24;
 /** @type {number} */ var $25=$newblock;
 /** @type {number} */ var $26=($25|0)==0;
 if($26){label=5;break;}else{label=11;break;}
 case 5: 
 /** @type {number} */ var $28=$4;
 /** @type {number} */ var $29=($28>>>0)>0;
 if($29){label=6;break;}else{label=11;break;}
 case 6: 
 /** @type {number} */ var $31=$g;
 /** @type {number} */ var $32=(($31+63)|0);
 /** @type {number} */ var $33=HEAP8[($32)];
 /** @type {number} */ var $34=(($33<<24)>>24)!=0;
 if($34){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $36=$1;
 _luaC_fullgc($36,1);
 /** @type {number} */ var $37=$g;
 /** @type {number} */ var $38=(($37)|0);
 /** @type {number} */ var $39=HEAP32[(($38)>>2)];
 /** @type {number} */ var $40=$g;
 /** @type {number} */ var $41=(($40+4)|0);
 /** @type {number} */ var $42=HEAP32[(($41)>>2)];
 /** @type {number} */ var $43=$2;
 /** @type {number} */ var $44=$3;
 /** @type {number} */ var $45=$4;
 /** @type {number} */ var $46=FUNCTION_TABLE[$39]($42,$43,$44,$45);
 $newblock=$46;
 label=8;break;
 case 8: 
 /** @type {number} */ var $48=$newblock;
 /** @type {number} */ var $49=($48|0)==0;
 if($49){label=9;break;}else{label=10;break;}
 case 9: 
 /** @type {number} */ var $51=$1;
 _luaD_throw($51,4);
 case 10: 
 label=11;break;
 case 11: 
 /** @type {number} */ var $54=$g;
 /** @type {number} */ var $55=(($54+12)|0);
 /** @type {number} */ var $56=HEAP32[(($55)>>2)];
 /** @type {number} */ var $57=$4;
 /** @type {number} */ var $58=((($56)+($57))|0);
 /** @type {number} */ var $59=$realosize;
 /** @type {number} */ var $60=((($58)-($59))|0);
 /** @type {number} */ var $61=$g;
 /** @type {number} */ var $62=(($61+12)|0);
 HEAP32[(($62)>>2)]=$60;
 /** @type {number} */ var $63=$newblock;
 STACKTOP=sp;return $63;
 }
}
/**
 * @param {number} $x
 * @return {number}
 */
function _luaO_int2fb($x){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $e;
 $2=$x;
 $e=0;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=($3>>>0)<8;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $6=$2;
 $1=$6;
 label=7;break;
 case 3: 
 label=4;break;
 case 4: 
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=($9>>>0)>=16;
 if($10){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=((($12)+(1))|0);
 /** @type {number} */ var $14=$13>>>1;
 $2=$14;
 /** @type {number} */ var $15=$e;
 /** @type {number} */ var $16=((($15)+(1))|0);
 $e=$16;
 label=4;break;
 case 6: 
 /** @type {number} */ var $18=$e;
 /** @type {number} */ var $19=((($18)+(1))|0);
 /** @type {number} */ var $20=$19<<3;
 /** @type {number} */ var $21=$2;
 /** @type {number} */ var $22=((($21)-(8))|0);
 /** @type {number} */ var $23=$20|$22;
 $1=$23;
 label=7;break;
 case 7: 
 /** @type {number} */ var $25=$1;
 STACKTOP=sp;return $25;
 }
}
/**
 * @param {number} $x
 * @return {number}
 */
function _luaO_fb2int($x){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $e;
 $2=$x;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=$3>>3;
 /** @type {number} */ var $5=$4&31;
 $e=$5;
 /** @type {number} */ var $6=$e;
 /** @type {number} */ var $7=($6|0)==0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $9=$2;
 $1=$9;
 label=4;break;
 case 3: 
 /** @type {number} */ var $11=$2;
 /** @type {number} */ var $12=$11&7;
 /** @type {number} */ var $13=((($12)+(8))|0);
 /** @type {number} */ var $14=$e;
 /** @type {number} */ var $15=((($14)-(1))|0);
 /** @type {number} */ var $16=$13<<$15;
 $1=$16;
 label=4;break;
 case 4: 
 /** @type {number} */ var $18=$1;
 STACKTOP=sp;return $18;
 }
}
/**
 * @param {number} $x
 * @return {number}
 */
function _luaO_ceillog2($x){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $l;
 $1=$x;
 $l=0;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=((($2)-(1))|0);
 $1=$3;
 label=2;break;
 case 2: 
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=($5>>>0)>=256;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $8=$l;
 /** @type {number} */ var $9=((($8)+(8))|0);
 $l=$9;
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=$10>>>8;
 $1=$11;
 label=2;break;
 case 4: 
 /** @type {number} */ var $13=$l;
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=((1296+$14)|0);
 /** @type {number} */ var $16=HEAP8[($15)];
 /** @type {number} */ var $17=($16&255);
 /** @type {number} */ var $18=((($13)+($17))|0);
 STACKTOP=sp;return $18;
 }
}
/**
 * @param {number} $op
 * @param {number} $v1
 * @param {number} $v2
 * @return {number}
 */
function _luaO_arith($op,$v1,$v2){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 $2=$op;
 $3=$v1;
 $4=$v2;
 /** @type {number} */ var $5=$2;
 switch(($5|0)){case 0:{ label=2;break;}case 1:{ label=3;break;}case 2:{ label=4;break;}case 3:{ label=5;break;}case 4:{ label=6;break;}case 5:{ label=7;break;}case 6:{ label=8;break;}default:{label=9;break;}}break;
 case 2: 
 /** @type {number} */ var $7=$3;
 /** @type {number} */ var $8=$4;
 /** @type {number} */ var $9=($7)+($8);
 $1=$9;
 label=10;break;
 case 3: 
 /** @type {number} */ var $11=$3;
 /** @type {number} */ var $12=$4;
 /** @type {number} */ var $13=($11)-($12);
 $1=$13;
 label=10;break;
 case 4: 
 /** @type {number} */ var $15=$3;
 /** @type {number} */ var $16=$4;
 /** @type {number} */ var $17=($15)*($16);
 $1=$17;
 label=10;break;
 case 5: 
 /** @type {number} */ var $19=$3;
 /** @type {number} */ var $20=$4;
 /** @type {number} */ var $21=($19)/($20);
 $1=$21;
 label=10;break;
 case 6: 
 /** @type {number} */ var $23=$3;
 /** @type {number} */ var $24=$3;
 /** @type {number} */ var $25=$4;
 /** @type {number} */ var $26=($24)/($25);
 /** @type {number} */ var $27=Math_floor($26);
 /** @type {number} */ var $28=$4;
 /** @type {number} */ var $29=($27)*($28);
 /** @type {number} */ var $30=($23)-($29);
 $1=$30;
 label=10;break;
 case 7: 
 /** @type {number} */ var $32=$3;
 /** @type {number} */ var $33=$4;
 /** @type {number} */ var $34=Math_pow($32,$33);
 $1=$34;
 label=10;break;
 case 8: 
 /** @type {number} */ var $36=$3;
 /** @type {number} */ var $37=((-.0))-($36);
 $1=$37;
 label=10;break;
 case 9: 
 $1=0;
 label=10;break;
 case 10: 
 /** @type {number} */ var $40=$1;
 STACKTOP=sp;return $40;
 }
}
/**
 * @param {number} $c
 * @return {number}
 */
function _luaO_hexavalue($c){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $2=$c;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=((($3)+(1))|0);
 /** @type {number} */ var $5=((704+$4)|0);
 /** @type {number} */ var $6=HEAP8[($5)];
 /** @type {number} */ var $7=($6&255);
 /** @type {number} */ var $8=$7&2;
 /** @type {number} */ var $9=($8|0)!=0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $11=$2;
 /** @type {number} */ var $12=((($11)-(48))|0);
 $1=$12;
 label=4;break;
 case 3: 
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=$14|32;
 /** @type {number} */ var $16=((($15)-(97))|0);
 /** @type {number} */ var $17=((($16)+(10))|0);
 $1=$17;
 label=4;break;
 case 4: 
 /** @type {number} */ var $19=$1;
 STACKTOP=sp;return $19;
 }
}
/**
 * @param {number} $s
 * @param {number} $len
 * @param {number} $result
 * @return {number}
 */
function _luaO_str2d($s,$len,$result){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $endptr=sp;
 $2=$s;
 $3=$len;
 $4=$result;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=_strpbrk($5,11288);
 /** @type {number} */ var $7=($6|0)!=0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=13;break;
 case 3: 
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=_strpbrk($10,11616);
 /** @type {number} */ var $12=($11|0)!=0;
 if($12){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=_lua_strx2number($14,$endptr);
 /** @type {number} */ var $16=$4;
 HEAPF64[(($16)>>3)]=$15;
 label=6;break;
 case 5: 
 /** @type {number} */ var $18=$2;
 /** @type {number} */ var $19=_strtod($18,$endptr);
 /** @type {number} */ var $20=$4;
 HEAPF64[(($20)>>3)]=$19;
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 /** @type {number} */ var $23=HEAP32[(($endptr)>>2)];
 /** @type {number} */ var $24=$2;
 /** @type {number} */ var $25=($23|0)==($24|0);
 if($25){label=8;break;}else{label=9;break;}
 case 8: 
 $1=0;
 label=13;break;
 case 9: 
 label=10;break;
 case 10: 
 /** @type {number} */ var $29=HEAP32[(($endptr)>>2)];
 /** @type {number} */ var $30=HEAP8[($29)];
 /** @type {number} */ var $31=($30&255);
 /** @type {number} */ var $32=((($31)+(1))|0);
 /** @type {number} */ var $33=((704+$32)|0);
 /** @type {number} */ var $34=HEAP8[($33)];
 /** @type {number} */ var $35=($34&255);
 /** @type {number} */ var $36=$35&8;
 /** @type {number} */ var $37=($36|0)!=0;
 if($37){label=11;break;}else{label=12;break;}
 case 11: 
 /** @type {number} */ var $39=HEAP32[(($endptr)>>2)];
 /** @type {number} */ var $40=(($39+1)|0);
 HEAP32[(($endptr)>>2)]=$40;
 label=10;break;
 case 12: 
 /** @type {number} */ var $42=HEAP32[(($endptr)>>2)];
 /** @type {number} */ var $43=$2;
 /** @type {number} */ var $44=$3;
 /** @type {number} */ var $45=(($43+$44)|0);
 /** @type {number} */ var $46=($42|0)==($45|0);
 /** @type {number} */ var $47=($46&1);
 $1=$47;
 label=13;break;
 case 13: 
 /** @type {number} */ var $49=$1;
 STACKTOP=sp;return $49;
 }
}
/**
 * @param {number} $L
 * @param {number} $fmt
 * @param {number} $argp
 * @return {number}
 */
function _luaO_pushvfstring($L,$fmt,$argp){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $n;
 /** @type {number} */ var $e;
 /** @type {number} */ var $io;
 /** @type {number} */ var $x_;
 /** @type {number} */ var $s;
 /** @type {number} */ var $buff=sp;
 /** @type {number} */ var $io1;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $buff3=(sp)+(8);
 /** @type {number} */ var $l;
 $1=$L;
 $2=$fmt;
 $3=$argp;
 $n=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=_strchr($5,37);
 $e=$6;
 /** @type {number} */ var $7=$e;
 /** @type {number} */ var $8=($7|0)==0;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 label=24;break;
 case 4: 
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=(($11+8)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 $io=$13;
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=$2;
 /** @type {number} */ var $16=$e;
 /** @type {number} */ var $17=$2;
 /** @type {number} */ var $18=$16;
 /** @type {number} */ var $19=$17;
 /** @type {number} */ var $20=((($18)-($19))|0);
 /** @type {number} */ var $21=_luaS_newlstr($14,$15,$20);
 $x_=$21;
 /** @type {number} */ var $22=$x_;
 /** @type {number} */ var $23=$22;
 /** @type {number} */ var $24=$io;
 /** @type {number} */ var $25=(($24)|0);
 /** @type {number} */ var $26=$25;
 HEAP32[(($26)>>2)]=$23;
 /** @type {number} */ var $27=$x_;
 /** @type {number} */ var $28=$27;
 /** @type {number} */ var $29=(($28+4)|0);
 /** @type {number} */ var $30=HEAP8[($29)];
 /** @type {number} */ var $31=($30&255);
 /** @type {number} */ var $32=$31|64;
 /** @type {number} */ var $33=$io;
 /** @type {number} */ var $34=(($33+8)|0);
 HEAP32[(($34)>>2)]=$32;
 /** @type {number} */ var $35=$1;
 /** @type {number} */ var $36=(($35+8)|0);
 /** @type {number} */ var $37=HEAP32[(($36)>>2)];
 /** @type {number} */ var $38=(($37+16)|0);
 HEAP32[(($36)>>2)]=$38;
 /** @type {number} */ var $39=$1;
 /** @type {number} */ var $40=(($39+24)|0);
 /** @type {number} */ var $41=HEAP32[(($40)>>2)];
 /** @type {number} */ var $42=$1;
 /** @type {number} */ var $43=(($42+8)|0);
 /** @type {number} */ var $44=HEAP32[(($43)>>2)];
 /** @type {number} */ var $45=$41;
 /** @type {number} */ var $46=$44;
 /** @type {number} */ var $47=((($45)-($46))|0);
 /** @type {number} */ var $48=(((($47|0))/(16))&-1);
 /** @type {number} */ var $49=($48|0)<=0;
 if($49){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $51=$1;
 _luaD_growstack($51,0);
 label=7;break;
 case 6: 
 label=7;break;
 case 7: 
 /** @type {number} */ var $54=$e;
 /** @type {number} */ var $55=(($54+1)|0);
 /** @type {number} */ var $56=HEAP8[($55)];
 /** @type {number} */ var $57=(($56<<24)>>24);
 switch(($57|0)){case 99:{ label=11;break;}case 100:{ label=12;break;}case 102:{ label=16;break;}case 112:{ label=20;break;}case 37:{ label=21;break;}case 115:{ label=8;break;}default:{label=22;break;}}break;
 case 8: 
 /** @type {number} */ var $59=$3;
 /** @type {number} */ var $60=(tempInt=HEAP32[((($59)+(4))>>2)],HEAP32[((($59)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($59)>>2)])+(tempInt))>>2)]);
 $s=$60;
 /** @type {number} */ var $61=$s;
 /** @type {number} */ var $62=($61|0)==0;
 if($62){label=9;break;}else{label=10;break;}
 case 9: 
 $s=9224;
 label=10;break;
 case 10: 
 /** @type {number} */ var $65=$1;
 /** @type {number} */ var $66=$s;
 /** @type {number} */ var $67=$s;
 /** @type {number} */ var $68=_strlen($67);
 _pushstr($65,$66,$68);
 label=23;break;
 case 11: 
 /** @type {number} */ var $70=$3;
 /** @type {number} */ var $71=(tempInt=HEAP32[((($70)+(4))>>2)],HEAP32[((($70)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($70)>>2)])+(tempInt))>>2)]);
 /** @type {number} */ var $72=(($71)&255);
 HEAP8[($buff)]=$72;
 /** @type {number} */ var $73=$1;
 _pushstr($73,$buff,1);
 label=23;break;
 case 12: 
 /** @type {number} */ var $75=$1;
 /** @type {number} */ var $76=(($75+8)|0);
 /** @type {number} */ var $77=HEAP32[(($76)>>2)];
 $io1=$77;
 /** @type {number} */ var $78=$3;
 /** @type {number} */ var $79=(tempInt=HEAP32[((($78)+(4))>>2)],HEAP32[((($78)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($78)>>2)])+(tempInt))>>2)]);
 /** @type {number} */ var $80=($79|0);
 /** @type {number} */ var $81=$io1;
 /** @type {number} */ var $82=(($81)|0);
 /** @type {number} */ var $83=$82;
 HEAPF64[(($83)>>3)]=$80;
 /** @type {number} */ var $84=$io1;
 /** @type {number} */ var $85=(($84+8)|0);
 HEAP32[(($85)>>2)]=3;
 /** @type {number} */ var $86=$1;
 /** @type {number} */ var $87=(($86+8)|0);
 /** @type {number} */ var $88=HEAP32[(($87)>>2)];
 /** @type {number} */ var $89=(($88+16)|0);
 HEAP32[(($87)>>2)]=$89;
 /** @type {number} */ var $90=$1;
 /** @type {number} */ var $91=(($90+24)|0);
 /** @type {number} */ var $92=HEAP32[(($91)>>2)];
 /** @type {number} */ var $93=$1;
 /** @type {number} */ var $94=(($93+8)|0);
 /** @type {number} */ var $95=HEAP32[(($94)>>2)];
 /** @type {number} */ var $96=$92;
 /** @type {number} */ var $97=$95;
 /** @type {number} */ var $98=((($96)-($97))|0);
 /** @type {number} */ var $99=(((($98|0))/(16))&-1);
 /** @type {number} */ var $100=($99|0)<=0;
 if($100){label=13;break;}else{label=14;break;}
 case 13: 
 /** @type {number} */ var $102=$1;
 _luaD_growstack($102,0);
 label=15;break;
 case 14: 
 label=15;break;
 case 15: 
 label=23;break;
 case 16: 
 /** @type {number} */ var $106=$1;
 /** @type {number} */ var $107=(($106+8)|0);
 /** @type {number} */ var $108=HEAP32[(($107)>>2)];
 $io2=$108;
 /** @type {number} */ var $109=$3;
 /** @type {number} */ var $110=(tempInt=HEAP32[((($109)+(4))>>2)],HEAP32[((($109)+(4))>>2)]=tempInt + 8,HEAPF64[(((HEAP32[(($109)>>2)])+(tempInt))>>3)]);
 /** @type {number} */ var $111=$io2;
 /** @type {number} */ var $112=(($111)|0);
 /** @type {number} */ var $113=$112;
 HEAPF64[(($113)>>3)]=$110;
 /** @type {number} */ var $114=$io2;
 /** @type {number} */ var $115=(($114+8)|0);
 HEAP32[(($115)>>2)]=3;
 /** @type {number} */ var $116=$1;
 /** @type {number} */ var $117=(($116+8)|0);
 /** @type {number} */ var $118=HEAP32[(($117)>>2)];
 /** @type {number} */ var $119=(($118+16)|0);
 HEAP32[(($117)>>2)]=$119;
 /** @type {number} */ var $120=$1;
 /** @type {number} */ var $121=(($120+24)|0);
 /** @type {number} */ var $122=HEAP32[(($121)>>2)];
 /** @type {number} */ var $123=$1;
 /** @type {number} */ var $124=(($123+8)|0);
 /** @type {number} */ var $125=HEAP32[(($124)>>2)];
 /** @type {number} */ var $126=$122;
 /** @type {number} */ var $127=$125;
 /** @type {number} */ var $128=((($126)-($127))|0);
 /** @type {number} */ var $129=(((($128|0))/(16))&-1);
 /** @type {number} */ var $130=($129|0)<=0;
 if($130){label=17;break;}else{label=18;break;}
 case 17: 
 /** @type {number} */ var $132=$1;
 _luaD_growstack($132,0);
 label=19;break;
 case 18: 
 label=19;break;
 case 19: 
 label=23;break;
 case 20: 
 /** @type {number} */ var $136=(($buff3)|0);
 /** @type {number} */ var $137=$3;
 /** @type {number} */ var $138=(tempInt=HEAP32[((($137)+(4))>>2)],HEAP32[((($137)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($137)>>2)])+(tempInt))>>2)]);
 /** @type {number} */ var $139=_sprintf($136,7168,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$138,tempVarArgs)); STACKTOP=tempVarArgs;
 $l=$139;
 /** @type {number} */ var $140=$1;
 /** @type {number} */ var $141=(($buff3)|0);
 /** @type {number} */ var $142=$l;
 _pushstr($140,$141,$142);
 label=23;break;
 case 21: 
 /** @type {number} */ var $144=$1;
 _pushstr($144,5664,1);
 label=23;break;
 case 22: 
 /** @type {number} */ var $146=$1;
 /** @type {number} */ var $147=$e;
 /** @type {number} */ var $148=(($147+1)|0);
 /** @type {number} */ var $149=HEAP8[($148)];
 /** @type {number} */ var $150=(($149<<24)>>24);
 _luaG_runerror($146,4360,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$150,tempVarArgs)); STACKTOP=tempVarArgs;
 case 23: 
 /** @type {number} */ var $152=$n;
 /** @type {number} */ var $153=((($152)+(2))|0);
 $n=$153;
 /** @type {number} */ var $154=$e;
 /** @type {number} */ var $155=(($154+2)|0);
 $2=$155;
 label=2;break;
 case 24: 
 /** @type {number} */ var $157=$1;
 /** @type {number} */ var $158=$2;
 /** @type {number} */ var $159=$2;
 /** @type {number} */ var $160=_strlen($159);
 _pushstr($157,$158,$160);
 /** @type {number} */ var $161=$n;
 /** @type {number} */ var $162=($161|0)>0;
 if($162){label=25;break;}else{label=26;break;}
 case 25: 
 /** @type {number} */ var $164=$1;
 /** @type {number} */ var $165=$n;
 /** @type {number} */ var $166=((($165)+(1))|0);
 _luaV_concat($164,$166);
 label=26;break;
 case 26: 
 /** @type {number} */ var $168=$1;
 /** @type {number} */ var $169=(($168+8)|0);
 /** @type {number} */ var $170=HEAP32[(($169)>>2)];
 /** @type {number} */ var $171=((($170)-(16))|0);
 /** @type {number} */ var $172=(($171)|0);
 /** @type {number} */ var $173=$172;
 /** @type {number} */ var $174=HEAP32[(($173)>>2)];
 /** @type {number} */ var $175=$174;
 /** @type {number} */ var $176=(($175+16)|0);
 /** @type {number} */ var $177=$176;
 STACKTOP=sp;return $177;
 }
}
/**
 * @param {number} $L
 * @param {number} $fmt
 * @param {number} varrp
 * @return {number}
 */
function _luaO_pushfstring($L,$fmt,varrp){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $msg;
 /** @type {number} */ var $argp=sp;
 $1=$L;
 $2=$fmt;
 /** @type {number} */ var $3=(($argp)|0);
 /** @type {number} */ var $4=$3;
 HEAP32[(($4)>>2)]=varrp;HEAP32[((($4)+(4))>>2)]=0;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=(($argp)|0);
 /** @type {number} */ var $8=_luaO_pushvfstring($5,$6,$7);
 $msg=$8;
 /** @type {number} */ var $9=(($argp)|0);
 /** @type {number} */ var $10=$9;
 /** @type {number} */ var $11=$msg;
 STACKTOP=sp;return $11;
}
/**
 * @param {number} $out
 * @param {number} $source
 * @param {number} $bufflen
 * @return {number}
 */
function _luaO_chunkid($out,$source,$bufflen){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $l;
 /** @type {number} */ var $nl;
 $1=$out;
 $2=$source;
 $3=$bufflen;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_strlen($4);
 $l=$5;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=HEAP8[($6)];
 /** @type {number} */ var $8=(($7<<24)>>24);
 /** @type {number} */ var $9=($8|0)==61;
 if($9){label=2;break;}else{label=6;break;}
 case 2: 
 /** @type {number} */ var $11=$l;
 /** @type {number} */ var $12=$3;
 /** @type {number} */ var $13=($11>>>0)<=($12>>>0);
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=(($16+1)|0);
 /** @type {number} */ var $18=$l;
 /** @type {number} */ var $19=$18;
 (_memcpy($15, $17, $19)|0);
 label=5;break;
 case 4: 
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=$2;
 /** @type {number} */ var $23=(($22+1)|0);
 /** @type {number} */ var $24=$3;
 /** @type {number} */ var $25=((($24)-(1))|0);
 /** @type {number} */ var $26=$25;
 (_memcpy($21, $23, $26)|0);
 /** @type {number} */ var $27=$3;
 /** @type {number} */ var $28=((($27)-(1))|0);
 /** @type {number} */ var $29=$1;
 /** @type {number} */ var $30=(($29+$28)|0);
 $1=$30;
 /** @type {number} */ var $31=$1;
 HEAP8[($31)]=0;
 label=5;break;
 case 5: 
 label=21;break;
 case 6: 
 /** @type {number} */ var $34=$2;
 /** @type {number} */ var $35=HEAP8[($34)];
 /** @type {number} */ var $36=(($35<<24)>>24);
 /** @type {number} */ var $37=($36|0)==64;
 if($37){label=7;break;}else{label=11;break;}
 case 7: 
 /** @type {number} */ var $39=$l;
 /** @type {number} */ var $40=$3;
 /** @type {number} */ var $41=($39>>>0)<=($40>>>0);
 if($41){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $43=$1;
 /** @type {number} */ var $44=$2;
 /** @type {number} */ var $45=(($44+1)|0);
 /** @type {number} */ var $46=$l;
 /** @type {number} */ var $47=$46;
 (_memcpy($43, $45, $47)|0);
 label=10;break;
 case 9: 
 /** @type {number} */ var $49=$1;
 HEAP8[($49)]=HEAP8[(3928)];HEAP8[((($49)+(1))|0)]=HEAP8[(3929)];HEAP8[((($49)+(2))|0)]=HEAP8[(3930)];
 /** @type {number} */ var $50=$1;
 /** @type {number} */ var $51=(($50+3)|0);
 $1=$51;
 /** @type {number} */ var $52=$3;
 /** @type {number} */ var $53=((($52)-(3))|0);
 $3=$53;
 /** @type {number} */ var $54=$1;
 /** @type {number} */ var $55=$2;
 /** @type {number} */ var $56=(($55+1)|0);
 /** @type {number} */ var $57=$l;
 /** @type {number} */ var $58=(($56+$57)|0);
 /** @type {number} */ var $59=$3;
 /** @type {number} */ var $60=(((-$59))|0);
 /** @type {number} */ var $61=(($58+$60)|0);
 /** @type {number} */ var $62=$3;
 /** @type {number} */ var $63=$62;
 (_memcpy($54, $61, $63)|0);
 label=10;break;
 case 10: 
 label=20;break;
 case 11: 
 /** @type {number} */ var $66=$2;
 /** @type {number} */ var $67=_strchr($66,10);
 $nl=$67;
 /** @type {number} */ var $68=$1;
 (_memcpy($68, 3480, 9)|0);
 /** @type {number} */ var $69=$1;
 /** @type {number} */ var $70=(($69+9)|0);
 $1=$70;
 /** @type {number} */ var $71=$3;
 /** @type {number} */ var $72=((($71)-(15))|0);
 $3=$72;
 /** @type {number} */ var $73=$l;
 /** @type {number} */ var $74=$3;
 /** @type {number} */ var $75=($73>>>0)<($74>>>0);
 if($75){label=12;break;}else{label=14;break;}
 case 12: 
 /** @type {number} */ var $77=$nl;
 /** @type {number} */ var $78=($77|0)==0;
 if($78){label=13;break;}else{label=14;break;}
 case 13: 
 /** @type {number} */ var $80=$1;
 /** @type {number} */ var $81=$2;
 /** @type {number} */ var $82=$l;
 /** @type {number} */ var $83=$82;
 (_memcpy($80, $81, $83)|0);
 /** @type {number} */ var $84=$l;
 /** @type {number} */ var $85=$1;
 /** @type {number} */ var $86=(($85+$84)|0);
 $1=$86;
 label=19;break;
 case 14: 
 /** @type {number} */ var $88=$nl;
 /** @type {number} */ var $89=($88|0)!=0;
 if($89){label=15;break;}else{label=16;break;}
 case 15: 
 /** @type {number} */ var $91=$nl;
 /** @type {number} */ var $92=$2;
 /** @type {number} */ var $93=$91;
 /** @type {number} */ var $94=$92;
 /** @type {number} */ var $95=((($93)-($94))|0);
 $l=$95;
 label=16;break;
 case 16: 
 /** @type {number} */ var $97=$l;
 /** @type {number} */ var $98=$3;
 /** @type {number} */ var $99=($97>>>0)>($98>>>0);
 if($99){label=17;break;}else{label=18;break;}
 case 17: 
 /** @type {number} */ var $101=$3;
 $l=$101;
 label=18;break;
 case 18: 
 /** @type {number} */ var $103=$1;
 /** @type {number} */ var $104=$2;
 /** @type {number} */ var $105=$l;
 /** @type {number} */ var $106=$105;
 (_memcpy($103, $104, $106)|0);
 /** @type {number} */ var $107=$l;
 /** @type {number} */ var $108=$1;
 /** @type {number} */ var $109=(($108+$107)|0);
 $1=$109;
 /** @type {number} */ var $110=$1;
 HEAP8[($110)]=HEAP8[(3928)];HEAP8[((($110)+(1))|0)]=HEAP8[(3929)];HEAP8[((($110)+(2))|0)]=HEAP8[(3930)];
 /** @type {number} */ var $111=$1;
 /** @type {number} */ var $112=(($111+3)|0);
 $1=$112;
 label=19;break;
 case 19: 
 /** @type {number} */ var $114=$1;
 HEAP8[($114)]=HEAP8[(3128)];HEAP8[((($114)+(1))|0)]=HEAP8[(3129)];HEAP8[((($114)+(2))|0)]=HEAP8[(3130)];
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $s
 * @param {number} $endptr
 * @return {number}
 */
function _lua_strx2number($s,$endptr){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2=sp;
 /** @type {number} */ var $3;
 /** @type {number} */ var $r;
 /** @type {number} */ var $e=(sp)+(8);
 /** @type {number} */ var $i=(sp)+(16);
 /** @type {number} */ var $neg;
 /** @type {number} */ var $exp1;
 /** @type {number} */ var $neg1;
 HEAP32[(($2)>>2)]=$s;
 $3=$endptr;
 $r=0;
 HEAP32[(($e)>>2)]=0;
 HEAP32[(($i)>>2)]=0;
 $neg=0;
 /** @type {number} */ var $4=HEAP32[(($2)>>2)];
 /** @type {number} */ var $5=$3;
 HEAP32[(($5)>>2)]=$4;
 label=2;break;
 case 2: 
 /** @type {number} */ var $7=HEAP32[(($2)>>2)];
 /** @type {number} */ var $8=HEAP8[($7)];
 /** @type {number} */ var $9=($8&255);
 /** @type {number} */ var $10=((($9)+(1))|0);
 /** @type {number} */ var $11=((704+$10)|0);
 /** @type {number} */ var $12=HEAP8[($11)];
 /** @type {number} */ var $13=($12&255);
 /** @type {number} */ var $14=$13&8;
 /** @type {number} */ var $15=($14|0)!=0;
 if($15){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $17=HEAP32[(($2)>>2)];
 /** @type {number} */ var $18=(($17+1)|0);
 HEAP32[(($2)>>2)]=$18;
 label=2;break;
 case 4: 
 /** @type {number} */ var $20=_isneg($2);
 $neg=$20;
 /** @type {number} */ var $21=HEAP32[(($2)>>2)];
 /** @type {number} */ var $22=HEAP8[($21)];
 /** @type {number} */ var $23=(($22<<24)>>24);
 /** @type {number} */ var $24=($23|0)==48;
 if($24){label=5;break;}else{label=7;break;}
 case 5: 
 /** @type {number} */ var $26=HEAP32[(($2)>>2)];
 /** @type {number} */ var $27=(($26+1)|0);
 /** @type {number} */ var $28=HEAP8[($27)];
 /** @type {number} */ var $29=(($28<<24)>>24);
 /** @type {number} */ var $30=($29|0)==120;
 if($30){label=8;break;}else{label=6;break;}
 case 6: 
 /** @type {number} */ var $32=HEAP32[(($2)>>2)];
 /** @type {number} */ var $33=(($32+1)|0);
 /** @type {number} */ var $34=HEAP8[($33)];
 /** @type {number} */ var $35=(($34<<24)>>24);
 /** @type {number} */ var $36=($35|0)==88;
 if($36){label=8;break;}else{label=7;break;}
 case 7: 
 $1=0;
 label=27;break;
 case 8: 
 /** @type {number} */ var $39=HEAP32[(($2)>>2)];
 /** @type {number} */ var $40=(($39+2)|0);
 HEAP32[(($2)>>2)]=$40;
 /** @type {number} */ var $41=$r;
 /** @type {number} */ var $42=_readhexa($2,$41,$i);
 $r=$42;
 /** @type {number} */ var $43=HEAP32[(($2)>>2)];
 /** @type {number} */ var $44=HEAP8[($43)];
 /** @type {number} */ var $45=(($44<<24)>>24);
 /** @type {number} */ var $46=($45|0)==46;
 if($46){label=9;break;}else{label=10;break;}
 case 9: 
 /** @type {number} */ var $48=HEAP32[(($2)>>2)];
 /** @type {number} */ var $49=(($48+1)|0);
 HEAP32[(($2)>>2)]=$49;
 /** @type {number} */ var $50=$r;
 /** @type {number} */ var $51=_readhexa($2,$50,$e);
 $r=$51;
 label=10;break;
 case 10: 
 /** @type {number} */ var $53=HEAP32[(($i)>>2)];
 /** @type {number} */ var $54=($53|0)==0;
 if($54){label=11;break;}else{label=13;break;}
 case 11: 
 /** @type {number} */ var $56=HEAP32[(($e)>>2)];
 /** @type {number} */ var $57=($56|0)==0;
 if($57){label=12;break;}else{label=13;break;}
 case 12: 
 $1=0;
 label=27;break;
 case 13: 
 /** @type {number} */ var $60=HEAP32[(($e)>>2)];
 /** @type {number} */ var $61=((($60)*(-4))&-1);
 HEAP32[(($e)>>2)]=$61;
 /** @type {number} */ var $62=HEAP32[(($2)>>2)];
 /** @type {number} */ var $63=$3;
 HEAP32[(($63)>>2)]=$62;
 /** @type {number} */ var $64=HEAP32[(($2)>>2)];
 /** @type {number} */ var $65=HEAP8[($64)];
 /** @type {number} */ var $66=(($65<<24)>>24);
 /** @type {number} */ var $67=($66|0)==112;
 if($67){label=15;break;}else{label=14;break;}
 case 14: 
 /** @type {number} */ var $69=HEAP32[(($2)>>2)];
 /** @type {number} */ var $70=HEAP8[($69)];
 /** @type {number} */ var $71=(($70<<24)>>24);
 /** @type {number} */ var $72=($71|0)==80;
 if($72){label=15;break;}else{label=23;break;}
 case 15: 
 $exp1=0;
 /** @type {number} */ var $74=HEAP32[(($2)>>2)];
 /** @type {number} */ var $75=(($74+1)|0);
 HEAP32[(($2)>>2)]=$75;
 /** @type {number} */ var $76=_isneg($2);
 $neg1=$76;
 /** @type {number} */ var $77=HEAP32[(($2)>>2)];
 /** @type {number} */ var $78=HEAP8[($77)];
 /** @type {number} */ var $79=($78&255);
 /** @type {number} */ var $80=((($79)+(1))|0);
 /** @type {number} */ var $81=((704+$80)|0);
 /** @type {number} */ var $82=HEAP8[($81)];
 /** @type {number} */ var $83=($82&255);
 /** @type {number} */ var $84=$83&2;
 /** @type {number} */ var $85=($84|0)!=0;
 if($85){label=17;break;}else{label=16;break;}
 case 16: 
 label=24;break;
 case 17: 
 label=18;break;
 case 18: 
 /** @type {number} */ var $89=HEAP32[(($2)>>2)];
 /** @type {number} */ var $90=HEAP8[($89)];
 /** @type {number} */ var $91=($90&255);
 /** @type {number} */ var $92=((($91)+(1))|0);
 /** @type {number} */ var $93=((704+$92)|0);
 /** @type {number} */ var $94=HEAP8[($93)];
 /** @type {number} */ var $95=($94&255);
 /** @type {number} */ var $96=$95&2;
 /** @type {number} */ var $97=($96|0)!=0;
 if($97){label=19;break;}else{label=20;break;}
 case 19: 
 /** @type {number} */ var $99=$exp1;
 /** @type {number} */ var $100=((($99)*(10))&-1);
 /** @type {number} */ var $101=HEAP32[(($2)>>2)];
 /** @type {number} */ var $102=(($101+1)|0);
 HEAP32[(($2)>>2)]=$102;
 /** @type {number} */ var $103=HEAP8[($101)];
 /** @type {number} */ var $104=(($103<<24)>>24);
 /** @type {number} */ var $105=((($100)+($104))|0);
 /** @type {number} */ var $106=((($105)-(48))|0);
 $exp1=$106;
 label=18;break;
 case 20: 
 /** @type {number} */ var $108=$neg1;
 /** @type {number} */ var $109=($108|0)!=0;
 if($109){label=21;break;}else{label=22;break;}
 case 21: 
 /** @type {number} */ var $111=$exp1;
 /** @type {number} */ var $112=(((-$111))|0);
 $exp1=$112;
 label=22;break;
 case 22: 
 /** @type {number} */ var $114=$exp1;
 /** @type {number} */ var $115=HEAP32[(($e)>>2)];
 /** @type {number} */ var $116=((($115)+($114))|0);
 HEAP32[(($e)>>2)]=$116;
 label=23;break;
 case 23: 
 /** @type {number} */ var $118=HEAP32[(($2)>>2)];
 /** @type {number} */ var $119=$3;
 HEAP32[(($119)>>2)]=$118;
 label=24;break;
 case 24: 
 /** @type {number} */ var $121=$neg;
 /** @type {number} */ var $122=($121|0)!=0;
 if($122){label=25;break;}else{label=26;break;}
 case 25: 
 /** @type {number} */ var $124=$r;
 /** @type {number} */ var $125=((-.0))-($124);
 $r=$125;
 label=26;break;
 case 26: 
 /** @type {number} */ var $127=$r;
 /** @type {number} */ var $128=HEAP32[(($e)>>2)];
 /** @type {number} */ var $129=_ldexp($127,$128);
 $1=$129;
 label=27;break;
 case 27: 
 /** @type {number} */ var $131=$1;
 STACKTOP=sp;return $131;
 }
}
/**
 * @param {number} $L
 * @param {number} $str
 * @param {number} $l
 * @return {number}
 */
function _pushstr($L,$str,$l){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $io;
 /** @type {number} */ var $x_;
 $1=$L;
 $2=$str;
 $3=$l;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+8)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 $io=$6;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=$3;
 /** @type {number} */ var $10=_luaS_newlstr($7,$8,$9);
 $x_=$10;
 /** @type {number} */ var $11=$x_;
 /** @type {number} */ var $12=$11;
 /** @type {number} */ var $13=$io;
 /** @type {number} */ var $14=(($13)|0);
 /** @type {number} */ var $15=$14;
 HEAP32[(($15)>>2)]=$12;
 /** @type {number} */ var $16=$x_;
 /** @type {number} */ var $17=$16;
 /** @type {number} */ var $18=(($17+4)|0);
 /** @type {number} */ var $19=HEAP8[($18)];
 /** @type {number} */ var $20=($19&255);
 /** @type {number} */ var $21=$20|64;
 /** @type {number} */ var $22=$io;
 /** @type {number} */ var $23=(($22+8)|0);
 HEAP32[(($23)>>2)]=$21;
 /** @type {number} */ var $24=$1;
 /** @type {number} */ var $25=(($24+8)|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 /** @type {number} */ var $27=(($26+16)|0);
 HEAP32[(($25)>>2)]=$27;
 /** @type {number} */ var $28=$1;
 /** @type {number} */ var $29=(($28+24)|0);
 /** @type {number} */ var $30=HEAP32[(($29)>>2)];
 /** @type {number} */ var $31=$1;
 /** @type {number} */ var $32=(($31+8)|0);
 /** @type {number} */ var $33=HEAP32[(($32)>>2)];
 /** @type {number} */ var $34=$30;
 /** @type {number} */ var $35=$33;
 /** @type {number} */ var $36=((($34)-($35))|0);
 /** @type {number} */ var $37=(((($36|0))/(16))&-1);
 /** @type {number} */ var $38=($37|0)<=0;
 if($38){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $40=$1;
 _luaD_growstack($40,0);
 label=4;break;
 case 3: 
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $s
 * @return {number}
 */
function _isneg($s){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $2=$s;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 /** @type {number} */ var $5=HEAP8[($4)];
 /** @type {number} */ var $6=(($5<<24)>>24);
 /** @type {number} */ var $7=($6|0)==45;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=(($10+1)|0);
 HEAP32[(($9)>>2)]=$11;
 $1=1;
 label=7;break;
 case 3: 
 /** @type {number} */ var $13=$2;
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=HEAP8[($14)];
 /** @type {number} */ var $16=(($15<<24)>>24);
 /** @type {number} */ var $17=($16|0)==43;
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $19=$2;
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=(($20+1)|0);
 HEAP32[(($19)>>2)]=$21;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 $1=0;
 label=7;break;
 case 7: 
 /** @type {number} */ var $25=$1;
 STACKTOP=sp;return $25;
 }
}
/**
 * @param {number} $s
 * @param {number} $r
 * @param {number} $count
 * @return {number}
 */
function _readhexa($s,$r,$count){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$s;
 $2=$r;
 $3=$count;
 label=2;break;
 case 2: 
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=HEAP8[($6)];
 /** @type {number} */ var $8=($7&255);
 /** @type {number} */ var $9=((($8)+(1))|0);
 /** @type {number} */ var $10=((704+$9)|0);
 /** @type {number} */ var $11=HEAP8[($10)];
 /** @type {number} */ var $12=($11&255);
 /** @type {number} */ var $13=$12&16;
 /** @type {number} */ var $14=($13|0)!=0;
 if($14){label=3;break;}else{label=5;break;}
 case 3: 
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=($16)*(16);
 /** @type {number} */ var $18=$1;
 /** @type {number} */ var $19=HEAP32[(($18)>>2)];
 /** @type {number} */ var $20=HEAP8[($19)];
 /** @type {number} */ var $21=($20&255);
 /** @type {number} */ var $22=_luaO_hexavalue($21);
 /** @type {number} */ var $23=($22|0);
 /** @type {number} */ var $24=($17)+($23);
 $2=$24;
 /** @type {number} */ var $25=$3;
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 /** @type {number} */ var $27=((($26)+(1))|0);
 HEAP32[(($25)>>2)]=$27;
 label=4;break;
 case 4: 
 /** @type {number} */ var $29=$1;
 /** @type {number} */ var $30=HEAP32[(($29)>>2)];
 /** @type {number} */ var $31=(($30+1)|0);
 HEAP32[(($29)>>2)]=$31;
 label=2;break;
 case 5: 
 /** @type {number} */ var $33=$2;
 STACKTOP=sp;return $33;
 }
}
/**
 * @param {number} $L
 * @param {number} $z
 * @param {number} $buff
 * @param {number} $dyd
 * @param {number} $name
 * @param {number} $firstchar
 * @return {number}
 */
function _luaY_parser($L,$z,$buff,$dyd,$name,$firstchar){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+136)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 /** @type {number} */ var $6;
 /** @type {number} */ var $lexstate=sp;
 /** @type {number} */ var $funcstate=(sp)+(80);
 /** @type {number} */ var $cl;
 /** @type {number} */ var $io;
 $1=$L;
 $2=$z;
 $3=$buff;
 $4=$dyd;
 $5=$name;
 $6=$firstchar;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=_luaF_newLclosure($7,1);
 $cl=$8;
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=(($9+8)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 $io=$11;
 /** @type {number} */ var $12=$cl;
 /** @type {number} */ var $13=$12;
 /** @type {number} */ var $14=$io;
 /** @type {number} */ var $15=(($14)|0);
 /** @type {number} */ var $16=$15;
 HEAP32[(($16)>>2)]=$13;
 /** @type {number} */ var $17=$io;
 /** @type {number} */ var $18=(($17+8)|0);
 HEAP32[(($18)>>2)]=70;
 /** @type {number} */ var $19=$1;
 /** @type {number} */ var $20=(($19+8)|0);
 /** @type {number} */ var $21=HEAP32[(($20)>>2)];
 /** @type {number} */ var $22=(($21+16)|0);
 HEAP32[(($20)>>2)]=$22;
 /** @type {number} */ var $23=$1;
 /** @type {number} */ var $24=(($23+24)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=$1;
 /** @type {number} */ var $27=(($26+8)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=$25;
 /** @type {number} */ var $30=$28;
 /** @type {number} */ var $31=((($29)-($30))|0);
 /** @type {number} */ var $32=(((($31|0))/(16))&-1);
 /** @type {number} */ var $33=($32|0)<=0;
 if($33){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $35=$1;
 _luaD_growstack($35,0);
 label=4;break;
 case 3: 
 label=4;break;
 case 4: 
 /** @type {number} */ var $38=$1;
 /** @type {number} */ var $39=_luaF_newproto($38);
 /** @type {number} */ var $40=$cl;
 /** @type {number} */ var $41=$40;
 /** @type {number} */ var $42=(($41+12)|0);
 HEAP32[(($42)>>2)]=$39;
 /** @type {number} */ var $43=(($funcstate)|0);
 HEAP32[(($43)>>2)]=$39;
 /** @type {number} */ var $44=$1;
 /** @type {number} */ var $45=$5;
 /** @type {number} */ var $46=_luaS_new($44,$45);
 /** @type {number} */ var $47=(($funcstate)|0);
 /** @type {number} */ var $48=HEAP32[(($47)>>2)];
 /** @type {number} */ var $49=(($48+36)|0);
 HEAP32[(($49)>>2)]=$46;
 /** @type {number} */ var $50=$3;
 /** @type {number} */ var $51=(($lexstate+60)|0);
 HEAP32[(($51)>>2)]=$50;
 /** @type {number} */ var $52=$4;
 /** @type {number} */ var $53=(($lexstate+64)|0);
 HEAP32[(($53)>>2)]=$52;
 /** @type {number} */ var $54=$4;
 /** @type {number} */ var $55=(($54+24)|0);
 /** @type {number} */ var $56=(($55+4)|0);
 HEAP32[(($56)>>2)]=0;
 /** @type {number} */ var $57=$4;
 /** @type {number} */ var $58=(($57+12)|0);
 /** @type {number} */ var $59=(($58+4)|0);
 HEAP32[(($59)>>2)]=0;
 /** @type {number} */ var $60=$4;
 /** @type {number} */ var $61=(($60)|0);
 /** @type {number} */ var $62=(($61+4)|0);
 HEAP32[(($62)>>2)]=0;
 /** @type {number} */ var $63=$1;
 /** @type {number} */ var $64=$2;
 /** @type {number} */ var $65=(($funcstate)|0);
 /** @type {number} */ var $66=HEAP32[(($65)>>2)];
 /** @type {number} */ var $67=(($66+36)|0);
 /** @type {number} */ var $68=HEAP32[(($67)>>2)];
 /** @type {number} */ var $69=$6;
 _luaX_setinput($63,$lexstate,$64,$68,$69);
 _mainfunc($lexstate,$funcstate);
 /** @type {number} */ var $70=$cl;
 STACKTOP=sp;return $70;
 }
}
/**
 * @param {number} $ls
 * @param {number} $fs
 * @return {number}
 */
function _mainfunc($ls,$fs){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $bl=sp;
 /** @type {number} */ var $v=(sp)+(16);
 $1=$ls;
 $2=$fs;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 _open_func($3,$4,$bl);
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=(($5)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=(($7+77)|0);
 HEAP8[($8)]=1;
 _init_exp($v,7,0);
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=(($10+72)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=_newupvalue($9,$12,$v);
 /** @type {number} */ var $14=$1;
 _luaX_next($14);
 /** @type {number} */ var $15=$1;
 _statlist($15);
 /** @type {number} */ var $16=$1;
 _check($16,286);
 /** @type {number} */ var $17=$1;
 _close_func($17);
 STACKTOP=sp;return;
}
/**
 * @param {number} $ls
 * @param {number} $fs
 * @param {number} $bl
 * @return {number}
 */
function _open_func($ls,$fs,$bl){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $L;
 /** @type {number} */ var $f;
 /** @type {number} */ var $io;
 $1=$ls;
 $2=$fs;
 $3=$bl;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+52)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 $L=$6;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=(($7+48)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=(($10+8)|0);
 HEAP32[(($11)>>2)]=$9;
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=$2;
 /** @type {number} */ var $14=(($13+12)|0);
 HEAP32[(($14)>>2)]=$12;
 /** @type {number} */ var $15=$2;
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=(($16+48)|0);
 HEAP32[(($17)>>2)]=$15;
 /** @type {number} */ var $18=$2;
 /** @type {number} */ var $19=(($18+20)|0);
 HEAP32[(($19)>>2)]=0;
 /** @type {number} */ var $20=$2;
 /** @type {number} */ var $21=(($20+24)|0);
 HEAP32[(($21)>>2)]=0;
 /** @type {number} */ var $22=$2;
 /** @type {number} */ var $23=(($22+28)|0);
 HEAP32[(($23)>>2)]=-1;
 /** @type {number} */ var $24=$2;
 /** @type {number} */ var $25=(($24+48)|0);
 HEAP8[($25)]=0;
 /** @type {number} */ var $26=$2;
 /** @type {number} */ var $27=(($26+32)|0);
 HEAP32[(($27)>>2)]=0;
 /** @type {number} */ var $28=$2;
 /** @type {number} */ var $29=(($28+36)|0);
 HEAP32[(($29)>>2)]=0;
 /** @type {number} */ var $30=$2;
 /** @type {number} */ var $31=(($30+47)|0);
 HEAP8[($31)]=0;
 /** @type {number} */ var $32=$2;
 /** @type {number} */ var $33=(($32+44)|0);
 HEAP16[(($33)>>1)]=0;
 /** @type {number} */ var $34=$2;
 /** @type {number} */ var $35=(($34+46)|0);
 HEAP8[($35)]=0;
 /** @type {number} */ var $36=$1;
 /** @type {number} */ var $37=(($36+64)|0);
 /** @type {number} */ var $38=HEAP32[(($37)>>2)];
 /** @type {number} */ var $39=(($38)|0);
 /** @type {number} */ var $40=(($39+4)|0);
 /** @type {number} */ var $41=HEAP32[(($40)>>2)];
 /** @type {number} */ var $42=$2;
 /** @type {number} */ var $43=(($42+40)|0);
 HEAP32[(($43)>>2)]=$41;
 /** @type {number} */ var $44=$2;
 /** @type {number} */ var $45=(($44+16)|0);
 HEAP32[(($45)>>2)]=0;
 /** @type {number} */ var $46=$2;
 /** @type {number} */ var $47=(($46)|0);
 /** @type {number} */ var $48=HEAP32[(($47)>>2)];
 $f=$48;
 /** @type {number} */ var $49=$1;
 /** @type {number} */ var $50=(($49+68)|0);
 /** @type {number} */ var $51=HEAP32[(($50)>>2)];
 /** @type {number} */ var $52=$f;
 /** @type {number} */ var $53=(($52+36)|0);
 HEAP32[(($53)>>2)]=$51;
 /** @type {number} */ var $54=$f;
 /** @type {number} */ var $55=(($54+78)|0);
 HEAP8[($55)]=2;
 /** @type {number} */ var $56=$L;
 /** @type {number} */ var $57=_luaH_new($56);
 /** @type {number} */ var $58=$2;
 /** @type {number} */ var $59=(($58+4)|0);
 HEAP32[(($59)>>2)]=$57;
 /** @type {number} */ var $60=$L;
 /** @type {number} */ var $61=(($60+8)|0);
 /** @type {number} */ var $62=HEAP32[(($61)>>2)];
 $io=$62;
 /** @type {number} */ var $63=$2;
 /** @type {number} */ var $64=(($63+4)|0);
 /** @type {number} */ var $65=HEAP32[(($64)>>2)];
 /** @type {number} */ var $66=$65;
 /** @type {number} */ var $67=$io;
 /** @type {number} */ var $68=(($67)|0);
 /** @type {number} */ var $69=$68;
 HEAP32[(($69)>>2)]=$66;
 /** @type {number} */ var $70=$io;
 /** @type {number} */ var $71=(($70+8)|0);
 HEAP32[(($71)>>2)]=69;
 /** @type {number} */ var $72=$L;
 /** @type {number} */ var $73=(($72+8)|0);
 /** @type {number} */ var $74=HEAP32[(($73)>>2)];
 /** @type {number} */ var $75=(($74+16)|0);
 HEAP32[(($73)>>2)]=$75;
 /** @type {number} */ var $76=$L;
 /** @type {number} */ var $77=(($76+24)|0);
 /** @type {number} */ var $78=HEAP32[(($77)>>2)];
 /** @type {number} */ var $79=$L;
 /** @type {number} */ var $80=(($79+8)|0);
 /** @type {number} */ var $81=HEAP32[(($80)>>2)];
 /** @type {number} */ var $82=$78;
 /** @type {number} */ var $83=$81;
 /** @type {number} */ var $84=((($82)-($83))|0);
 /** @type {number} */ var $85=(((($84|0))/(16))&-1);
 /** @type {number} */ var $86=($85|0)<=0;
 if($86){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $88=$L;
 _luaD_growstack($88,0);
 label=4;break;
 case 3: 
 label=4;break;
 case 4: 
 /** @type {number} */ var $91=$2;
 /** @type {number} */ var $92=$3;
 _enterblock($91,$92,0);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $e
 * @param {number} $k
 * @param {number} $i
 * @return {number}
 */
function _init_exp($e,$k,$i){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$e;
 $2=$k;
 $3=$i;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+16)|0);
 HEAP32[(($5)>>2)]=-1;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+20)|0);
 HEAP32[(($7)>>2)]=-1;
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=(($9)|0);
 HEAP32[(($10)>>2)]=$8;
 /** @type {number} */ var $11=$3;
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=(($12+8)|0);
 /** @type {number} */ var $14=$13;
 HEAP32[(($14)>>2)]=$11;
 STACKTOP=sp;return;
}
/**
 * @param {number} $fs
 * @param {number} $name
 * @param {number} $v
 * @return {number}
 */
function _newupvalue($fs,$name,$v){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $f;
 /** @type {number} */ var $oldsize;
 $1=$fs;
 $2=$name;
 $3=$v;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 $f=$6;
 /** @type {number} */ var $7=$f;
 /** @type {number} */ var $8=(($7+40)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 $oldsize=$9;
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=(($11+47)|0);
 /** @type {number} */ var $13=HEAP8[($12)];
 /** @type {number} */ var $14=($13&255);
 /** @type {number} */ var $15=((($14)+(1))|0);
 _checklimit($10,$15,255,7648);
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=(($16+47)|0);
 /** @type {number} */ var $18=HEAP8[($17)];
 /** @type {number} */ var $19=($18&255);
 /** @type {number} */ var $20=((($19)+(1))|0);
 /** @type {number} */ var $21=$f;
 /** @type {number} */ var $22=(($21+40)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 /** @type {number} */ var $24=($20|0)>($23|0);
 if($24){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $26=$1;
 /** @type {number} */ var $27=(($26+12)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=(($28+52)|0);
 /** @type {number} */ var $30=HEAP32[(($29)>>2)];
 /** @type {number} */ var $31=$f;
 /** @type {number} */ var $32=(($31+28)|0);
 /** @type {number} */ var $33=HEAP32[(($32)>>2)];
 /** @type {number} */ var $34=$33;
 /** @type {number} */ var $35=$f;
 /** @type {number} */ var $36=(($35+40)|0);
 /** @type {number} */ var $37=_luaM_growaux_($30,$34,$36,8,255,7648);
 /** @type {number} */ var $38=$37;
 /** @type {number} */ var $39=$f;
 /** @type {number} */ var $40=(($39+28)|0);
 HEAP32[(($40)>>2)]=$38;
 label=3;break;
 case 3: 
 label=4;break;
 case 4: 
 /** @type {number} */ var $43=$oldsize;
 /** @type {number} */ var $44=$f;
 /** @type {number} */ var $45=(($44+40)|0);
 /** @type {number} */ var $46=HEAP32[(($45)>>2)];
 /** @type {number} */ var $47=($43|0)<($46|0);
 if($47){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $49=$oldsize;
 /** @type {number} */ var $50=((($49)+(1))|0);
 $oldsize=$50;
 /** @type {number} */ var $51=$f;
 /** @type {number} */ var $52=(($51+28)|0);
 /** @type {number} */ var $53=HEAP32[(($52)>>2)];
 /** @type {number} */ var $54=(($53+($49<<3))|0);
 /** @type {number} */ var $55=(($54)|0);
 HEAP32[(($55)>>2)]=0;
 label=4;break;
 case 6: 
 /** @type {number} */ var $57=$3;
 /** @type {number} */ var $58=(($57)|0);
 /** @type {number} */ var $59=HEAP32[(($58)>>2)];
 /** @type {number} */ var $60=($59|0)==7;
 /** @type {number} */ var $61=($60&1);
 /** @type {number} */ var $62=(($61)&255);
 /** @type {number} */ var $63=$1;
 /** @type {number} */ var $64=(($63+47)|0);
 /** @type {number} */ var $65=HEAP8[($64)];
 /** @type {number} */ var $66=($65&255);
 /** @type {number} */ var $67=$f;
 /** @type {number} */ var $68=(($67+28)|0);
 /** @type {number} */ var $69=HEAP32[(($68)>>2)];
 /** @type {number} */ var $70=(($69+($66<<3))|0);
 /** @type {number} */ var $71=(($70+4)|0);
 HEAP8[($71)]=$62;
 /** @type {number} */ var $72=$3;
 /** @type {number} */ var $73=(($72+8)|0);
 /** @type {number} */ var $74=$73;
 /** @type {number} */ var $75=HEAP32[(($74)>>2)];
 /** @type {number} */ var $76=(($75)&255);
 /** @type {number} */ var $77=$1;
 /** @type {number} */ var $78=(($77+47)|0);
 /** @type {number} */ var $79=HEAP8[($78)];
 /** @type {number} */ var $80=($79&255);
 /** @type {number} */ var $81=$f;
 /** @type {number} */ var $82=(($81+28)|0);
 /** @type {number} */ var $83=HEAP32[(($82)>>2)];
 /** @type {number} */ var $84=(($83+($80<<3))|0);
 /** @type {number} */ var $85=(($84+5)|0);
 HEAP8[($85)]=$76;
 /** @type {number} */ var $86=$2;
 /** @type {number} */ var $87=$1;
 /** @type {number} */ var $88=(($87+47)|0);
 /** @type {number} */ var $89=HEAP8[($88)];
 /** @type {number} */ var $90=($89&255);
 /** @type {number} */ var $91=$f;
 /** @type {number} */ var $92=(($91+28)|0);
 /** @type {number} */ var $93=HEAP32[(($92)>>2)];
 /** @type {number} */ var $94=(($93+($90<<3))|0);
 /** @type {number} */ var $95=(($94)|0);
 HEAP32[(($95)>>2)]=$86;
 /** @type {number} */ var $96=$2;
 /** @type {number} */ var $97=$96;
 /** @type {number} */ var $98=$97;
 /** @type {number} */ var $99=(($98+5)|0);
 /** @type {number} */ var $100=HEAP8[($99)];
 /** @type {number} */ var $101=($100&255);
 /** @type {number} */ var $102=$101&3;
 /** @type {number} */ var $103=($102|0)!=0;
 if($103){label=7;break;}else{label=9;break;}
 case 7: 
 /** @type {number} */ var $105=$f;
 /** @type {number} */ var $106=$105;
 /** @type {number} */ var $107=$106;
 /** @type {number} */ var $108=(($107+5)|0);
 /** @type {number} */ var $109=HEAP8[($108)];
 /** @type {number} */ var $110=($109&255);
 /** @type {number} */ var $111=$110&4;
 /** @type {number} */ var $112=($111|0)!=0;
 if($112){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $114=$1;
 /** @type {number} */ var $115=(($114+12)|0);
 /** @type {number} */ var $116=HEAP32[(($115)>>2)];
 /** @type {number} */ var $117=(($116+52)|0);
 /** @type {number} */ var $118=HEAP32[(($117)>>2)];
 /** @type {number} */ var $119=$f;
 /** @type {number} */ var $120=$119;
 /** @type {number} */ var $121=$2;
 /** @type {number} */ var $122=$121;
 _luaC_barrier_($118,$120,$122);
 label=9;break;
 case 9: 
 /** @type {number} */ var $124=$1;
 /** @type {number} */ var $125=(($124+47)|0);
 /** @type {number} */ var $126=HEAP8[($125)];
 /** @type {number} */ var $127=((($126)+(1))&255);
 HEAP8[($125)]=$127;
 /** @type {number} */ var $128=($126&255);
 STACKTOP=sp;return $128;
 }
}
/**
 * @param {number} $ls
 * @return {number}
 */
function _statlist($ls){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 $1=$ls;
 label=2;break;
 case 2: 
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_block_follow($3,1);
 /** @type {number} */ var $5=($4|0)!=0;
 /** @type {number} */ var $6=$5^1;
 if($6){label=3;break;}else{label=6;break;}
 case 3: 
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=(($8+16)|0);
 /** @type {number} */ var $10=(($9)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=($11|0)==274;
 if($12){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $14=$1;
 _statement($14);
 label=6;break;
 case 5: 
 /** @type {number} */ var $16=$1;
 _statement($16);
 label=2;break;
 case 6: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $c
 * @return {number}
 */
function _check($ls,$c){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$ls;
 $2=$c;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+16)|0);
 /** @type {number} */ var $5=(($4)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=($6|0)!=($7|0);
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=$2;
 _error_expected($10,$11);
 case 3: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @return {number}
 */
function _close_func($ls){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $L;
 /** @type {number} */ var $fs;
 /** @type {number} */ var $f;
 $1=$ls;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+52)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $L=$4;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($5+48)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 $fs=$7;
 /** @type {number} */ var $8=$fs;
 /** @type {number} */ var $9=(($8)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 $f=$10;
 /** @type {number} */ var $11=$fs;
 _luaK_ret($11,0,0);
 /** @type {number} */ var $12=$fs;
 _leaveblock($12);
 /** @type {number} */ var $13=$fs;
 /** @type {number} */ var $14=(($13+20)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=((($15)+(1))|0);
 /** @type {number} */ var $17=($16>>>0)>1073741823;
 if($17){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $19=$L;
 _luaM_toobig($19);
 label=4;break;
 case 3: 
 /** @type {number} */ var $22=$L;
 /** @type {number} */ var $23=$f;
 /** @type {number} */ var $24=(($23+12)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=$25;
 /** @type {number} */ var $27=$f;
 /** @type {number} */ var $28=(($27+48)|0);
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 /** @type {number} */ var $30=($29<<2);
 /** @type {number} */ var $31=$fs;
 /** @type {number} */ var $32=(($31+20)|0);
 /** @type {number} */ var $33=HEAP32[(($32)>>2)];
 /** @type {number} */ var $34=($33<<2);
 /** @type {number} */ var $35=_luaM_realloc_($22,$26,$30,$34);
 var $37=$35;label=4;break;
 case 4: 
 var $37;
 /** @type {number} */ var $38=$37;
 /** @type {number} */ var $39=$f;
 /** @type {number} */ var $40=(($39+12)|0);
 HEAP32[(($40)>>2)]=$38;
 /** @type {number} */ var $41=$fs;
 /** @type {number} */ var $42=(($41+20)|0);
 /** @type {number} */ var $43=HEAP32[(($42)>>2)];
 /** @type {number} */ var $44=$f;
 /** @type {number} */ var $45=(($44+48)|0);
 HEAP32[(($45)>>2)]=$43;
 /** @type {number} */ var $46=$fs;
 /** @type {number} */ var $47=(($46+20)|0);
 /** @type {number} */ var $48=HEAP32[(($47)>>2)];
 /** @type {number} */ var $49=((($48)+(1))|0);
 /** @type {number} */ var $50=($49>>>0)>1073741823;
 if($50){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $52=$L;
 _luaM_toobig($52);
 label=7;break;
 case 6: 
 /** @type {number} */ var $55=$L;
 /** @type {number} */ var $56=$f;
 /** @type {number} */ var $57=(($56+20)|0);
 /** @type {number} */ var $58=HEAP32[(($57)>>2)];
 /** @type {number} */ var $59=$58;
 /** @type {number} */ var $60=$f;
 /** @type {number} */ var $61=(($60+52)|0);
 /** @type {number} */ var $62=HEAP32[(($61)>>2)];
 /** @type {number} */ var $63=($62<<2);
 /** @type {number} */ var $64=$fs;
 /** @type {number} */ var $65=(($64+20)|0);
 /** @type {number} */ var $66=HEAP32[(($65)>>2)];
 /** @type {number} */ var $67=($66<<2);
 /** @type {number} */ var $68=_luaM_realloc_($55,$59,$63,$67);
 var $70=$68;label=7;break;
 case 7: 
 var $70;
 /** @type {number} */ var $71=$70;
 /** @type {number} */ var $72=$f;
 /** @type {number} */ var $73=(($72+20)|0);
 HEAP32[(($73)>>2)]=$71;
 /** @type {number} */ var $74=$fs;
 /** @type {number} */ var $75=(($74+20)|0);
 /** @type {number} */ var $76=HEAP32[(($75)>>2)];
 /** @type {number} */ var $77=$f;
 /** @type {number} */ var $78=(($77+52)|0);
 HEAP32[(($78)>>2)]=$76;
 /** @type {number} */ var $79=$fs;
 /** @type {number} */ var $80=(($79+32)|0);
 /** @type {number} */ var $81=HEAP32[(($80)>>2)];
 /** @type {number} */ var $82=((($81)+(1))|0);
 /** @type {number} */ var $83=($82>>>0)>268435455;
 if($83){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $85=$L;
 _luaM_toobig($85);
 label=10;break;
 case 9: 
 /** @type {number} */ var $88=$L;
 /** @type {number} */ var $89=$f;
 /** @type {number} */ var $90=(($89+8)|0);
 /** @type {number} */ var $91=HEAP32[(($90)>>2)];
 /** @type {number} */ var $92=$91;
 /** @type {number} */ var $93=$f;
 /** @type {number} */ var $94=(($93+44)|0);
 /** @type {number} */ var $95=HEAP32[(($94)>>2)];
 /** @type {number} */ var $96=($95<<4);
 /** @type {number} */ var $97=$fs;
 /** @type {number} */ var $98=(($97+32)|0);
 /** @type {number} */ var $99=HEAP32[(($98)>>2)];
 /** @type {number} */ var $100=($99<<4);
 /** @type {number} */ var $101=_luaM_realloc_($88,$92,$96,$100);
 var $103=$101;label=10;break;
 case 10: 
 var $103;
 /** @type {number} */ var $104=$103;
 /** @type {number} */ var $105=$f;
 /** @type {number} */ var $106=(($105+8)|0);
 HEAP32[(($106)>>2)]=$104;
 /** @type {number} */ var $107=$fs;
 /** @type {number} */ var $108=(($107+32)|0);
 /** @type {number} */ var $109=HEAP32[(($108)>>2)];
 /** @type {number} */ var $110=$f;
 /** @type {number} */ var $111=(($110+44)|0);
 HEAP32[(($111)>>2)]=$109;
 /** @type {number} */ var $112=$fs;
 /** @type {number} */ var $113=(($112+36)|0);
 /** @type {number} */ var $114=HEAP32[(($113)>>2)];
 /** @type {number} */ var $115=((($114)+(1))|0);
 /** @type {number} */ var $116=($115>>>0)>1073741823;
 if($116){label=11;break;}else{label=12;break;}
 case 11: 
 /** @type {number} */ var $118=$L;
 _luaM_toobig($118);
 label=13;break;
 case 12: 
 /** @type {number} */ var $121=$L;
 /** @type {number} */ var $122=$f;
 /** @type {number} */ var $123=(($122+16)|0);
 /** @type {number} */ var $124=HEAP32[(($123)>>2)];
 /** @type {number} */ var $125=$124;
 /** @type {number} */ var $126=$f;
 /** @type {number} */ var $127=(($126+56)|0);
 /** @type {number} */ var $128=HEAP32[(($127)>>2)];
 /** @type {number} */ var $129=($128<<2);
 /** @type {number} */ var $130=$fs;
 /** @type {number} */ var $131=(($130+36)|0);
 /** @type {number} */ var $132=HEAP32[(($131)>>2)];
 /** @type {number} */ var $133=($132<<2);
 /** @type {number} */ var $134=_luaM_realloc_($121,$125,$129,$133);
 var $136=$134;label=13;break;
 case 13: 
 var $136;
 /** @type {number} */ var $137=$136;
 /** @type {number} */ var $138=$f;
 /** @type {number} */ var $139=(($138+16)|0);
 HEAP32[(($139)>>2)]=$137;
 /** @type {number} */ var $140=$fs;
 /** @type {number} */ var $141=(($140+36)|0);
 /** @type {number} */ var $142=HEAP32[(($141)>>2)];
 /** @type {number} */ var $143=$f;
 /** @type {number} */ var $144=(($143+56)|0);
 HEAP32[(($144)>>2)]=$142;
 /** @type {number} */ var $145=$fs;
 /** @type {number} */ var $146=(($145+44)|0);
 /** @type {number} */ var $147=HEAP16[(($146)>>1)];
 /** @type {number} */ var $148=(($147<<16)>>16);
 /** @type {number} */ var $149=((($148)+(1))|0);
 /** @type {number} */ var $150=($149>>>0)>357913941;
 if($150){label=14;break;}else{label=15;break;}
 case 14: 
 /** @type {number} */ var $152=$L;
 _luaM_toobig($152);
 label=16;break;
 case 15: 
 /** @type {number} */ var $155=$L;
 /** @type {number} */ var $156=$f;
 /** @type {number} */ var $157=(($156+24)|0);
 /** @type {number} */ var $158=HEAP32[(($157)>>2)];
 /** @type {number} */ var $159=$158;
 /** @type {number} */ var $160=$f;
 /** @type {number} */ var $161=(($160+60)|0);
 /** @type {number} */ var $162=HEAP32[(($161)>>2)];
 /** @type {number} */ var $163=((($162)*(12))&-1);
 /** @type {number} */ var $164=$fs;
 /** @type {number} */ var $165=(($164+44)|0);
 /** @type {number} */ var $166=HEAP16[(($165)>>1)];
 /** @type {number} */ var $167=(($166<<16)>>16);
 /** @type {number} */ var $168=((($167)*(12))&-1);
 /** @type {number} */ var $169=_luaM_realloc_($155,$159,$163,$168);
 var $171=$169;label=16;break;
 case 16: 
 var $171;
 /** @type {number} */ var $172=$171;
 /** @type {number} */ var $173=$f;
 /** @type {number} */ var $174=(($173+24)|0);
 HEAP32[(($174)>>2)]=$172;
 /** @type {number} */ var $175=$fs;
 /** @type {number} */ var $176=(($175+44)|0);
 /** @type {number} */ var $177=HEAP16[(($176)>>1)];
 /** @type {number} */ var $178=(($177<<16)>>16);
 /** @type {number} */ var $179=$f;
 /** @type {number} */ var $180=(($179+60)|0);
 HEAP32[(($180)>>2)]=$178;
 /** @type {number} */ var $181=$fs;
 /** @type {number} */ var $182=(($181+47)|0);
 /** @type {number} */ var $183=HEAP8[($182)];
 /** @type {number} */ var $184=($183&255);
 /** @type {number} */ var $185=((($184)+(1))|0);
 /** @type {number} */ var $186=($185>>>0)>536870911;
 if($186){label=17;break;}else{label=18;break;}
 case 17: 
 /** @type {number} */ var $188=$L;
 _luaM_toobig($188);
 label=19;break;
 case 18: 
 /** @type {number} */ var $191=$L;
 /** @type {number} */ var $192=$f;
 /** @type {number} */ var $193=(($192+28)|0);
 /** @type {number} */ var $194=HEAP32[(($193)>>2)];
 /** @type {number} */ var $195=$194;
 /** @type {number} */ var $196=$f;
 /** @type {number} */ var $197=(($196+40)|0);
 /** @type {number} */ var $198=HEAP32[(($197)>>2)];
 /** @type {number} */ var $199=($198<<3);
 /** @type {number} */ var $200=$fs;
 /** @type {number} */ var $201=(($200+47)|0);
 /** @type {number} */ var $202=HEAP8[($201)];
 /** @type {number} */ var $203=($202&255);
 /** @type {number} */ var $204=($203<<3);
 /** @type {number} */ var $205=_luaM_realloc_($191,$195,$199,$204);
 var $207=$205;label=19;break;
 case 19: 
 var $207;
 /** @type {number} */ var $208=$207;
 /** @type {number} */ var $209=$f;
 /** @type {number} */ var $210=(($209+28)|0);
 HEAP32[(($210)>>2)]=$208;
 /** @type {number} */ var $211=$fs;
 /** @type {number} */ var $212=(($211+47)|0);
 /** @type {number} */ var $213=HEAP8[($212)];
 /** @type {number} */ var $214=($213&255);
 /** @type {number} */ var $215=$f;
 /** @type {number} */ var $216=(($215+40)|0);
 HEAP32[(($216)>>2)]=$214;
 /** @type {number} */ var $217=$fs;
 /** @type {number} */ var $218=(($217+8)|0);
 /** @type {number} */ var $219=HEAP32[(($218)>>2)];
 /** @type {number} */ var $220=$1;
 /** @type {number} */ var $221=(($220+48)|0);
 HEAP32[(($221)>>2)]=$219;
 /** @type {number} */ var $222=$1;
 _anchor_token($222);
 /** @type {number} */ var $223=$L;
 /** @type {number} */ var $224=(($223+8)|0);
 /** @type {number} */ var $225=HEAP32[(($224)>>2)];
 /** @type {number} */ var $226=((($225)-(16))|0);
 HEAP32[(($224)>>2)]=$226;
 /** @type {number} */ var $227=$L;
 /** @type {number} */ var $228=(($227+12)|0);
 /** @type {number} */ var $229=HEAP32[(($228)>>2)];
 /** @type {number} */ var $230=(($229+12)|0);
 /** @type {number} */ var $231=HEAP32[(($230)>>2)];
 /** @type {number} */ var $232=($231|0)>0;
 if($232){label=20;break;}else{label=21;break;}
 case 20: 
 /** @type {number} */ var $234=$L;
 _luaC_step($234);
 label=21;break;
 case 21: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @param {number} $bl
 * @param {number} $isloop
 * @return {number}
 */
function _enterblock($fs,$bl,$isloop){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$fs;
 $2=$bl;
 $3=$isloop;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=(($5+10)|0);
 HEAP8[($6)]=$4;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=(($7+46)|0);
 /** @type {number} */ var $9=HEAP8[($8)];
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=(($10+8)|0);
 HEAP8[($11)]=$9;
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=(($12+12)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=(($14+64)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=(($16+24)|0);
 /** @type {number} */ var $18=(($17+4)|0);
 /** @type {number} */ var $19=HEAP32[(($18)>>2)];
 /** @type {number} */ var $20=(($19)&65535);
 /** @type {number} */ var $21=$2;
 /** @type {number} */ var $22=(($21+4)|0);
 HEAP16[(($22)>>1)]=$20;
 /** @type {number} */ var $23=$1;
 /** @type {number} */ var $24=(($23+12)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=(($25+64)|0);
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=(($27+12)|0);
 /** @type {number} */ var $29=(($28+4)|0);
 /** @type {number} */ var $30=HEAP32[(($29)>>2)];
 /** @type {number} */ var $31=(($30)&65535);
 /** @type {number} */ var $32=$2;
 /** @type {number} */ var $33=(($32+6)|0);
 HEAP16[(($33)>>1)]=$31;
 /** @type {number} */ var $34=$2;
 /** @type {number} */ var $35=(($34+9)|0);
 HEAP8[($35)]=0;
 /** @type {number} */ var $36=$1;
 /** @type {number} */ var $37=(($36+16)|0);
 /** @type {number} */ var $38=HEAP32[(($37)>>2)];
 /** @type {number} */ var $39=$2;
 /** @type {number} */ var $40=(($39)|0);
 HEAP32[(($40)>>2)]=$38;
 /** @type {number} */ var $41=$2;
 /** @type {number} */ var $42=$1;
 /** @type {number} */ var $43=(($42+16)|0);
 HEAP32[(($43)>>2)]=$41;
 STACKTOP=sp;return;
}
/**
 * @param {number} $fs
 * @param {number} $v
 * @param {number} $l
 * @param {number} $what
 * @return {number}
 */
function _checklimit($fs,$v,$l,$what){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 $1=$fs;
 $2=$v;
 $3=$l;
 $4=$what;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$3;
 /** @type {number} */ var $7=($5|0)>($6|0);
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=$3;
 /** @type {number} */ var $11=$4;
 _errorlimit($9,$10,$11);
 case 3: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $withuntil
 * @return {number}
 */
function _block_follow($ls,$withuntil){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $2=$ls;
 $3=$withuntil;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=(($4+16)|0);
 /** @type {number} */ var $6=(($5)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 switch(($7|0)){case 260:case 261:case 262:case 286:{ label=2;break;}case 277:{ label=3;break;}default:{label=4;break;}}break;
 case 2: 
 $1=1;
 label=5;break;
 case 3: 
 /** @type {number} */ var $10=$3;
 $1=$10;
 label=5;break;
 case 4: 
 $1=0;
 label=5;break;
 case 5: 
 /** @type {number} */ var $13=$1;
 STACKTOP=sp;return $13;
 }
}
/**
 * @param {number} $ls
 * @return {number}
 */
function _statement($ls){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $line;
 $1=$ls;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+4)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $line=$4;
 /** @type {number} */ var $5=$1;
 _enterlevel($5);
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+16)|0);
 /** @type {number} */ var $8=(($7)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 switch(($9|0)){case 285:{ label=13;break;}case 274:{ label=14;break;}case 258:case 266:{ label=15;break;}case 59:{ label=2;break;}case 267:{ label=3;break;}case 278:{ label=4;break;}case 259:{ label=5;break;}case 264:{ label=6;break;}case 273:{ label=7;break;}case 265:{ label=8;break;}case 269:{ label=9;break;}default:{label=16;break;}}break;
 case 2: 
 /** @type {number} */ var $11=$1;
 _luaX_next($11);
 label=17;break;
 case 3: 
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=$line;
 _ifstat($13,$14);
 label=17;break;
 case 4: 
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=$line;
 _whilestat($16,$17);
 label=17;break;
 case 5: 
 /** @type {number} */ var $19=$1;
 _luaX_next($19);
 /** @type {number} */ var $20=$1;
 _block($20);
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=$line;
 _check_match($21,262,259,$22);
 label=17;break;
 case 6: 
 /** @type {number} */ var $24=$1;
 /** @type {number} */ var $25=$line;
 _forstat($24,$25);
 label=17;break;
 case 7: 
 /** @type {number} */ var $27=$1;
 /** @type {number} */ var $28=$line;
 _repeatstat($27,$28);
 label=17;break;
 case 8: 
 /** @type {number} */ var $30=$1;
 /** @type {number} */ var $31=$line;
 _funcstat($30,$31);
 label=17;break;
 case 9: 
 /** @type {number} */ var $33=$1;
 _luaX_next($33);
 /** @type {number} */ var $34=$1;
 /** @type {number} */ var $35=_testnext($34,265);
 /** @type {number} */ var $36=($35|0)!=0;
 if($36){label=10;break;}else{label=11;break;}
 case 10: 
 /** @type {number} */ var $38=$1;
 _localfunc($38);
 label=12;break;
 case 11: 
 /** @type {number} */ var $40=$1;
 _localstat($40);
 label=12;break;
 case 12: 
 label=17;break;
 case 13: 
 /** @type {number} */ var $43=$1;
 _luaX_next($43);
 /** @type {number} */ var $44=$1;
 /** @type {number} */ var $45=$1;
 /** @type {number} */ var $46=_str_checkname($45);
 /** @type {number} */ var $47=$line;
 _labelstat($44,$46,$47);
 label=17;break;
 case 14: 
 /** @type {number} */ var $49=$1;
 _luaX_next($49);
 /** @type {number} */ var $50=$1;
 _retstat($50);
 label=17;break;
 case 15: 
 /** @type {number} */ var $52=$1;
 /** @type {number} */ var $53=$1;
 /** @type {number} */ var $54=(($53+48)|0);
 /** @type {number} */ var $55=HEAP32[(($54)>>2)];
 /** @type {number} */ var $56=_luaK_jump($55);
 _gotostat($52,$56);
 label=17;break;
 case 16: 
 /** @type {number} */ var $58=$1;
 _exprstat($58);
 label=17;break;
 case 17: 
 /** @type {number} */ var $60=$1;
 /** @type {number} */ var $61=(($60+48)|0);
 /** @type {number} */ var $62=HEAP32[(($61)>>2)];
 /** @type {number} */ var $63=(($62+46)|0);
 /** @type {number} */ var $64=HEAP8[($63)];
 /** @type {number} */ var $65=$1;
 /** @type {number} */ var $66=(($65+48)|0);
 /** @type {number} */ var $67=HEAP32[(($66)>>2)];
 /** @type {number} */ var $68=(($67+48)|0);
 HEAP8[($68)]=$64;
 /** @type {number} */ var $69=$1;
 /** @type {number} */ var $70=(($69+52)|0);
 /** @type {number} */ var $71=HEAP32[(($70)>>2)];
 /** @type {number} */ var $72=(($71+38)|0);
 /** @type {number} */ var $73=HEAP16[(($72)>>1)];
 /** @type {number} */ var $74=((($73)-(1))&65535);
 HEAP16[(($72)>>1)]=$74;
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $token
 * @return {number}
 */
function _error_expected($ls,$token){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$ls;
 $2=$token;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+52)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=_luaX_token2str($7,$8);
 /** @type {number} */ var $10=_luaO_pushfstring($6,4304,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$9,tempVarArgs)); STACKTOP=tempVarArgs;
 _luaX_syntaxerror($3,$10);
 STACKTOP=sp;return;
}
/**
 * @param {number} $fs
 * @return {number}
 */
function _leaveblock($fs){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $bl;
 /** @type {number} */ var $ls;
 /** @type {number} */ var $j;
 $1=$fs;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+16)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $bl=$4;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($5+12)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 $ls=$7;
 /** @type {number} */ var $8=$bl;
 /** @type {number} */ var $9=(($8)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=($10|0)!=0;
 if($11){label=2;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $13=$bl;
 /** @type {number} */ var $14=(($13+9)|0);
 /** @type {number} */ var $15=HEAP8[($14)];
 /** @type {number} */ var $16=($15&255);
 /** @type {number} */ var $17=($16|0)!=0;
 if($17){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $19=$1;
 /** @type {number} */ var $20=_luaK_jump($19);
 $j=$20;
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=$j;
 /** @type {number} */ var $23=$bl;
 /** @type {number} */ var $24=(($23+8)|0);
 /** @type {number} */ var $25=HEAP8[($24)];
 /** @type {number} */ var $26=($25&255);
 _luaK_patchclose($21,$22,$26);
 /** @type {number} */ var $27=$1;
 /** @type {number} */ var $28=$j;
 _luaK_patchtohere($27,$28);
 label=4;break;
 case 4: 
 /** @type {number} */ var $30=$bl;
 /** @type {number} */ var $31=(($30+10)|0);
 /** @type {number} */ var $32=HEAP8[($31)];
 /** @type {number} */ var $33=(($32<<24)>>24)!=0;
 if($33){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $35=$ls;
 _breaklabel($35);
 label=6;break;
 case 6: 
 /** @type {number} */ var $37=$bl;
 /** @type {number} */ var $38=(($37)|0);
 /** @type {number} */ var $39=HEAP32[(($38)>>2)];
 /** @type {number} */ var $40=$1;
 /** @type {number} */ var $41=(($40+16)|0);
 HEAP32[(($41)>>2)]=$39;
 /** @type {number} */ var $42=$1;
 /** @type {number} */ var $43=$bl;
 /** @type {number} */ var $44=(($43+8)|0);
 /** @type {number} */ var $45=HEAP8[($44)];
 /** @type {number} */ var $46=($45&255);
 _removevars($42,$46);
 /** @type {number} */ var $47=$1;
 /** @type {number} */ var $48=(($47+46)|0);
 /** @type {number} */ var $49=HEAP8[($48)];
 /** @type {number} */ var $50=$1;
 /** @type {number} */ var $51=(($50+48)|0);
 HEAP8[($51)]=$49;
 /** @type {number} */ var $52=$bl;
 /** @type {number} */ var $53=(($52+4)|0);
 /** @type {number} */ var $54=HEAP16[(($53)>>1)];
 /** @type {number} */ var $55=(($54<<16)>>16);
 /** @type {number} */ var $56=$ls;
 /** @type {number} */ var $57=(($56+64)|0);
 /** @type {number} */ var $58=HEAP32[(($57)>>2)];
 /** @type {number} */ var $59=(($58+24)|0);
 /** @type {number} */ var $60=(($59+4)|0);
 HEAP32[(($60)>>2)]=$55;
 /** @type {number} */ var $61=$bl;
 /** @type {number} */ var $62=(($61)|0);
 /** @type {number} */ var $63=HEAP32[(($62)>>2)];
 /** @type {number} */ var $64=($63|0)!=0;
 if($64){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $66=$1;
 /** @type {number} */ var $67=$bl;
 _movegotosout($66,$67);
 label=11;break;
 case 8: 
 /** @type {number} */ var $69=$bl;
 /** @type {number} */ var $70=(($69+6)|0);
 /** @type {number} */ var $71=HEAP16[(($70)>>1)];
 /** @type {number} */ var $72=(($71<<16)>>16);
 /** @type {number} */ var $73=$ls;
 /** @type {number} */ var $74=(($73+64)|0);
 /** @type {number} */ var $75=HEAP32[(($74)>>2)];
 /** @type {number} */ var $76=(($75+12)|0);
 /** @type {number} */ var $77=(($76+4)|0);
 /** @type {number} */ var $78=HEAP32[(($77)>>2)];
 /** @type {number} */ var $79=($72|0)<($78|0);
 if($79){label=9;break;}else{label=10;break;}
 case 9: 
 /** @type {number} */ var $81=$ls;
 /** @type {number} */ var $82=$bl;
 /** @type {number} */ var $83=(($82+6)|0);
 /** @type {number} */ var $84=HEAP16[(($83)>>1)];
 /** @type {number} */ var $85=(($84<<16)>>16);
 /** @type {number} */ var $86=$ls;
 /** @type {number} */ var $87=(($86+64)|0);
 /** @type {number} */ var $88=HEAP32[(($87)>>2)];
 /** @type {number} */ var $89=(($88+12)|0);
 /** @type {number} */ var $90=(($89)|0);
 /** @type {number} */ var $91=HEAP32[(($90)>>2)];
 /** @type {number} */ var $92=(($91+($85<<4))|0);
 _undefgoto($81,$92);
 case 10: 
 label=11;break;
 case 11: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @return {number}
 */
function _anchor_token($ls){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $ts;
 $1=$ls;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+16)|0);
 /** @type {number} */ var $4=(($3)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=($5|0)==288;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=(($8+16)|0);
 /** @type {number} */ var $10=(($9)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=($11|0)==289;
 if($12){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=(($14+16)|0);
 /** @type {number} */ var $16=(($15+8)|0);
 /** @type {number} */ var $17=$16;
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 $ts=$18;
 /** @type {number} */ var $19=$1;
 /** @type {number} */ var $20=$ts;
 /** @type {number} */ var $21=(($20+16)|0);
 /** @type {number} */ var $22=$21;
 /** @type {number} */ var $23=$ts;
 /** @type {number} */ var $24=$23;
 /** @type {number} */ var $25=(($24+12)|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 /** @type {number} */ var $27=_luaX_newstring($19,$22,$26);
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @param {number} $limit
 * @param {number} $what
 * @return {number}
 */
function _errorlimit($fs,$limit,$what){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $L;
 /** @type {number} */ var $msg;
 /** @type {number} */ var $line;
 /** @type {number} */ var $where;
 $1=$fs;
 $2=$limit;
 $3=$what;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+12)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=(($6+52)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 $L=$8;
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=(($9)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=(($11+64)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 $line=$13;
 /** @type {number} */ var $14=$line;
 /** @type {number} */ var $15=($14|0)==0;
 if($15){label=2;break;}else{label=3;break;}
 case 2: 
 var $22=10784;label=4;break;
 case 3: 
 /** @type {number} */ var $18=$L;
 /** @type {number} */ var $19=$line;
 /** @type {number} */ var $20=_luaO_pushfstring($18,10576,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$19,tempVarArgs)); STACKTOP=tempVarArgs;
 var $22=$20;label=4;break;
 case 4: 
 var $22;
 $where=$22;
 /** @type {number} */ var $23=$L;
 /** @type {number} */ var $24=$3;
 /** @type {number} */ var $25=$2;
 /** @type {number} */ var $26=$where;
 /** @type {number} */ var $27=_luaO_pushfstring($23,10320,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,HEAP32[((tempVarArgs)>>2)]=$24,HEAP32[(((tempVarArgs)+(8))>>2)]=$25,HEAP32[(((tempVarArgs)+(16))>>2)]=$26,tempVarArgs)); STACKTOP=tempVarArgs;
 $msg=$27;
 /** @type {number} */ var $28=$1;
 /** @type {number} */ var $29=(($28+12)|0);
 /** @type {number} */ var $30=HEAP32[(($29)>>2)];
 /** @type {number} */ var $31=$msg;
 _luaX_syntaxerror($30,$31);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @return {number}
 */
function _enterlevel($ls){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $L;
 $1=$ls;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+52)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $L=$4;
 /** @type {number} */ var $5=$L;
 /** @type {number} */ var $6=(($5+38)|0);
 /** @type {number} */ var $7=HEAP16[(($6)>>1)];
 /** @type {number} */ var $8=((($7)+(1))&65535);
 HEAP16[(($6)>>1)]=$8;
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=(($9+48)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=$L;
 /** @type {number} */ var $13=(($12+38)|0);
 /** @type {number} */ var $14=HEAP16[(($13)>>1)];
 /** @type {number} */ var $15=($14&65535);
 _checklimit($11,$15,200,3464);
 STACKTOP=sp;return;
}
/**
 * @param {number} $ls
 * @param {number} $line
 * @return {number}
 */
function _ifstat($ls,$line){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $fs;
 /** @type {number} */ var $escapelist=sp;
 $1=$ls;
 $2=$line;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+48)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $fs=$5;
 HEAP32[(($escapelist)>>2)]=-1;
 /** @type {number} */ var $6=$1;
 _test_then_block($6,$escapelist);
 label=2;break;
 case 2: 
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=(($8+16)|0);
 /** @type {number} */ var $10=(($9)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=($11|0)==261;
 if($12){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $14=$1;
 _test_then_block($14,$escapelist);
 label=2;break;
 case 4: 
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=_testnext($16,260);
 /** @type {number} */ var $18=($17|0)!=0;
 if($18){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $20=$1;
 _block($20);
 label=6;break;
 case 6: 
 /** @type {number} */ var $22=$1;
 /** @type {number} */ var $23=$2;
 _check_match($22,262,267,$23);
 /** @type {number} */ var $24=$fs;
 /** @type {number} */ var $25=HEAP32[(($escapelist)>>2)];
 _luaK_patchtohere($24,$25);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $line
 * @return {number}
 */
function _whilestat($ls,$line){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $fs;
 /** @type {number} */ var $whileinit;
 /** @type {number} */ var $condexit;
 /** @type {number} */ var $bl=sp;
 $1=$ls;
 $2=$line;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+48)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $fs=$5;
 /** @type {number} */ var $6=$1;
 _luaX_next($6);
 /** @type {number} */ var $7=$fs;
 /** @type {number} */ var $8=_luaK_getlabel($7);
 $whileinit=$8;
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=_cond($9);
 $condexit=$10;
 /** @type {number} */ var $11=$fs;
 _enterblock($11,$bl,1);
 /** @type {number} */ var $12=$1;
 _checknext($12,259);
 /** @type {number} */ var $13=$1;
 _block($13);
 /** @type {number} */ var $14=$fs;
 /** @type {number} */ var $15=$fs;
 /** @type {number} */ var $16=_luaK_jump($15);
 /** @type {number} */ var $17=$whileinit;
 _luaK_patchlist($14,$16,$17);
 /** @type {number} */ var $18=$1;
 /** @type {number} */ var $19=$2;
 _check_match($18,262,278,$19);
 /** @type {number} */ var $20=$fs;
 _leaveblock($20);
 /** @type {number} */ var $21=$fs;
 /** @type {number} */ var $22=$condexit;
 _luaK_patchtohere($21,$22);
 STACKTOP=sp;return;
}
/**
 * @param {number} $ls
 * @return {number}
 */
function _block($ls){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 /** @type {number} */ var $1;
 /** @type {number} */ var $fs;
 /** @type {number} */ var $bl=sp;
 $1=$ls;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+48)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $fs=$4;
 /** @type {number} */ var $5=$fs;
 _enterblock($5,$bl,0);
 /** @type {number} */ var $6=$1;
 _statlist($6);
 /** @type {number} */ var $7=$fs;
 _leaveblock($7);
 STACKTOP=sp;return;
}
/**
 * @param {number} $ls
 * @param {number} $what
 * @param {number} $who
 * @param {number} $where
 * @return {number}
 */
function _check_match($ls,$what,$who,$where){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 $1=$ls;
 $2=$what;
 $3=$who;
 $4=$where;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=_testnext($5,$6);
 /** @type {number} */ var $8=($7|0)!=0;
 if($8){label=5;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $10=$4;
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=(($11+4)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=($10|0)==($13|0);
 if($14){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=$2;
 _error_expected($16,$17);
 case 4: 
 /** @type {number} */ var $19=$1;
 /** @type {number} */ var $20=$1;
 /** @type {number} */ var $21=(($20+52)|0);
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 /** @type {number} */ var $23=$1;
 /** @type {number} */ var $24=$2;
 /** @type {number} */ var $25=_luaX_token2str($23,$24);
 /** @type {number} */ var $26=$1;
 /** @type {number} */ var $27=$3;
 /** @type {number} */ var $28=_luaX_token2str($26,$27);
 /** @type {number} */ var $29=$4;
 /** @type {number} */ var $30=_luaO_pushfstring($22,7816,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,HEAP32[((tempVarArgs)>>2)]=$25,HEAP32[(((tempVarArgs)+(8))>>2)]=$28,HEAP32[(((tempVarArgs)+(16))>>2)]=$29,tempVarArgs)); STACKTOP=tempVarArgs;
 _luaX_syntaxerror($19,$30);
 case 5: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $line
 * @return {number}
 */
function _forstat($ls,$line){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $fs;
 /** @type {number} */ var $varname;
 /** @type {number} */ var $bl=sp;
 $1=$ls;
 $2=$line;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+48)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $fs=$5;
 /** @type {number} */ var $6=$fs;
 _enterblock($6,$bl,1);
 /** @type {number} */ var $7=$1;
 _luaX_next($7);
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=_str_checkname($8);
 $varname=$9;
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=(($10+16)|0);
 /** @type {number} */ var $12=(($11)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 if(($13|0)==61){ label=2;break;}else if(($13|0)==44|($13|0)==268){ label=3;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=$varname;
 /** @type {number} */ var $17=$2;
 _fornum($15,$16,$17);
 label=5;break;
 case 3: 
 /** @type {number} */ var $19=$1;
 /** @type {number} */ var $20=$varname;
 _forlist($19,$20);
 label=5;break;
 case 4: 
 /** @type {number} */ var $22=$1;
 _luaX_syntaxerror($22,9432);
 case 5: 
 /** @type {number} */ var $24=$1;
 /** @type {number} */ var $25=$2;
 _check_match($24,262,264,$25);
 /** @type {number} */ var $26=$fs;
 _leaveblock($26);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $line
 * @return {number}
 */
function _repeatstat($ls,$line){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $condexit;
 /** @type {number} */ var $fs;
 /** @type {number} */ var $repeat_init;
 /** @type {number} */ var $bl1=sp;
 /** @type {number} */ var $bl2=(sp)+(16);
 $1=$ls;
 $2=$line;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+48)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $fs=$5;
 /** @type {number} */ var $6=$fs;
 /** @type {number} */ var $7=_luaK_getlabel($6);
 $repeat_init=$7;
 /** @type {number} */ var $8=$fs;
 _enterblock($8,$bl1,1);
 /** @type {number} */ var $9=$fs;
 _enterblock($9,$bl2,0);
 /** @type {number} */ var $10=$1;
 _luaX_next($10);
 /** @type {number} */ var $11=$1;
 _statlist($11);
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=$2;
 _check_match($12,277,273,$13);
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=_cond($14);
 $condexit=$15;
 /** @type {number} */ var $16=(($bl2+9)|0);
 /** @type {number} */ var $17=HEAP8[($16)];
 /** @type {number} */ var $18=(($17<<24)>>24)!=0;
 if($18){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $20=$fs;
 /** @type {number} */ var $21=$condexit;
 /** @type {number} */ var $22=(($bl2+8)|0);
 /** @type {number} */ var $23=HEAP8[($22)];
 /** @type {number} */ var $24=($23&255);
 _luaK_patchclose($20,$21,$24);
 label=3;break;
 case 3: 
 /** @type {number} */ var $26=$fs;
 _leaveblock($26);
 /** @type {number} */ var $27=$fs;
 /** @type {number} */ var $28=$condexit;
 /** @type {number} */ var $29=$repeat_init;
 _luaK_patchlist($27,$28,$29);
 /** @type {number} */ var $30=$fs;
 _leaveblock($30);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $line
 * @return {number}
 */
function _funcstat($ls,$line){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $ismethod;
 /** @type {number} */ var $v=sp;
 /** @type {number} */ var $b=(sp)+(24);
 $1=$ls;
 $2=$line;
 /** @type {number} */ var $3=$1;
 _luaX_next($3);
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=_funcname($4,$v);
 $ismethod=$5;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=$ismethod;
 /** @type {number} */ var $8=$2;
 _body($6,$b,$7,$8);
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=(($9+48)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 _luaK_storevar($11,$v,$b);
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=(($12+48)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=$2;
 _luaK_fixline($14,$15);
 STACKTOP=sp;return;
}
/**
 * @param {number} $ls
 * @param {number} $c
 * @return {number}
 */
function _testnext($ls,$c){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $2=$ls;
 $3=$c;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=(($4+16)|0);
 /** @type {number} */ var $6=(($5)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=$3;
 /** @type {number} */ var $9=($7|0)==($8|0);
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $11=$2;
 _luaX_next($11);
 $1=1;
 label=4;break;
 case 3: 
 $1=0;
 label=4;break;
 case 4: 
 /** @type {number} */ var $14=$1;
 STACKTOP=sp;return $14;
 }
}
/**
 * @param {number} $ls
 * @return {number}
 */
function _localfunc($ls){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0;
 /** @type {number} */ var $1;
 /** @type {number} */ var $b=sp;
 /** @type {number} */ var $fs;
 $1=$ls;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+48)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $fs=$4;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=_str_checkname($6);
 _new_localvar($5,$7);
 /** @type {number} */ var $8=$1;
 _adjustlocalvars($8,1);
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=(($10+4)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 _body($9,$b,0,$12);
 /** @type {number} */ var $13=$fs;
 /** @type {number} */ var $14=(($13+20)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=$fs;
 /** @type {number} */ var $17=(($b+8)|0);
 /** @type {number} */ var $18=$17;
 /** @type {number} */ var $19=HEAP32[(($18)>>2)];
 /** @type {number} */ var $20=_getlocvar($16,$19);
 /** @type {number} */ var $21=(($20+4)|0);
 HEAP32[(($21)>>2)]=$15;
 STACKTOP=sp;return;
}
/**
 * @param {number} $ls
 * @return {number}
 */
function _localstat($ls){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $nvars;
 /** @type {number} */ var $nexps;
 /** @type {number} */ var $e=sp;
 $1=$ls;
 $nvars=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=_str_checkname($4);
 _new_localvar($3,$5);
 /** @type {number} */ var $6=$nvars;
 /** @type {number} */ var $7=((($6)+(1))|0);
 $nvars=$7;
 label=3;break;
 case 3: 
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=_testnext($9,44);
 /** @type {number} */ var $11=($10|0)!=0;
 if($11){label=2;break;}else{label=4;break;}
 case 4: 
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=_testnext($13,61);
 /** @type {number} */ var $15=($14|0)!=0;
 if($15){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=_explist($17,$e);
 $nexps=$18;
 label=7;break;
 case 6: 
 /** @type {number} */ var $20=(($e)|0);
 HEAP32[(($20)>>2)]=0;
 $nexps=0;
 label=7;break;
 case 7: 
 /** @type {number} */ var $22=$1;
 /** @type {number} */ var $23=$nvars;
 /** @type {number} */ var $24=$nexps;
 _adjust_assign($22,$23,$24,$e);
 /** @type {number} */ var $25=$1;
 /** @type {number} */ var $26=$nvars;
 _adjustlocalvars($25,$26);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @return {number}
 */
function _str_checkname($ls){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $ts;
 $1=$ls;
 /** @type {number} */ var $2=$1;
 _check($2,288);
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+16)|0);
 /** @type {number} */ var $5=(($4+8)|0);
 /** @type {number} */ var $6=$5;
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 $ts=$7;
 /** @type {number} */ var $8=$1;
 _luaX_next($8);
 /** @type {number} */ var $9=$ts;
 STACKTOP=sp;return $9;
}
/**
 * @param {number} $ls
 * @param {number} $label
 * @param {number} $line
 * @return {number}
 */
function _labelstat($ls,$label,$line){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $fs;
 /** @type {number} */ var $ll;
 /** @type {number} */ var $l;
 $1=$ls;
 $2=$label;
 $3=$line;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+48)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 $fs=$6;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=(($7+64)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=(($9+24)|0);
 $ll=$10;
 /** @type {number} */ var $11=$fs;
 /** @type {number} */ var $12=$ll;
 /** @type {number} */ var $13=$2;
 _checkrepeated($11,$12,$13);
 /** @type {number} */ var $14=$1;
 _checknext($14,285);
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=$ll;
 /** @type {number} */ var $17=$2;
 /** @type {number} */ var $18=$3;
 /** @type {number} */ var $19=$fs;
 /** @type {number} */ var $20=(($19+20)|0);
 /** @type {number} */ var $21=HEAP32[(($20)>>2)];
 /** @type {number} */ var $22=_newlabelentry($15,$16,$17,$18,$21);
 $l=$22;
 /** @type {number} */ var $23=$1;
 _skipnoopstat($23);
 /** @type {number} */ var $24=$1;
 /** @type {number} */ var $25=_block_follow($24,0);
 /** @type {number} */ var $26=($25|0)!=0;
 if($26){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $28=$fs;
 /** @type {number} */ var $29=(($28+16)|0);
 /** @type {number} */ var $30=HEAP32[(($29)>>2)];
 /** @type {number} */ var $31=(($30+8)|0);
 /** @type {number} */ var $32=HEAP8[($31)];
 /** @type {number} */ var $33=$l;
 /** @type {number} */ var $34=$ll;
 /** @type {number} */ var $35=(($34)|0);
 /** @type {number} */ var $36=HEAP32[(($35)>>2)];
 /** @type {number} */ var $37=(($36+($33<<4))|0);
 /** @type {number} */ var $38=(($37+12)|0);
 HEAP8[($38)]=$32;
 label=3;break;
 case 3: 
 /** @type {number} */ var $40=$1;
 /** @type {number} */ var $41=$l;
 /** @type {number} */ var $42=$ll;
 /** @type {number} */ var $43=(($42)|0);
 /** @type {number} */ var $44=HEAP32[(($43)>>2)];
 /** @type {number} */ var $45=(($44+($41<<4))|0);
 _findgotos($40,$45);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @return {number}
 */
function _retstat($ls){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $fs;
 /** @type {number} */ var $e=sp;
 /** @type {number} */ var $first;
 /** @type {number} */ var $nret;
 $1=$ls;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+48)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $fs=$4;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=_block_follow($5,1);
 /** @type {number} */ var $7=($6|0)!=0;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=(($9+16)|0);
 /** @type {number} */ var $11=(($10)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=($12|0)==59;
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 $nret=0;
 $first=0;
 label=15;break;
 case 4: 
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=_explist($16,$e);
 $nret=$17;
 /** @type {number} */ var $18=(($e)|0);
 /** @type {number} */ var $19=HEAP32[(($18)>>2)];
 /** @type {number} */ var $20=($19|0)==12;
 if($20){label=6;break;}else{label=5;break;}
 case 5: 
 /** @type {number} */ var $22=(($e)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 /** @type {number} */ var $24=($23|0)==13;
 if($24){label=6;break;}else{label=10;break;}
 case 6: 
 /** @type {number} */ var $26=$fs;
 _luaK_setreturns($26,$e,-1);
 /** @type {number} */ var $27=(($e)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=($28|0)==12;
 if($29){label=7;break;}else{label=9;break;}
 case 7: 
 /** @type {number} */ var $31=$nret;
 /** @type {number} */ var $32=($31|0)==1;
 if($32){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $34=(($e+8)|0);
 /** @type {number} */ var $35=$34;
 /** @type {number} */ var $36=HEAP32[(($35)>>2)];
 /** @type {number} */ var $37=$fs;
 /** @type {number} */ var $38=(($37)|0);
 /** @type {number} */ var $39=HEAP32[(($38)>>2)];
 /** @type {number} */ var $40=(($39+12)|0);
 /** @type {number} */ var $41=HEAP32[(($40)>>2)];
 /** @type {number} */ var $42=(($41+($36<<2))|0);
 /** @type {number} */ var $43=HEAP32[(($42)>>2)];
 /** @type {number} */ var $44=$43&-64;
 /** @type {number} */ var $45=$44|30;
 /** @type {number} */ var $46=(($e+8)|0);
 /** @type {number} */ var $47=$46;
 /** @type {number} */ var $48=HEAP32[(($47)>>2)];
 /** @type {number} */ var $49=$fs;
 /** @type {number} */ var $50=(($49)|0);
 /** @type {number} */ var $51=HEAP32[(($50)>>2)];
 /** @type {number} */ var $52=(($51+12)|0);
 /** @type {number} */ var $53=HEAP32[(($52)>>2)];
 /** @type {number} */ var $54=(($53+($48<<2))|0);
 HEAP32[(($54)>>2)]=$45;
 label=9;break;
 case 9: 
 /** @type {number} */ var $56=$fs;
 /** @type {number} */ var $57=(($56+46)|0);
 /** @type {number} */ var $58=HEAP8[($57)];
 /** @type {number} */ var $59=($58&255);
 $first=$59;
 $nret=-1;
 label=14;break;
 case 10: 
 /** @type {number} */ var $61=$nret;
 /** @type {number} */ var $62=($61|0)==1;
 if($62){label=11;break;}else{label=12;break;}
 case 11: 
 /** @type {number} */ var $64=$fs;
 /** @type {number} */ var $65=_luaK_exp2anyreg($64,$e);
 $first=$65;
 label=13;break;
 case 12: 
 /** @type {number} */ var $67=$fs;
 _luaK_exp2nextreg($67,$e);
 /** @type {number} */ var $68=$fs;
 /** @type {number} */ var $69=(($68+46)|0);
 /** @type {number} */ var $70=HEAP8[($69)];
 /** @type {number} */ var $71=($70&255);
 $first=$71;
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 /** @type {number} */ var $75=$fs;
 /** @type {number} */ var $76=$first;
 /** @type {number} */ var $77=$nret;
 _luaK_ret($75,$76,$77);
 /** @type {number} */ var $78=$1;
 /** @type {number} */ var $79=_testnext($78,59);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $pc
 * @return {number}
 */
function _gotostat($ls,$pc){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $line;
 /** @type {number} */ var $label;
 /** @type {number} */ var $g;
 $1=$ls;
 $2=$pc;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+4)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $line=$5;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=_testnext($6,266);
 /** @type {number} */ var $8=($7|0)!=0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=_str_checkname($10);
 $label=$11;
 label=4;break;
 case 3: 
 /** @type {number} */ var $13=$1;
 _luaX_next($13);
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=(($14+52)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=_luaS_new($16,6960);
 $label=$17;
 label=4;break;
 case 4: 
 /** @type {number} */ var $19=$1;
 /** @type {number} */ var $20=$1;
 /** @type {number} */ var $21=(($20+64)|0);
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 /** @type {number} */ var $23=(($22+12)|0);
 /** @type {number} */ var $24=$label;
 /** @type {number} */ var $25=$line;
 /** @type {number} */ var $26=$2;
 /** @type {number} */ var $27=_newlabelentry($19,$23,$24,$25,$26);
 $g=$27;
 /** @type {number} */ var $28=$1;
 /** @type {number} */ var $29=$g;
 /** @type {number} */ var $30=_findlabel($28,$29);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @return {number}
 */
function _exprstat($ls){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $fs;
 /** @type {number} */ var $v=sp;
 $1=$ls;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+48)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $fs=$4;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($v+8)|0);
 _suffixedexp($5,$6);
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=(($7+16)|0);
 /** @type {number} */ var $9=(($8)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=($10|0)==61;
 if($11){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=(($13+16)|0);
 /** @type {number} */ var $15=(($14)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=($16|0)==44;
 if($17){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $19=(($v)|0);
 HEAP32[(($19)>>2)]=0;
 /** @type {number} */ var $20=$1;
 _assignment($20,$v,1);
 label=7;break;
 case 4: 
 /** @type {number} */ var $22=(($v+8)|0);
 /** @type {number} */ var $23=(($22)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=($24|0)==12;
 if($25){label=6;break;}else{label=5;break;}
 case 5: 
 /** @type {number} */ var $27=$1;
 _luaX_syntaxerror($27,3912);
 case 6: 
 /** @type {number} */ var $29=(($v+8)|0);
 /** @type {number} */ var $30=(($29+8)|0);
 /** @type {number} */ var $31=$30;
 /** @type {number} */ var $32=HEAP32[(($31)>>2)];
 /** @type {number} */ var $33=$fs;
 /** @type {number} */ var $34=(($33)|0);
 /** @type {number} */ var $35=HEAP32[(($34)>>2)];
 /** @type {number} */ var $36=(($35+12)|0);
 /** @type {number} */ var $37=HEAP32[(($36)>>2)];
 /** @type {number} */ var $38=(($37+($32<<2))|0);
 /** @type {number} */ var $39=HEAP32[(($38)>>2)];
 /** @type {number} */ var $40=$39&-8372225;
 /** @type {number} */ var $41=$40|16384;
 /** @type {number} */ var $42=(($v+8)|0);
 /** @type {number} */ var $43=(($42+8)|0);
 /** @type {number} */ var $44=$43;
 /** @type {number} */ var $45=HEAP32[(($44)>>2)];
 /** @type {number} */ var $46=$fs;
 /** @type {number} */ var $47=(($46)|0);
 /** @type {number} */ var $48=HEAP32[(($47)>>2)];
 /** @type {number} */ var $49=(($48+12)|0);
 /** @type {number} */ var $50=HEAP32[(($49)>>2)];
 /** @type {number} */ var $51=(($50+($45<<2))|0);
 HEAP32[(($51)>>2)]=$41;
 label=7;break;
 case 7: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @return {number}
 */
function _breaklabel($ls){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $n;
 /** @type {number} */ var $l;
 $1=$ls;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+52)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 /** @type {number} */ var $5=_luaS_new($4,6960);
 $n=$5;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=(($7+64)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=(($9+24)|0);
 /** @type {number} */ var $11=$n;
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=(($12+48)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=(($14+20)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=_newlabelentry($6,$10,$11,0,$16);
 $l=$17;
 /** @type {number} */ var $18=$1;
 /** @type {number} */ var $19=$l;
 /** @type {number} */ var $20=$1;
 /** @type {number} */ var $21=(($20+64)|0);
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 /** @type {number} */ var $23=(($22+24)|0);
 /** @type {number} */ var $24=(($23)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=(($25+($19<<4))|0);
 _findgotos($18,$26);
 STACKTOP=sp;return;
}
/**
 * @param {number} $fs
 * @param {number} $tolevel
 * @return {number}
 */
function _removevars($fs,$tolevel){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$fs;
 $2=$tolevel;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+46)|0);
 /** @type {number} */ var $5=HEAP8[($4)];
 /** @type {number} */ var $6=($5&255);
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=((($6)-($7))|0);
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=(($9+12)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=(($11+64)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=(($13)|0);
 /** @type {number} */ var $15=(($14+4)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=((($16)-($8))|0);
 HEAP32[(($15)>>2)]=$17;
 label=2;break;
 case 2: 
 /** @type {number} */ var $19=$1;
 /** @type {number} */ var $20=(($19+46)|0);
 /** @type {number} */ var $21=HEAP8[($20)];
 /** @type {number} */ var $22=($21&255);
 /** @type {number} */ var $23=$2;
 /** @type {number} */ var $24=($22|0)>($23|0);
 if($24){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $26=$1;
 /** @type {number} */ var $27=(($26+20)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=$1;
 /** @type {number} */ var $30=$1;
 /** @type {number} */ var $31=(($30+46)|0);
 /** @type {number} */ var $32=HEAP8[($31)];
 /** @type {number} */ var $33=((($32)-(1))&255);
 HEAP8[($31)]=$33;
 /** @type {number} */ var $34=($33&255);
 /** @type {number} */ var $35=_getlocvar($29,$34);
 /** @type {number} */ var $36=(($35+8)|0);
 HEAP32[(($36)>>2)]=$28;
 label=2;break;
 case 4: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @param {number} $bl
 * @return {number}
 */
function _movegotosout($fs,$bl){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $i;
 /** @type {number} */ var $gl;
 /** @type {number} */ var $gt;
 $1=$fs;
 $2=$bl;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=(($3+6)|0);
 /** @type {number} */ var $5=HEAP16[(($4)>>1)];
 /** @type {number} */ var $6=(($5<<16)>>16);
 $i=$6;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=(($7+12)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=(($9+64)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=(($11+12)|0);
 $gl=$12;
 label=2;break;
 case 2: 
 /** @type {number} */ var $14=$i;
 /** @type {number} */ var $15=$gl;
 /** @type {number} */ var $16=(($15+4)|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=($14|0)<($17|0);
 if($18){label=3;break;}else{label=10;break;}
 case 3: 
 /** @type {number} */ var $20=$i;
 /** @type {number} */ var $21=$gl;
 /** @type {number} */ var $22=(($21)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 /** @type {number} */ var $24=(($23+($20<<4))|0);
 $gt=$24;
 /** @type {number} */ var $25=$gt;
 /** @type {number} */ var $26=(($25+12)|0);
 /** @type {number} */ var $27=HEAP8[($26)];
 /** @type {number} */ var $28=($27&255);
 /** @type {number} */ var $29=$2;
 /** @type {number} */ var $30=(($29+8)|0);
 /** @type {number} */ var $31=HEAP8[($30)];
 /** @type {number} */ var $32=($31&255);
 /** @type {number} */ var $33=($28|0)>($32|0);
 if($33){label=4;break;}else{label=7;break;}
 case 4: 
 /** @type {number} */ var $35=$2;
 /** @type {number} */ var $36=(($35+9)|0);
 /** @type {number} */ var $37=HEAP8[($36)];
 /** @type {number} */ var $38=(($37<<24)>>24)!=0;
 if($38){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $40=$1;
 /** @type {number} */ var $41=$gt;
 /** @type {number} */ var $42=(($41+4)|0);
 /** @type {number} */ var $43=HEAP32[(($42)>>2)];
 /** @type {number} */ var $44=$2;
 /** @type {number} */ var $45=(($44+8)|0);
 /** @type {number} */ var $46=HEAP8[($45)];
 /** @type {number} */ var $47=($46&255);
 _luaK_patchclose($40,$43,$47);
 label=6;break;
 case 6: 
 /** @type {number} */ var $49=$2;
 /** @type {number} */ var $50=(($49+8)|0);
 /** @type {number} */ var $51=HEAP8[($50)];
 /** @type {number} */ var $52=$gt;
 /** @type {number} */ var $53=(($52+12)|0);
 HEAP8[($53)]=$51;
 label=7;break;
 case 7: 
 /** @type {number} */ var $55=$1;
 /** @type {number} */ var $56=(($55+12)|0);
 /** @type {number} */ var $57=HEAP32[(($56)>>2)];
 /** @type {number} */ var $58=$i;
 /** @type {number} */ var $59=_findlabel($57,$58);
 /** @type {number} */ var $60=($59|0)!=0;
 if($60){label=9;break;}else{label=8;break;}
 case 8: 
 /** @type {number} */ var $62=$i;
 /** @type {number} */ var $63=((($62)+(1))|0);
 $i=$63;
 label=9;break;
 case 9: 
 label=2;break;
 case 10: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $gt
 * @return {number}
 */
function _undefgoto($ls,$gt){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $msg;
 $1=$ls;
 $2=$gt;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=(($3)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=$5;
 /** @type {number} */ var $7=(($6+4)|0);
 /** @type {number} */ var $8=HEAP8[($7)];
 /** @type {number} */ var $9=($8&255);
 /** @type {number} */ var $10=($9|0)==4;
 if($10){label=2;break;}else{var $21=0;label=3;break;}
 case 2: 
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=(($12)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=$14;
 /** @type {number} */ var $16=(($15+6)|0);
 /** @type {number} */ var $17=HEAP8[($16)];
 /** @type {number} */ var $18=($17&255);
 /** @type {number} */ var $19=($18|0)>0;
 var $21=$19;label=3;break;
 case 3: 
 var $21;
 /** @type {number} */ var $22=($21?9864:11344);
 $msg=$22;
 /** @type {number} */ var $23=$1;
 /** @type {number} */ var $24=(($23+52)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=$msg;
 /** @type {number} */ var $27=$2;
 /** @type {number} */ var $28=(($27)|0);
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 /** @type {number} */ var $30=(($29+16)|0);
 /** @type {number} */ var $31=$30;
 /** @type {number} */ var $32=$2;
 /** @type {number} */ var $33=(($32+8)|0);
 /** @type {number} */ var $34=HEAP32[(($33)>>2)];
 /** @type {number} */ var $35=_luaO_pushfstring($25,$26,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$31,HEAP32[(((tempVarArgs)+(8))>>2)]=$34,tempVarArgs)); STACKTOP=tempVarArgs;
 $msg=$35;
 /** @type {number} */ var $36=$1;
 /** @type {number} */ var $37=$msg;
 _semerror($36,$37);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $escapelist
 * @return {number}
 */
function _test_then_block($ls,$escapelist){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $bl=sp;
 /** @type {number} */ var $fs;
 /** @type {number} */ var $v=(sp)+(16);
 /** @type {number} */ var $jf;
 $1=$ls;
 $2=$escapelist;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+48)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $fs=$5;
 /** @type {number} */ var $6=$1;
 _luaX_next($6);
 /** @type {number} */ var $7=$1;
 _expr($7,$v);
 /** @type {number} */ var $8=$1;
 _checknext($8,275);
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=(($9+16)|0);
 /** @type {number} */ var $11=(($10)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=($12|0)==266;
 if($13){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=(($15+16)|0);
 /** @type {number} */ var $17=(($16)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=($18|0)==258;
 if($19){label=3;break;}else{label=7;break;}
 case 3: 
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=(($21+48)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 _luaK_goiffalse($23,$v);
 /** @type {number} */ var $24=$fs;
 _enterblock($24,$bl,0);
 /** @type {number} */ var $25=$1;
 /** @type {number} */ var $26=(($v+16)|0);
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 _gotostat($25,$27);
 /** @type {number} */ var $28=$1;
 _skipnoopstat($28);
 /** @type {number} */ var $29=$1;
 /** @type {number} */ var $30=_block_follow($29,0);
 /** @type {number} */ var $31=($30|0)!=0;
 if($31){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $33=$fs;
 _leaveblock($33);
 label=12;break;
 case 5: 
 /** @type {number} */ var $35=$fs;
 /** @type {number} */ var $36=_luaK_jump($35);
 $jf=$36;
 label=6;break;
 case 6: 
 label=8;break;
 case 7: 
 /** @type {number} */ var $39=$1;
 /** @type {number} */ var $40=(($39+48)|0);
 /** @type {number} */ var $41=HEAP32[(($40)>>2)];
 _luaK_goiftrue($41,$v);
 /** @type {number} */ var $42=$fs;
 _enterblock($42,$bl,0);
 /** @type {number} */ var $43=(($v+20)|0);
 /** @type {number} */ var $44=HEAP32[(($43)>>2)];
 $jf=$44;
 label=8;break;
 case 8: 
 /** @type {number} */ var $46=$1;
 _statlist($46);
 /** @type {number} */ var $47=$fs;
 _leaveblock($47);
 /** @type {number} */ var $48=$1;
 /** @type {number} */ var $49=(($48+16)|0);
 /** @type {number} */ var $50=(($49)|0);
 /** @type {number} */ var $51=HEAP32[(($50)>>2)];
 /** @type {number} */ var $52=($51|0)==260;
 if($52){label=10;break;}else{label=9;break;}
 case 9: 
 /** @type {number} */ var $54=$1;
 /** @type {number} */ var $55=(($54+16)|0);
 /** @type {number} */ var $56=(($55)|0);
 /** @type {number} */ var $57=HEAP32[(($56)>>2)];
 /** @type {number} */ var $58=($57|0)==261;
 if($58){label=10;break;}else{label=11;break;}
 case 10: 
 /** @type {number} */ var $60=$fs;
 /** @type {number} */ var $61=$2;
 /** @type {number} */ var $62=$fs;
 /** @type {number} */ var $63=_luaK_jump($62);
 _luaK_concat($60,$61,$63);
 label=11;break;
 case 11: 
 /** @type {number} */ var $65=$fs;
 /** @type {number} */ var $66=$jf;
 _luaK_patchtohere($65,$66);
 label=12;break;
 case 12: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @return {number}
 */
function _cond($ls){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $v=sp;
 $1=$ls;
 /** @type {number} */ var $2=$1;
 _expr($2,$v);
 /** @type {number} */ var $3=(($v)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 /** @type {number} */ var $5=($4|0)==1;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $7=(($v)|0);
 HEAP32[(($7)>>2)]=3;
 label=3;break;
 case 3: 
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=(($9+48)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 _luaK_goiftrue($11,$v);
 /** @type {number} */ var $12=(($v+20)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 STACKTOP=sp;return $13;
 }
}
/**
 * @param {number} $ls
 * @param {number} $c
 * @return {number}
 */
function _checknext($ls,$c){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$ls;
 $2=$c;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 _check($3,$4);
 /** @type {number} */ var $5=$1;
 _luaX_next($5);
 STACKTOP=sp;return;
}
/**
 * @param {number} $ls
 * @param {number} $varname
 * @param {number} $line
 * @return {number}
 */
function _fornum($ls,$varname,$line){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $fs;
 /** @type {number} */ var $base;
 $1=$ls;
 $2=$varname;
 $3=$line;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+48)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 $fs=$6;
 /** @type {number} */ var $7=$fs;
 /** @type {number} */ var $8=(($7+48)|0);
 /** @type {number} */ var $9=HEAP8[($8)];
 /** @type {number} */ var $10=($9&255);
 $base=$10;
 /** @type {number} */ var $11=$1;
 _new_localvarliteral_($11,8488,11);
 /** @type {number} */ var $12=$1;
 _new_localvarliteral_($12,8296,11);
 /** @type {number} */ var $13=$1;
 _new_localvarliteral_($13,8096,10);
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=$2;
 _new_localvar($14,$15);
 /** @type {number} */ var $16=$1;
 _checknext($16,61);
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=_exp1($17);
 /** @type {number} */ var $19=$1;
 _checknext($19,44);
 /** @type {number} */ var $20=$1;
 /** @type {number} */ var $21=_exp1($20);
 /** @type {number} */ var $22=$1;
 /** @type {number} */ var $23=_testnext($22,44);
 /** @type {number} */ var $24=($23|0)!=0;
 if($24){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $26=$1;
 /** @type {number} */ var $27=_exp1($26);
 label=4;break;
 case 3: 
 /** @type {number} */ var $29=$fs;
 /** @type {number} */ var $30=$fs;
 /** @type {number} */ var $31=(($30+48)|0);
 /** @type {number} */ var $32=HEAP8[($31)];
 /** @type {number} */ var $33=($32&255);
 /** @type {number} */ var $34=$fs;
 /** @type {number} */ var $35=_luaK_numberK($34,1);
 /** @type {number} */ var $36=_luaK_codek($29,$33,$35);
 /** @type {number} */ var $37=$fs;
 _luaK_reserveregs($37,1);
 label=4;break;
 case 4: 
 /** @type {number} */ var $39=$1;
 /** @type {number} */ var $40=$base;
 /** @type {number} */ var $41=$3;
 _forbody($39,$40,$41,1,1);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $indexname
 * @return {number}
 */
function _forlist($ls,$indexname){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $fs;
 /** @type {number} */ var $e=sp;
 /** @type {number} */ var $nvars;
 /** @type {number} */ var $line;
 /** @type {number} */ var $base;
 $1=$ls;
 $2=$indexname;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+48)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $fs=$5;
 $nvars=4;
 /** @type {number} */ var $6=$fs;
 /** @type {number} */ var $7=(($6+48)|0);
 /** @type {number} */ var $8=HEAP8[($7)];
 /** @type {number} */ var $9=($8&255);
 $base=$9;
 /** @type {number} */ var $10=$1;
 _new_localvarliteral_($10,9232,15);
 /** @type {number} */ var $11=$1;
 _new_localvarliteral_($11,8992,11);
 /** @type {number} */ var $12=$1;
 _new_localvarliteral_($12,8720,13);
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=$2;
 _new_localvar($13,$14);
 label=2;break;
 case 2: 
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=_testnext($16,44);
 /** @type {number} */ var $18=($17|0)!=0;
 if($18){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $20=$1;
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=_str_checkname($21);
 _new_localvar($20,$22);
 /** @type {number} */ var $23=$nvars;
 /** @type {number} */ var $24=((($23)+(1))|0);
 $nvars=$24;
 label=2;break;
 case 4: 
 /** @type {number} */ var $26=$1;
 _checknext($26,268);
 /** @type {number} */ var $27=$1;
 /** @type {number} */ var $28=(($27+4)|0);
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 $line=$29;
 /** @type {number} */ var $30=$1;
 /** @type {number} */ var $31=$1;
 /** @type {number} */ var $32=_explist($31,$e);
 _adjust_assign($30,3,$32,$e);
 /** @type {number} */ var $33=$fs;
 _luaK_checkstack($33,3);
 /** @type {number} */ var $34=$1;
 /** @type {number} */ var $35=$base;
 /** @type {number} */ var $36=$line;
 /** @type {number} */ var $37=$nvars;
 /** @type {number} */ var $38=((($37)-(3))|0);
 _forbody($34,$35,$36,$38,0);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $v
 * @return {number}
 */
function _funcname($ls,$v){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $ismethod;
 $1=$ls;
 $2=$v;
 $ismethod=0;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 _singlevar($3,$4);
 label=2;break;
 case 2: 
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+16)|0);
 /** @type {number} */ var $8=(($7)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=($9|0)==46;
 if($10){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=$2;
 _fieldsel($12,$13);
 label=2;break;
 case 4: 
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=(($15+16)|0);
 /** @type {number} */ var $17=(($16)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=($18|0)==58;
 if($19){label=5;break;}else{label=6;break;}
 case 5: 
 $ismethod=1;
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=$2;
 _fieldsel($21,$22);
 label=6;break;
 case 6: 
 /** @type {number} */ var $24=$ismethod;
 STACKTOP=sp;return $24;
 }
}
/**
 * @param {number} $ls
 * @param {number} $e
 * @param {number} $ismethod
 * @param {number} $line
 * @return {number}
 */
function _body($ls,$e,$ismethod,$line){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $new_fs=sp;
 /** @type {number} */ var $bl=(sp)+(56);
 $1=$ls;
 $2=$e;
 $3=$ismethod;
 $4=$line;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=_addprototype($5);
 /** @type {number} */ var $7=(($new_fs)|0);
 HEAP32[(($7)>>2)]=$6;
 /** @type {number} */ var $8=$4;
 /** @type {number} */ var $9=(($new_fs)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=(($10+64)|0);
 HEAP32[(($11)>>2)]=$8;
 /** @type {number} */ var $12=$1;
 _open_func($12,$new_fs,$bl);
 /** @type {number} */ var $13=$1;
 _checknext($13,40);
 /** @type {number} */ var $14=$3;
 /** @type {number} */ var $15=($14|0)!=0;
 if($15){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $17=$1;
 _new_localvarliteral_($17,2800,4);
 /** @type {number} */ var $18=$1;
 _adjustlocalvars($18,1);
 label=3;break;
 case 3: 
 /** @type {number} */ var $20=$1;
 _parlist($20);
 /** @type {number} */ var $21=$1;
 _checknext($21,41);
 /** @type {number} */ var $22=$1;
 _statlist($22);
 /** @type {number} */ var $23=$1;
 /** @type {number} */ var $24=(($23+4)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=(($new_fs)|0);
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=(($27+68)|0);
 HEAP32[(($28)>>2)]=$25;
 /** @type {number} */ var $29=$1;
 /** @type {number} */ var $30=$4;
 _check_match($29,262,265,$30);
 /** @type {number} */ var $31=$1;
 /** @type {number} */ var $32=$2;
 _codeclosure($31,$32);
 /** @type {number} */ var $33=$1;
 _close_func($33);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $name
 * @return {number}
 */
function _new_localvar($ls,$name){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $fs;
 /** @type {number} */ var $dyd;
 /** @type {number} */ var $reg;
 $1=$ls;
 $2=$name;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+48)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $fs=$5;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+64)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 $dyd=$8;
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=_registerlocalvar($9,$10);
 $reg=$11;
 /** @type {number} */ var $12=$fs;
 /** @type {number} */ var $13=$dyd;
 /** @type {number} */ var $14=(($13)|0);
 /** @type {number} */ var $15=(($14+4)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=((($16)+(1))|0);
 /** @type {number} */ var $18=$fs;
 /** @type {number} */ var $19=(($18+40)|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=((($17)-($20))|0);
 _checklimit($12,$21,200,11624);
 /** @type {number} */ var $22=$dyd;
 /** @type {number} */ var $23=(($22)|0);
 /** @type {number} */ var $24=(($23+4)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=((($25)+(1))|0);
 /** @type {number} */ var $27=((($26)+(1))|0);
 /** @type {number} */ var $28=$dyd;
 /** @type {number} */ var $29=(($28)|0);
 /** @type {number} */ var $30=(($29+8)|0);
 /** @type {number} */ var $31=HEAP32[(($30)>>2)];
 /** @type {number} */ var $32=($27|0)>($31|0);
 if($32){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $34=$1;
 /** @type {number} */ var $35=(($34+52)|0);
 /** @type {number} */ var $36=HEAP32[(($35)>>2)];
 /** @type {number} */ var $37=$dyd;
 /** @type {number} */ var $38=(($37)|0);
 /** @type {number} */ var $39=(($38)|0);
 /** @type {number} */ var $40=HEAP32[(($39)>>2)];
 /** @type {number} */ var $41=$40;
 /** @type {number} */ var $42=$dyd;
 /** @type {number} */ var $43=(($42)|0);
 /** @type {number} */ var $44=(($43+8)|0);
 /** @type {number} */ var $45=_luaM_growaux_($36,$41,$44,2,2147483645,11624);
 /** @type {number} */ var $46=$45;
 /** @type {number} */ var $47=$dyd;
 /** @type {number} */ var $48=(($47)|0);
 /** @type {number} */ var $49=(($48)|0);
 HEAP32[(($49)>>2)]=$46;
 label=3;break;
 case 3: 
 /** @type {number} */ var $51=$reg;
 /** @type {number} */ var $52=(($51)&65535);
 /** @type {number} */ var $53=$dyd;
 /** @type {number} */ var $54=(($53)|0);
 /** @type {number} */ var $55=(($54+4)|0);
 /** @type {number} */ var $56=HEAP32[(($55)>>2)];
 /** @type {number} */ var $57=((($56)+(1))|0);
 HEAP32[(($55)>>2)]=$57;
 /** @type {number} */ var $58=$dyd;
 /** @type {number} */ var $59=(($58)|0);
 /** @type {number} */ var $60=(($59)|0);
 /** @type {number} */ var $61=HEAP32[(($60)>>2)];
 /** @type {number} */ var $62=(($61+($56<<1))|0);
 /** @type {number} */ var $63=(($62)|0);
 HEAP16[(($63)>>1)]=$52;
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $nvars
 * @return {number}
 */
function _adjustlocalvars($ls,$nvars){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $fs;
 $1=$ls;
 $2=$nvars;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+48)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $fs=$5;
 /** @type {number} */ var $6=$fs;
 /** @type {number} */ var $7=(($6+46)|0);
 /** @type {number} */ var $8=HEAP8[($7)];
 /** @type {number} */ var $9=($8&255);
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=((($9)+($10))|0);
 /** @type {number} */ var $12=(($11)&255);
 /** @type {number} */ var $13=$fs;
 /** @type {number} */ var $14=(($13+46)|0);
 HEAP8[($14)]=$12;
 label=2;break;
 case 2: 
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=($16|0)!=0;
 if($17){label=3;break;}else{label=5;break;}
 case 3: 
 /** @type {number} */ var $19=$fs;
 /** @type {number} */ var $20=(($19+20)|0);
 /** @type {number} */ var $21=HEAP32[(($20)>>2)];
 /** @type {number} */ var $22=$fs;
 /** @type {number} */ var $23=$fs;
 /** @type {number} */ var $24=(($23+46)|0);
 /** @type {number} */ var $25=HEAP8[($24)];
 /** @type {number} */ var $26=($25&255);
 /** @type {number} */ var $27=$2;
 /** @type {number} */ var $28=((($26)-($27))|0);
 /** @type {number} */ var $29=_getlocvar($22,$28);
 /** @type {number} */ var $30=(($29+4)|0);
 HEAP32[(($30)>>2)]=$21;
 label=4;break;
 case 4: 
 /** @type {number} */ var $32=$2;
 /** @type {number} */ var $33=((($32)-(1))|0);
 $2=$33;
 label=2;break;
 case 5: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @param {number} $i
 * @return {number}
 */
function _getlocvar($fs,$i){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $idx;
 $1=$fs;
 $2=$i;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+40)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=((($5)+($6))|0);
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=(($8+12)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=(($10+64)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=(($12)|0);
 /** @type {number} */ var $14=(($13)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=(($15+($7<<1))|0);
 /** @type {number} */ var $17=(($16)|0);
 /** @type {number} */ var $18=HEAP16[(($17)>>1)];
 /** @type {number} */ var $19=(($18<<16)>>16);
 $idx=$19;
 /** @type {number} */ var $20=$idx;
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=(($21)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 /** @type {number} */ var $24=(($23+24)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=(($25+((($20)*(12))&-1))|0);
 STACKTOP=sp;return $26;
}
/**
 * @param {number} $ls
 * @param {number} $v
 * @return {number}
 */
function _explist($ls,$v){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $n;
 $1=$ls;
 $2=$v;
 $n=1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 _expr($3,$4);
 label=2;break;
 case 2: 
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=_testnext($6,44);
 /** @type {number} */ var $8=($7|0)!=0;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=(($10+48)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=$2;
 _luaK_exp2nextreg($12,$13);
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=$2;
 _expr($14,$15);
 /** @type {number} */ var $16=$n;
 /** @type {number} */ var $17=((($16)+(1))|0);
 $n=$17;
 label=2;break;
 case 4: 
 /** @type {number} */ var $19=$n;
 STACKTOP=sp;return $19;
 }
}
/**
 * @param {number} $ls
 * @param {number} $nvars
 * @param {number} $nexps
 * @param {number} $e
 * @return {number}
 */
function _adjust_assign($ls,$nvars,$nexps,$e){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $fs;
 /** @type {number} */ var $extra;
 /** @type {number} */ var $reg;
 $1=$ls;
 $2=$nvars;
 $3=$nexps;
 $4=$e;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($5+48)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 $fs=$7;
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=$3;
 /** @type {number} */ var $10=((($8)-($9))|0);
 $extra=$10;
 /** @type {number} */ var $11=$4;
 /** @type {number} */ var $12=(($11)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=($13|0)==12;
 if($14){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $16=$4;
 /** @type {number} */ var $17=(($16)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=($18|0)==13;
 if($19){label=3;break;}else{label=8;break;}
 case 3: 
 /** @type {number} */ var $21=$extra;
 /** @type {number} */ var $22=((($21)+(1))|0);
 $extra=$22;
 /** @type {number} */ var $23=$extra;
 /** @type {number} */ var $24=($23|0)<0;
 if($24){label=4;break;}else{label=5;break;}
 case 4: 
 $extra=0;
 label=5;break;
 case 5: 
 /** @type {number} */ var $27=$fs;
 /** @type {number} */ var $28=$4;
 /** @type {number} */ var $29=$extra;
 _luaK_setreturns($27,$28,$29);
 /** @type {number} */ var $30=$extra;
 /** @type {number} */ var $31=($30|0)>1;
 if($31){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $33=$fs;
 /** @type {number} */ var $34=$extra;
 /** @type {number} */ var $35=((($34)-(1))|0);
 _luaK_reserveregs($33,$35);
 label=7;break;
 case 7: 
 label=13;break;
 case 8: 
 /** @type {number} */ var $38=$4;
 /** @type {number} */ var $39=(($38)|0);
 /** @type {number} */ var $40=HEAP32[(($39)>>2)];
 /** @type {number} */ var $41=($40|0)!=0;
 if($41){label=9;break;}else{label=10;break;}
 case 9: 
 /** @type {number} */ var $43=$fs;
 /** @type {number} */ var $44=$4;
 _luaK_exp2nextreg($43,$44);
 label=10;break;
 case 10: 
 /** @type {number} */ var $46=$extra;
 /** @type {number} */ var $47=($46|0)>0;
 if($47){label=11;break;}else{label=12;break;}
 case 11: 
 /** @type {number} */ var $49=$fs;
 /** @type {number} */ var $50=(($49+48)|0);
 /** @type {number} */ var $51=HEAP8[($50)];
 /** @type {number} */ var $52=($51&255);
 $reg=$52;
 /** @type {number} */ var $53=$fs;
 /** @type {number} */ var $54=$extra;
 _luaK_reserveregs($53,$54);
 /** @type {number} */ var $55=$fs;
 /** @type {number} */ var $56=$reg;
 /** @type {number} */ var $57=$extra;
 _luaK_nil($55,$56,$57);
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @param {number} $ll
 * @param {number} $label
 * @return {number}
 */
function _checkrepeated($fs,$ll,$label){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $i;
 /** @type {number} */ var $msg;
 $1=$fs;
 $2=$ll;
 $3=$label;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+16)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=(($6+4)|0);
 /** @type {number} */ var $8=HEAP16[(($7)>>1)];
 /** @type {number} */ var $9=(($8<<16)>>16);
 $i=$9;
 label=2;break;
 case 2: 
 /** @type {number} */ var $11=$i;
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=(($12+4)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=($11|0)<($14|0);
 if($15){label=3;break;}else{label=7;break;}
 case 3: 
 /** @type {number} */ var $17=$3;
 /** @type {number} */ var $18=$i;
 /** @type {number} */ var $19=$2;
 /** @type {number} */ var $20=(($19)|0);
 /** @type {number} */ var $21=HEAP32[(($20)>>2)];
 /** @type {number} */ var $22=(($21+($18<<4))|0);
 /** @type {number} */ var $23=(($22)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=_luaS_eqstr($17,$24);
 /** @type {number} */ var $26=($25|0)!=0;
 if($26){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $28=$1;
 /** @type {number} */ var $29=(($28+12)|0);
 /** @type {number} */ var $30=HEAP32[(($29)>>2)];
 /** @type {number} */ var $31=(($30+52)|0);
 /** @type {number} */ var $32=HEAP32[(($31)>>2)];
 /** @type {number} */ var $33=$3;
 /** @type {number} */ var $34=(($33+16)|0);
 /** @type {number} */ var $35=$34;
 /** @type {number} */ var $36=$i;
 /** @type {number} */ var $37=$2;
 /** @type {number} */ var $38=(($37)|0);
 /** @type {number} */ var $39=HEAP32[(($38)>>2)];
 /** @type {number} */ var $40=(($39+($36<<4))|0);
 /** @type {number} */ var $41=(($40+8)|0);
 /** @type {number} */ var $42=HEAP32[(($41)>>2)];
 /** @type {number} */ var $43=_luaO_pushfstring($32,9664,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$35,HEAP32[(((tempVarArgs)+(8))>>2)]=$42,tempVarArgs)); STACKTOP=tempVarArgs;
 $msg=$43;
 /** @type {number} */ var $44=$1;
 /** @type {number} */ var $45=(($44+12)|0);
 /** @type {number} */ var $46=HEAP32[(($45)>>2)];
 /** @type {number} */ var $47=$msg;
 _semerror($46,$47);
 case 5: 
 label=6;break;
 case 6: 
 /** @type {number} */ var $50=$i;
 /** @type {number} */ var $51=((($50)+(1))|0);
 $i=$51;
 label=2;break;
 case 7: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $l
 * @param {number} $name
 * @param {number} $line
 * @param {number} $pc
 * @return {number}
 */
function _newlabelentry($ls,$l,$name,$line,$pc){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 /** @type {number} */ var $n;
 $1=$ls;
 $2=$l;
 $3=$name;
 $4=$line;
 $5=$pc;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=(($6+4)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 $n=$8;
 /** @type {number} */ var $9=$n;
 /** @type {number} */ var $10=((($9)+(1))|0);
 /** @type {number} */ var $11=$2;
 /** @type {number} */ var $12=(($11+8)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=($10|0)>($13|0);
 if($14){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=(($16+52)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=$2;
 /** @type {number} */ var $20=(($19)|0);
 /** @type {number} */ var $21=HEAP32[(($20)>>2)];
 /** @type {number} */ var $22=$21;
 /** @type {number} */ var $23=$2;
 /** @type {number} */ var $24=(($23+8)|0);
 /** @type {number} */ var $25=_luaM_growaux_($18,$22,$24,16,32767,5504);
 /** @type {number} */ var $26=$25;
 /** @type {number} */ var $27=$2;
 /** @type {number} */ var $28=(($27)|0);
 HEAP32[(($28)>>2)]=$26;
 label=3;break;
 case 3: 
 /** @type {number} */ var $30=$3;
 /** @type {number} */ var $31=$n;
 /** @type {number} */ var $32=$2;
 /** @type {number} */ var $33=(($32)|0);
 /** @type {number} */ var $34=HEAP32[(($33)>>2)];
 /** @type {number} */ var $35=(($34+($31<<4))|0);
 /** @type {number} */ var $36=(($35)|0);
 HEAP32[(($36)>>2)]=$30;
 /** @type {number} */ var $37=$4;
 /** @type {number} */ var $38=$n;
 /** @type {number} */ var $39=$2;
 /** @type {number} */ var $40=(($39)|0);
 /** @type {number} */ var $41=HEAP32[(($40)>>2)];
 /** @type {number} */ var $42=(($41+($38<<4))|0);
 /** @type {number} */ var $43=(($42+8)|0);
 HEAP32[(($43)>>2)]=$37;
 /** @type {number} */ var $44=$1;
 /** @type {number} */ var $45=(($44+48)|0);
 /** @type {number} */ var $46=HEAP32[(($45)>>2)];
 /** @type {number} */ var $47=(($46+46)|0);
 /** @type {number} */ var $48=HEAP8[($47)];
 /** @type {number} */ var $49=$n;
 /** @type {number} */ var $50=$2;
 /** @type {number} */ var $51=(($50)|0);
 /** @type {number} */ var $52=HEAP32[(($51)>>2)];
 /** @type {number} */ var $53=(($52+($49<<4))|0);
 /** @type {number} */ var $54=(($53+12)|0);
 HEAP8[($54)]=$48;
 /** @type {number} */ var $55=$5;
 /** @type {number} */ var $56=$n;
 /** @type {number} */ var $57=$2;
 /** @type {number} */ var $58=(($57)|0);
 /** @type {number} */ var $59=HEAP32[(($58)>>2)];
 /** @type {number} */ var $60=(($59+($56<<4))|0);
 /** @type {number} */ var $61=(($60+4)|0);
 HEAP32[(($61)>>2)]=$55;
 /** @type {number} */ var $62=$2;
 /** @type {number} */ var $63=(($62+4)|0);
 /** @type {number} */ var $64=HEAP32[(($63)>>2)];
 /** @type {number} */ var $65=((($64)+(1))|0);
 HEAP32[(($63)>>2)]=$65;
 /** @type {number} */ var $66=$n;
 STACKTOP=sp;return $66;
 }
}
/**
 * @param {number} $ls
 * @return {number}
 */
function _skipnoopstat($ls){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 $1=$ls;
 label=2;break;
 case 2: 
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+16)|0);
 /** @type {number} */ var $5=(($4)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=($6|0)==59;
 if($7){var $15=1;label=4;break;}else{label=3;break;}
 case 3: 
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=(($9+16)|0);
 /** @type {number} */ var $11=(($10)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=($12|0)==285;
 var $15=$13;label=4;break;
 case 4: 
 var $15;
 if($15){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $17=$1;
 _statement($17);
 label=2;break;
 case 6: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $lb
 * @return {number}
 */
function _findgotos($ls,$lb){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $gl;
 /** @type {number} */ var $i;
 $1=$ls;
 $2=$lb;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+64)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=(($5+12)|0);
 $gl=$6;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=(($7+48)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=(($9+16)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=(($11+6)|0);
 /** @type {number} */ var $13=HEAP16[(($12)>>1)];
 /** @type {number} */ var $14=(($13<<16)>>16);
 $i=$14;
 label=2;break;
 case 2: 
 /** @type {number} */ var $16=$i;
 /** @type {number} */ var $17=$gl;
 /** @type {number} */ var $18=(($17+4)|0);
 /** @type {number} */ var $19=HEAP32[(($18)>>2)];
 /** @type {number} */ var $20=($16|0)<($19|0);
 if($20){label=3;break;}else{label=7;break;}
 case 3: 
 /** @type {number} */ var $22=$i;
 /** @type {number} */ var $23=$gl;
 /** @type {number} */ var $24=(($23)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=(($25+($22<<4))|0);
 /** @type {number} */ var $27=(($26)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=$2;
 /** @type {number} */ var $30=(($29)|0);
 /** @type {number} */ var $31=HEAP32[(($30)>>2)];
 /** @type {number} */ var $32=_luaS_eqstr($28,$31);
 /** @type {number} */ var $33=($32|0)!=0;
 if($33){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $35=$1;
 /** @type {number} */ var $36=$i;
 /** @type {number} */ var $37=$2;
 _closegoto($35,$36,$37);
 label=6;break;
 case 5: 
 /** @type {number} */ var $39=$i;
 /** @type {number} */ var $40=((($39)+(1))|0);
 $i=$40;
 label=6;break;
 case 6: 
 label=2;break;
 case 7: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $g
 * @return {number}
 */
function _findlabel($ls,$g){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $i;
 /** @type {number} */ var $bl;
 /** @type {number} */ var $dyd;
 /** @type {number} */ var $gt;
 /** @type {number} */ var $lb;
 $2=$ls;
 $3=$g;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=(($4+48)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=(($6+16)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 $bl=$8;
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=(($9+64)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 $dyd=$11;
 /** @type {number} */ var $12=$3;
 /** @type {number} */ var $13=$dyd;
 /** @type {number} */ var $14=(($13+12)|0);
 /** @type {number} */ var $15=(($14)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=(($16+($12<<4))|0);
 $gt=$17;
 /** @type {number} */ var $18=$bl;
 /** @type {number} */ var $19=(($18+4)|0);
 /** @type {number} */ var $20=HEAP16[(($19)>>1)];
 /** @type {number} */ var $21=(($20<<16)>>16);
 $i=$21;
 label=2;break;
 case 2: 
 /** @type {number} */ var $23=$i;
 /** @type {number} */ var $24=$dyd;
 /** @type {number} */ var $25=(($24+24)|0);
 /** @type {number} */ var $26=(($25+4)|0);
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=($23|0)<($27|0);
 if($28){label=3;break;}else{label=11;break;}
 case 3: 
 /** @type {number} */ var $30=$i;
 /** @type {number} */ var $31=$dyd;
 /** @type {number} */ var $32=(($31+24)|0);
 /** @type {number} */ var $33=(($32)|0);
 /** @type {number} */ var $34=HEAP32[(($33)>>2)];
 /** @type {number} */ var $35=(($34+($30<<4))|0);
 $lb=$35;
 /** @type {number} */ var $36=$lb;
 /** @type {number} */ var $37=(($36)|0);
 /** @type {number} */ var $38=HEAP32[(($37)>>2)];
 /** @type {number} */ var $39=$gt;
 /** @type {number} */ var $40=(($39)|0);
 /** @type {number} */ var $41=HEAP32[(($40)>>2)];
 /** @type {number} */ var $42=_luaS_eqstr($38,$41);
 /** @type {number} */ var $43=($42|0)!=0;
 if($43){label=4;break;}else{label=9;break;}
 case 4: 
 /** @type {number} */ var $45=$gt;
 /** @type {number} */ var $46=(($45+12)|0);
 /** @type {number} */ var $47=HEAP8[($46)];
 /** @type {number} */ var $48=($47&255);
 /** @type {number} */ var $49=$lb;
 /** @type {number} */ var $50=(($49+12)|0);
 /** @type {number} */ var $51=HEAP8[($50)];
 /** @type {number} */ var $52=($51&255);
 /** @type {number} */ var $53=($48|0)>($52|0);
 if($53){label=5;break;}else{label=8;break;}
 case 5: 
 /** @type {number} */ var $55=$bl;
 /** @type {number} */ var $56=(($55+9)|0);
 /** @type {number} */ var $57=HEAP8[($56)];
 /** @type {number} */ var $58=($57&255);
 /** @type {number} */ var $59=($58|0)!=0;
 if($59){label=7;break;}else{label=6;break;}
 case 6: 
 /** @type {number} */ var $61=$dyd;
 /** @type {number} */ var $62=(($61+24)|0);
 /** @type {number} */ var $63=(($62+4)|0);
 /** @type {number} */ var $64=HEAP32[(($63)>>2)];
 /** @type {number} */ var $65=$bl;
 /** @type {number} */ var $66=(($65+4)|0);
 /** @type {number} */ var $67=HEAP16[(($66)>>1)];
 /** @type {number} */ var $68=(($67<<16)>>16);
 /** @type {number} */ var $69=($64|0)>($68|0);
 if($69){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $71=$2;
 /** @type {number} */ var $72=(($71+48)|0);
 /** @type {number} */ var $73=HEAP32[(($72)>>2)];
 /** @type {number} */ var $74=$gt;
 /** @type {number} */ var $75=(($74+4)|0);
 /** @type {number} */ var $76=HEAP32[(($75)>>2)];
 /** @type {number} */ var $77=$lb;
 /** @type {number} */ var $78=(($77+12)|0);
 /** @type {number} */ var $79=HEAP8[($78)];
 /** @type {number} */ var $80=($79&255);
 _luaK_patchclose($73,$76,$80);
 label=8;break;
 case 8: 
 /** @type {number} */ var $82=$2;
 /** @type {number} */ var $83=$3;
 /** @type {number} */ var $84=$lb;
 _closegoto($82,$83,$84);
 $1=1;
 label=12;break;
 case 9: 
 label=10;break;
 case 10: 
 /** @type {number} */ var $87=$i;
 /** @type {number} */ var $88=((($87)+(1))|0);
 $i=$88;
 label=2;break;
 case 11: 
 $1=0;
 label=12;break;
 case 12: 
 /** @type {number} */ var $91=$1;
 STACKTOP=sp;return $91;
 }
}
/**
 * @param {number} $ls
 * @param {number} $v
 * @return {number}
 */
function _suffixedexp($ls,$v){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $fs;
 /** @type {number} */ var $line;
 /** @type {number} */ var $key=sp;
 /** @type {number} */ var $key1=(sp)+(24);
 $1=$ls;
 $2=$v;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+48)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $fs=$5;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+4)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 $line=$8;
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=$2;
 _primaryexp($9,$10);
 label=2;break;
 case 2: 
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=(($12+16)|0);
 /** @type {number} */ var $14=(($13)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 switch(($15|0)){case 46:{ label=3;break;}case 91:{ label=4;break;}case 58:{ label=5;break;}case 40:case 289:case 123:{ label=6;break;}default:{label=7;break;}}break;
 case 3: 
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=$2;
 _fieldsel($17,$18);
 label=8;break;
 case 4: 
 /** @type {number} */ var $20=$fs;
 /** @type {number} */ var $21=$2;
 _luaK_exp2anyregup($20,$21);
 /** @type {number} */ var $22=$1;
 _yindex($22,$key);
 /** @type {number} */ var $23=$fs;
 /** @type {number} */ var $24=$2;
 _luaK_indexed($23,$24,$key);
 label=8;break;
 case 5: 
 /** @type {number} */ var $26=$1;
 _luaX_next($26);
 /** @type {number} */ var $27=$1;
 _checkname($27,$key1);
 /** @type {number} */ var $28=$fs;
 /** @type {number} */ var $29=$2;
 _luaK_self($28,$29,$key1);
 /** @type {number} */ var $30=$1;
 /** @type {number} */ var $31=$2;
 /** @type {number} */ var $32=$line;
 _funcargs($30,$31,$32);
 label=8;break;
 case 6: 
 /** @type {number} */ var $34=$fs;
 /** @type {number} */ var $35=$2;
 _luaK_exp2nextreg($34,$35);
 /** @type {number} */ var $36=$1;
 /** @type {number} */ var $37=$2;
 /** @type {number} */ var $38=$line;
 _funcargs($36,$37,$38);
 label=8;break;
 case 7: 
 STACKTOP=sp;return;
 case 8: 
 label=2;break;
 }
}
/**
 * @param {number} $ls
 * @param {number} $lh
 * @param {number} $nvars
 * @return {number}
 */
function _assignment($ls,$lh,$nvars){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $e=sp;
 /** @type {number} */ var $nv=(sp)+(24);
 /** @type {number} */ var $nexps;
 $1=$ls;
 $2=$lh;
 $3=$nvars;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=(($4+8)|0);
 /** @type {number} */ var $6=(($5)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=7<=($7>>>0);
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=(($10+8)|0);
 /** @type {number} */ var $12=(($11)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=($13>>>0)<=9;
 if($14){label=4;break;}else{label=3;break;}
 case 3: 
 /** @type {number} */ var $16=$1;
 _luaX_syntaxerror($16,3912);
 case 4: 
 /** @type {number} */ var $18=$1;
 /** @type {number} */ var $19=_testnext($18,44);
 /** @type {number} */ var $20=($19|0)!=0;
 if($20){label=5;break;}else{label=8;break;}
 case 5: 
 /** @type {number} */ var $22=$2;
 /** @type {number} */ var $23=(($nv)|0);
 HEAP32[(($23)>>2)]=$22;
 /** @type {number} */ var $24=$1;
 /** @type {number} */ var $25=(($nv+8)|0);
 _suffixedexp($24,$25);
 /** @type {number} */ var $26=(($nv+8)|0);
 /** @type {number} */ var $27=(($26)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=($28|0)!=9;
 if($29){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $31=$1;
 /** @type {number} */ var $32=$2;
 /** @type {number} */ var $33=(($nv+8)|0);
 _check_conflict($31,$32,$33);
 label=7;break;
 case 7: 
 /** @type {number} */ var $35=$1;
 /** @type {number} */ var $36=(($35+48)|0);
 /** @type {number} */ var $37=HEAP32[(($36)>>2)];
 /** @type {number} */ var $38=$3;
 /** @type {number} */ var $39=$1;
 /** @type {number} */ var $40=(($39+52)|0);
 /** @type {number} */ var $41=HEAP32[(($40)>>2)];
 /** @type {number} */ var $42=(($41+38)|0);
 /** @type {number} */ var $43=HEAP16[(($42)>>1)];
 /** @type {number} */ var $44=($43&65535);
 /** @type {number} */ var $45=((($38)+($44))|0);
 _checklimit($37,$45,200,3464);
 /** @type {number} */ var $46=$1;
 /** @type {number} */ var $47=$3;
 /** @type {number} */ var $48=((($47)+(1))|0);
 _assignment($46,$nv,$48);
 label=14;break;
 case 8: 
 /** @type {number} */ var $50=$1;
 _checknext($50,61);
 /** @type {number} */ var $51=$1;
 /** @type {number} */ var $52=_explist($51,$e);
 $nexps=$52;
 /** @type {number} */ var $53=$nexps;
 /** @type {number} */ var $54=$3;
 /** @type {number} */ var $55=($53|0)!=($54|0);
 if($55){label=9;break;}else{label=12;break;}
 case 9: 
 /** @type {number} */ var $57=$1;
 /** @type {number} */ var $58=$3;
 /** @type {number} */ var $59=$nexps;
 _adjust_assign($57,$58,$59,$e);
 /** @type {number} */ var $60=$nexps;
 /** @type {number} */ var $61=$3;
 /** @type {number} */ var $62=($60|0)>($61|0);
 if($62){label=10;break;}else{label=11;break;}
 case 10: 
 /** @type {number} */ var $64=$nexps;
 /** @type {number} */ var $65=$3;
 /** @type {number} */ var $66=((($64)-($65))|0);
 /** @type {number} */ var $67=$1;
 /** @type {number} */ var $68=(($67+48)|0);
 /** @type {number} */ var $69=HEAP32[(($68)>>2)];
 /** @type {number} */ var $70=(($69+48)|0);
 /** @type {number} */ var $71=HEAP8[($70)];
 /** @type {number} */ var $72=($71&255);
 /** @type {number} */ var $73=((($72)-($66))|0);
 /** @type {number} */ var $74=(($73)&255);
 HEAP8[($70)]=$74;
 label=11;break;
 case 11: 
 label=13;break;
 case 12: 
 /** @type {number} */ var $77=$1;
 /** @type {number} */ var $78=(($77+48)|0);
 /** @type {number} */ var $79=HEAP32[(($78)>>2)];
 _luaK_setoneret($79,$e);
 /** @type {number} */ var $80=$1;
 /** @type {number} */ var $81=(($80+48)|0);
 /** @type {number} */ var $82=HEAP32[(($81)>>2)];
 /** @type {number} */ var $83=$2;
 /** @type {number} */ var $84=(($83+8)|0);
 _luaK_storevar($82,$84,$e);
 label=15;break;
 case 13: 
 label=14;break;
 case 14: 
 /** @type {number} */ var $87=$1;
 /** @type {number} */ var $88=(($87+48)|0);
 /** @type {number} */ var $89=HEAP32[(($88)>>2)];
 /** @type {number} */ var $90=(($89+48)|0);
 /** @type {number} */ var $91=HEAP8[($90)];
 /** @type {number} */ var $92=($91&255);
 /** @type {number} */ var $93=((($92)-(1))|0);
 _init_exp($e,6,$93);
 /** @type {number} */ var $94=$1;
 /** @type {number} */ var $95=(($94+48)|0);
 /** @type {number} */ var $96=HEAP32[(($95)>>2)];
 /** @type {number} */ var $97=$2;
 /** @type {number} */ var $98=(($97+8)|0);
 _luaK_storevar($96,$98,$e);
 label=15;break;
 case 15: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $msg
 * @return {number}
 */
function _semerror($ls,$msg){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$ls;
 $2=$msg;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+16)|0);
 /** @type {number} */ var $5=(($4)|0);
 HEAP32[(($5)>>2)]=0;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=$2;
 _luaX_syntaxerror($6,$7);
 STACKTOP=sp;return;
}
/**
 * @param {number} $ls
 * @param {number} $v
 * @return {number}
 */
function _expr($ls,$v){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$ls;
 $2=$v;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_subexpr($3,$4,0);
 STACKTOP=sp;return;
}
/**
 * @param {number} $ls
 * @param {number} $name
 * @param {number} $sz
 * @return {number}
 */
function _new_localvarliteral_($ls,$name,$sz){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$ls;
 $2=$name;
 $3=$sz;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=$3;
 /** @type {number} */ var $8=_luaX_newstring($5,$6,$7);
 _new_localvar($4,$8);
 STACKTOP=sp;return;
}
/**
 * @param {number} $ls
 * @return {number}
 */
function _exp1($ls){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0;
 /** @type {number} */ var $1;
 /** @type {number} */ var $e=sp;
 /** @type {number} */ var $reg;
 $1=$ls;
 /** @type {number} */ var $2=$1;
 _expr($2,$e);
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+48)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 _luaK_exp2nextreg($5,$e);
 /** @type {number} */ var $6=(($e+8)|0);
 /** @type {number} */ var $7=$6;
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 $reg=$8;
 /** @type {number} */ var $9=$reg;
 STACKTOP=sp;return $9;
}
/**
 * @param {number} $ls
 * @param {number} $base
 * @param {number} $line
 * @param {number} $nvars
 * @param {number} $isnum
 * @return {number}
 */
function _forbody($ls,$base,$line,$nvars,$isnum){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 /** @type {number} */ var $bl=sp;
 /** @type {number} */ var $fs;
 /** @type {number} */ var $prep;
 /** @type {number} */ var $endfor;
 $1=$ls;
 $2=$base;
 $3=$line;
 $4=$nvars;
 $5=$isnum;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+48)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 $fs=$8;
 /** @type {number} */ var $9=$1;
 _adjustlocalvars($9,3);
 /** @type {number} */ var $10=$1;
 _checknext($10,259);
 /** @type {number} */ var $11=$5;
 /** @type {number} */ var $12=($11|0)!=0;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $14=$fs;
 /** @type {number} */ var $15=$2;
 /** @type {number} */ var $16=_luaK_codeABx($14,33,$15,131070);
 var $21=$16;label=4;break;
 case 3: 
 /** @type {number} */ var $18=$fs;
 /** @type {number} */ var $19=_luaK_jump($18);
 var $21=$19;label=4;break;
 case 4: 
 var $21;
 $prep=$21;
 /** @type {number} */ var $22=$fs;
 _enterblock($22,$bl,0);
 /** @type {number} */ var $23=$1;
 /** @type {number} */ var $24=$4;
 _adjustlocalvars($23,$24);
 /** @type {number} */ var $25=$fs;
 /** @type {number} */ var $26=$4;
 _luaK_reserveregs($25,$26);
 /** @type {number} */ var $27=$1;
 _block($27);
 /** @type {number} */ var $28=$fs;
 _leaveblock($28);
 /** @type {number} */ var $29=$fs;
 /** @type {number} */ var $30=$prep;
 _luaK_patchtohere($29,$30);
 /** @type {number} */ var $31=$5;
 /** @type {number} */ var $32=($31|0)!=0;
 if($32){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $34=$fs;
 /** @type {number} */ var $35=$2;
 /** @type {number} */ var $36=_luaK_codeABx($34,32,$35,131070);
 $endfor=$36;
 label=7;break;
 case 6: 
 /** @type {number} */ var $38=$fs;
 /** @type {number} */ var $39=$2;
 /** @type {number} */ var $40=$4;
 /** @type {number} */ var $41=_luaK_codeABC($38,34,$39,0,$40);
 /** @type {number} */ var $42=$fs;
 /** @type {number} */ var $43=$3;
 _luaK_fixline($42,$43);
 /** @type {number} */ var $44=$fs;
 /** @type {number} */ var $45=$2;
 /** @type {number} */ var $46=((($45)+(2))|0);
 /** @type {number} */ var $47=_luaK_codeABx($44,35,$46,131070);
 $endfor=$47;
 label=7;break;
 case 7: 
 /** @type {number} */ var $49=$fs;
 /** @type {number} */ var $50=$endfor;
 /** @type {number} */ var $51=$prep;
 /** @type {number} */ var $52=((($51)+(1))|0);
 _luaK_patchlist($49,$50,$52);
 /** @type {number} */ var $53=$fs;
 /** @type {number} */ var $54=$3;
 _luaK_fixline($53,$54);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $var
 * @return {number}
 */
function _singlevar($ls,$var){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $varname;
 /** @type {number} */ var $fs;
 /** @type {number} */ var $key=sp;
 $1=$ls;
 $2=$var;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_str_checkname($3);
 $varname=$4;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($5+48)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 $fs=$7;
 /** @type {number} */ var $8=$fs;
 /** @type {number} */ var $9=$varname;
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=_singlevaraux($8,$9,$10,1);
 /** @type {number} */ var $12=($11|0)==0;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $14=$fs;
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=(($15+72)|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=$2;
 /** @type {number} */ var $19=_singlevaraux($14,$17,$18,1);
 /** @type {number} */ var $20=$1;
 /** @type {number} */ var $21=$varname;
 _codestring($20,$key,$21);
 /** @type {number} */ var $22=$fs;
 /** @type {number} */ var $23=$2;
 _luaK_indexed($22,$23,$key);
 label=3;break;
 case 3: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $v
 * @return {number}
 */
function _fieldsel($ls,$v){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $fs;
 /** @type {number} */ var $key=sp;
 $1=$ls;
 $2=$v;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+48)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $fs=$5;
 /** @type {number} */ var $6=$fs;
 /** @type {number} */ var $7=$2;
 _luaK_exp2anyregup($6,$7);
 /** @type {number} */ var $8=$1;
 _luaX_next($8);
 /** @type {number} */ var $9=$1;
 _checkname($9,$key);
 /** @type {number} */ var $10=$fs;
 /** @type {number} */ var $11=$2;
 _luaK_indexed($10,$11,$key);
 STACKTOP=sp;return;
}
/**
 * @param {number} $ls
 * @return {number}
 */
function _addprototype($ls){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $clp;
 /** @type {number} */ var $L;
 /** @type {number} */ var $fs;
 /** @type {number} */ var $f;
 /** @type {number} */ var $oldsize;
 $1=$ls;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+52)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $L=$4;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($5+48)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 $fs=$7;
 /** @type {number} */ var $8=$fs;
 /** @type {number} */ var $9=(($8)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 $f=$10;
 /** @type {number} */ var $11=$fs;
 /** @type {number} */ var $12=(($11+36)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=$f;
 /** @type {number} */ var $15=(($14+56)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=($13|0)>=($16|0);
 if($17){label=2;break;}else{label=8;break;}
 case 2: 
 /** @type {number} */ var $19=$f;
 /** @type {number} */ var $20=(($19+56)|0);
 /** @type {number} */ var $21=HEAP32[(($20)>>2)];
 $oldsize=$21;
 /** @type {number} */ var $22=$fs;
 /** @type {number} */ var $23=(($22+36)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=((($24)+(1))|0);
 /** @type {number} */ var $26=$f;
 /** @type {number} */ var $27=(($26+56)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=($25|0)>($28|0);
 if($29){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $31=$L;
 /** @type {number} */ var $32=$f;
 /** @type {number} */ var $33=(($32+16)|0);
 /** @type {number} */ var $34=HEAP32[(($33)>>2)];
 /** @type {number} */ var $35=$34;
 /** @type {number} */ var $36=$f;
 /** @type {number} */ var $37=(($36+56)|0);
 /** @type {number} */ var $38=_luaM_growaux_($31,$35,$37,4,262143,11272);
 /** @type {number} */ var $39=$38;
 /** @type {number} */ var $40=$f;
 /** @type {number} */ var $41=(($40+16)|0);
 HEAP32[(($41)>>2)]=$39;
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 /** @type {number} */ var $44=$oldsize;
 /** @type {number} */ var $45=$f;
 /** @type {number} */ var $46=(($45+56)|0);
 /** @type {number} */ var $47=HEAP32[(($46)>>2)];
 /** @type {number} */ var $48=($44|0)<($47|0);
 if($48){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $50=$oldsize;
 /** @type {number} */ var $51=((($50)+(1))|0);
 $oldsize=$51;
 /** @type {number} */ var $52=$f;
 /** @type {number} */ var $53=(($52+16)|0);
 /** @type {number} */ var $54=HEAP32[(($53)>>2)];
 /** @type {number} */ var $55=(($54+($50<<2))|0);
 HEAP32[(($55)>>2)]=0;
 label=5;break;
 case 7: 
 label=8;break;
 case 8: 
 /** @type {number} */ var $58=$L;
 /** @type {number} */ var $59=_luaF_newproto($58);
 $clp=$59;
 /** @type {number} */ var $60=$fs;
 /** @type {number} */ var $61=(($60+36)|0);
 /** @type {number} */ var $62=HEAP32[(($61)>>2)];
 /** @type {number} */ var $63=((($62)+(1))|0);
 HEAP32[(($61)>>2)]=$63;
 /** @type {number} */ var $64=$f;
 /** @type {number} */ var $65=(($64+16)|0);
 /** @type {number} */ var $66=HEAP32[(($65)>>2)];
 /** @type {number} */ var $67=(($66+($62<<2))|0);
 HEAP32[(($67)>>2)]=$59;
 /** @type {number} */ var $68=$clp;
 /** @type {number} */ var $69=$68;
 /** @type {number} */ var $70=$69;
 /** @type {number} */ var $71=(($70+5)|0);
 /** @type {number} */ var $72=HEAP8[($71)];
 /** @type {number} */ var $73=($72&255);
 /** @type {number} */ var $74=$73&3;
 /** @type {number} */ var $75=($74|0)!=0;
 if($75){label=9;break;}else{label=11;break;}
 case 9: 
 /** @type {number} */ var $77=$f;
 /** @type {number} */ var $78=$77;
 /** @type {number} */ var $79=$78;
 /** @type {number} */ var $80=(($79+5)|0);
 /** @type {number} */ var $81=HEAP8[($80)];
 /** @type {number} */ var $82=($81&255);
 /** @type {number} */ var $83=$82&4;
 /** @type {number} */ var $84=($83|0)!=0;
 if($84){label=10;break;}else{label=11;break;}
 case 10: 
 /** @type {number} */ var $86=$L;
 /** @type {number} */ var $87=$f;
 /** @type {number} */ var $88=$87;
 /** @type {number} */ var $89=$clp;
 /** @type {number} */ var $90=$89;
 _luaC_barrier_($86,$88,$90);
 label=11;break;
 case 11: 
 /** @type {number} */ var $92=$clp;
 STACKTOP=sp;return $92;
 }
}
/**
 * @param {number} $ls
 * @return {number}
 */
function _parlist($ls){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $fs;
 /** @type {number} */ var $f;
 /** @type {number} */ var $nparams;
 $1=$ls;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+48)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $fs=$4;
 /** @type {number} */ var $5=$fs;
 /** @type {number} */ var $6=(($5)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 $f=$7;
 $nparams=0;
 /** @type {number} */ var $8=$f;
 /** @type {number} */ var $9=(($8+77)|0);
 HEAP8[($9)]=0;
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=(($10+16)|0);
 /** @type {number} */ var $12=(($11)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=($13|0)!=41;
 if($14){label=2;break;}else{label=12;break;}
 case 2: 
 label=3;break;
 case 3: 
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=(($17+16)|0);
 /** @type {number} */ var $19=(($18)|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 if(($20|0)==288){ label=4;break;}else if(($20|0)==280){ label=5;break;}else{label=6;break;}
 case 4: 
 /** @type {number} */ var $22=$1;
 /** @type {number} */ var $23=$1;
 /** @type {number} */ var $24=_str_checkname($23);
 _new_localvar($22,$24);
 /** @type {number} */ var $25=$nparams;
 /** @type {number} */ var $26=((($25)+(1))|0);
 $nparams=$26;
 label=7;break;
 case 5: 
 /** @type {number} */ var $28=$1;
 _luaX_next($28);
 /** @type {number} */ var $29=$f;
 /** @type {number} */ var $30=(($29+77)|0);
 HEAP8[($30)]=1;
 label=7;break;
 case 6: 
 /** @type {number} */ var $32=$1;
 _luaX_syntaxerror($32,12008);
 case 7: 
 label=8;break;
 case 8: 
 /** @type {number} */ var $35=$f;
 /** @type {number} */ var $36=(($35+77)|0);
 /** @type {number} */ var $37=HEAP8[($36)];
 /** @type {number} */ var $38=(($37<<24)>>24)!=0;
 if($38){var $44=0;label=10;break;}else{label=9;break;}
 case 9: 
 /** @type {number} */ var $40=$1;
 /** @type {number} */ var $41=_testnext($40,44);
 /** @type {number} */ var $42=($41|0)!=0;
 var $44=$42;label=10;break;
 case 10: 
 var $44;
 if($44){label=3;break;}else{label=11;break;}
 case 11: 
 label=12;break;
 case 12: 
 /** @type {number} */ var $47=$1;
 /** @type {number} */ var $48=$nparams;
 _adjustlocalvars($47,$48);
 /** @type {number} */ var $49=$fs;
 /** @type {number} */ var $50=(($49+46)|0);
 /** @type {number} */ var $51=HEAP8[($50)];
 /** @type {number} */ var $52=$f;
 /** @type {number} */ var $53=(($52+76)|0);
 HEAP8[($53)]=$51;
 /** @type {number} */ var $54=$fs;
 /** @type {number} */ var $55=$fs;
 /** @type {number} */ var $56=(($55+46)|0);
 /** @type {number} */ var $57=HEAP8[($56)];
 /** @type {number} */ var $58=($57&255);
 _luaK_reserveregs($54,$58);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $v
 * @return {number}
 */
function _codeclosure($ls,$v){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $fs;
 $1=$ls;
 $2=$v;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+48)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=(($5+8)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 $fs=$7;
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=$fs;
 /** @type {number} */ var $10=$fs;
 /** @type {number} */ var $11=(($10+36)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=((($12)-(1))|0);
 /** @type {number} */ var $14=_luaK_codeABx($9,37,0,$13);
 _init_exp($8,11,$14);
 /** @type {number} */ var $15=$fs;
 /** @type {number} */ var $16=$2;
 _luaK_exp2nextreg($15,$16);
 STACKTOP=sp;return;
}
/**
 * @param {number} $ls
 * @param {number} $varname
 * @return {number}
 */
function _registerlocalvar($ls,$varname){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $fs;
 /** @type {number} */ var $f;
 /** @type {number} */ var $oldsize;
 $1=$ls;
 $2=$varname;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+48)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $fs=$5;
 /** @type {number} */ var $6=$fs;
 /** @type {number} */ var $7=(($6)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 $f=$8;
 /** @type {number} */ var $9=$f;
 /** @type {number} */ var $10=(($9+60)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 $oldsize=$11;
 /** @type {number} */ var $12=$fs;
 /** @type {number} */ var $13=(($12+44)|0);
 /** @type {number} */ var $14=HEAP16[(($13)>>1)];
 /** @type {number} */ var $15=(($14<<16)>>16);
 /** @type {number} */ var $16=((($15)+(1))|0);
 /** @type {number} */ var $17=$f;
 /** @type {number} */ var $18=(($17+60)|0);
 /** @type {number} */ var $19=HEAP32[(($18)>>2)];
 /** @type {number} */ var $20=($16|0)>($19|0);
 if($20){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $22=$1;
 /** @type {number} */ var $23=(($22+52)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=$f;
 /** @type {number} */ var $26=(($25+24)|0);
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=$27;
 /** @type {number} */ var $29=$f;
 /** @type {number} */ var $30=(($29+60)|0);
 /** @type {number} */ var $31=_luaM_growaux_($24,$28,$30,12,32767,11624);
 /** @type {number} */ var $32=$31;
 /** @type {number} */ var $33=$f;
 /** @type {number} */ var $34=(($33+24)|0);
 HEAP32[(($34)>>2)]=$32;
 label=3;break;
 case 3: 
 label=4;break;
 case 4: 
 /** @type {number} */ var $37=$oldsize;
 /** @type {number} */ var $38=$f;
 /** @type {number} */ var $39=(($38+60)|0);
 /** @type {number} */ var $40=HEAP32[(($39)>>2)];
 /** @type {number} */ var $41=($37|0)<($40|0);
 if($41){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $43=$oldsize;
 /** @type {number} */ var $44=((($43)+(1))|0);
 $oldsize=$44;
 /** @type {number} */ var $45=$f;
 /** @type {number} */ var $46=(($45+24)|0);
 /** @type {number} */ var $47=HEAP32[(($46)>>2)];
 /** @type {number} */ var $48=(($47+((($43)*(12))&-1))|0);
 /** @type {number} */ var $49=(($48)|0);
 HEAP32[(($49)>>2)]=0;
 label=4;break;
 case 6: 
 /** @type {number} */ var $51=$2;
 /** @type {number} */ var $52=$fs;
 /** @type {number} */ var $53=(($52+44)|0);
 /** @type {number} */ var $54=HEAP16[(($53)>>1)];
 /** @type {number} */ var $55=(($54<<16)>>16);
 /** @type {number} */ var $56=$f;
 /** @type {number} */ var $57=(($56+24)|0);
 /** @type {number} */ var $58=HEAP32[(($57)>>2)];
 /** @type {number} */ var $59=(($58+((($55)*(12))&-1))|0);
 /** @type {number} */ var $60=(($59)|0);
 HEAP32[(($60)>>2)]=$51;
 /** @type {number} */ var $61=$2;
 /** @type {number} */ var $62=$61;
 /** @type {number} */ var $63=$62;
 /** @type {number} */ var $64=(($63+5)|0);
 /** @type {number} */ var $65=HEAP8[($64)];
 /** @type {number} */ var $66=($65&255);
 /** @type {number} */ var $67=$66&3;
 /** @type {number} */ var $68=($67|0)!=0;
 if($68){label=7;break;}else{label=9;break;}
 case 7: 
 /** @type {number} */ var $70=$f;
 /** @type {number} */ var $71=$70;
 /** @type {number} */ var $72=$71;
 /** @type {number} */ var $73=(($72+5)|0);
 /** @type {number} */ var $74=HEAP8[($73)];
 /** @type {number} */ var $75=($74&255);
 /** @type {number} */ var $76=$75&4;
 /** @type {number} */ var $77=($76|0)!=0;
 if($77){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $79=$1;
 /** @type {number} */ var $80=(($79+52)|0);
 /** @type {number} */ var $81=HEAP32[(($80)>>2)];
 /** @type {number} */ var $82=$f;
 /** @type {number} */ var $83=$82;
 /** @type {number} */ var $84=$2;
 /** @type {number} */ var $85=$84;
 _luaC_barrier_($81,$83,$85);
 label=9;break;
 case 9: 
 /** @type {number} */ var $87=$fs;
 /** @type {number} */ var $88=(($87+44)|0);
 /** @type {number} */ var $89=HEAP16[(($88)>>1)];
 /** @type {number} */ var $90=((($89)+(1))&65535);
 HEAP16[(($88)>>1)]=$90;
 /** @type {number} */ var $91=(($89<<16)>>16);
 STACKTOP=sp;return $91;
 }
}
/**
 * @param {number} $ls
 * @param {number} $g
 * @param {number} $label
 * @return {number}
 */
function _closegoto($ls,$g,$label){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $i;
 /** @type {number} */ var $fs;
 /** @type {number} */ var $gl;
 /** @type {number} */ var $gt;
 /** @type {number} */ var $vname;
 /** @type {number} */ var $msg;
 $1=$ls;
 $2=$g;
 $3=$label;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+48)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 $fs=$6;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=(($7+64)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=(($9+12)|0);
 $gl=$10;
 /** @type {number} */ var $11=$2;
 /** @type {number} */ var $12=$gl;
 /** @type {number} */ var $13=(($12)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=(($14+($11<<4))|0);
 $gt=$15;
 /** @type {number} */ var $16=$gt;
 /** @type {number} */ var $17=(($16+12)|0);
 /** @type {number} */ var $18=HEAP8[($17)];
 /** @type {number} */ var $19=($18&255);
 /** @type {number} */ var $20=$3;
 /** @type {number} */ var $21=(($20+12)|0);
 /** @type {number} */ var $22=HEAP8[($21)];
 /** @type {number} */ var $23=($22&255);
 /** @type {number} */ var $24=($19|0)<($23|0);
 if($24){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $26=$fs;
 /** @type {number} */ var $27=$gt;
 /** @type {number} */ var $28=(($27+12)|0);
 /** @type {number} */ var $29=HEAP8[($28)];
 /** @type {number} */ var $30=($29&255);
 /** @type {number} */ var $31=_getlocvar($26,$30);
 /** @type {number} */ var $32=(($31)|0);
 /** @type {number} */ var $33=HEAP32[(($32)>>2)];
 $vname=$33;
 /** @type {number} */ var $34=$1;
 /** @type {number} */ var $35=(($34+52)|0);
 /** @type {number} */ var $36=HEAP32[(($35)>>2)];
 /** @type {number} */ var $37=$gt;
 /** @type {number} */ var $38=(($37)|0);
 /** @type {number} */ var $39=HEAP32[(($38)>>2)];
 /** @type {number} */ var $40=(($39+16)|0);
 /** @type {number} */ var $41=$40;
 /** @type {number} */ var $42=$gt;
 /** @type {number} */ var $43=(($42+8)|0);
 /** @type {number} */ var $44=HEAP32[(($43)>>2)];
 /** @type {number} */ var $45=$vname;
 /** @type {number} */ var $46=(($45+16)|0);
 /** @type {number} */ var $47=$46;
 /** @type {number} */ var $48=_luaO_pushfstring($36,9024,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,HEAP32[((tempVarArgs)>>2)]=$41,HEAP32[(((tempVarArgs)+(8))>>2)]=$44,HEAP32[(((tempVarArgs)+(16))>>2)]=$47,tempVarArgs)); STACKTOP=tempVarArgs;
 $msg=$48;
 /** @type {number} */ var $49=$1;
 /** @type {number} */ var $50=$msg;
 _semerror($49,$50);
 case 3: 
 /** @type {number} */ var $52=$fs;
 /** @type {number} */ var $53=$gt;
 /** @type {number} */ var $54=(($53+4)|0);
 /** @type {number} */ var $55=HEAP32[(($54)>>2)];
 /** @type {number} */ var $56=$3;
 /** @type {number} */ var $57=(($56+4)|0);
 /** @type {number} */ var $58=HEAP32[(($57)>>2)];
 _luaK_patchlist($52,$55,$58);
 /** @type {number} */ var $59=$2;
 $i=$59;
 label=4;break;
 case 4: 
 /** @type {number} */ var $61=$i;
 /** @type {number} */ var $62=$gl;
 /** @type {number} */ var $63=(($62+4)|0);
 /** @type {number} */ var $64=HEAP32[(($63)>>2)];
 /** @type {number} */ var $65=((($64)-(1))|0);
 /** @type {number} */ var $66=($61|0)<($65|0);
 if($66){label=5;break;}else{label=7;break;}
 case 5: 
 /** @type {number} */ var $68=$i;
 /** @type {number} */ var $69=$gl;
 /** @type {number} */ var $70=(($69)|0);
 /** @type {number} */ var $71=HEAP32[(($70)>>2)];
 /** @type {number} */ var $72=(($71+($68<<4))|0);
 /** @type {number} */ var $73=$i;
 /** @type {number} */ var $74=((($73)+(1))|0);
 /** @type {number} */ var $75=$gl;
 /** @type {number} */ var $76=(($75)|0);
 /** @type {number} */ var $77=HEAP32[(($76)>>2)];
 /** @type {number} */ var $78=(($77+($74<<4))|0);
 /** @type {number} */ var $79=$72;
 /** @type {number} */ var $80=$78;
 HEAP32[(($79)>>2)]=HEAP32[(($80)>>2)];HEAP32[((($79)+(4))>>2)]=HEAP32[((($80)+(4))>>2)];HEAP32[((($79)+(8))>>2)]=HEAP32[((($80)+(8))>>2)];HEAP32[((($79)+(12))>>2)]=HEAP32[((($80)+(12))>>2)];
 label=6;break;
 case 6: 
 /** @type {number} */ var $82=$i;
 /** @type {number} */ var $83=((($82)+(1))|0);
 $i=$83;
 label=4;break;
 case 7: 
 /** @type {number} */ var $85=$gl;
 /** @type {number} */ var $86=(($85+4)|0);
 /** @type {number} */ var $87=HEAP32[(($86)>>2)];
 /** @type {number} */ var $88=((($87)-(1))|0);
 HEAP32[(($86)>>2)]=$88;
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $v
 * @return {number}
 */
function _primaryexp($ls,$v){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $line;
 $1=$ls;
 $2=$v;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+16)|0);
 /** @type {number} */ var $5=(($4)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 if(($6|0)==40){ label=2;break;}else if(($6|0)==288){ label=3;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=(($8+4)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 $line=$10;
 /** @type {number} */ var $11=$1;
 _luaX_next($11);
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=$2;
 _expr($12,$13);
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=$line;
 _check_match($14,41,40,$15);
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=(($16+48)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=$2;
 _luaK_dischargevars($18,$19);
 label=5;break;
 case 3: 
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=$2;
 _singlevar($21,$22);
 label=5;break;
 case 4: 
 /** @type {number} */ var $24=$1;
 _luaX_syntaxerror($24,9912);
 case 5: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $v
 * @return {number}
 */
function _yindex($ls,$v){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$ls;
 $2=$v;
 /** @type {number} */ var $3=$1;
 _luaX_next($3);
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$2;
 _expr($4,$5);
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+48)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=$2;
 _luaK_exp2val($8,$9);
 /** @type {number} */ var $10=$1;
 _checknext($10,93);
 STACKTOP=sp;return;
}
/**
 * @param {number} $ls
 * @param {number} $e
 * @return {number}
 */
function _checkname($ls,$e){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$ls;
 $2=$e;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=_str_checkname($5);
 _codestring($3,$4,$6);
 STACKTOP=sp;return;
}
/**
 * @param {number} $ls
 * @param {number} $f
 * @param {number} $line
 * @return {number}
 */
function _funcargs($ls,$f,$line){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $fs;
 /** @type {number} */ var $args=sp;
 /** @type {number} */ var $base;
 /** @type {number} */ var $nparams;
 $1=$ls;
 $2=$f;
 $3=$line;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+48)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 $fs=$6;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=(($7+16)|0);
 /** @type {number} */ var $9=(($8)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 if(($10|0)==40){ label=2;break;}else if(($10|0)==123){ label=6;break;}else if(($10|0)==289){ label=7;break;}else{label=8;break;}
 case 2: 
 /** @type {number} */ var $12=$1;
 _luaX_next($12);
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=(($13+16)|0);
 /** @type {number} */ var $15=(($14)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=($16|0)==41;
 if($17){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $19=(($args)|0);
 HEAP32[(($19)>>2)]=0;
 label=5;break;
 case 4: 
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=_explist($21,$args);
 /** @type {number} */ var $23=$fs;
 _luaK_setreturns($23,$args,-1);
 label=5;break;
 case 5: 
 /** @type {number} */ var $25=$1;
 /** @type {number} */ var $26=$3;
 _check_match($25,41,40,$26);
 label=9;break;
 case 6: 
 /** @type {number} */ var $28=$1;
 _constructor($28,$args);
 label=9;break;
 case 7: 
 /** @type {number} */ var $30=$1;
 /** @type {number} */ var $31=$1;
 /** @type {number} */ var $32=(($31+16)|0);
 /** @type {number} */ var $33=(($32+8)|0);
 /** @type {number} */ var $34=$33;
 /** @type {number} */ var $35=HEAP32[(($34)>>2)];
 _codestring($30,$args,$35);
 /** @type {number} */ var $36=$1;
 _luaX_next($36);
 label=9;break;
 case 8: 
 /** @type {number} */ var $38=$1;
 _luaX_syntaxerror($38,10104);
 case 9: 
 /** @type {number} */ var $40=$2;
 /** @type {number} */ var $41=(($40+8)|0);
 /** @type {number} */ var $42=$41;
 /** @type {number} */ var $43=HEAP32[(($42)>>2)];
 $base=$43;
 /** @type {number} */ var $44=(($args)|0);
 /** @type {number} */ var $45=HEAP32[(($44)>>2)];
 /** @type {number} */ var $46=($45|0)==12;
 if($46){label=11;break;}else{label=10;break;}
 case 10: 
 /** @type {number} */ var $48=(($args)|0);
 /** @type {number} */ var $49=HEAP32[(($48)>>2)];
 /** @type {number} */ var $50=($49|0)==13;
 if($50){label=11;break;}else{label=12;break;}
 case 11: 
 $nparams=-1;
 label=15;break;
 case 12: 
 /** @type {number} */ var $53=(($args)|0);
 /** @type {number} */ var $54=HEAP32[(($53)>>2)];
 /** @type {number} */ var $55=($54|0)!=0;
 if($55){label=13;break;}else{label=14;break;}
 case 13: 
 /** @type {number} */ var $57=$fs;
 _luaK_exp2nextreg($57,$args);
 label=14;break;
 case 14: 
 /** @type {number} */ var $59=$fs;
 /** @type {number} */ var $60=(($59+48)|0);
 /** @type {number} */ var $61=HEAP8[($60)];
 /** @type {number} */ var $62=($61&255);
 /** @type {number} */ var $63=$base;
 /** @type {number} */ var $64=((($63)+(1))|0);
 /** @type {number} */ var $65=((($62)-($64))|0);
 $nparams=$65;
 label=15;break;
 case 15: 
 /** @type {number} */ var $67=$2;
 /** @type {number} */ var $68=$fs;
 /** @type {number} */ var $69=$base;
 /** @type {number} */ var $70=$nparams;
 /** @type {number} */ var $71=((($70)+(1))|0);
 /** @type {number} */ var $72=_luaK_codeABC($68,29,$69,$71,2);
 _init_exp($67,12,$72);
 /** @type {number} */ var $73=$fs;
 /** @type {number} */ var $74=$3;
 _luaK_fixline($73,$74);
 /** @type {number} */ var $75=$base;
 /** @type {number} */ var $76=((($75)+(1))|0);
 /** @type {number} */ var $77=(($76)&255);
 /** @type {number} */ var $78=$fs;
 /** @type {number} */ var $79=(($78+48)|0);
 HEAP8[($79)]=$77;
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $lh
 * @param {number} $v
 * @return {number}
 */
function _check_conflict($ls,$lh,$v){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $fs;
 /** @type {number} */ var $extra;
 /** @type {number} */ var $conflict;
 /** @type {number} */ var $op;
 $1=$ls;
 $2=$lh;
 $3=$v;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+48)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 $fs=$6;
 /** @type {number} */ var $7=$fs;
 /** @type {number} */ var $8=(($7+48)|0);
 /** @type {number} */ var $9=HEAP8[($8)];
 /** @type {number} */ var $10=($9&255);
 $extra=$10;
 $conflict=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=($12|0)!=0;
 if($13){label=3;break;}else{label=13;break;}
 case 3: 
 /** @type {number} */ var $15=$2;
 /** @type {number} */ var $16=(($15+8)|0);
 /** @type {number} */ var $17=(($16)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=($18|0)==9;
 if($19){label=4;break;}else{label=11;break;}
 case 4: 
 /** @type {number} */ var $21=$2;
 /** @type {number} */ var $22=(($21+8)|0);
 /** @type {number} */ var $23=(($22+8)|0);
 /** @type {number} */ var $24=$23;
 /** @type {number} */ var $25=(($24+3)|0);
 /** @type {number} */ var $26=HEAP8[($25)];
 /** @type {number} */ var $27=($26&255);
 /** @type {number} */ var $28=$3;
 /** @type {number} */ var $29=(($28)|0);
 /** @type {number} */ var $30=HEAP32[(($29)>>2)];
 /** @type {number} */ var $31=($27|0)==($30|0);
 if($31){label=5;break;}else{label=7;break;}
 case 5: 
 /** @type {number} */ var $33=$2;
 /** @type {number} */ var $34=(($33+8)|0);
 /** @type {number} */ var $35=(($34+8)|0);
 /** @type {number} */ var $36=$35;
 /** @type {number} */ var $37=(($36+2)|0);
 /** @type {number} */ var $38=HEAP8[($37)];
 /** @type {number} */ var $39=($38&255);
 /** @type {number} */ var $40=$3;
 /** @type {number} */ var $41=(($40+8)|0);
 /** @type {number} */ var $42=$41;
 /** @type {number} */ var $43=HEAP32[(($42)>>2)];
 /** @type {number} */ var $44=($39|0)==($43|0);
 if($44){label=6;break;}else{label=7;break;}
 case 6: 
 $conflict=1;
 /** @type {number} */ var $46=$2;
 /** @type {number} */ var $47=(($46+8)|0);
 /** @type {number} */ var $48=(($47+8)|0);
 /** @type {number} */ var $49=$48;
 /** @type {number} */ var $50=(($49+3)|0);
 HEAP8[($50)]=7;
 /** @type {number} */ var $51=$extra;
 /** @type {number} */ var $52=(($51)&255);
 /** @type {number} */ var $53=$2;
 /** @type {number} */ var $54=(($53+8)|0);
 /** @type {number} */ var $55=(($54+8)|0);
 /** @type {number} */ var $56=$55;
 /** @type {number} */ var $57=(($56+2)|0);
 HEAP8[($57)]=$52;
 label=7;break;
 case 7: 
 /** @type {number} */ var $59=$3;
 /** @type {number} */ var $60=(($59)|0);
 /** @type {number} */ var $61=HEAP32[(($60)>>2)];
 /** @type {number} */ var $62=($61|0)==7;
 if($62){label=8;break;}else{label=10;break;}
 case 8: 
 /** @type {number} */ var $64=$2;
 /** @type {number} */ var $65=(($64+8)|0);
 /** @type {number} */ var $66=(($65+8)|0);
 /** @type {number} */ var $67=$66;
 /** @type {number} */ var $68=(($67)|0);
 /** @type {number} */ var $69=HEAP16[(($68)>>1)];
 /** @type {number} */ var $70=(($69<<16)>>16);
 /** @type {number} */ var $71=$3;
 /** @type {number} */ var $72=(($71+8)|0);
 /** @type {number} */ var $73=$72;
 /** @type {number} */ var $74=HEAP32[(($73)>>2)];
 /** @type {number} */ var $75=($70|0)==($74|0);
 if($75){label=9;break;}else{label=10;break;}
 case 9: 
 $conflict=1;
 /** @type {number} */ var $77=$extra;
 /** @type {number} */ var $78=(($77)&65535);
 /** @type {number} */ var $79=$2;
 /** @type {number} */ var $80=(($79+8)|0);
 /** @type {number} */ var $81=(($80+8)|0);
 /** @type {number} */ var $82=$81;
 /** @type {number} */ var $83=(($82)|0);
 HEAP16[(($83)>>1)]=$78;
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 /** @type {number} */ var $87=$2;
 /** @type {number} */ var $88=(($87)|0);
 /** @type {number} */ var $89=HEAP32[(($88)>>2)];
 $2=$89;
 label=2;break;
 case 13: 
 /** @type {number} */ var $91=$conflict;
 /** @type {number} */ var $92=($91|0)!=0;
 if($92){label=14;break;}else{label=15;break;}
 case 14: 
 /** @type {number} */ var $94=$3;
 /** @type {number} */ var $95=(($94)|0);
 /** @type {number} */ var $96=HEAP32[(($95)>>2)];
 /** @type {number} */ var $97=($96|0)==7;
 /** @type {number} */ var $98=($97?0:5);
 $op=$98;
 /** @type {number} */ var $99=$fs;
 /** @type {number} */ var $100=$op;
 /** @type {number} */ var $101=$extra;
 /** @type {number} */ var $102=$3;
 /** @type {number} */ var $103=(($102+8)|0);
 /** @type {number} */ var $104=$103;
 /** @type {number} */ var $105=HEAP32[(($104)>>2)];
 /** @type {number} */ var $106=_luaK_codeABC($99,$100,$101,$105,0);
 /** @type {number} */ var $107=$fs;
 _luaK_reserveregs($107,1);
 label=15;break;
 case 15: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $v
 * @param {number} $limit
 * @return {number}
 */
function _subexpr($ls,$v,$limit){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $op;
 /** @type {number} */ var $uop;
 /** @type {number} */ var $line;
 /** @type {number} */ var $v2=sp;
 /** @type {number} */ var $nextop;
 /** @type {number} */ var $line1;
 $1=$ls;
 $2=$v;
 $3=$limit;
 /** @type {number} */ var $4=$1;
 _enterlevel($4);
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($5+16)|0);
 /** @type {number} */ var $7=(($6)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=_getunopr($8);
 $uop=$9;
 /** @type {number} */ var $10=$uop;
 /** @type {number} */ var $11=($10|0)!=3;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=(($13+4)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 $line=$15;
 /** @type {number} */ var $16=$1;
 _luaX_next($16);
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=$2;
 /** @type {number} */ var $19=_subexpr($17,$18,8);
 /** @type {number} */ var $20=$1;
 /** @type {number} */ var $21=(($20+48)|0);
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 /** @type {number} */ var $23=$uop;
 /** @type {number} */ var $24=$2;
 /** @type {number} */ var $25=$line;
 _luaK_prefix($22,$23,$24,$25);
 label=4;break;
 case 3: 
 /** @type {number} */ var $27=$1;
 /** @type {number} */ var $28=$2;
 _simpleexp($27,$28);
 label=4;break;
 case 4: 
 /** @type {number} */ var $30=$1;
 /** @type {number} */ var $31=(($30+16)|0);
 /** @type {number} */ var $32=(($31)|0);
 /** @type {number} */ var $33=HEAP32[(($32)>>2)];
 /** @type {number} */ var $34=_getbinopr($33);
 $op=$34;
 label=5;break;
 case 5: 
 /** @type {number} */ var $36=$op;
 /** @type {number} */ var $37=($36|0)!=15;
 if($37){label=6;break;}else{var $47=0;label=7;break;}
 case 6: 
 /** @type {number} */ var $39=$op;
 /** @type {number} */ var $40=((296+($39<<1))|0);
 /** @type {number} */ var $41=(($40)|0);
 /** @type {number} */ var $42=HEAP8[($41)];
 /** @type {number} */ var $43=($42&255);
 /** @type {number} */ var $44=$3;
 /** @type {number} */ var $45=($43|0)>($44|0);
 var $47=$45;label=7;break;
 case 7: 
 var $47;
 if($47){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $49=$1;
 /** @type {number} */ var $50=(($49+4)|0);
 /** @type {number} */ var $51=HEAP32[(($50)>>2)];
 $line1=$51;
 /** @type {number} */ var $52=$1;
 _luaX_next($52);
 /** @type {number} */ var $53=$1;
 /** @type {number} */ var $54=(($53+48)|0);
 /** @type {number} */ var $55=HEAP32[(($54)>>2)];
 /** @type {number} */ var $56=$op;
 /** @type {number} */ var $57=$2;
 _luaK_infix($55,$56,$57);
 /** @type {number} */ var $58=$1;
 /** @type {number} */ var $59=$op;
 /** @type {number} */ var $60=((296+($59<<1))|0);
 /** @type {number} */ var $61=(($60+1)|0);
 /** @type {number} */ var $62=HEAP8[($61)];
 /** @type {number} */ var $63=($62&255);
 /** @type {number} */ var $64=_subexpr($58,$v2,$63);
 $nextop=$64;
 /** @type {number} */ var $65=$1;
 /** @type {number} */ var $66=(($65+48)|0);
 /** @type {number} */ var $67=HEAP32[(($66)>>2)];
 /** @type {number} */ var $68=$op;
 /** @type {number} */ var $69=$2;
 /** @type {number} */ var $70=$line1;
 _luaK_posfix($67,$68,$69,$v2,$70);
 /** @type {number} */ var $71=$nextop;
 $op=$71;
 label=5;break;
 case 9: 
 /** @type {number} */ var $73=$1;
 /** @type {number} */ var $74=(($73+52)|0);
 /** @type {number} */ var $75=HEAP32[(($74)>>2)];
 /** @type {number} */ var $76=(($75+38)|0);
 /** @type {number} */ var $77=HEAP16[(($76)>>1)];
 /** @type {number} */ var $78=((($77)-(1))&65535);
 HEAP16[(($76)>>1)]=$78;
 /** @type {number} */ var $79=$op;
 STACKTOP=sp;return $79;
 }
}
/**
 * @param {number} $fs
 * @param {number} $n
 * @param {number} $var
 * @param {number} $base
 * @return {number}
 */
function _singlevaraux($fs,$n,$var,$base){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 /** @type {number} */ var $v;
 /** @type {number} */ var $idx;
 $2=$fs;
 $3=$n;
 $4=$var;
 $5=$base;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=($6|0)==0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=12;break;
 case 3: 
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=$3;
 /** @type {number} */ var $12=_searchvar($10,$11);
 $v=$12;
 /** @type {number} */ var $13=$v;
 /** @type {number} */ var $14=($13|0)>=0;
 if($14){label=4;break;}else{label=7;break;}
 case 4: 
 /** @type {number} */ var $16=$4;
 /** @type {number} */ var $17=$v;
 _init_exp($16,7,$17);
 /** @type {number} */ var $18=$5;
 /** @type {number} */ var $19=($18|0)!=0;
 if($19){label=6;break;}else{label=5;break;}
 case 5: 
 /** @type {number} */ var $21=$2;
 /** @type {number} */ var $22=$v;
 _markupval($21,$22);
 label=6;break;
 case 6: 
 $1=7;
 label=12;break;
 case 7: 
 /** @type {number} */ var $25=$2;
 /** @type {number} */ var $26=$3;
 /** @type {number} */ var $27=_searchupvalue($25,$26);
 $idx=$27;
 /** @type {number} */ var $28=$idx;
 /** @type {number} */ var $29=($28|0)<0;
 if($29){label=8;break;}else{label=11;break;}
 case 8: 
 /** @type {number} */ var $31=$2;
 /** @type {number} */ var $32=(($31+8)|0);
 /** @type {number} */ var $33=HEAP32[(($32)>>2)];
 /** @type {number} */ var $34=$3;
 /** @type {number} */ var $35=$4;
 /** @type {number} */ var $36=_singlevaraux($33,$34,$35,0);
 /** @type {number} */ var $37=($36|0)==0;
 if($37){label=9;break;}else{label=10;break;}
 case 9: 
 $1=0;
 label=12;break;
 case 10: 
 /** @type {number} */ var $40=$2;
 /** @type {number} */ var $41=$3;
 /** @type {number} */ var $42=$4;
 /** @type {number} */ var $43=_newupvalue($40,$41,$42);
 $idx=$43;
 label=11;break;
 case 11: 
 /** @type {number} */ var $45=$4;
 /** @type {number} */ var $46=$idx;
 _init_exp($45,8,$46);
 $1=8;
 label=12;break;
 case 12: 
 /** @type {number} */ var $48=$1;
 STACKTOP=sp;return $48;
 }
}
/**
 * @param {number} $ls
 * @param {number} $e
 * @param {number} $s
 * @return {number}
 */
function _codestring($ls,$e,$s){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$ls;
 $2=$e;
 $3=$s;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($5+48)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=$3;
 /** @type {number} */ var $9=_luaK_stringK($7,$8);
 _init_exp($4,4,$9);
 STACKTOP=sp;return;
}
/**
 * @param {number} $ls
 * @param {number} $t
 * @return {number}
 */
function _constructor($ls,$t){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $fs;
 /** @type {number} */ var $line;
 /** @type {number} */ var $pc;
 /** @type {number} */ var $cc=sp;
 $1=$ls;
 $2=$t;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+48)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $fs=$5;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+4)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 $line=$8;
 /** @type {number} */ var $9=$fs;
 /** @type {number} */ var $10=_luaK_codeABC($9,11,0,0,0);
 $pc=$10;
 /** @type {number} */ var $11=(($cc+36)|0);
 HEAP32[(($11)>>2)]=0;
 /** @type {number} */ var $12=(($cc+28)|0);
 HEAP32[(($12)>>2)]=0;
 /** @type {number} */ var $13=(($cc+32)|0);
 HEAP32[(($13)>>2)]=0;
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=(($cc+24)|0);
 HEAP32[(($15)>>2)]=$14;
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=$pc;
 _init_exp($16,11,$17);
 /** @type {number} */ var $18=(($cc)|0);
 _init_exp($18,0,0);
 /** @type {number} */ var $19=$1;
 /** @type {number} */ var $20=(($19+48)|0);
 /** @type {number} */ var $21=HEAP32[(($20)>>2)];
 /** @type {number} */ var $22=$2;
 _luaK_exp2nextreg($21,$22);
 /** @type {number} */ var $23=$1;
 _checknext($23,123);
 label=2;break;
 case 2: 
 /** @type {number} */ var $25=$1;
 /** @type {number} */ var $26=(($25+16)|0);
 /** @type {number} */ var $27=(($26)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=($28|0)==125;
 if($29){label=3;break;}else{label=4;break;}
 case 3: 
 label=8;break;
 case 4: 
 /** @type {number} */ var $32=$fs;
 _closelistfield($32,$cc);
 /** @type {number} */ var $33=$1;
 _field($33,$cc);
 label=5;break;
 case 5: 
 /** @type {number} */ var $35=$1;
 /** @type {number} */ var $36=_testnext($35,44);
 /** @type {number} */ var $37=($36|0)!=0;
 if($37){var $43=1;label=7;break;}else{label=6;break;}
 case 6: 
 /** @type {number} */ var $39=$1;
 /** @type {number} */ var $40=_testnext($39,59);
 /** @type {number} */ var $41=($40|0)!=0;
 var $43=$41;label=7;break;
 case 7: 
 var $43;
 if($43){label=2;break;}else{label=8;break;}
 case 8: 
 /** @type {number} */ var $45=$1;
 /** @type {number} */ var $46=$line;
 _check_match($45,125,123,$46);
 /** @type {number} */ var $47=$fs;
 _lastlistfield($47,$cc);
 /** @type {number} */ var $48=$pc;
 /** @type {number} */ var $49=$fs;
 /** @type {number} */ var $50=(($49)|0);
 /** @type {number} */ var $51=HEAP32[(($50)>>2)];
 /** @type {number} */ var $52=(($51+12)|0);
 /** @type {number} */ var $53=HEAP32[(($52)>>2)];
 /** @type {number} */ var $54=(($53+($48<<2))|0);
 /** @type {number} */ var $55=HEAP32[(($54)>>2)];
 /** @type {number} */ var $56=$55&8388607;
 /** @type {number} */ var $57=(($cc+32)|0);
 /** @type {number} */ var $58=HEAP32[(($57)>>2)];
 /** @type {number} */ var $59=_luaO_int2fb($58);
 /** @type {number} */ var $60=$59<<23;
 /** @type {number} */ var $61=$60&-8388608;
 /** @type {number} */ var $62=$56|$61;
 /** @type {number} */ var $63=$pc;
 /** @type {number} */ var $64=$fs;
 /** @type {number} */ var $65=(($64)|0);
 /** @type {number} */ var $66=HEAP32[(($65)>>2)];
 /** @type {number} */ var $67=(($66+12)|0);
 /** @type {number} */ var $68=HEAP32[(($67)>>2)];
 /** @type {number} */ var $69=(($68+($63<<2))|0);
 HEAP32[(($69)>>2)]=$62;
 /** @type {number} */ var $70=$pc;
 /** @type {number} */ var $71=$fs;
 /** @type {number} */ var $72=(($71)|0);
 /** @type {number} */ var $73=HEAP32[(($72)>>2)];
 /** @type {number} */ var $74=(($73+12)|0);
 /** @type {number} */ var $75=HEAP32[(($74)>>2)];
 /** @type {number} */ var $76=(($75+($70<<2))|0);
 /** @type {number} */ var $77=HEAP32[(($76)>>2)];
 /** @type {number} */ var $78=$77&-8372225;
 /** @type {number} */ var $79=(($cc+28)|0);
 /** @type {number} */ var $80=HEAP32[(($79)>>2)];
 /** @type {number} */ var $81=_luaO_int2fb($80);
 /** @type {number} */ var $82=$81<<14;
 /** @type {number} */ var $83=$82&8372224;
 /** @type {number} */ var $84=$78|$83;
 /** @type {number} */ var $85=$pc;
 /** @type {number} */ var $86=$fs;
 /** @type {number} */ var $87=(($86)|0);
 /** @type {number} */ var $88=HEAP32[(($87)>>2)];
 /** @type {number} */ var $89=(($88+12)|0);
 /** @type {number} */ var $90=HEAP32[(($89)>>2)];
 /** @type {number} */ var $91=(($90+($85<<2))|0);
 HEAP32[(($91)>>2)]=$84;
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $op
 * @return {number}
 */
function _getunopr($op){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $2=$op;
 /** @type {number} */ var $3=$2;
 if(($3|0)==271){ label=2;break;}else if(($3|0)==45){ label=3;break;}else if(($3|0)==35){ label=4;break;}else{label=5;break;}
 case 2: 
 $1=1;
 label=6;break;
 case 3: 
 $1=0;
 label=6;break;
 case 4: 
 $1=2;
 label=6;break;
 case 5: 
 $1=3;
 label=6;break;
 case 6: 
 /** @type {number} */ var $9=$1;
 STACKTOP=sp;return $9;
 }
}
/**
 * @param {number} $ls
 * @param {number} $v
 * @return {number}
 */
function _simpleexp($ls,$v){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $fs;
 $1=$ls;
 $2=$v;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+16)|0);
 /** @type {number} */ var $5=(($4)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 switch(($6|0)){case 123:{ label=10;break;}case 265:{ label=11;break;}case 287:{ label=2;break;}case 289:{ label=3;break;}case 270:{ label=4;break;}case 276:{ label=5;break;}case 263:{ label=6;break;}case 280:{ label=7;break;}default:{label=12;break;}}break;
 case 2: 
 /** @type {number} */ var $8=$2;
 _init_exp($8,5,0);
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=(($9+16)|0);
 /** @type {number} */ var $11=(($10+8)|0);
 /** @type {number} */ var $12=$11;
 /** @type {number} */ var $13=HEAPF64[(($12)>>3)];
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=(($14+8)|0);
 /** @type {number} */ var $16=$15;
 HEAPF64[(($16)>>3)]=$13;
 label=13;break;
 case 3: 
 /** @type {number} */ var $18=$1;
 /** @type {number} */ var $19=$2;
 /** @type {number} */ var $20=$1;
 /** @type {number} */ var $21=(($20+16)|0);
 /** @type {number} */ var $22=(($21+8)|0);
 /** @type {number} */ var $23=$22;
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 _codestring($18,$19,$24);
 label=13;break;
 case 4: 
 /** @type {number} */ var $26=$2;
 _init_exp($26,1,0);
 label=13;break;
 case 5: 
 /** @type {number} */ var $28=$2;
 _init_exp($28,2,0);
 label=13;break;
 case 6: 
 /** @type {number} */ var $30=$2;
 _init_exp($30,3,0);
 label=13;break;
 case 7: 
 /** @type {number} */ var $32=$1;
 /** @type {number} */ var $33=(($32+48)|0);
 /** @type {number} */ var $34=HEAP32[(($33)>>2)];
 $fs=$34;
 /** @type {number} */ var $35=$fs;
 /** @type {number} */ var $36=(($35)|0);
 /** @type {number} */ var $37=HEAP32[(($36)>>2)];
 /** @type {number} */ var $38=(($37+77)|0);
 /** @type {number} */ var $39=HEAP8[($38)];
 /** @type {number} */ var $40=(($39<<24)>>24)!=0;
 if($40){label=9;break;}else{label=8;break;}
 case 8: 
 /** @type {number} */ var $42=$1;
 _luaX_syntaxerror($42,3080);
 case 9: 
 /** @type {number} */ var $44=$2;
 /** @type {number} */ var $45=$fs;
 /** @type {number} */ var $46=_luaK_codeABC($45,38,0,1,0);
 _init_exp($44,13,$46);
 label=13;break;
 case 10: 
 /** @type {number} */ var $48=$1;
 /** @type {number} */ var $49=$2;
 _constructor($48,$49);
 label=14;break;
 case 11: 
 /** @type {number} */ var $51=$1;
 _luaX_next($51);
 /** @type {number} */ var $52=$1;
 /** @type {number} */ var $53=$2;
 /** @type {number} */ var $54=$1;
 /** @type {number} */ var $55=(($54+4)|0);
 /** @type {number} */ var $56=HEAP32[(($55)>>2)];
 _body($52,$53,0,$56);
 label=14;break;
 case 12: 
 /** @type {number} */ var $58=$1;
 /** @type {number} */ var $59=$2;
 _suffixedexp($58,$59);
 label=14;break;
 case 13: 
 /** @type {number} */ var $61=$1;
 _luaX_next($61);
 label=14;break;
 case 14: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $op
 * @return {number}
 */
function _getbinopr($op){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $2=$op;
 /** @type {number} */ var $3=$2;
 switch(($3|0)){case 281:{ label=10;break;}case 60:{ label=11;break;}case 283:{ label=12;break;}case 62:{ label=13;break;}case 282:{ label=14;break;}case 257:{ label=15;break;}case 272:{ label=16;break;}case 43:{ label=2;break;}case 45:{ label=3;break;}case 42:{ label=4;break;}case 47:{ label=5;break;}case 37:{ label=6;break;}case 94:{ label=7;break;}case 279:{ label=8;break;}case 284:{ label=9;break;}default:{label=17;break;}}break;
 case 2: 
 $1=0;
 label=18;break;
 case 3: 
 $1=1;
 label=18;break;
 case 4: 
 $1=2;
 label=18;break;
 case 5: 
 $1=3;
 label=18;break;
 case 6: 
 $1=4;
 label=18;break;
 case 7: 
 $1=5;
 label=18;break;
 case 8: 
 $1=6;
 label=18;break;
 case 9: 
 $1=10;
 label=18;break;
 case 10: 
 $1=7;
 label=18;break;
 case 11: 
 $1=8;
 label=18;break;
 case 12: 
 $1=9;
 label=18;break;
 case 13: 
 $1=11;
 label=18;break;
 case 14: 
 $1=12;
 label=18;break;
 case 15: 
 $1=13;
 label=18;break;
 case 16: 
 $1=14;
 label=18;break;
 case 17: 
 $1=15;
 label=18;break;
 case 18: 
 /** @type {number} */ var $21=$1;
 STACKTOP=sp;return $21;
 }
}
/**
 * @param {number} $fs
 * @param {number} $n
 * @return {number}
 */
function _searchvar($fs,$n){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $i;
 $2=$fs;
 $3=$n;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=(($4+46)|0);
 /** @type {number} */ var $6=HEAP8[($5)];
 /** @type {number} */ var $7=($6&255);
 /** @type {number} */ var $8=((($7)-(1))|0);
 $i=$8;
 label=2;break;
 case 2: 
 /** @type {number} */ var $10=$i;
 /** @type {number} */ var $11=($10|0)>=0;
 if($11){label=3;break;}else{label=7;break;}
 case 3: 
 /** @type {number} */ var $13=$3;
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=$i;
 /** @type {number} */ var $16=_getlocvar($14,$15);
 /** @type {number} */ var $17=(($16)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=_luaS_eqstr($13,$18);
 /** @type {number} */ var $20=($19|0)!=0;
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $22=$i;
 $1=$22;
 label=8;break;
 case 5: 
 label=6;break;
 case 6: 
 /** @type {number} */ var $25=$i;
 /** @type {number} */ var $26=((($25)-(1))|0);
 $i=$26;
 label=2;break;
 case 7: 
 $1=-1;
 label=8;break;
 case 8: 
 /** @type {number} */ var $29=$1;
 STACKTOP=sp;return $29;
 }
}
/**
 * @param {number} $fs
 * @param {number} $level
 * @return {number}
 */
function _markupval($fs,$level){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $bl;
 $1=$fs;
 $2=$level;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+16)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $bl=$5;
 label=2;break;
 case 2: 
 /** @type {number} */ var $7=$bl;
 /** @type {number} */ var $8=(($7+8)|0);
 /** @type {number} */ var $9=HEAP8[($8)];
 /** @type {number} */ var $10=($9&255);
 /** @type {number} */ var $11=$2;
 /** @type {number} */ var $12=($10|0)>($11|0);
 if($12){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $14=$bl;
 /** @type {number} */ var $15=(($14)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 $bl=$16;
 label=2;break;
 case 4: 
 /** @type {number} */ var $18=$bl;
 /** @type {number} */ var $19=(($18+9)|0);
 HEAP8[($19)]=1;
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @param {number} $name
 * @return {number}
 */
function _searchupvalue($fs,$name){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $i;
 /** @type {number} */ var $up;
 $2=$fs;
 $3=$name;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=(($4)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=(($6+28)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 $up=$8;
 $i=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $10=$i;
 /** @type {number} */ var $11=$2;
 /** @type {number} */ var $12=(($11+47)|0);
 /** @type {number} */ var $13=HEAP8[($12)];
 /** @type {number} */ var $14=($13&255);
 /** @type {number} */ var $15=($10|0)<($14|0);
 if($15){label=3;break;}else{label=7;break;}
 case 3: 
 /** @type {number} */ var $17=$i;
 /** @type {number} */ var $18=$up;
 /** @type {number} */ var $19=(($18+($17<<3))|0);
 /** @type {number} */ var $20=(($19)|0);
 /** @type {number} */ var $21=HEAP32[(($20)>>2)];
 /** @type {number} */ var $22=$3;
 /** @type {number} */ var $23=_luaS_eqstr($21,$22);
 /** @type {number} */ var $24=($23|0)!=0;
 if($24){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $26=$i;
 $1=$26;
 label=8;break;
 case 5: 
 label=6;break;
 case 6: 
 /** @type {number} */ var $29=$i;
 /** @type {number} */ var $30=((($29)+(1))|0);
 $i=$30;
 label=2;break;
 case 7: 
 $1=-1;
 label=8;break;
 case 8: 
 /** @type {number} */ var $33=$1;
 STACKTOP=sp;return $33;
 }
}
/**
 * @param {number} $fs
 * @param {number} $cc
 * @return {number}
 */
function _closelistfield($fs,$cc){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$fs;
 $2=$cc;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=(($3)|0);
 /** @type {number} */ var $5=(($4)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=($6|0)==0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 label=5;break;
 case 3: 
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=$2;
 /** @type {number} */ var $12=(($11)|0);
 _luaK_exp2nextreg($10,$12);
 /** @type {number} */ var $13=$2;
 /** @type {number} */ var $14=(($13)|0);
 /** @type {number} */ var $15=(($14)|0);
 HEAP32[(($15)>>2)]=0;
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=(($16+36)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=($18|0)==50;
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=$2;
 /** @type {number} */ var $23=(($22+24)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=(($24+8)|0);
 /** @type {number} */ var $26=$25;
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=$2;
 /** @type {number} */ var $29=(($28+32)|0);
 /** @type {number} */ var $30=HEAP32[(($29)>>2)];
 /** @type {number} */ var $31=$2;
 /** @type {number} */ var $32=(($31+36)|0);
 /** @type {number} */ var $33=HEAP32[(($32)>>2)];
 _luaK_setlist($21,$27,$30,$33);
 /** @type {number} */ var $34=$2;
 /** @type {number} */ var $35=(($34+36)|0);
 HEAP32[(($35)>>2)]=0;
 label=5;break;
 case 5: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $cc
 * @return {number}
 */
function _field($ls,$cc){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$ls;
 $2=$cc;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+16)|0);
 /** @type {number} */ var $5=(($4)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 if(($6|0)==288){ label=2;break;}else if(($6|0)==91){ label=6;break;}else{label=7;break;}
 case 2: 
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=_luaX_lookahead($8);
 /** @type {number} */ var $10=($9|0)!=61;
 if($10){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=$2;
 _listfield($12,$13);
 label=5;break;
 case 4: 
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=$2;
 _recfield($15,$16);
 label=5;break;
 case 5: 
 label=8;break;
 case 6: 
 /** @type {number} */ var $19=$1;
 /** @type {number} */ var $20=$2;
 _recfield($19,$20);
 label=8;break;
 case 7: 
 /** @type {number} */ var $22=$1;
 /** @type {number} */ var $23=$2;
 _listfield($22,$23);
 label=8;break;
 case 8: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $fs
 * @param {number} $cc
 * @return {number}
 */
function _lastlistfield($fs,$cc){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$fs;
 $2=$cc;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=(($3+36)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 label=9;break;
 case 3: 
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=(($9)|0);
 /** @type {number} */ var $11=(($10)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=($12|0)==12;
 if($13){label=5;break;}else{label=4;break;}
 case 4: 
 /** @type {number} */ var $15=$2;
 /** @type {number} */ var $16=(($15)|0);
 /** @type {number} */ var $17=(($16)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=($18|0)==13;
 if($19){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=$2;
 /** @type {number} */ var $23=(($22)|0);
 _luaK_setreturns($21,$23,-1);
 /** @type {number} */ var $24=$1;
 /** @type {number} */ var $25=$2;
 /** @type {number} */ var $26=(($25+24)|0);
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=(($27+8)|0);
 /** @type {number} */ var $29=$28;
 /** @type {number} */ var $30=HEAP32[(($29)>>2)];
 /** @type {number} */ var $31=$2;
 /** @type {number} */ var $32=(($31+32)|0);
 /** @type {number} */ var $33=HEAP32[(($32)>>2)];
 _luaK_setlist($24,$30,$33,-1);
 /** @type {number} */ var $34=$2;
 /** @type {number} */ var $35=(($34+32)|0);
 /** @type {number} */ var $36=HEAP32[(($35)>>2)];
 /** @type {number} */ var $37=((($36)-(1))|0);
 HEAP32[(($35)>>2)]=$37;
 label=9;break;
 case 6: 
 /** @type {number} */ var $39=$2;
 /** @type {number} */ var $40=(($39)|0);
 /** @type {number} */ var $41=(($40)|0);
 /** @type {number} */ var $42=HEAP32[(($41)>>2)];
 /** @type {number} */ var $43=($42|0)!=0;
 if($43){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $45=$1;
 /** @type {number} */ var $46=$2;
 /** @type {number} */ var $47=(($46)|0);
 _luaK_exp2nextreg($45,$47);
 label=8;break;
 case 8: 
 /** @type {number} */ var $49=$1;
 /** @type {number} */ var $50=$2;
 /** @type {number} */ var $51=(($50+24)|0);
 /** @type {number} */ var $52=HEAP32[(($51)>>2)];
 /** @type {number} */ var $53=(($52+8)|0);
 /** @type {number} */ var $54=$53;
 /** @type {number} */ var $55=HEAP32[(($54)>>2)];
 /** @type {number} */ var $56=$2;
 /** @type {number} */ var $57=(($56+32)|0);
 /** @type {number} */ var $58=HEAP32[(($57)>>2)];
 /** @type {number} */ var $59=$2;
 /** @type {number} */ var $60=(($59+36)|0);
 /** @type {number} */ var $61=HEAP32[(($60)>>2)];
 _luaK_setlist($49,$55,$58,$61);
 label=9;break;
 case 9: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $cc
 * @return {number}
 */
function _listfield($ls,$cc){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$ls;
 $2=$cc;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=(($4)|0);
 _expr($3,$5);
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+48)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=(($9+32)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 _checklimit($8,$11,2147483645,10992);
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=(($12+32)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=((($14)+(1))|0);
 HEAP32[(($13)>>2)]=$15;
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=(($16+36)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=((($18)+(1))|0);
 HEAP32[(($17)>>2)]=$19;
 STACKTOP=sp;return;
}
/**
 * @param {number} $ls
 * @param {number} $cc
 * @return {number}
 */
function _recfield($ls,$cc){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $fs;
 /** @type {number} */ var $reg;
 /** @type {number} */ var $key=sp;
 /** @type {number} */ var $val=(sp)+(24);
 /** @type {number} */ var $rkkey;
 $1=$ls;
 $2=$cc;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+48)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $fs=$5;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+48)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=(($8+48)|0);
 /** @type {number} */ var $10=HEAP8[($9)];
 /** @type {number} */ var $11=($10&255);
 $reg=$11;
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=(($12+16)|0);
 /** @type {number} */ var $14=(($13)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=($15|0)==288;
 if($16){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $18=$fs;
 /** @type {number} */ var $19=$2;
 /** @type {number} */ var $20=(($19+28)|0);
 /** @type {number} */ var $21=HEAP32[(($20)>>2)];
 _checklimit($18,$21,2147483645,10992);
 /** @type {number} */ var $22=$1;
 _checkname($22,$key);
 label=4;break;
 case 3: 
 /** @type {number} */ var $24=$1;
 _yindex($24,$key);
 label=4;break;
 case 4: 
 /** @type {number} */ var $26=$2;
 /** @type {number} */ var $27=(($26+28)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=((($28)+(1))|0);
 HEAP32[(($27)>>2)]=$29;
 /** @type {number} */ var $30=$1;
 _checknext($30,61);
 /** @type {number} */ var $31=$fs;
 /** @type {number} */ var $32=_luaK_exp2RK($31,$key);
 $rkkey=$32;
 /** @type {number} */ var $33=$1;
 _expr($33,$val);
 /** @type {number} */ var $34=$fs;
 /** @type {number} */ var $35=$2;
 /** @type {number} */ var $36=(($35+24)|0);
 /** @type {number} */ var $37=HEAP32[(($36)>>2)];
 /** @type {number} */ var $38=(($37+8)|0);
 /** @type {number} */ var $39=$38;
 /** @type {number} */ var $40=HEAP32[(($39)>>2)];
 /** @type {number} */ var $41=$rkkey;
 /** @type {number} */ var $42=$fs;
 /** @type {number} */ var $43=_luaK_exp2RK($42,$val);
 /** @type {number} */ var $44=_luaK_codeABC($34,10,$40,$41,$43);
 /** @type {number} */ var $45=$reg;
 /** @type {number} */ var $46=(($45)&255);
 /** @type {number} */ var $47=$fs;
 /** @type {number} */ var $48=(($47+48)|0);
 HEAP8[($48)]=$46;
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $g
 * @param {number} $debt
 * @return {number}
 */
function _luaE_setdebt($g,$debt){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$g;
 $2=$debt;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+12)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=((($3)-($6))|0);
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=(($8+8)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=((($10)-($7))|0);
 HEAP32[(($9)>>2)]=$11;
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=(($13+12)|0);
 HEAP32[(($14)>>2)]=$12;
 STACKTOP=sp;return;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaE_extendCI($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $ci;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaM_realloc_($2,0,0,40);
 /** @type {number} */ var $4=$3;
 $ci=$4;
 /** @type {number} */ var $5=$ci;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+16)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=(($8+12)|0);
 HEAP32[(($9)>>2)]=$5;
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=(($10+16)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=$ci;
 /** @type {number} */ var $14=(($13+8)|0);
 HEAP32[(($14)>>2)]=$12;
 /** @type {number} */ var $15=$ci;
 /** @type {number} */ var $16=(($15+12)|0);
 HEAP32[(($16)>>2)]=0;
 /** @type {number} */ var $17=$ci;
 STACKTOP=sp;return $17;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaE_freeCI($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $ci;
 /** @type {number} */ var $next;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+16)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $ci=$4;
 /** @type {number} */ var $5=$ci;
 /** @type {number} */ var $6=(($5+12)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 $next=$7;
 /** @type {number} */ var $8=$ci;
 /** @type {number} */ var $9=(($8+12)|0);
 HEAP32[(($9)>>2)]=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $11=$next;
 $ci=$11;
 /** @type {number} */ var $12=($11|0)!=0;
 if($12){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $14=$ci;
 /** @type {number} */ var $15=(($14+12)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 $next=$16;
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=$ci;
 /** @type {number} */ var $19=$18;
 /** @type {number} */ var $20=_luaM_realloc_($17,$19,40,0);
 label=2;break;
 case 4: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _lua_newthread($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $L1;
 /** @type {number} */ var $io;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+12)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 /** @type {number} */ var $5=(($4+12)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=($6|0)>0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $9=$1;
 _luaC_step($9);
 label=3;break;
 case 3: 
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=_luaC_newobj($11,8,112,0,0);
 /** @type {number} */ var $13=$12;
 $L1=$13;
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=(($14+8)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 $io=$16;
 /** @type {number} */ var $17=$L1;
 /** @type {number} */ var $18=$17;
 /** @type {number} */ var $19=$io;
 /** @type {number} */ var $20=(($19)|0);
 /** @type {number} */ var $21=$20;
 HEAP32[(($21)>>2)]=$18;
 /** @type {number} */ var $22=$io;
 /** @type {number} */ var $23=(($22+8)|0);
 HEAP32[(($23)>>2)]=72;
 /** @type {number} */ var $24=$1;
 /** @type {number} */ var $25=(($24+8)|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 /** @type {number} */ var $27=(($26+16)|0);
 HEAP32[(($25)>>2)]=$27;
 /** @type {number} */ var $28=$L1;
 /** @type {number} */ var $29=$1;
 /** @type {number} */ var $30=(($29+12)|0);
 /** @type {number} */ var $31=HEAP32[(($30)>>2)];
 _preinit_state($28,$31);
 /** @type {number} */ var $32=$1;
 /** @type {number} */ var $33=(($32+40)|0);
 /** @type {number} */ var $34=HEAP8[($33)];
 /** @type {number} */ var $35=$L1;
 /** @type {number} */ var $36=(($35+40)|0);
 HEAP8[($36)]=$34;
 /** @type {number} */ var $37=$1;
 /** @type {number} */ var $38=(($37+44)|0);
 /** @type {number} */ var $39=HEAP32[(($38)>>2)];
 /** @type {number} */ var $40=$L1;
 /** @type {number} */ var $41=(($40+44)|0);
 HEAP32[(($41)>>2)]=$39;
 /** @type {number} */ var $42=$1;
 /** @type {number} */ var $43=(($42+52)|0);
 /** @type {number} */ var $44=HEAP32[(($43)>>2)];
 /** @type {number} */ var $45=$L1;
 /** @type {number} */ var $46=(($45+52)|0);
 HEAP32[(($46)>>2)]=$44;
 /** @type {number} */ var $47=$L1;
 /** @type {number} */ var $48=(($47+44)|0);
 /** @type {number} */ var $49=HEAP32[(($48)>>2)];
 /** @type {number} */ var $50=$L1;
 /** @type {number} */ var $51=(($50+48)|0);
 HEAP32[(($51)>>2)]=$49;
 /** @type {number} */ var $52=$1;
 /** @type {number} */ var $53=$L1;
 /** @type {number} */ var $54=$1;
 _stack_init($53,$54);
 /** @type {number} */ var $55=$L1;
 STACKTOP=sp;return $55;
 }
}
/**
 * @param {number} $L
 * @param {number} $L1
 * @return {number}
 */
function _luaE_freethread($L,$L1){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $l;
 $1=$L;
 $2=$L1;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=(($4)|0);
 /** @type {number} */ var $6=$5;
 $l=$6;
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=(($8+28)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 _luaF_close($7,$10);
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=$2;
 _freestack($12);
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=$l;
 /** @type {number} */ var $15=$14;
 /** @type {number} */ var $16=_luaM_realloc_($13,$15,112,0);
 STACKTOP=sp;return;
}
/**
 * @param {number} $f
 * @param {number} $ud
 * @return {number}
 */
function _lua_newstate($f,$ud){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $i;
 /** @type {number} */ var $L;
 /** @type {number} */ var $g;
 /** @type {number} */ var $l;
 $2=$f;
 $3=$ud;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=FUNCTION_TABLE[$4]($5,0,8,400);
 /** @type {number} */ var $7=$6;
 $l=$7;
 /** @type {number} */ var $8=$l;
 /** @type {number} */ var $9=($8|0)==0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=11;break;
 case 3: 
 /** @type {number} */ var $12=$l;
 /** @type {number} */ var $13=(($12)|0);
 /** @type {number} */ var $14=(($13)|0);
 $L=$14;
 /** @type {number} */ var $15=$l;
 /** @type {number} */ var $16=(($15+112)|0);
 $g=$16;
 /** @type {number} */ var $17=$L;
 /** @type {number} */ var $18=(($17)|0);
 HEAP32[(($18)>>2)]=0;
 /** @type {number} */ var $19=$L;
 /** @type {number} */ var $20=(($19+4)|0);
 HEAP8[($20)]=8;
 /** @type {number} */ var $21=$g;
 /** @type {number} */ var $22=(($21+60)|0);
 HEAP8[($22)]=33;
 /** @type {number} */ var $23=$g;
 /** @type {number} */ var $24=(($23+60)|0);
 /** @type {number} */ var $25=HEAP8[($24)];
 /** @type {number} */ var $26=($25&255);
 /** @type {number} */ var $27=$26&3;
 /** @type {number} */ var $28=(($27)&255);
 /** @type {number} */ var $29=$L;
 /** @type {number} */ var $30=(($29+5)|0);
 HEAP8[($30)]=$28;
 /** @type {number} */ var $31=$g;
 /** @type {number} */ var $32=(($31+62)|0);
 HEAP8[($32)]=0;
 /** @type {number} */ var $33=$L;
 /** @type {number} */ var $34=$g;
 _preinit_state($33,$34);
 /** @type {number} */ var $35=$2;
 /** @type {number} */ var $36=$g;
 /** @type {number} */ var $37=(($36)|0);
 HEAP32[(($37)>>2)]=$35;
 /** @type {number} */ var $38=$3;
 /** @type {number} */ var $39=$g;
 /** @type {number} */ var $40=(($39+4)|0);
 HEAP32[(($40)>>2)]=$38;
 /** @type {number} */ var $41=$L;
 /** @type {number} */ var $42=$g;
 /** @type {number} */ var $43=(($42+172)|0);
 HEAP32[(($43)>>2)]=$41;
 /** @type {number} */ var $44=$L;
 /** @type {number} */ var $45=_makeseed($44);
 /** @type {number} */ var $46=$g;
 /** @type {number} */ var $47=(($46+56)|0);
 HEAP32[(($47)>>2)]=$45;
 /** @type {number} */ var $48=$g;
 /** @type {number} */ var $49=(($48+112)|0);
 /** @type {number} */ var $50=$g;
 /** @type {number} */ var $51=(($50+112)|0);
 /** @type {number} */ var $52=(($51+16)|0);
 /** @type {number} */ var $53=$52;
 /** @type {number} */ var $54=(($53)|0);
 HEAP32[(($54)>>2)]=$49;
 /** @type {number} */ var $55=$g;
 /** @type {number} */ var $56=(($55+112)|0);
 /** @type {number} */ var $57=$g;
 /** @type {number} */ var $58=(($57+112)|0);
 /** @type {number} */ var $59=(($58+16)|0);
 /** @type {number} */ var $60=$59;
 /** @type {number} */ var $61=(($60+4)|0);
 HEAP32[(($61)>>2)]=$56;
 /** @type {number} */ var $62=$g;
 /** @type {number} */ var $63=(($62+63)|0);
 HEAP8[($63)]=0;
 /** @type {number} */ var $64=$g;
 /** @type {number} */ var $65=(($64+20)|0);
 HEAP32[(($65)>>2)]=0;
 /** @type {number} */ var $66=$g;
 /** @type {number} */ var $67=(($66+24)|0);
 /** @type {number} */ var $68=(($67+8)|0);
 HEAP32[(($68)>>2)]=0;
 /** @type {number} */ var $69=$g;
 /** @type {number} */ var $70=(($69+24)|0);
 /** @type {number} */ var $71=(($70+4)|0);
 HEAP32[(($71)>>2)]=0;
 /** @type {number} */ var $72=$g;
 /** @type {number} */ var $73=(($72+24)|0);
 /** @type {number} */ var $74=(($73)|0);
 HEAP32[(($74)>>2)]=0;
 /** @type {number} */ var $75=$g;
 /** @type {number} */ var $76=(($75+40)|0);
 /** @type {number} */ var $77=(($76+8)|0);
 HEAP32[(($77)>>2)]=0;
 /** @type {number} */ var $78=$g;
 /** @type {number} */ var $79=(($78+144)|0);
 /** @type {number} */ var $80=(($79)|0);
 HEAP32[(($80)>>2)]=0;
 /** @type {number} */ var $81=$g;
 /** @type {number} */ var $82=(($81+144)|0);
 /** @type {number} */ var $83=(($82+8)|0);
 HEAP32[(($83)>>2)]=0;
 /** @type {number} */ var $84=$g;
 /** @type {number} */ var $85=(($84+168)|0);
 HEAP32[(($85)>>2)]=0;
 /** @type {number} */ var $86=_lua_version(0);
 /** @type {number} */ var $87=$g;
 /** @type {number} */ var $88=(($87+176)|0);
 HEAP32[(($88)>>2)]=$86;
 /** @type {number} */ var $89=$g;
 /** @type {number} */ var $90=(($89+61)|0);
 HEAP8[($90)]=5;
 /** @type {number} */ var $91=$g;
 /** @type {number} */ var $92=(($91+68)|0);
 HEAP32[(($92)>>2)]=0;
 /** @type {number} */ var $93=$g;
 /** @type {number} */ var $94=(($93+72)|0);
 HEAP32[(($94)>>2)]=0;
 /** @type {number} */ var $95=$g;
 /** @type {number} */ var $96=(($95+104)|0);
 HEAP32[(($96)>>2)]=0;
 /** @type {number} */ var $97=$g;
 /** @type {number} */ var $98=(($97+80)|0);
 HEAP32[(($98)>>2)]=0;
 /** @type {number} */ var $99=$g;
 /** @type {number} */ var $100=(($99+76)|0);
 HEAP32[(($100)>>2)]=0;
 /** @type {number} */ var $101=$g;
 /** @type {number} */ var $102=(($101+88)|0);
 HEAP32[(($102)>>2)]=0;
 /** @type {number} */ var $103=$g;
 /** @type {number} */ var $104=(($103+84)|0);
 HEAP32[(($104)>>2)]=0;
 /** @type {number} */ var $105=$g;
 /** @type {number} */ var $106=(($105+100)|0);
 HEAP32[(($106)>>2)]=0;
 /** @type {number} */ var $107=$g;
 /** @type {number} */ var $108=(($107+96)|0);
 HEAP32[(($108)>>2)]=0;
 /** @type {number} */ var $109=$g;
 /** @type {number} */ var $110=(($109+92)|0);
 HEAP32[(($110)>>2)]=0;
 /** @type {number} */ var $111=$g;
 /** @type {number} */ var $112=(($111+8)|0);
 HEAP32[(($112)>>2)]=400;
 /** @type {number} */ var $113=$g;
 /** @type {number} */ var $114=(($113+12)|0);
 HEAP32[(($114)>>2)]=0;
 /** @type {number} */ var $115=$g;
 /** @type {number} */ var $116=(($115+156)|0);
 HEAP32[(($116)>>2)]=200;
 /** @type {number} */ var $117=$g;
 /** @type {number} */ var $118=(($117+160)|0);
 HEAP32[(($118)>>2)]=200;
 /** @type {number} */ var $119=$g;
 /** @type {number} */ var $120=(($119+164)|0);
 HEAP32[(($120)>>2)]=200;
 $i=0;
 label=4;break;
 case 4: 
 /** @type {number} */ var $122=$i;
 /** @type {number} */ var $123=($122|0)<9;
 if($123){label=5;break;}else{label=7;break;}
 case 5: 
 /** @type {number} */ var $125=$i;
 /** @type {number} */ var $126=$g;
 /** @type {number} */ var $127=(($126+252)|0);
 /** @type {number} */ var $128=(($127+($125<<2))|0);
 HEAP32[(($128)>>2)]=0;
 label=6;break;
 case 6: 
 /** @type {number} */ var $130=$i;
 /** @type {number} */ var $131=((($130)+(1))|0);
 $i=$131;
 label=4;break;
 case 7: 
 /** @type {number} */ var $133=$L;
 /** @type {number} */ var $134=_luaD_rawrunprotected($133,90,0);
 /** @type {number} */ var $135=($134|0)!=0;
 if($135){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $137=$L;
 _close_state($137);
 $L=0;
 label=10;break;
 case 9: 
 /** @type {number} */ var $139=$L;
 label=10;break;
 case 10: 
 /** @type {number} */ var $141=$L;
 $1=$141;
 label=11;break;
 case 11: 
 /** @type {number} */ var $143=$1;
 STACKTOP=sp;return $143;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _lua_close($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+12)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 /** @type {number} */ var $5=(($4+172)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 $1=$6;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=$1;
 _close_state($8);
 STACKTOP=sp;return;
}
/**
 * @param {number} $L
 * @param {number} $g
 * @return {number}
 */
function _preinit_state($L,$g){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$L;
 $2=$g;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+12)|0);
 HEAP32[(($5)>>2)]=$3;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+28)|0);
 HEAP32[(($7)>>2)]=0;
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=(($8+16)|0);
 HEAP32[(($9)>>2)]=0;
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=(($10+32)|0);
 HEAP32[(($11)>>2)]=0;
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=(($12+64)|0);
 HEAP32[(($13)>>2)]=0;
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=(($14+38)|0);
 HEAP16[(($15)>>1)]=0;
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=(($16+52)|0);
 HEAP32[(($17)>>2)]=0;
 /** @type {number} */ var $18=$1;
 /** @type {number} */ var $19=(($18+40)|0);
 HEAP8[($19)]=0;
 /** @type {number} */ var $20=$1;
 /** @type {number} */ var $21=(($20+44)|0);
 HEAP32[(($21)>>2)]=0;
 /** @type {number} */ var $22=$1;
 /** @type {number} */ var $23=(($22+41)|0);
 HEAP8[($23)]=1;
 /** @type {number} */ var $24=$1;
 /** @type {number} */ var $25=(($24+44)|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 /** @type {number} */ var $27=$1;
 /** @type {number} */ var $28=(($27+48)|0);
 HEAP32[(($28)>>2)]=$26;
 /** @type {number} */ var $29=$1;
 /** @type {number} */ var $30=(($29+56)|0);
 HEAP32[(($30)>>2)]=0;
 /** @type {number} */ var $31=$1;
 /** @type {number} */ var $32=(($31+36)|0);
 HEAP16[(($32)>>1)]=1;
 /** @type {number} */ var $33=$1;
 /** @type {number} */ var $34=(($33+6)|0);
 HEAP8[($34)]=0;
 /** @type {number} */ var $35=$1;
 /** @type {number} */ var $36=(($35+68)|0);
 HEAP32[(($36)>>2)]=0;
 STACKTOP=sp;return;
}
/**
 * @param {number} $L1
 * @param {number} $L
 * @return {number}
 */
function _stack_init($L1,$L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $i;
 /** @type {number} */ var $ci;
 $1=$L1;
 $2=$L;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=_luaM_realloc_($3,0,0,640);
 /** @type {number} */ var $5=$4;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+28)|0);
 HEAP32[(($7)>>2)]=$5;
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=(($8+32)|0);
 HEAP32[(($9)>>2)]=40;
 $i=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $11=$i;
 /** @type {number} */ var $12=($11|0)<40;
 if($12){label=3;break;}else{label=5;break;}
 case 3: 
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=(($14+28)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=$i;
 /** @type {number} */ var $18=(($16+($17<<4))|0);
 /** @type {number} */ var $19=(($18+8)|0);
 HEAP32[(($19)>>2)]=0;
 label=4;break;
 case 4: 
 /** @type {number} */ var $21=$i;
 /** @type {number} */ var $22=((($21)+(1))|0);
 $i=$22;
 label=2;break;
 case 5: 
 /** @type {number} */ var $24=$1;
 /** @type {number} */ var $25=(($24+28)|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 /** @type {number} */ var $27=$1;
 /** @type {number} */ var $28=(($27+8)|0);
 HEAP32[(($28)>>2)]=$26;
 /** @type {number} */ var $29=$1;
 /** @type {number} */ var $30=(($29+28)|0);
 /** @type {number} */ var $31=HEAP32[(($30)>>2)];
 /** @type {number} */ var $32=$1;
 /** @type {number} */ var $33=(($32+32)|0);
 /** @type {number} */ var $34=HEAP32[(($33)>>2)];
 /** @type {number} */ var $35=(($31+($34<<4))|0);
 /** @type {number} */ var $36=((($35)-(80))|0);
 /** @type {number} */ var $37=$1;
 /** @type {number} */ var $38=(($37+24)|0);
 HEAP32[(($38)>>2)]=$36;
 /** @type {number} */ var $39=$1;
 /** @type {number} */ var $40=(($39+72)|0);
 $ci=$40;
 /** @type {number} */ var $41=$ci;
 /** @type {number} */ var $42=(($41+8)|0);
 HEAP32[(($42)>>2)]=0;
 /** @type {number} */ var $43=$ci;
 /** @type {number} */ var $44=(($43+12)|0);
 HEAP32[(($44)>>2)]=0;
 /** @type {number} */ var $45=$ci;
 /** @type {number} */ var $46=(($45+18)|0);
 HEAP8[($46)]=0;
 /** @type {number} */ var $47=$1;
 /** @type {number} */ var $48=(($47+8)|0);
 /** @type {number} */ var $49=HEAP32[(($48)>>2)];
 /** @type {number} */ var $50=$ci;
 /** @type {number} */ var $51=(($50)|0);
 HEAP32[(($51)>>2)]=$49;
 /** @type {number} */ var $52=$1;
 /** @type {number} */ var $53=(($52+8)|0);
 /** @type {number} */ var $54=HEAP32[(($53)>>2)];
 /** @type {number} */ var $55=(($54+16)|0);
 HEAP32[(($53)>>2)]=$55;
 /** @type {number} */ var $56=(($54+8)|0);
 HEAP32[(($56)>>2)]=0;
 /** @type {number} */ var $57=$1;
 /** @type {number} */ var $58=(($57+8)|0);
 /** @type {number} */ var $59=HEAP32[(($58)>>2)];
 /** @type {number} */ var $60=(($59+320)|0);
 /** @type {number} */ var $61=$ci;
 /** @type {number} */ var $62=(($61+4)|0);
 HEAP32[(($62)>>2)]=$60;
 /** @type {number} */ var $63=$ci;
 /** @type {number} */ var $64=$1;
 /** @type {number} */ var $65=(($64+16)|0);
 HEAP32[(($65)>>2)]=$63;
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _freestack($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+28)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 /** @type {number} */ var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 label=4;break;
 case 3: 
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=(($8+72)|0);
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=(($10+16)|0);
 HEAP32[(($11)>>2)]=$9;
 /** @type {number} */ var $12=$1;
 _luaE_freeCI($12);
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=(($14+28)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=$16;
 /** @type {number} */ var $18=$1;
 /** @type {number} */ var $19=(($18+32)|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=($20<<4);
 /** @type {number} */ var $22=_luaM_realloc_($13,$17,$21,0);
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _makeseed($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0;
 /** @type {number} */ var $1;
 /** @type {number} */ var $buff=sp;
 /** @type {number} */ var $h=(sp)+(16);
 /** @type {number} */ var $p;
 /** @type {number} */ var $t=(sp)+(24);
 /** @type {number} */ var $t1=(sp)+(32);
 /** @type {number} */ var $t2=(sp)+(40);
 /** @type {number} */ var $t3=(sp)+(48);
 $1=$L;
 /** @type {number} */ var $2=_time(0);
 HEAP32[(($h)>>2)]=$2;
 $p=0;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$3;
 HEAP32[(($t)>>2)]=$4;
 /** @type {number} */ var $5=(($buff)|0);
 /** @type {number} */ var $6=$p;
 /** @type {number} */ var $7=(($5+$6)|0);
 /** @type {number} */ var $8=$t;
 HEAP8[($7)]=HEAP8[($8)];HEAP8[((($7)+(1))|0)]=HEAP8[((($8)+(1))|0)];HEAP8[((($7)+(2))|0)]=HEAP8[((($8)+(2))|0)];HEAP8[((($7)+(3))|0)]=HEAP8[((($8)+(3))|0)];
 /** @type {number} */ var $9=$p;
 /** @type {number} */ var $10=((($9)+(4))|0);
 $p=$10;
 /** @type {number} */ var $11=$h;
 HEAP32[(($t1)>>2)]=$11;
 /** @type {number} */ var $12=(($buff)|0);
 /** @type {number} */ var $13=$p;
 /** @type {number} */ var $14=(($12+$13)|0);
 /** @type {number} */ var $15=$t1;
 HEAP8[($14)]=HEAP8[($15)];HEAP8[((($14)+(1))|0)]=HEAP8[((($15)+(1))|0)];HEAP8[((($14)+(2))|0)]=HEAP8[((($15)+(2))|0)];HEAP8[((($14)+(3))|0)]=HEAP8[((($15)+(3))|0)];
 /** @type {number} */ var $16=$p;
 /** @type {number} */ var $17=((($16)+(4))|0);
 $p=$17;
 HEAP32[(($t2)>>2)]=1280;
 /** @type {number} */ var $18=(($buff)|0);
 /** @type {number} */ var $19=$p;
 /** @type {number} */ var $20=(($18+$19)|0);
 /** @type {number} */ var $21=$t2;
 HEAP8[($20)]=HEAP8[($21)];HEAP8[((($20)+(1))|0)]=HEAP8[((($21)+(1))|0)];HEAP8[((($20)+(2))|0)]=HEAP8[((($21)+(2))|0)];HEAP8[((($20)+(3))|0)]=HEAP8[((($21)+(3))|0)];
 /** @type {number} */ var $22=$p;
 /** @type {number} */ var $23=((($22)+(4))|0);
 $p=$23;
 HEAP32[(($t3)>>2)]=(222);
 /** @type {number} */ var $24=(($buff)|0);
 /** @type {number} */ var $25=$p;
 /** @type {number} */ var $26=(($24+$25)|0);
 /** @type {number} */ var $27=$t3;
 HEAP8[($26)]=HEAP8[($27)];HEAP8[((($26)+(1))|0)]=HEAP8[((($27)+(1))|0)];HEAP8[((($26)+(2))|0)]=HEAP8[((($27)+(2))|0)];HEAP8[((($26)+(3))|0)]=HEAP8[((($27)+(3))|0)];
 /** @type {number} */ var $28=$p;
 /** @type {number} */ var $29=((($28)+(4))|0);
 $p=$29;
 /** @type {number} */ var $30=(($buff)|0);
 /** @type {number} */ var $31=$p;
 /** @type {number} */ var $32=HEAP32[(($h)>>2)];
 /** @type {number} */ var $33=_luaS_hash($30,$31,$32);
 STACKTOP=sp;return $33;
}
/**
 * @param {number} $L
 * @param {number} $ud
 * @return {number}
 */
function _f_luaopen($L,$ud){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $g;
 $1=$L;
 $2=$ud;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+12)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $g=$5;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=$1;
 _stack_init($7,$8);
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=$g;
 _init_registry($9,$10);
 /** @type {number} */ var $11=$1;
 _luaS_resize($11,32);
 /** @type {number} */ var $12=$1;
 _luaT_init($12);
 /** @type {number} */ var $13=$1;
 _luaX_init($13);
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=_luaS_newlstr($14,9168,17);
 /** @type {number} */ var $16=$g;
 /** @type {number} */ var $17=(($16+180)|0);
 HEAP32[(($17)>>2)]=$15;
 /** @type {number} */ var $18=$g;
 /** @type {number} */ var $19=(($18+180)|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=$20;
 /** @type {number} */ var $22=(($21+5)|0);
 /** @type {number} */ var $23=HEAP8[($22)];
 /** @type {number} */ var $24=($23&255);
 /** @type {number} */ var $25=$24|32;
 /** @type {number} */ var $26=(($25)&255);
 HEAP8[($22)]=$26;
 /** @type {number} */ var $27=$g;
 /** @type {number} */ var $28=(($27+63)|0);
 HEAP8[($28)]=1;
 STACKTOP=sp;return;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _close_state($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $g;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+12)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $g=$4;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+28)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 _luaF_close($5,$8);
 /** @type {number} */ var $9=$1;
 _luaC_freeallobjects($9);
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=(($11+12)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=(($13+24)|0);
 /** @type {number} */ var $15=(($14)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=$16;
 /** @type {number} */ var $18=$1;
 /** @type {number} */ var $19=(($18+12)|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=(($20+24)|0);
 /** @type {number} */ var $22=(($21+8)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 /** @type {number} */ var $24=($23<<2);
 /** @type {number} */ var $25=_luaM_realloc_($10,$17,$24,0);
 /** @type {number} */ var $26=$1;
 /** @type {number} */ var $27=$g;
 /** @type {number} */ var $28=(($27+144)|0);
 /** @type {number} */ var $29=(($28)|0);
 /** @type {number} */ var $30=HEAP32[(($29)>>2)];
 /** @type {number} */ var $31=$g;
 /** @type {number} */ var $32=(($31+144)|0);
 /** @type {number} */ var $33=(($32+8)|0);
 /** @type {number} */ var $34=HEAP32[(($33)>>2)];
 /** @type {number} */ var $35=$34;
 /** @type {number} */ var $36=_luaM_realloc_($26,$30,$35,0);
 /** @type {number} */ var $37=$g;
 /** @type {number} */ var $38=(($37+144)|0);
 /** @type {number} */ var $39=(($38)|0);
 HEAP32[(($39)>>2)]=$36;
 /** @type {number} */ var $40=$g;
 /** @type {number} */ var $41=(($40+144)|0);
 /** @type {number} */ var $42=(($41+8)|0);
 HEAP32[(($42)>>2)]=0;
 /** @type {number} */ var $43=$1;
 _freestack($43);
 /** @type {number} */ var $44=$g;
 /** @type {number} */ var $45=(($44)|0);
 /** @type {number} */ var $46=HEAP32[(($45)>>2)];
 /** @type {number} */ var $47=$g;
 /** @type {number} */ var $48=(($47+4)|0);
 /** @type {number} */ var $49=HEAP32[(($48)>>2)];
 /** @type {number} */ var $50=$1;
 /** @type {number} */ var $51=$50;
 /** @type {number} */ var $52=(($51)|0);
 /** @type {number} */ var $53=$52;
 /** @type {number} */ var $54=$53;
 /** @type {number} */ var $55=FUNCTION_TABLE[$46]($49,$54,400,0);
 STACKTOP=sp;return;
}
/**
 * @param {number} $L
 * @param {number} $g
 * @return {number}
 */
function _init_registry($L,$g){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $mt=sp;
 /** @type {number} */ var $registry;
 /** @type {number} */ var $io;
 /** @type {number} */ var $io1;
 /** @type {number} */ var $io2;
 $1=$L;
 $2=$g;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaH_new($3);
 $registry=$4;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=(($5+40)|0);
 $io=$6;
 /** @type {number} */ var $7=$registry;
 /** @type {number} */ var $8=$7;
 /** @type {number} */ var $9=$io;
 /** @type {number} */ var $10=(($9)|0);
 /** @type {number} */ var $11=$10;
 HEAP32[(($11)>>2)]=$8;
 /** @type {number} */ var $12=$io;
 /** @type {number} */ var $13=(($12+8)|0);
 HEAP32[(($13)>>2)]=69;
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=$registry;
 _luaH_resize($14,$15,2,0);
 $io1=$mt;
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=$16;
 /** @type {number} */ var $18=$io1;
 /** @type {number} */ var $19=(($18)|0);
 /** @type {number} */ var $20=$19;
 HEAP32[(($20)>>2)]=$17;
 /** @type {number} */ var $21=$io1;
 /** @type {number} */ var $22=(($21+8)|0);
 HEAP32[(($22)>>2)]=72;
 /** @type {number} */ var $23=$1;
 /** @type {number} */ var $24=$registry;
 _luaH_setint($23,$24,1,$mt);
 $io2=$mt;
 /** @type {number} */ var $25=$1;
 /** @type {number} */ var $26=_luaH_new($25);
 /** @type {number} */ var $27=$26;
 /** @type {number} */ var $28=$io2;
 /** @type {number} */ var $29=(($28)|0);
 /** @type {number} */ var $30=$29;
 HEAP32[(($30)>>2)]=$27;
 /** @type {number} */ var $31=$io2;
 /** @type {number} */ var $32=(($31+8)|0);
 HEAP32[(($32)>>2)]=69;
 /** @type {number} */ var $33=$1;
 /** @type {number} */ var $34=$registry;
 _luaH_setint($33,$34,2,$mt);
 STACKTOP=sp;return;
}
/**
 * @param {number} $a
 * @param {number} $b
 * @return {number}
 */
function _luaS_eqlngstr($a,$b){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $len;
 $1=$a;
 $2=$b;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=(($4+12)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 $len=$6;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=($7|0)==($8|0);
 if($9){var $30=1;label=5;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $11=$len;
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=$12;
 /** @type {number} */ var $14=(($13+12)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=($11|0)==($15|0);
 if($16){label=3;break;}else{var $28=0;label=4;break;}
 case 3: 
 /** @type {number} */ var $18=$1;
 /** @type {number} */ var $19=(($18+16)|0);
 /** @type {number} */ var $20=$19;
 /** @type {number} */ var $21=$2;
 /** @type {number} */ var $22=(($21+16)|0);
 /** @type {number} */ var $23=$22;
 /** @type {number} */ var $24=$len;
 /** @type {number} */ var $25=_memcmp($20,$23,$24);
 /** @type {number} */ var $26=($25|0)==0;
 var $28=$26;label=4;break;
 case 4: 
 var $28;
 var $30=$28;label=5;break;
 case 5: 
 var $30;
 /** @type {number} */ var $31=($30&1);
 STACKTOP=sp;return $31;
 }
}
/**
 * @param {number} $a
 * @param {number} $b
 * @return {number}
 */
function _luaS_eqstr($a,$b){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$a;
 $2=$b;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=(($4+4)|0);
 /** @type {number} */ var $6=HEAP8[($5)];
 /** @type {number} */ var $7=($6&255);
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=$8;
 /** @type {number} */ var $10=(($9+4)|0);
 /** @type {number} */ var $11=HEAP8[($10)];
 /** @type {number} */ var $12=($11&255);
 /** @type {number} */ var $13=($7|0)==($12|0);
 if($13){label=2;break;}else{var $34=0;label=6;break;}
 case 2: 
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=$15;
 /** @type {number} */ var $17=(($16+4)|0);
 /** @type {number} */ var $18=HEAP8[($17)];
 /** @type {number} */ var $19=($18&255);
 /** @type {number} */ var $20=($19|0)==4;
 if($20){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $22=$1;
 /** @type {number} */ var $23=$2;
 /** @type {number} */ var $24=($22|0)==($23|0);
 /** @type {number} */ var $25=($24&1);
 var $31=$25;label=5;break;
 case 4: 
 /** @type {number} */ var $27=$1;
 /** @type {number} */ var $28=$2;
 /** @type {number} */ var $29=_luaS_eqlngstr($27,$28);
 var $31=$29;label=5;break;
 case 5: 
 var $31;
 /** @type {number} */ var $32=($31|0)!=0;
 var $34=$32;label=6;break;
 case 6: 
 var $34;
 /** @type {number} */ var $35=($34&1);
 STACKTOP=sp;return $35;
 }
}
/**
 * @param {number} $str
 * @param {number} $l
 * @param {number} $seed
 * @return {number}
 */
function _luaS_hash($str,$l,$seed){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $h;
 /** @type {number} */ var $l1;
 /** @type {number} */ var $step;
 $1=$str;
 $2=$l;
 $3=$seed;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$4^$5;
 $h=$6;
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=$7>>>5;
 /** @type {number} */ var $9=((($8)+(1))|0);
 $step=$9;
 /** @type {number} */ var $10=$2;
 $l1=$10;
 label=2;break;
 case 2: 
 /** @type {number} */ var $12=$l1;
 /** @type {number} */ var $13=$step;
 /** @type {number} */ var $14=($12>>>0)>=($13>>>0);
 if($14){label=3;break;}else{label=5;break;}
 case 3: 
 /** @type {number} */ var $16=$h;
 /** @type {number} */ var $17=$h;
 /** @type {number} */ var $18=$17<<5;
 /** @type {number} */ var $19=$h;
 /** @type {number} */ var $20=$19>>>2;
 /** @type {number} */ var $21=((($18)+($20))|0);
 /** @type {number} */ var $22=$l1;
 /** @type {number} */ var $23=((($22)-(1))|0);
 /** @type {number} */ var $24=$1;
 /** @type {number} */ var $25=(($24+$23)|0);
 /** @type {number} */ var $26=HEAP8[($25)];
 /** @type {number} */ var $27=($26&255);
 /** @type {number} */ var $28=((($21)+($27))|0);
 /** @type {number} */ var $29=$16^$28;
 $h=$29;
 label=4;break;
 case 4: 
 /** @type {number} */ var $31=$step;
 /** @type {number} */ var $32=$l1;
 /** @type {number} */ var $33=((($32)-($31))|0);
 $l1=$33;
 label=2;break;
 case 5: 
 /** @type {number} */ var $35=$h;
 STACKTOP=sp;return $35;
 }
}
/**
 * @param {number} $L
 * @param {number} $newsize
 * @return {number}
 */
function _luaS_resize($L,$newsize){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $i;
 /** @type {number} */ var $tb;
 /** @type {number} */ var $p;
 /** @type {number} */ var $next;
 /** @type {number} */ var $h;
 $1=$L;
 $2=$newsize;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+12)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=(($5+24)|0);
 $tb=$6;
 /** @type {number} */ var $7=$1;
 _luaC_runtilstate($7,-5);
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=$tb;
 /** @type {number} */ var $10=(($9+8)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=($8|0)>($11|0);
 if($12){label=2;break;}else{label=10;break;}
 case 2: 
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=((($14)+(1))|0);
 /** @type {number} */ var $16=($15>>>0)>1073741823;
 if($16){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $18=$1;
 _luaM_toobig($18);
 label=5;break;
 case 4: 
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=$tb;
 /** @type {number} */ var $23=(($22)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=$24;
 /** @type {number} */ var $26=$tb;
 /** @type {number} */ var $27=(($26+8)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=($28<<2);
 /** @type {number} */ var $30=$2;
 /** @type {number} */ var $31=($30<<2);
 /** @type {number} */ var $32=_luaM_realloc_($21,$25,$29,$31);
 var $34=$32;label=5;break;
 case 5: 
 var $34;
 /** @type {number} */ var $35=$34;
 /** @type {number} */ var $36=$tb;
 /** @type {number} */ var $37=(($36)|0);
 HEAP32[(($37)>>2)]=$35;
 /** @type {number} */ var $38=$tb;
 /** @type {number} */ var $39=(($38+8)|0);
 /** @type {number} */ var $40=HEAP32[(($39)>>2)];
 $i=$40;
 label=6;break;
 case 6: 
 /** @type {number} */ var $42=$i;
 /** @type {number} */ var $43=$2;
 /** @type {number} */ var $44=($42|0)<($43|0);
 if($44){label=7;break;}else{label=9;break;}
 case 7: 
 /** @type {number} */ var $46=$i;
 /** @type {number} */ var $47=$tb;
 /** @type {number} */ var $48=(($47)|0);
 /** @type {number} */ var $49=HEAP32[(($48)>>2)];
 /** @type {number} */ var $50=(($49+($46<<2))|0);
 HEAP32[(($50)>>2)]=0;
 label=8;break;
 case 8: 
 /** @type {number} */ var $52=$i;
 /** @type {number} */ var $53=((($52)+(1))|0);
 $i=$53;
 label=6;break;
 case 9: 
 label=10;break;
 case 10: 
 $i=0;
 label=11;break;
 case 11: 
 /** @type {number} */ var $57=$i;
 /** @type {number} */ var $58=$tb;
 /** @type {number} */ var $59=(($58+8)|0);
 /** @type {number} */ var $60=HEAP32[(($59)>>2)];
 /** @type {number} */ var $61=($57|0)<($60|0);
 if($61){label=12;break;}else{label=17;break;}
 case 12: 
 /** @type {number} */ var $63=$i;
 /** @type {number} */ var $64=$tb;
 /** @type {number} */ var $65=(($64)|0);
 /** @type {number} */ var $66=HEAP32[(($65)>>2)];
 /** @type {number} */ var $67=(($66+($63<<2))|0);
 /** @type {number} */ var $68=HEAP32[(($67)>>2)];
 $p=$68;
 /** @type {number} */ var $69=$i;
 /** @type {number} */ var $70=$tb;
 /** @type {number} */ var $71=(($70)|0);
 /** @type {number} */ var $72=HEAP32[(($71)>>2)];
 /** @type {number} */ var $73=(($72+($69<<2))|0);
 HEAP32[(($73)>>2)]=0;
 label=13;break;
 case 13: 
 /** @type {number} */ var $75=$p;
 /** @type {number} */ var $76=($75|0)!=0;
 if($76){label=14;break;}else{label=15;break;}
 case 14: 
 /** @type {number} */ var $78=$p;
 /** @type {number} */ var $79=$78;
 /** @type {number} */ var $80=(($79)|0);
 /** @type {number} */ var $81=HEAP32[(($80)>>2)];
 $next=$81;
 /** @type {number} */ var $82=$p;
 /** @type {number} */ var $83=$82;
 /** @type {number} */ var $84=$83;
 /** @type {number} */ var $85=(($84+8)|0);
 /** @type {number} */ var $86=HEAP32[(($85)>>2)];
 /** @type {number} */ var $87=$2;
 /** @type {number} */ var $88=((($87)-(1))|0);
 /** @type {number} */ var $89=$86&$88;
 $h=$89;
 /** @type {number} */ var $90=$h;
 /** @type {number} */ var $91=$tb;
 /** @type {number} */ var $92=(($91)|0);
 /** @type {number} */ var $93=HEAP32[(($92)>>2)];
 /** @type {number} */ var $94=(($93+($90<<2))|0);
 /** @type {number} */ var $95=HEAP32[(($94)>>2)];
 /** @type {number} */ var $96=$p;
 /** @type {number} */ var $97=$96;
 /** @type {number} */ var $98=(($97)|0);
 HEAP32[(($98)>>2)]=$95;
 /** @type {number} */ var $99=$p;
 /** @type {number} */ var $100=$h;
 /** @type {number} */ var $101=$tb;
 /** @type {number} */ var $102=(($101)|0);
 /** @type {number} */ var $103=HEAP32[(($102)>>2)];
 /** @type {number} */ var $104=(($103+($100<<2))|0);
 HEAP32[(($104)>>2)]=$99;
 /** @type {number} */ var $105=$p;
 /** @type {number} */ var $106=$105;
 /** @type {number} */ var $107=(($106+5)|0);
 /** @type {number} */ var $108=HEAP8[($107)];
 /** @type {number} */ var $109=($108&255);
 /** @type {number} */ var $110=$109&191;
 /** @type {number} */ var $111=(($110)&255);
 HEAP8[($107)]=$111;
 /** @type {number} */ var $112=$next;
 $p=$112;
 label=13;break;
 case 15: 
 label=16;break;
 case 16: 
 /** @type {number} */ var $115=$i;
 /** @type {number} */ var $116=((($115)+(1))|0);
 $i=$116;
 label=11;break;
 case 17: 
 /** @type {number} */ var $118=$2;
 /** @type {number} */ var $119=$tb;
 /** @type {number} */ var $120=(($119+8)|0);
 /** @type {number} */ var $121=HEAP32[(($120)>>2)];
 /** @type {number} */ var $122=($118|0)<($121|0);
 if($122){label=18;break;}else{label=22;break;}
 case 18: 
 /** @type {number} */ var $124=$2;
 /** @type {number} */ var $125=((($124)+(1))|0);
 /** @type {number} */ var $126=($125>>>0)>1073741823;
 if($126){label=19;break;}else{label=20;break;}
 case 19: 
 /** @type {number} */ var $128=$1;
 _luaM_toobig($128);
 label=21;break;
 case 20: 
 /** @type {number} */ var $131=$1;
 /** @type {number} */ var $132=$tb;
 /** @type {number} */ var $133=(($132)|0);
 /** @type {number} */ var $134=HEAP32[(($133)>>2)];
 /** @type {number} */ var $135=$134;
 /** @type {number} */ var $136=$tb;
 /** @type {number} */ var $137=(($136+8)|0);
 /** @type {number} */ var $138=HEAP32[(($137)>>2)];
 /** @type {number} */ var $139=($138<<2);
 /** @type {number} */ var $140=$2;
 /** @type {number} */ var $141=($140<<2);
 /** @type {number} */ var $142=_luaM_realloc_($131,$135,$139,$141);
 var $144=$142;label=21;break;
 case 21: 
 var $144;
 /** @type {number} */ var $145=$144;
 /** @type {number} */ var $146=$tb;
 /** @type {number} */ var $147=(($146)|0);
 HEAP32[(($147)>>2)]=$145;
 label=22;break;
 case 22: 
 /** @type {number} */ var $149=$2;
 /** @type {number} */ var $150=$tb;
 /** @type {number} */ var $151=(($150+8)|0);
 HEAP32[(($151)>>2)]=$149;
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $str
 * @param {number} $l
 * @return {number}
 */
function _luaS_newlstr($L,$str,$l){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 $2=$L;
 $3=$str;
 $4=$l;
 /** @type {number} */ var $5=$4;
 /** @type {number} */ var $6=($5>>>0)<=40;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=$3;
 /** @type {number} */ var $10=$4;
 /** @type {number} */ var $11=_internshrstr($8,$9,$10);
 $1=$11;
 label=6;break;
 case 3: 
 /** @type {number} */ var $13=$4;
 /** @type {number} */ var $14=((($13)+(1))|0);
 /** @type {number} */ var $15=($14>>>0)>4294967277;
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $17=$2;
 _luaM_toobig($17);
 case 5: 
 /** @type {number} */ var $19=$2;
 /** @type {number} */ var $20=$3;
 /** @type {number} */ var $21=$4;
 /** @type {number} */ var $22=$2;
 /** @type {number} */ var $23=(($22+12)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=(($24+56)|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 /** @type {number} */ var $27=_createstrobj($19,$20,$21,20,$26,0);
 $1=$27;
 label=6;break;
 case 6: 
 /** @type {number} */ var $29=$1;
 STACKTOP=sp;return $29;
 }
}
/**
 * @param {number} $L
 * @param {number} $str
 * @return {number}
 */
function _luaS_new($L,$str){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$L;
 $2=$str;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=_strlen($5);
 /** @type {number} */ var $7=_luaS_newlstr($3,$4,$6);
 STACKTOP=sp;return $7;
}
/**
 * @param {number} $L
 * @param {number} $s
 * @param {number} $e
 * @return {number}
 */
function _luaS_newudata($L,$s,$e){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $u;
 $1=$L;
 $2=$s;
 $3=$e;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=($4>>>0)>4294967269;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $7=$1;
 _luaM_toobig($7);
 case 3: 
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=((($10)+(24))|0);
 /** @type {number} */ var $12=_luaC_newobj($9,7,$11,0,0);
 /** @type {number} */ var $13=$12;
 $u=$13;
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=$u;
 /** @type {number} */ var $16=$15;
 /** @type {number} */ var $17=(($16+16)|0);
 HEAP32[(($17)>>2)]=$14;
 /** @type {number} */ var $18=$u;
 /** @type {number} */ var $19=$18;
 /** @type {number} */ var $20=(($19+8)|0);
 HEAP32[(($20)>>2)]=0;
 /** @type {number} */ var $21=$3;
 /** @type {number} */ var $22=$u;
 /** @type {number} */ var $23=$22;
 /** @type {number} */ var $24=(($23+12)|0);
 HEAP32[(($24)>>2)]=$21;
 /** @type {number} */ var $25=$u;
 STACKTOP=sp;return $25;
 }
}
/**
 * @param {number} $L
 * @param {number} $str
 * @param {number} $l
 * @return {number}
 */
function _internshrstr($L,$str,$l){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $o;
 /** @type {number} */ var $g;
 /** @type {number} */ var $h;
 /** @type {number} */ var $ts;
 $2=$L;
 $3=$str;
 $4=$l;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=(($5+12)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 $g=$7;
 /** @type {number} */ var $8=$3;
 /** @type {number} */ var $9=$4;
 /** @type {number} */ var $10=$g;
 /** @type {number} */ var $11=(($10+56)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=_luaS_hash($8,$9,$12);
 $h=$13;
 /** @type {number} */ var $14=$h;
 /** @type {number} */ var $15=$g;
 /** @type {number} */ var $16=(($15+24)|0);
 /** @type {number} */ var $17=(($16+8)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=((($18)-(1))|0);
 /** @type {number} */ var $20=$14&$19;
 /** @type {number} */ var $21=$g;
 /** @type {number} */ var $22=(($21+24)|0);
 /** @type {number} */ var $23=(($22)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=(($24+($20<<2))|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 $o=$26;
 label=2;break;
 case 2: 
 /** @type {number} */ var $28=$o;
 /** @type {number} */ var $29=($28|0)!=0;
 if($29){label=3;break;}else{label=11;break;}
 case 3: 
 /** @type {number} */ var $31=$o;
 /** @type {number} */ var $32=$31;
 $ts=$32;
 /** @type {number} */ var $33=$h;
 /** @type {number} */ var $34=$ts;
 /** @type {number} */ var $35=$34;
 /** @type {number} */ var $36=(($35+8)|0);
 /** @type {number} */ var $37=HEAP32[(($36)>>2)];
 /** @type {number} */ var $38=($33|0)==($37|0);
 if($38){label=4;break;}else{label=9;break;}
 case 4: 
 /** @type {number} */ var $40=$ts;
 /** @type {number} */ var $41=$40;
 /** @type {number} */ var $42=(($41+12)|0);
 /** @type {number} */ var $43=HEAP32[(($42)>>2)];
 /** @type {number} */ var $44=$4;
 /** @type {number} */ var $45=($43|0)==($44|0);
 if($45){label=5;break;}else{label=9;break;}
 case 5: 
 /** @type {number} */ var $47=$3;
 /** @type {number} */ var $48=$ts;
 /** @type {number} */ var $49=(($48+16)|0);
 /** @type {number} */ var $50=$49;
 /** @type {number} */ var $51=$4;
 /** @type {number} */ var $52=$51;
 /** @type {number} */ var $53=_memcmp($47,$50,$52);
 /** @type {number} */ var $54=($53|0)==0;
 if($54){label=6;break;}else{label=9;break;}
 case 6: 
 /** @type {number} */ var $56=$o;
 /** @type {number} */ var $57=$56;
 /** @type {number} */ var $58=(($57+5)|0);
 /** @type {number} */ var $59=HEAP8[($58)];
 /** @type {number} */ var $60=($59&255);
 /** @type {number} */ var $61=$60^3;
 /** @type {number} */ var $62=$2;
 /** @type {number} */ var $63=(($62+12)|0);
 /** @type {number} */ var $64=HEAP32[(($63)>>2)];
 /** @type {number} */ var $65=(($64+60)|0);
 /** @type {number} */ var $66=HEAP8[($65)];
 /** @type {number} */ var $67=($66&255);
 /** @type {number} */ var $68=$67^3;
 /** @type {number} */ var $69=$61&$68;
 /** @type {number} */ var $70=($69|0)!=0;
 if($70){label=8;break;}else{label=7;break;}
 case 7: 
 /** @type {number} */ var $72=$o;
 /** @type {number} */ var $73=$72;
 /** @type {number} */ var $74=(($73+5)|0);
 /** @type {number} */ var $75=HEAP8[($74)];
 /** @type {number} */ var $76=($75&255);
 /** @type {number} */ var $77=$76^3;
 /** @type {number} */ var $78=(($77)&255);
 HEAP8[($74)]=$78;
 label=8;break;
 case 8: 
 /** @type {number} */ var $80=$ts;
 $1=$80;
 label=12;break;
 case 9: 
 label=10;break;
 case 10: 
 /** @type {number} */ var $83=$o;
 /** @type {number} */ var $84=$83;
 /** @type {number} */ var $85=(($84)|0);
 /** @type {number} */ var $86=HEAP32[(($85)>>2)];
 $o=$86;
 label=2;break;
 case 11: 
 /** @type {number} */ var $88=$2;
 /** @type {number} */ var $89=$3;
 /** @type {number} */ var $90=$4;
 /** @type {number} */ var $91=$h;
 /** @type {number} */ var $92=_newshrstr($88,$89,$90,$91);
 $1=$92;
 label=12;break;
 case 12: 
 /** @type {number} */ var $94=$1;
 STACKTOP=sp;return $94;
 }
}
/**
 * @param {number} $L
 * @param {number} $str
 * @param {number} $l
 * @param {number} $tag
 * @param {number} $h
 * @param {number} $list
 * @return {number}
 */
function _createstrobj($L,$str,$l,$tag,$h,$list){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 /** @type {number} */ var $6;
 /** @type {number} */ var $ts;
 /** @type {number} */ var $totalsize;
 $1=$L;
 $2=$str;
 $3=$l;
 $4=$tag;
 $5=$h;
 $6=$list;
 /** @type {number} */ var $7=$3;
 /** @type {number} */ var $8=((($7)+(1))|0);
 /** @type {number} */ var $9=$8;
 /** @type {number} */ var $10=((($9)+(16))|0);
 $totalsize=$10;
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=$4;
 /** @type {number} */ var $13=$totalsize;
 /** @type {number} */ var $14=$6;
 /** @type {number} */ var $15=_luaC_newobj($11,$12,$13,$14,0);
 /** @type {number} */ var $16=$15;
 $ts=$16;
 /** @type {number} */ var $17=$3;
 /** @type {number} */ var $18=$ts;
 /** @type {number} */ var $19=$18;
 /** @type {number} */ var $20=(($19+12)|0);
 HEAP32[(($20)>>2)]=$17;
 /** @type {number} */ var $21=$5;
 /** @type {number} */ var $22=$ts;
 /** @type {number} */ var $23=$22;
 /** @type {number} */ var $24=(($23+8)|0);
 HEAP32[(($24)>>2)]=$21;
 /** @type {number} */ var $25=$ts;
 /** @type {number} */ var $26=$25;
 /** @type {number} */ var $27=(($26+6)|0);
 HEAP8[($27)]=0;
 /** @type {number} */ var $28=$ts;
 /** @type {number} */ var $29=(($28+16)|0);
 /** @type {number} */ var $30=$29;
 /** @type {number} */ var $31=$2;
 /** @type {number} */ var $32=$3;
 /** @type {number} */ var $33=$32;
 (_memcpy($30, $31, $33)|0);
 /** @type {number} */ var $34=$3;
 /** @type {number} */ var $35=$ts;
 /** @type {number} */ var $36=(($35+16)|0);
 /** @type {number} */ var $37=$36;
 /** @type {number} */ var $38=(($37+$34)|0);
 HEAP8[($38)]=0;
 /** @type {number} */ var $39=$ts;
 STACKTOP=sp;return $39;
}
/**
 * @param {number} $L
 * @param {number} $str
 * @param {number} $l
 * @param {number} $h
 * @return {number}
 */
function _newshrstr($L,$str,$l,$h){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $list;
 /** @type {number} */ var $tb;
 /** @type {number} */ var $s;
 $1=$L;
 $2=$str;
 $3=$l;
 $4=$h;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($5+12)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=(($7+24)|0);
 $tb=$8;
 /** @type {number} */ var $9=$tb;
 /** @type {number} */ var $10=(($9+4)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=$tb;
 /** @type {number} */ var $13=(($12+8)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=($11>>>0)>=($14>>>0);
 if($15){label=2;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $17=$tb;
 /** @type {number} */ var $18=(($17+8)|0);
 /** @type {number} */ var $19=HEAP32[(($18)>>2)];
 /** @type {number} */ var $20=($19|0)<=1073741822;
 if($20){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $22=$1;
 /** @type {number} */ var $23=$tb;
 /** @type {number} */ var $24=(($23+8)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=($25<<1);
 _luaS_resize($22,$26);
 label=4;break;
 case 4: 
 /** @type {number} */ var $28=$4;
 /** @type {number} */ var $29=$tb;
 /** @type {number} */ var $30=(($29+8)|0);
 /** @type {number} */ var $31=HEAP32[(($30)>>2)];
 /** @type {number} */ var $32=((($31)-(1))|0);
 /** @type {number} */ var $33=$28&$32;
 /** @type {number} */ var $34=$tb;
 /** @type {number} */ var $35=(($34)|0);
 /** @type {number} */ var $36=HEAP32[(($35)>>2)];
 /** @type {number} */ var $37=(($36+($33<<2))|0);
 $list=$37;
 /** @type {number} */ var $38=$1;
 /** @type {number} */ var $39=$2;
 /** @type {number} */ var $40=$3;
 /** @type {number} */ var $41=$4;
 /** @type {number} */ var $42=$list;
 /** @type {number} */ var $43=_createstrobj($38,$39,$40,4,$41,$42);
 $s=$43;
 /** @type {number} */ var $44=$tb;
 /** @type {number} */ var $45=(($44+4)|0);
 /** @type {number} */ var $46=HEAP32[(($45)>>2)];
 /** @type {number} */ var $47=((($46)+(1))|0);
 HEAP32[(($45)>>2)]=$47;
 /** @type {number} */ var $48=$s;
 STACKTOP=sp;return $48;
 }
}
/**
 * @param {number} $L
 * @param {number} $t
 * @param {number} $key
 * @return {number}
 */
function _luaH_next($L,$t,$key){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $i;
 /** @type {number} */ var $io;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io1;
 /** @type {number} */ var $io21;
 /** @type {number} */ var $io12;
 /** @type {number} */ var $io23;
 /** @type {number} */ var $io14;
 $2=$L;
 $3=$t;
 $4=$key;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$3;
 /** @type {number} */ var $7=$4;
 /** @type {number} */ var $8=_findindex($5,$6,$7);
 $i=$8;
 /** @type {number} */ var $9=$i;
 /** @type {number} */ var $10=((($9)+(1))|0);
 $i=$10;
 label=2;break;
 case 2: 
 /** @type {number} */ var $12=$i;
 /** @type {number} */ var $13=$3;
 /** @type {number} */ var $14=(($13+28)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=($12|0)<($15|0);
 if($16){label=3;break;}else{label=7;break;}
 case 3: 
 /** @type {number} */ var $18=$i;
 /** @type {number} */ var $19=$3;
 /** @type {number} */ var $20=(($19+12)|0);
 /** @type {number} */ var $21=HEAP32[(($20)>>2)];
 /** @type {number} */ var $22=(($21+($18<<4))|0);
 /** @type {number} */ var $23=(($22+8)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=($24|0)==0;
 if($25){label=5;break;}else{label=4;break;}
 case 4: 
 /** @type {number} */ var $27=$4;
 $io=$27;
 /** @type {number} */ var $28=$i;
 /** @type {number} */ var $29=((($28)+(1))|0);
 /** @type {number} */ var $30=($29|0);
 /** @type {number} */ var $31=$io;
 /** @type {number} */ var $32=(($31)|0);
 /** @type {number} */ var $33=$32;
 HEAPF64[(($33)>>3)]=$30;
 /** @type {number} */ var $34=$io;
 /** @type {number} */ var $35=(($34+8)|0);
 HEAP32[(($35)>>2)]=3;
 /** @type {number} */ var $36=$i;
 /** @type {number} */ var $37=$3;
 /** @type {number} */ var $38=(($37+12)|0);
 /** @type {number} */ var $39=HEAP32[(($38)>>2)];
 /** @type {number} */ var $40=(($39+($36<<4))|0);
 $io2=$40;
 /** @type {number} */ var $41=$4;
 /** @type {number} */ var $42=(($41+16)|0);
 $io1=$42;
 /** @type {number} */ var $43=$io1;
 /** @type {number} */ var $44=(($43)|0);
 /** @type {number} */ var $45=$io2;
 /** @type {number} */ var $46=(($45)|0);
 /** @type {number} */ var $47=$44;
 /** @type {number} */ var $48=$46;
 HEAP32[(($47)>>2)]=HEAP32[(($48)>>2)];HEAP32[((($47)+(4))>>2)]=HEAP32[((($48)+(4))>>2)];
 /** @type {number} */ var $49=$io2;
 /** @type {number} */ var $50=(($49+8)|0);
 /** @type {number} */ var $51=HEAP32[(($50)>>2)];
 /** @type {number} */ var $52=$io1;
 /** @type {number} */ var $53=(($52+8)|0);
 HEAP32[(($53)>>2)]=$51;
 $1=1;
 label=14;break;
 case 5: 
 label=6;break;
 case 6: 
 /** @type {number} */ var $56=$i;
 /** @type {number} */ var $57=((($56)+(1))|0);
 $i=$57;
 label=2;break;
 case 7: 
 /** @type {number} */ var $59=$3;
 /** @type {number} */ var $60=(($59+28)|0);
 /** @type {number} */ var $61=HEAP32[(($60)>>2)];
 /** @type {number} */ var $62=$i;
 /** @type {number} */ var $63=((($62)-($61))|0);
 $i=$63;
 label=8;break;
 case 8: 
 /** @type {number} */ var $65=$i;
 /** @type {number} */ var $66=$3;
 /** @type {number} */ var $67=(($66+7)|0);
 /** @type {number} */ var $68=HEAP8[($67)];
 /** @type {number} */ var $69=($68&255);
 /** @type {number} */ var $70=1<<$69;
 /** @type {number} */ var $71=($65|0)<($70|0);
 if($71){label=9;break;}else{label=13;break;}
 case 9: 
 /** @type {number} */ var $73=$i;
 /** @type {number} */ var $74=$3;
 /** @type {number} */ var $75=(($74+16)|0);
 /** @type {number} */ var $76=HEAP32[(($75)>>2)];
 /** @type {number} */ var $77=(($76+($73<<5))|0);
 /** @type {number} */ var $78=(($77)|0);
 /** @type {number} */ var $79=(($78+8)|0);
 /** @type {number} */ var $80=HEAP32[(($79)>>2)];
 /** @type {number} */ var $81=($80|0)==0;
 if($81){label=11;break;}else{label=10;break;}
 case 10: 
 /** @type {number} */ var $83=$i;
 /** @type {number} */ var $84=$3;
 /** @type {number} */ var $85=(($84+16)|0);
 /** @type {number} */ var $86=HEAP32[(($85)>>2)];
 /** @type {number} */ var $87=(($86+($83<<5))|0);
 /** @type {number} */ var $88=(($87+16)|0);
 /** @type {number} */ var $89=$88;
 $io21=$89;
 /** @type {number} */ var $90=$4;
 $io12=$90;
 /** @type {number} */ var $91=$io12;
 /** @type {number} */ var $92=(($91)|0);
 /** @type {number} */ var $93=$io21;
 /** @type {number} */ var $94=(($93)|0);
 /** @type {number} */ var $95=$92;
 /** @type {number} */ var $96=$94;
 HEAP32[(($95)>>2)]=HEAP32[(($96)>>2)];HEAP32[((($95)+(4))>>2)]=HEAP32[((($96)+(4))>>2)];
 /** @type {number} */ var $97=$io21;
 /** @type {number} */ var $98=(($97+8)|0);
 /** @type {number} */ var $99=HEAP32[(($98)>>2)];
 /** @type {number} */ var $100=$io12;
 /** @type {number} */ var $101=(($100+8)|0);
 HEAP32[(($101)>>2)]=$99;
 /** @type {number} */ var $102=$i;
 /** @type {number} */ var $103=$3;
 /** @type {number} */ var $104=(($103+16)|0);
 /** @type {number} */ var $105=HEAP32[(($104)>>2)];
 /** @type {number} */ var $106=(($105+($102<<5))|0);
 /** @type {number} */ var $107=(($106)|0);
 $io23=$107;
 /** @type {number} */ var $108=$4;
 /** @type {number} */ var $109=(($108+16)|0);
 $io14=$109;
 /** @type {number} */ var $110=$io14;
 /** @type {number} */ var $111=(($110)|0);
 /** @type {number} */ var $112=$io23;
 /** @type {number} */ var $113=(($112)|0);
 /** @type {number} */ var $114=$111;
 /** @type {number} */ var $115=$113;
 HEAP32[(($114)>>2)]=HEAP32[(($115)>>2)];HEAP32[((($114)+(4))>>2)]=HEAP32[((($115)+(4))>>2)];
 /** @type {number} */ var $116=$io23;
 /** @type {number} */ var $117=(($116+8)|0);
 /** @type {number} */ var $118=HEAP32[(($117)>>2)];
 /** @type {number} */ var $119=$io14;
 /** @type {number} */ var $120=(($119+8)|0);
 HEAP32[(($120)>>2)]=$118;
 $1=1;
 label=14;break;
 case 11: 
 label=12;break;
 case 12: 
 /** @type {number} */ var $123=$i;
 /** @type {number} */ var $124=((($123)+(1))|0);
 $i=$124;
 label=8;break;
 case 13: 
 $1=0;
 label=14;break;
 case 14: 
 /** @type {number} */ var $127=$1;
 STACKTOP=sp;return $127;
 }
}
/**
 * @param {number} $L
 * @param {number} $t
 * @param {number} $nasize
 * @param {number} $nhsize
 * @return {number}
 */
function _luaH_resize($L,$t,$nasize,$nhsize){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $i;
 /** @type {number} */ var $oldasize;
 /** @type {number} */ var $oldhsize;
 /** @type {number} */ var $nold;
 /** @type {number} */ var $old;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io1;
 $1=$L;
 $2=$t;
 $3=$nasize;
 $4=$nhsize;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=(($5+28)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 $oldasize=$7;
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=(($8+7)|0);
 /** @type {number} */ var $10=HEAP8[($9)];
 /** @type {number} */ var $11=($10&255);
 $oldhsize=$11;
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=(($12+16)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 $nold=$14;
 /** @type {number} */ var $15=$3;
 /** @type {number} */ var $16=$oldasize;
 /** @type {number} */ var $17=($15|0)>($16|0);
 if($17){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $19=$1;
 /** @type {number} */ var $20=$2;
 /** @type {number} */ var $21=$3;
 _setarrayvector($19,$20,$21);
 label=3;break;
 case 3: 
 /** @type {number} */ var $23=$1;
 /** @type {number} */ var $24=$2;
 /** @type {number} */ var $25=$4;
 _setnodevector($23,$24,$25);
 /** @type {number} */ var $26=$3;
 /** @type {number} */ var $27=$oldasize;
 /** @type {number} */ var $28=($26|0)<($27|0);
 if($28){label=4;break;}else{label=14;break;}
 case 4: 
 /** @type {number} */ var $30=$3;
 /** @type {number} */ var $31=$2;
 /** @type {number} */ var $32=(($31+28)|0);
 HEAP32[(($32)>>2)]=$30;
 /** @type {number} */ var $33=$3;
 $i=$33;
 label=5;break;
 case 5: 
 /** @type {number} */ var $35=$i;
 /** @type {number} */ var $36=$oldasize;
 /** @type {number} */ var $37=($35|0)<($36|0);
 if($37){label=6;break;}else{label=10;break;}
 case 6: 
 /** @type {number} */ var $39=$i;
 /** @type {number} */ var $40=$2;
 /** @type {number} */ var $41=(($40+12)|0);
 /** @type {number} */ var $42=HEAP32[(($41)>>2)];
 /** @type {number} */ var $43=(($42+($39<<4))|0);
 /** @type {number} */ var $44=(($43+8)|0);
 /** @type {number} */ var $45=HEAP32[(($44)>>2)];
 /** @type {number} */ var $46=($45|0)==0;
 if($46){label=8;break;}else{label=7;break;}
 case 7: 
 /** @type {number} */ var $48=$1;
 /** @type {number} */ var $49=$2;
 /** @type {number} */ var $50=$i;
 /** @type {number} */ var $51=((($50)+(1))|0);
 /** @type {number} */ var $52=$i;
 /** @type {number} */ var $53=$2;
 /** @type {number} */ var $54=(($53+12)|0);
 /** @type {number} */ var $55=HEAP32[(($54)>>2)];
 /** @type {number} */ var $56=(($55+($52<<4))|0);
 _luaH_setint($48,$49,$51,$56);
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 /** @type {number} */ var $59=$i;
 /** @type {number} */ var $60=((($59)+(1))|0);
 $i=$60;
 label=5;break;
 case 10: 
 /** @type {number} */ var $62=$3;
 /** @type {number} */ var $63=((($62)+(1))|0);
 /** @type {number} */ var $64=($63>>>0)>268435455;
 if($64){label=11;break;}else{label=12;break;}
 case 11: 
 /** @type {number} */ var $66=$1;
 _luaM_toobig($66);
 label=13;break;
 case 12: 
 /** @type {number} */ var $69=$1;
 /** @type {number} */ var $70=$2;
 /** @type {number} */ var $71=(($70+12)|0);
 /** @type {number} */ var $72=HEAP32[(($71)>>2)];
 /** @type {number} */ var $73=$72;
 /** @type {number} */ var $74=$oldasize;
 /** @type {number} */ var $75=($74<<4);
 /** @type {number} */ var $76=$3;
 /** @type {number} */ var $77=($76<<4);
 /** @type {number} */ var $78=_luaM_realloc_($69,$73,$75,$77);
 var $80=$78;label=13;break;
 case 13: 
 var $80;
 /** @type {number} */ var $81=$80;
 /** @type {number} */ var $82=$2;
 /** @type {number} */ var $83=(($82+12)|0);
 HEAP32[(($83)>>2)]=$81;
 label=14;break;
 case 14: 
 /** @type {number} */ var $85=$oldhsize;
 /** @type {number} */ var $86=1<<$85;
 /** @type {number} */ var $87=((($86)-(1))|0);
 $i=$87;
 label=15;break;
 case 15: 
 /** @type {number} */ var $89=$i;
 /** @type {number} */ var $90=($89|0)>=0;
 if($90){label=16;break;}else{label=20;break;}
 case 16: 
 /** @type {number} */ var $92=$nold;
 /** @type {number} */ var $93=$i;
 /** @type {number} */ var $94=(($92+($93<<5))|0);
 $old=$94;
 /** @type {number} */ var $95=$old;
 /** @type {number} */ var $96=(($95)|0);
 /** @type {number} */ var $97=(($96+8)|0);
 /** @type {number} */ var $98=HEAP32[(($97)>>2)];
 /** @type {number} */ var $99=($98|0)==0;
 if($99){label=18;break;}else{label=17;break;}
 case 17: 
 /** @type {number} */ var $101=$old;
 /** @type {number} */ var $102=(($101)|0);
 $io2=$102;
 /** @type {number} */ var $103=$1;
 /** @type {number} */ var $104=$2;
 /** @type {number} */ var $105=$old;
 /** @type {number} */ var $106=(($105+16)|0);
 /** @type {number} */ var $107=$106;
 /** @type {number} */ var $108=_luaH_set($103,$104,$107);
 $io1=$108;
 /** @type {number} */ var $109=$io1;
 /** @type {number} */ var $110=(($109)|0);
 /** @type {number} */ var $111=$io2;
 /** @type {number} */ var $112=(($111)|0);
 /** @type {number} */ var $113=$110;
 /** @type {number} */ var $114=$112;
 HEAP32[(($113)>>2)]=HEAP32[(($114)>>2)];HEAP32[((($113)+(4))>>2)]=HEAP32[((($114)+(4))>>2)];
 /** @type {number} */ var $115=$io2;
 /** @type {number} */ var $116=(($115+8)|0);
 /** @type {number} */ var $117=HEAP32[(($116)>>2)];
 /** @type {number} */ var $118=$io1;
 /** @type {number} */ var $119=(($118+8)|0);
 HEAP32[(($119)>>2)]=$117;
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 /** @type {number} */ var $122=$i;
 /** @type {number} */ var $123=((($122)-(1))|0);
 $i=$123;
 label=15;break;
 case 20: 
 /** @type {number} */ var $125=$nold;
 /** @type {number} */ var $126=($125|0)==2024;
 if($126){label=22;break;}else{label=21;break;}
 case 21: 
 /** @type {number} */ var $128=$1;
 /** @type {number} */ var $129=$nold;
 /** @type {number} */ var $130=$129;
 /** @type {number} */ var $131=$oldhsize;
 /** @type {number} */ var $132=1<<$131;
 /** @type {number} */ var $133=($132<<5);
 /** @type {number} */ var $134=_luaM_realloc_($128,$130,$133,0);
 label=22;break;
 case 22: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $t
 * @param {number} $key
 * @param {number} $value
 * @return {number}
 */
function _luaH_setint($L,$t,$key,$value){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $p;
 /** @type {number} */ var $cell;
 /** @type {number} */ var $k=sp;
 /** @type {number} */ var $io;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io1;
 $1=$L;
 $2=$t;
 $3=$key;
 $4=$value;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$3;
 /** @type {number} */ var $7=_luaH_getint($5,$6);
 $p=$7;
 /** @type {number} */ var $8=$p;
 /** @type {number} */ var $9=($8|0)!=1280;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $11=$p;
 $cell=$11;
 label=4;break;
 case 3: 
 $io=$k;
 /** @type {number} */ var $13=$3;
 /** @type {number} */ var $14=($13|0);
 /** @type {number} */ var $15=$io;
 /** @type {number} */ var $16=(($15)|0);
 /** @type {number} */ var $17=$16;
 HEAPF64[(($17)>>3)]=$14;
 /** @type {number} */ var $18=$io;
 /** @type {number} */ var $19=(($18+8)|0);
 HEAP32[(($19)>>2)]=3;
 /** @type {number} */ var $20=$1;
 /** @type {number} */ var $21=$2;
 /** @type {number} */ var $22=_luaH_newkey($20,$21,$k);
 $cell=$22;
 label=4;break;
 case 4: 
 /** @type {number} */ var $24=$4;
 $io2=$24;
 /** @type {number} */ var $25=$cell;
 $io1=$25;
 /** @type {number} */ var $26=$io1;
 /** @type {number} */ var $27=(($26)|0);
 /** @type {number} */ var $28=$io2;
 /** @type {number} */ var $29=(($28)|0);
 /** @type {number} */ var $30=$27;
 /** @type {number} */ var $31=$29;
 HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];
 /** @type {number} */ var $32=$io2;
 /** @type {number} */ var $33=(($32+8)|0);
 /** @type {number} */ var $34=HEAP32[(($33)>>2)];
 /** @type {number} */ var $35=$io1;
 /** @type {number} */ var $36=(($35+8)|0);
 HEAP32[(($36)>>2)]=$34;
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $t
 * @param {number} $key
 * @return {number}
 */
function _luaH_set($L,$t,$key){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $p;
 $2=$L;
 $3=$t;
 $4=$key;
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=$4;
 /** @type {number} */ var $7=_luaH_get($5,$6);
 $p=$7;
 /** @type {number} */ var $8=$p;
 /** @type {number} */ var $9=($8|0)!=1280;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $11=$p;
 $1=$11;
 label=4;break;
 case 3: 
 /** @type {number} */ var $13=$2;
 /** @type {number} */ var $14=$3;
 /** @type {number} */ var $15=$4;
 /** @type {number} */ var $16=_luaH_newkey($13,$14,$15);
 $1=$16;
 label=4;break;
 case 4: 
 /** @type {number} */ var $18=$1;
 STACKTOP=sp;return $18;
 }
}
/**
 * @param {number} $L
 * @param {number} $t
 * @param {number} $nasize
 * @return {number}
 */
function _luaH_resizearray($L,$t,$nasize){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $nsize;
 $1=$L;
 $2=$t;
 $3=$nasize;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=(($4+16)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=($6|0)==2024;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $16=0;label=4;break;
 case 3: 
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=(($10+7)|0);
 /** @type {number} */ var $12=HEAP8[($11)];
 /** @type {number} */ var $13=($12&255);
 /** @type {number} */ var $14=1<<$13;
 var $16=$14;label=4;break;
 case 4: 
 var $16;
 $nsize=$16;
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=$2;
 /** @type {number} */ var $19=$3;
 /** @type {number} */ var $20=$nsize;
 _luaH_resize($17,$18,$19,$20);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaH_new($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $t;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaC_newobj($2,5,32,0,0);
 /** @type {number} */ var $4=$3;
 $t=$4;
 /** @type {number} */ var $5=$t;
 /** @type {number} */ var $6=(($5+8)|0);
 HEAP32[(($6)>>2)]=0;
 /** @type {number} */ var $7=$t;
 /** @type {number} */ var $8=(($7+6)|0);
 HEAP8[($8)]=-1;
 /** @type {number} */ var $9=$t;
 /** @type {number} */ var $10=(($9+12)|0);
 HEAP32[(($10)>>2)]=0;
 /** @type {number} */ var $11=$t;
 /** @type {number} */ var $12=(($11+28)|0);
 HEAP32[(($12)>>2)]=0;
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=$t;
 _setnodevector($13,$14,0);
 /** @type {number} */ var $15=$t;
 STACKTOP=sp;return $15;
}
/**
 * @param {number} $L
 * @param {number} $t
 * @return {number}
 */
function _luaH_free($L,$t){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$L;
 $2=$t;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=(($3+16)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=($5|0)==2024;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=(($9+16)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=$11;
 /** @type {number} */ var $13=$2;
 /** @type {number} */ var $14=(($13+7)|0);
 /** @type {number} */ var $15=HEAP8[($14)];
 /** @type {number} */ var $16=($15&255);
 /** @type {number} */ var $17=1<<$16;
 /** @type {number} */ var $18=($17<<5);
 /** @type {number} */ var $19=_luaM_realloc_($8,$12,$18,0);
 label=3;break;
 case 3: 
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=$2;
 /** @type {number} */ var $23=(($22+12)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=$24;
 /** @type {number} */ var $26=$2;
 /** @type {number} */ var $27=(($26+28)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=($28<<4);
 /** @type {number} */ var $30=_luaM_realloc_($21,$25,$29,0);
 /** @type {number} */ var $31=$1;
 /** @type {number} */ var $32=$2;
 /** @type {number} */ var $33=$32;
 /** @type {number} */ var $34=_luaM_realloc_($31,$33,32,0);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $t
 * @param {number} $key
 * @return {number}
 */
function _luaH_newkey($L,$t,$key){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $mp;
 /** @type {number} */ var $othern;
 /** @type {number} */ var $n;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io1;
 $2=$L;
 $3=$t;
 $4=$key;
 /** @type {number} */ var $5=$4;
 /** @type {number} */ var $6=(($5+8)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=($7|0)==0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $10=$2;
 _luaG_runerror($10,8664,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 case 3: 
 /** @type {number} */ var $12=$4;
 /** @type {number} */ var $13=(($12+8)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=($14|0)==3;
 if($15){label=4;break;}else{label=6;break;}
 case 4: 
 /** @type {number} */ var $17=$4;
 /** @type {number} */ var $18=(($17)|0);
 /** @type {number} */ var $19=$18;
 /** @type {number} */ var $20=HEAPF64[(($19)>>3)];
 /** @type {number} */ var $21=$4;
 /** @type {number} */ var $22=(($21)|0);
 /** @type {number} */ var $23=$22;
 /** @type {number} */ var $24=HEAPF64[(($23)>>3)];
 /** @type {number} */ var $25=$20==$24;
 if($25){label=6;break;}else{label=5;break;}
 case 5: 
 /** @type {number} */ var $27=$2;
 _luaG_runerror($27,11240,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 case 6: 
 label=7;break;
 case 7: 
 /** @type {number} */ var $30=$3;
 /** @type {number} */ var $31=$4;
 /** @type {number} */ var $32=_mainposition($30,$31);
 $mp=$32;
 /** @type {number} */ var $33=$mp;
 /** @type {number} */ var $34=(($33)|0);
 /** @type {number} */ var $35=(($34+8)|0);
 /** @type {number} */ var $36=HEAP32[(($35)>>2)];
 /** @type {number} */ var $37=($36|0)==0;
 if($37){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $39=$mp;
 /** @type {number} */ var $40=($39|0)==2024;
 if($40){label=9;break;}else{label=18;break;}
 case 9: 
 /** @type {number} */ var $42=$3;
 /** @type {number} */ var $43=_getfreepos($42);
 $n=$43;
 /** @type {number} */ var $44=$n;
 /** @type {number} */ var $45=($44|0)==0;
 if($45){label=10;break;}else{label=11;break;}
 case 10: 
 /** @type {number} */ var $47=$2;
 /** @type {number} */ var $48=$3;
 /** @type {number} */ var $49=$4;
 _rehash($47,$48,$49);
 /** @type {number} */ var $50=$2;
 /** @type {number} */ var $51=$3;
 /** @type {number} */ var $52=$4;
 /** @type {number} */ var $53=_luaH_set($50,$51,$52);
 $1=$53;
 label=23;break;
 case 11: 
 /** @type {number} */ var $55=$3;
 /** @type {number} */ var $56=$mp;
 /** @type {number} */ var $57=(($56+16)|0);
 /** @type {number} */ var $58=$57;
 /** @type {number} */ var $59=_mainposition($55,$58);
 $othern=$59;
 /** @type {number} */ var $60=$othern;
 /** @type {number} */ var $61=$mp;
 /** @type {number} */ var $62=($60|0)!=($61|0);
 if($62){label=12;break;}else{label=16;break;}
 case 12: 
 label=13;break;
 case 13: 
 /** @type {number} */ var $65=$othern;
 /** @type {number} */ var $66=(($65+16)|0);
 /** @type {number} */ var $67=$66;
 /** @type {number} */ var $68=(($67+12)|0);
 /** @type {number} */ var $69=HEAP32[(($68)>>2)];
 /** @type {number} */ var $70=$mp;
 /** @type {number} */ var $71=($69|0)!=($70|0);
 if($71){label=14;break;}else{label=15;break;}
 case 14: 
 /** @type {number} */ var $73=$othern;
 /** @type {number} */ var $74=(($73+16)|0);
 /** @type {number} */ var $75=$74;
 /** @type {number} */ var $76=(($75+12)|0);
 /** @type {number} */ var $77=HEAP32[(($76)>>2)];
 $othern=$77;
 label=13;break;
 case 15: 
 /** @type {number} */ var $79=$n;
 /** @type {number} */ var $80=$othern;
 /** @type {number} */ var $81=(($80+16)|0);
 /** @type {number} */ var $82=$81;
 /** @type {number} */ var $83=(($82+12)|0);
 HEAP32[(($83)>>2)]=$79;
 /** @type {number} */ var $84=$n;
 /** @type {number} */ var $85=$mp;
 /** @type {number} */ var $86=$84;
 /** @type {number} */ var $87=$85;
 HEAP32[(($86)>>2)]=HEAP32[(($87)>>2)];HEAP32[((($86)+(4))>>2)]=HEAP32[((($87)+(4))>>2)];HEAP32[((($86)+(8))>>2)]=HEAP32[((($87)+(8))>>2)];HEAP32[((($86)+(12))>>2)]=HEAP32[((($87)+(12))>>2)];HEAP32[((($86)+(16))>>2)]=HEAP32[((($87)+(16))>>2)];HEAP32[((($86)+(20))>>2)]=HEAP32[((($87)+(20))>>2)];HEAP32[((($86)+(24))>>2)]=HEAP32[((($87)+(24))>>2)];HEAP32[((($86)+(28))>>2)]=HEAP32[((($87)+(28))>>2)];
 /** @type {number} */ var $88=$mp;
 /** @type {number} */ var $89=(($88+16)|0);
 /** @type {number} */ var $90=$89;
 /** @type {number} */ var $91=(($90+12)|0);
 HEAP32[(($91)>>2)]=0;
 /** @type {number} */ var $92=$mp;
 /** @type {number} */ var $93=(($92)|0);
 /** @type {number} */ var $94=(($93+8)|0);
 HEAP32[(($94)>>2)]=0;
 label=17;break;
 case 16: 
 /** @type {number} */ var $96=$mp;
 /** @type {number} */ var $97=(($96+16)|0);
 /** @type {number} */ var $98=$97;
 /** @type {number} */ var $99=(($98+12)|0);
 /** @type {number} */ var $100=HEAP32[(($99)>>2)];
 /** @type {number} */ var $101=$n;
 /** @type {number} */ var $102=(($101+16)|0);
 /** @type {number} */ var $103=$102;
 /** @type {number} */ var $104=(($103+12)|0);
 HEAP32[(($104)>>2)]=$100;
 /** @type {number} */ var $105=$n;
 /** @type {number} */ var $106=$mp;
 /** @type {number} */ var $107=(($106+16)|0);
 /** @type {number} */ var $108=$107;
 /** @type {number} */ var $109=(($108+12)|0);
 HEAP32[(($109)>>2)]=$105;
 /** @type {number} */ var $110=$n;
 $mp=$110;
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 /** @type {number} */ var $113=$4;
 $io2=$113;
 /** @type {number} */ var $114=$mp;
 /** @type {number} */ var $115=(($114+16)|0);
 /** @type {number} */ var $116=$115;
 $io1=$116;
 /** @type {number} */ var $117=$io1;
 /** @type {number} */ var $118=(($117)|0);
 /** @type {number} */ var $119=$io2;
 /** @type {number} */ var $120=(($119)|0);
 /** @type {number} */ var $121=$118;
 /** @type {number} */ var $122=$120;
 HEAP32[(($121)>>2)]=HEAP32[(($122)>>2)];HEAP32[((($121)+(4))>>2)]=HEAP32[((($122)+(4))>>2)];
 /** @type {number} */ var $123=$io2;
 /** @type {number} */ var $124=(($123+8)|0);
 /** @type {number} */ var $125=HEAP32[(($124)>>2)];
 /** @type {number} */ var $126=$io1;
 /** @type {number} */ var $127=(($126+8)|0);
 HEAP32[(($127)>>2)]=$125;
 /** @type {number} */ var $128=$4;
 /** @type {number} */ var $129=(($128+8)|0);
 /** @type {number} */ var $130=HEAP32[(($129)>>2)];
 /** @type {number} */ var $131=$130&64;
 /** @type {number} */ var $132=($131|0)!=0;
 if($132){label=19;break;}else{label=22;break;}
 case 19: 
 /** @type {number} */ var $134=$4;
 /** @type {number} */ var $135=(($134)|0);
 /** @type {number} */ var $136=$135;
 /** @type {number} */ var $137=HEAP32[(($136)>>2)];
 /** @type {number} */ var $138=$137;
 /** @type {number} */ var $139=(($138+5)|0);
 /** @type {number} */ var $140=HEAP8[($139)];
 /** @type {number} */ var $141=($140&255);
 /** @type {number} */ var $142=$141&3;
 /** @type {number} */ var $143=($142|0)!=0;
 if($143){label=20;break;}else{label=22;break;}
 case 20: 
 /** @type {number} */ var $145=$3;
 /** @type {number} */ var $146=$145;
 /** @type {number} */ var $147=$146;
 /** @type {number} */ var $148=(($147+5)|0);
 /** @type {number} */ var $149=HEAP8[($148)];
 /** @type {number} */ var $150=($149&255);
 /** @type {number} */ var $151=$150&4;
 /** @type {number} */ var $152=($151|0)!=0;
 if($152){label=21;break;}else{label=22;break;}
 case 21: 
 /** @type {number} */ var $154=$2;
 /** @type {number} */ var $155=$3;
 /** @type {number} */ var $156=$155;
 _luaC_barrierback_($154,$156);
 label=22;break;
 case 22: 
 /** @type {number} */ var $158=$mp;
 /** @type {number} */ var $159=(($158)|0);
 $1=$159;
 label=23;break;
 case 23: 
 /** @type {number} */ var $161=$1;
 STACKTOP=sp;return $161;
 }
}
/**
 * @param {number} $t
 * @param {number} $key
 * @return {number}
 */
function _luaH_getint($t,$key){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $nk;
 /** @type {number} */ var $n;
 $2=$t;
 $3=$key;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=((($4)-(1))|0);
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=(($6+28)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=($5>>>0)<($8>>>0);
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $11=$3;
 /** @type {number} */ var $12=((($11)-(1))|0);
 /** @type {number} */ var $13=$2;
 /** @type {number} */ var $14=(($13+12)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=(($15+($12<<4))|0);
 $1=$16;
 label=11;break;
 case 3: 
 /** @type {number} */ var $18=$3;
 /** @type {number} */ var $19=($18|0);
 $nk=$19;
 /** @type {number} */ var $20=$2;
 /** @type {number} */ var $21=$nk;
 /** @type {number} */ var $22=_hashnum($20,$21);
 $n=$22;
 label=4;break;
 case 4: 
 /** @type {number} */ var $24=$n;
 /** @type {number} */ var $25=(($24+16)|0);
 /** @type {number} */ var $26=$25;
 /** @type {number} */ var $27=(($26+8)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=($28|0)==3;
 if($29){label=5;break;}else{label=7;break;}
 case 5: 
 /** @type {number} */ var $31=$n;
 /** @type {number} */ var $32=(($31+16)|0);
 /** @type {number} */ var $33=$32;
 /** @type {number} */ var $34=(($33)|0);
 /** @type {number} */ var $35=$34;
 /** @type {number} */ var $36=HEAPF64[(($35)>>3)];
 /** @type {number} */ var $37=$nk;
 /** @type {number} */ var $38=$36==$37;
 if($38){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $40=$n;
 /** @type {number} */ var $41=(($40)|0);
 $1=$41;
 label=11;break;
 case 7: 
 /** @type {number} */ var $43=$n;
 /** @type {number} */ var $44=(($43+16)|0);
 /** @type {number} */ var $45=$44;
 /** @type {number} */ var $46=(($45+12)|0);
 /** @type {number} */ var $47=HEAP32[(($46)>>2)];
 $n=$47;
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 /** @type {number} */ var $50=$n;
 /** @type {number} */ var $51=($50|0)!=0;
 if($51){label=4;break;}else{label=10;break;}
 case 10: 
 $1=1280;
 label=11;break;
 case 11: 
 /** @type {number} */ var $54=$1;
 STACKTOP=sp;return $54;
 }
}
/**
 * @param {number} $t
 * @param {number} $key
 * @return {number}
 */
function _luaH_getstr($t,$key){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $n;
 $2=$t;
 $3=$key;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=$4;
 /** @type {number} */ var $6=(($5+8)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=(($8+7)|0);
 /** @type {number} */ var $10=HEAP8[($9)];
 /** @type {number} */ var $11=($10&255);
 /** @type {number} */ var $12=1<<$11;
 /** @type {number} */ var $13=((($12)-(1))|0);
 /** @type {number} */ var $14=$7&$13;
 /** @type {number} */ var $15=$2;
 /** @type {number} */ var $16=(($15+16)|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=(($17+($14<<5))|0);
 $n=$18;
 label=2;break;
 case 2: 
 /** @type {number} */ var $20=$n;
 /** @type {number} */ var $21=(($20+16)|0);
 /** @type {number} */ var $22=$21;
 /** @type {number} */ var $23=(($22+8)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=($24|0)==68;
 if($25){label=3;break;}else{label=5;break;}
 case 3: 
 /** @type {number} */ var $27=$n;
 /** @type {number} */ var $28=(($27+16)|0);
 /** @type {number} */ var $29=$28;
 /** @type {number} */ var $30=(($29)|0);
 /** @type {number} */ var $31=$30;
 /** @type {number} */ var $32=HEAP32[(($31)>>2)];
 /** @type {number} */ var $33=$32;
 /** @type {number} */ var $34=$3;
 /** @type {number} */ var $35=($33|0)==($34|0);
 if($35){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $37=$n;
 /** @type {number} */ var $38=(($37)|0);
 $1=$38;
 label=9;break;
 case 5: 
 /** @type {number} */ var $40=$n;
 /** @type {number} */ var $41=(($40+16)|0);
 /** @type {number} */ var $42=$41;
 /** @type {number} */ var $43=(($42+12)|0);
 /** @type {number} */ var $44=HEAP32[(($43)>>2)];
 $n=$44;
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 /** @type {number} */ var $47=$n;
 /** @type {number} */ var $48=($47|0)!=0;
 if($48){label=2;break;}else{label=8;break;}
 case 8: 
 $1=1280;
 label=9;break;
 case 9: 
 /** @type {number} */ var $51=$1;
 STACKTOP=sp;return $51;
 }
}
/**
 * @param {number} $t
 * @param {number} $key
 * @return {number}
 */
function _luaH_get($t,$key){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $k;
 /** @type {number} */ var $n;
 /** @type {number} */ var $u=sp;
 /** @type {number} */ var $n1;
 $2=$t;
 $3=$key;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=(($4+8)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=$6&63;
 if(($7|0)==0){ label=2;break;}else if(($7|0)==4){ label=3;break;}else if(($7|0)==3){ label=4;break;}else{label=7;break;}
 case 2: 
 $1=1280;
 label=15;break;
 case 3: 
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=$3;
 /** @type {number} */ var $12=(($11)|0);
 /** @type {number} */ var $13=$12;
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=$14;
 /** @type {number} */ var $16=_luaH_getstr($10,$15);
 $1=$16;
 label=15;break;
 case 4: 
 /** @type {number} */ var $18=$3;
 /** @type {number} */ var $19=(($18)|0);
 /** @type {number} */ var $20=$19;
 /** @type {number} */ var $21=HEAPF64[(($20)>>3)];
 $n=$21;
 /** @type {number} */ var $22=$n;
 /** @type {number} */ var $23=($22)+(6755399441055744);
 /** @type {number} */ var $24=$u;
 HEAPF64[(($24)>>3)]=$23;
 /** @type {number} */ var $25=HEAP32[((1556)>>2)];
 /** @type {number} */ var $26=($25|0)==33;
 /** @type {number} */ var $27=($26&1);
 /** @type {number} */ var $28=$u;
 /** @type {number} */ var $29=(($28+($27<<2))|0);
 /** @type {number} */ var $30=HEAP32[(($29)>>2)];
 $k=$30;
 /** @type {number} */ var $31=$k;
 /** @type {number} */ var $32=($31|0);
 /** @type {number} */ var $33=$3;
 /** @type {number} */ var $34=(($33)|0);
 /** @type {number} */ var $35=$34;
 /** @type {number} */ var $36=HEAPF64[(($35)>>3)];
 /** @type {number} */ var $37=$32==$36;
 if($37){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $39=$2;
 /** @type {number} */ var $40=$k;
 /** @type {number} */ var $41=_luaH_getint($39,$40);
 $1=$41;
 label=15;break;
 case 6: 
 label=7;break;
 case 7: 
 /** @type {number} */ var $44=$2;
 /** @type {number} */ var $45=$3;
 /** @type {number} */ var $46=_mainposition($44,$45);
 $n1=$46;
 label=8;break;
 case 8: 
 /** @type {number} */ var $48=$n1;
 /** @type {number} */ var $49=(($48+16)|0);
 /** @type {number} */ var $50=$49;
 /** @type {number} */ var $51=(($50+8)|0);
 /** @type {number} */ var $52=HEAP32[(($51)>>2)];
 /** @type {number} */ var $53=$3;
 /** @type {number} */ var $54=(($53+8)|0);
 /** @type {number} */ var $55=HEAP32[(($54)>>2)];
 /** @type {number} */ var $56=($52|0)==($55|0);
 if($56){label=9;break;}else{label=11;break;}
 case 9: 
 /** @type {number} */ var $58=$n1;
 /** @type {number} */ var $59=(($58+16)|0);
 /** @type {number} */ var $60=$59;
 /** @type {number} */ var $61=$3;
 /** @type {number} */ var $62=_luaV_equalobj_(0,$60,$61);
 /** @type {number} */ var $63=($62|0)!=0;
 if($63){label=10;break;}else{label=11;break;}
 case 10: 
 /** @type {number} */ var $65=$n1;
 /** @type {number} */ var $66=(($65)|0);
 $1=$66;
 label=15;break;
 case 11: 
 /** @type {number} */ var $68=$n1;
 /** @type {number} */ var $69=(($68+16)|0);
 /** @type {number} */ var $70=$69;
 /** @type {number} */ var $71=(($70+12)|0);
 /** @type {number} */ var $72=HEAP32[(($71)>>2)];
 $n1=$72;
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 /** @type {number} */ var $75=$n1;
 /** @type {number} */ var $76=($75|0)!=0;
 if($76){label=8;break;}else{label=14;break;}
 case 14: 
 $1=1280;
 label=15;break;
 case 15: 
 /** @type {number} */ var $79=$1;
 STACKTOP=sp;return $79;
 }
}
/**
 * @param {number} $t
 * @return {number}
 */
function _luaH_getn($t){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $j;
 /** @type {number} */ var $i;
 /** @type {number} */ var $m;
 $2=$t;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=(($3+28)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $j=$5;
 /** @type {number} */ var $6=$j;
 /** @type {number} */ var $7=($6>>>0)>0;
 if($7){label=2;break;}else{label=10;break;}
 case 2: 
 /** @type {number} */ var $9=$j;
 /** @type {number} */ var $10=((($9)-(1))|0);
 /** @type {number} */ var $11=$2;
 /** @type {number} */ var $12=(($11+12)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=(($13+($10<<4))|0);
 /** @type {number} */ var $15=(($14+8)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=($16|0)==0;
 if($17){label=3;break;}else{label=10;break;}
 case 3: 
 $i=0;
 label=4;break;
 case 4: 
 /** @type {number} */ var $20=$j;
 /** @type {number} */ var $21=$i;
 /** @type {number} */ var $22=((($20)-($21))|0);
 /** @type {number} */ var $23=($22>>>0)>1;
 if($23){label=5;break;}else{label=9;break;}
 case 5: 
 /** @type {number} */ var $25=$i;
 /** @type {number} */ var $26=$j;
 /** @type {number} */ var $27=((($25)+($26))|0);
 /** @type {number} */ var $28=(((($27>>>0))/(2))&-1);
 $m=$28;
 /** @type {number} */ var $29=$m;
 /** @type {number} */ var $30=((($29)-(1))|0);
 /** @type {number} */ var $31=$2;
 /** @type {number} */ var $32=(($31+12)|0);
 /** @type {number} */ var $33=HEAP32[(($32)>>2)];
 /** @type {number} */ var $34=(($33+($30<<4))|0);
 /** @type {number} */ var $35=(($34+8)|0);
 /** @type {number} */ var $36=HEAP32[(($35)>>2)];
 /** @type {number} */ var $37=($36|0)==0;
 if($37){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $39=$m;
 $j=$39;
 label=8;break;
 case 7: 
 /** @type {number} */ var $41=$m;
 $i=$41;
 label=8;break;
 case 8: 
 label=4;break;
 case 9: 
 /** @type {number} */ var $44=$i;
 $1=$44;
 label=13;break;
 case 10: 
 /** @type {number} */ var $46=$2;
 /** @type {number} */ var $47=(($46+16)|0);
 /** @type {number} */ var $48=HEAP32[(($47)>>2)];
 /** @type {number} */ var $49=($48|0)==2024;
 if($49){label=11;break;}else{label=12;break;}
 case 11: 
 /** @type {number} */ var $51=$j;
 $1=$51;
 label=13;break;
 case 12: 
 /** @type {number} */ var $53=$2;
 /** @type {number} */ var $54=$j;
 /** @type {number} */ var $55=_unbound_search($53,$54);
 $1=$55;
 label=13;break;
 case 13: 
 /** @type {number} */ var $57=$1;
 STACKTOP=sp;return $57;
 }
}
/**
 * @param {number} $L
 * @param {number} $t
 * @param {number} $key
 * @return {number}
 */
function _findindex($L,$t,$key){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $i;
 /** @type {number} */ var $n;
 $2=$L;
 $3=$t;
 $4=$key;
 /** @type {number} */ var $5=$4;
 /** @type {number} */ var $6=(($5+8)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=($7|0)==0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=17;break;
 case 3: 
 /** @type {number} */ var $11=$4;
 /** @type {number} */ var $12=_arrayindex($11);
 $i=$12;
 /** @type {number} */ var $13=$i;
 /** @type {number} */ var $14=0<($13|0);
 if($14){label=4;break;}else{label=6;break;}
 case 4: 
 /** @type {number} */ var $16=$i;
 /** @type {number} */ var $17=$3;
 /** @type {number} */ var $18=(($17+28)|0);
 /** @type {number} */ var $19=HEAP32[(($18)>>2)];
 /** @type {number} */ var $20=($16|0)<=($19|0);
 if($20){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $22=$i;
 /** @type {number} */ var $23=((($22)-(1))|0);
 $1=$23;
 label=17;break;
 case 6: 
 /** @type {number} */ var $25=$3;
 /** @type {number} */ var $26=$4;
 /** @type {number} */ var $27=_mainposition($25,$26);
 $n=$27;
 label=7;break;
 case 7: 
 /** @type {number} */ var $29=$n;
 /** @type {number} */ var $30=(($29+16)|0);
 /** @type {number} */ var $31=$30;
 /** @type {number} */ var $32=(($31+8)|0);
 /** @type {number} */ var $33=HEAP32[(($32)>>2)];
 /** @type {number} */ var $34=$4;
 /** @type {number} */ var $35=(($34+8)|0);
 /** @type {number} */ var $36=HEAP32[(($35)>>2)];
 /** @type {number} */ var $37=($33|0)==($36|0);
 if($37){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $39=$n;
 /** @type {number} */ var $40=(($39+16)|0);
 /** @type {number} */ var $41=$40;
 /** @type {number} */ var $42=$4;
 /** @type {number} */ var $43=_luaV_equalobj_(0,$41,$42);
 /** @type {number} */ var $44=($43|0)!=0;
 if($44){label=12;break;}else{label=9;break;}
 case 9: 
 /** @type {number} */ var $46=$n;
 /** @type {number} */ var $47=(($46+16)|0);
 /** @type {number} */ var $48=$47;
 /** @type {number} */ var $49=(($48+8)|0);
 /** @type {number} */ var $50=HEAP32[(($49)>>2)];
 /** @type {number} */ var $51=($50|0)==11;
 if($51){label=10;break;}else{label=13;break;}
 case 10: 
 /** @type {number} */ var $53=$4;
 /** @type {number} */ var $54=(($53+8)|0);
 /** @type {number} */ var $55=HEAP32[(($54)>>2)];
 /** @type {number} */ var $56=$55&64;
 /** @type {number} */ var $57=($56|0)!=0;
 if($57){label=11;break;}else{label=13;break;}
 case 11: 
 /** @type {number} */ var $59=$n;
 /** @type {number} */ var $60=(($59+16)|0);
 /** @type {number} */ var $61=$60;
 /** @type {number} */ var $62=(($61)|0);
 /** @type {number} */ var $63=$62;
 /** @type {number} */ var $64=HEAP32[(($63)>>2)];
 /** @type {number} */ var $65=$64;
 /** @type {number} */ var $66=$4;
 /** @type {number} */ var $67=(($66)|0);
 /** @type {number} */ var $68=$67;
 /** @type {number} */ var $69=HEAP32[(($68)>>2)];
 /** @type {number} */ var $70=$69;
 /** @type {number} */ var $71=($65|0)==($70|0);
 if($71){label=12;break;}else{label=13;break;}
 case 12: 
 /** @type {number} */ var $73=$n;
 /** @type {number} */ var $74=$3;
 /** @type {number} */ var $75=(($74+16)|0);
 /** @type {number} */ var $76=HEAP32[(($75)>>2)];
 /** @type {number} */ var $77=(($76)|0);
 /** @type {number} */ var $78=$73;
 /** @type {number} */ var $79=$77;
 /** @type {number} */ var $80=((($78)-($79))|0);
 /** @type {number} */ var $81=(((($80|0))/(32))&-1);
 $i=$81;
 /** @type {number} */ var $82=$i;
 /** @type {number} */ var $83=$3;
 /** @type {number} */ var $84=(($83+28)|0);
 /** @type {number} */ var $85=HEAP32[(($84)>>2)];
 /** @type {number} */ var $86=((($82)+($85))|0);
 $1=$86;
 label=17;break;
 case 13: 
 /** @type {number} */ var $88=$n;
 /** @type {number} */ var $89=(($88+16)|0);
 /** @type {number} */ var $90=$89;
 /** @type {number} */ var $91=(($90+12)|0);
 /** @type {number} */ var $92=HEAP32[(($91)>>2)];
 $n=$92;
 label=14;break;
 case 14: 
 /** @type {number} */ var $94=$n;
 /** @type {number} */ var $95=($94|0)==0;
 if($95){label=15;break;}else{label=16;break;}
 case 15: 
 /** @type {number} */ var $97=$2;
 _luaG_runerror($97,6928,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 case 16: 
 label=7;break;
 case 17: 
 /** @type {number} */ var $100=$1;
 STACKTOP=sp;return $100;
 }
}
/**
 * @param {number} $L
 * @param {number} $t
 * @param {number} $size
 * @return {number}
 */
function _setarrayvector($L,$t,$size){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $i;
 $1=$L;
 $2=$t;
 $3=$size;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=((($4)+(1))|0);
 /** @type {number} */ var $6=($5>>>0)>268435455;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $8=$1;
 _luaM_toobig($8);
 label=4;break;
 case 3: 
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=(($12+12)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=$14;
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=(($16+28)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=($18<<4);
 /** @type {number} */ var $20=$3;
 /** @type {number} */ var $21=($20<<4);
 /** @type {number} */ var $22=_luaM_realloc_($11,$15,$19,$21);
 var $24=$22;label=4;break;
 case 4: 
 var $24;
 /** @type {number} */ var $25=$24;
 /** @type {number} */ var $26=$2;
 /** @type {number} */ var $27=(($26+12)|0);
 HEAP32[(($27)>>2)]=$25;
 /** @type {number} */ var $28=$2;
 /** @type {number} */ var $29=(($28+28)|0);
 /** @type {number} */ var $30=HEAP32[(($29)>>2)];
 $i=$30;
 label=5;break;
 case 5: 
 /** @type {number} */ var $32=$i;
 /** @type {number} */ var $33=$3;
 /** @type {number} */ var $34=($32|0)<($33|0);
 if($34){label=6;break;}else{label=8;break;}
 case 6: 
 /** @type {number} */ var $36=$i;
 /** @type {number} */ var $37=$2;
 /** @type {number} */ var $38=(($37+12)|0);
 /** @type {number} */ var $39=HEAP32[(($38)>>2)];
 /** @type {number} */ var $40=(($39+($36<<4))|0);
 /** @type {number} */ var $41=(($40+8)|0);
 HEAP32[(($41)>>2)]=0;
 label=7;break;
 case 7: 
 /** @type {number} */ var $43=$i;
 /** @type {number} */ var $44=((($43)+(1))|0);
 $i=$44;
 label=5;break;
 case 8: 
 /** @type {number} */ var $46=$3;
 /** @type {number} */ var $47=$2;
 /** @type {number} */ var $48=(($47+28)|0);
 HEAP32[(($48)>>2)]=$46;
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $t
 * @param {number} $size
 * @return {number}
 */
function _setnodevector($L,$t,$size){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $lsize;
 /** @type {number} */ var $i;
 /** @type {number} */ var $n;
 $1=$L;
 $2=$t;
 $3=$size;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=(($7+16)|0);
 HEAP32[(($8)>>2)]=2024;
 $lsize=0;
 label=13;break;
 case 3: 
 /** @type {number} */ var $10=$3;
 /** @type {number} */ var $11=_luaO_ceillog2($10);
 $lsize=$11;
 /** @type {number} */ var $12=$lsize;
 /** @type {number} */ var $13=($12|0)>30;
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $15=$1;
 _luaG_runerror($15,8968,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 case 5: 
 /** @type {number} */ var $17=$lsize;
 /** @type {number} */ var $18=1<<$17;
 $3=$18;
 /** @type {number} */ var $19=$3;
 /** @type {number} */ var $20=((($19)+(1))|0);
 /** @type {number} */ var $21=($20>>>0)>134217727;
 if($21){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $23=$1;
 _luaM_toobig($23);
 label=8;break;
 case 7: 
 /** @type {number} */ var $26=$1;
 /** @type {number} */ var $27=$3;
 /** @type {number} */ var $28=($27<<5);
 /** @type {number} */ var $29=_luaM_realloc_($26,0,0,$28);
 var $31=$29;label=8;break;
 case 8: 
 var $31;
 /** @type {number} */ var $32=$31;
 /** @type {number} */ var $33=$2;
 /** @type {number} */ var $34=(($33+16)|0);
 HEAP32[(($34)>>2)]=$32;
 $i=0;
 label=9;break;
 case 9: 
 /** @type {number} */ var $36=$i;
 /** @type {number} */ var $37=$3;
 /** @type {number} */ var $38=($36|0)<($37|0);
 if($38){label=10;break;}else{label=12;break;}
 case 10: 
 /** @type {number} */ var $40=$i;
 /** @type {number} */ var $41=$2;
 /** @type {number} */ var $42=(($41+16)|0);
 /** @type {number} */ var $43=HEAP32[(($42)>>2)];
 /** @type {number} */ var $44=(($43+($40<<5))|0);
 $n=$44;
 /** @type {number} */ var $45=$n;
 /** @type {number} */ var $46=(($45+16)|0);
 /** @type {number} */ var $47=$46;
 /** @type {number} */ var $48=(($47+12)|0);
 HEAP32[(($48)>>2)]=0;
 /** @type {number} */ var $49=$n;
 /** @type {number} */ var $50=(($49+16)|0);
 /** @type {number} */ var $51=$50;
 /** @type {number} */ var $52=(($51+8)|0);
 HEAP32[(($52)>>2)]=0;
 /** @type {number} */ var $53=$n;
 /** @type {number} */ var $54=(($53)|0);
 /** @type {number} */ var $55=(($54+8)|0);
 HEAP32[(($55)>>2)]=0;
 label=11;break;
 case 11: 
 /** @type {number} */ var $57=$i;
 /** @type {number} */ var $58=((($57)+(1))|0);
 $i=$58;
 label=9;break;
 case 12: 
 label=13;break;
 case 13: 
 /** @type {number} */ var $61=$lsize;
 /** @type {number} */ var $62=(($61)&255);
 /** @type {number} */ var $63=$2;
 /** @type {number} */ var $64=(($63+7)|0);
 HEAP8[($64)]=$62;
 /** @type {number} */ var $65=$3;
 /** @type {number} */ var $66=$2;
 /** @type {number} */ var $67=(($66+16)|0);
 /** @type {number} */ var $68=HEAP32[(($67)>>2)];
 /** @type {number} */ var $69=(($68+($65<<5))|0);
 /** @type {number} */ var $70=$2;
 /** @type {number} */ var $71=(($70+20)|0);
 HEAP32[(($71)>>2)]=$69;
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $t
 * @param {number} $key
 * @return {number}
 */
function _mainposition($t,$key){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $s;
 $2=$t;
 $3=$key;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=(($4+8)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=$6&63;
 switch(($7|0)){case 3:{ label=2;break;}case 20:{ label=3;break;}case 4:{ label=6;break;}case 1:{ label=7;break;}case 2:{ label=8;break;}case 22:{ label=9;break;}default:{label=10;break;}}break;
 case 2: 
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=$3;
 /** @type {number} */ var $11=(($10)|0);
 /** @type {number} */ var $12=$11;
 /** @type {number} */ var $13=HEAPF64[(($12)>>3)];
 /** @type {number} */ var $14=_hashnum($9,$13);
 $1=$14;
 label=11;break;
 case 3: 
 /** @type {number} */ var $16=$3;
 /** @type {number} */ var $17=(($16)|0);
 /** @type {number} */ var $18=$17;
 /** @type {number} */ var $19=HEAP32[(($18)>>2)];
 /** @type {number} */ var $20=$19;
 $s=$20;
 /** @type {number} */ var $21=$s;
 /** @type {number} */ var $22=$21;
 /** @type {number} */ var $23=(($22+6)|0);
 /** @type {number} */ var $24=HEAP8[($23)];
 /** @type {number} */ var $25=($24&255);
 /** @type {number} */ var $26=($25|0)==0;
 if($26){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $28=$s;
 /** @type {number} */ var $29=(($28+16)|0);
 /** @type {number} */ var $30=$29;
 /** @type {number} */ var $31=$s;
 /** @type {number} */ var $32=$31;
 /** @type {number} */ var $33=(($32+12)|0);
 /** @type {number} */ var $34=HEAP32[(($33)>>2)];
 /** @type {number} */ var $35=$s;
 /** @type {number} */ var $36=$35;
 /** @type {number} */ var $37=(($36+8)|0);
 /** @type {number} */ var $38=HEAP32[(($37)>>2)];
 /** @type {number} */ var $39=_luaS_hash($30,$34,$38);
 /** @type {number} */ var $40=$s;
 /** @type {number} */ var $41=$40;
 /** @type {number} */ var $42=(($41+8)|0);
 HEAP32[(($42)>>2)]=$39;
 /** @type {number} */ var $43=$s;
 /** @type {number} */ var $44=$43;
 /** @type {number} */ var $45=(($44+6)|0);
 HEAP8[($45)]=1;
 label=5;break;
 case 5: 
 /** @type {number} */ var $47=$3;
 /** @type {number} */ var $48=(($47)|0);
 /** @type {number} */ var $49=$48;
 /** @type {number} */ var $50=HEAP32[(($49)>>2)];
 /** @type {number} */ var $51=$50;
 /** @type {number} */ var $52=$51;
 /** @type {number} */ var $53=(($52+8)|0);
 /** @type {number} */ var $54=HEAP32[(($53)>>2)];
 /** @type {number} */ var $55=$2;
 /** @type {number} */ var $56=(($55+7)|0);
 /** @type {number} */ var $57=HEAP8[($56)];
 /** @type {number} */ var $58=($57&255);
 /** @type {number} */ var $59=1<<$58;
 /** @type {number} */ var $60=((($59)-(1))|0);
 /** @type {number} */ var $61=$54&$60;
 /** @type {number} */ var $62=$2;
 /** @type {number} */ var $63=(($62+16)|0);
 /** @type {number} */ var $64=HEAP32[(($63)>>2)];
 /** @type {number} */ var $65=(($64+($61<<5))|0);
 $1=$65;
 label=11;break;
 case 6: 
 /** @type {number} */ var $67=$3;
 /** @type {number} */ var $68=(($67)|0);
 /** @type {number} */ var $69=$68;
 /** @type {number} */ var $70=HEAP32[(($69)>>2)];
 /** @type {number} */ var $71=$70;
 /** @type {number} */ var $72=$71;
 /** @type {number} */ var $73=(($72+8)|0);
 /** @type {number} */ var $74=HEAP32[(($73)>>2)];
 /** @type {number} */ var $75=$2;
 /** @type {number} */ var $76=(($75+7)|0);
 /** @type {number} */ var $77=HEAP8[($76)];
 /** @type {number} */ var $78=($77&255);
 /** @type {number} */ var $79=1<<$78;
 /** @type {number} */ var $80=((($79)-(1))|0);
 /** @type {number} */ var $81=$74&$80;
 /** @type {number} */ var $82=$2;
 /** @type {number} */ var $83=(($82+16)|0);
 /** @type {number} */ var $84=HEAP32[(($83)>>2)];
 /** @type {number} */ var $85=(($84+($81<<5))|0);
 $1=$85;
 label=11;break;
 case 7: 
 /** @type {number} */ var $87=$3;
 /** @type {number} */ var $88=(($87)|0);
 /** @type {number} */ var $89=$88;
 /** @type {number} */ var $90=HEAP32[(($89)>>2)];
 /** @type {number} */ var $91=$2;
 /** @type {number} */ var $92=(($91+7)|0);
 /** @type {number} */ var $93=HEAP8[($92)];
 /** @type {number} */ var $94=($93&255);
 /** @type {number} */ var $95=1<<$94;
 /** @type {number} */ var $96=((($95)-(1))|0);
 /** @type {number} */ var $97=$90&$96;
 /** @type {number} */ var $98=$2;
 /** @type {number} */ var $99=(($98+16)|0);
 /** @type {number} */ var $100=HEAP32[(($99)>>2)];
 /** @type {number} */ var $101=(($100+($97<<5))|0);
 $1=$101;
 label=11;break;
 case 8: 
 /** @type {number} */ var $103=$3;
 /** @type {number} */ var $104=(($103)|0);
 /** @type {number} */ var $105=$104;
 /** @type {number} */ var $106=HEAP32[(($105)>>2)];
 /** @type {number} */ var $107=$106;
 /** @type {number} */ var $108=$2;
 /** @type {number} */ var $109=(($108+7)|0);
 /** @type {number} */ var $110=HEAP8[($109)];
 /** @type {number} */ var $111=($110&255);
 /** @type {number} */ var $112=1<<$111;
 /** @type {number} */ var $113=((($112)-(1))|0);
 /** @type {number} */ var $114=$113|1;
 /** @type {number} */ var $115=(((($107>>>0))%(($114>>>0)))&-1);
 /** @type {number} */ var $116=$2;
 /** @type {number} */ var $117=(($116+16)|0);
 /** @type {number} */ var $118=HEAP32[(($117)>>2)];
 /** @type {number} */ var $119=(($118+($115<<5))|0);
 $1=$119;
 label=11;break;
 case 9: 
 /** @type {number} */ var $121=$3;
 /** @type {number} */ var $122=(($121)|0);
 /** @type {number} */ var $123=$122;
 /** @type {number} */ var $124=HEAP32[(($123)>>2)];
 /** @type {number} */ var $125=$124;
 /** @type {number} */ var $126=$2;
 /** @type {number} */ var $127=(($126+7)|0);
 /** @type {number} */ var $128=HEAP8[($127)];
 /** @type {number} */ var $129=($128&255);
 /** @type {number} */ var $130=1<<$129;
 /** @type {number} */ var $131=((($130)-(1))|0);
 /** @type {number} */ var $132=$131|1;
 /** @type {number} */ var $133=(((($125>>>0))%(($132>>>0)))&-1);
 /** @type {number} */ var $134=$2;
 /** @type {number} */ var $135=(($134+16)|0);
 /** @type {number} */ var $136=HEAP32[(($135)>>2)];
 /** @type {number} */ var $137=(($136+($133<<5))|0);
 $1=$137;
 label=11;break;
 case 10: 
 /** @type {number} */ var $139=$3;
 /** @type {number} */ var $140=(($139)|0);
 /** @type {number} */ var $141=$140;
 /** @type {number} */ var $142=HEAP32[(($141)>>2)];
 /** @type {number} */ var $143=$142;
 /** @type {number} */ var $144=$2;
 /** @type {number} */ var $145=(($144+7)|0);
 /** @type {number} */ var $146=HEAP8[($145)];
 /** @type {number} */ var $147=($146&255);
 /** @type {number} */ var $148=1<<$147;
 /** @type {number} */ var $149=((($148)-(1))|0);
 /** @type {number} */ var $150=$149|1;
 /** @type {number} */ var $151=(((($143>>>0))%(($150>>>0)))&-1);
 /** @type {number} */ var $152=$2;
 /** @type {number} */ var $153=(($152+16)|0);
 /** @type {number} */ var $154=HEAP32[(($153)>>2)];
 /** @type {number} */ var $155=(($154+($151<<5))|0);
 $1=$155;
 label=11;break;
 case 11: 
 /** @type {number} */ var $157=$1;
 STACKTOP=sp;return $157;
 }
}
/**
 * @param {number} $t
 * @return {number}
 */
function _getfreepos($t){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $2=$t;
 label=2;break;
 case 2: 
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=(($4+20)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=(($7+16)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=($6>>>0)>($9>>>0);
 if($10){label=3;break;}else{label=6;break;}
 case 3: 
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=(($12+20)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=((($14)-(32))|0);
 HEAP32[(($13)>>2)]=$15;
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=(($16+20)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=(($18+16)|0);
 /** @type {number} */ var $20=$19;
 /** @type {number} */ var $21=(($20+8)|0);
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 /** @type {number} */ var $23=($22|0)==0;
 if($23){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $25=$2;
 /** @type {number} */ var $26=(($25+20)|0);
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 $1=$27;
 label=7;break;
 case 5: 
 label=2;break;
 case 6: 
 $1=0;
 label=7;break;
 case 7: 
 /** @type {number} */ var $31=$1;
 STACKTOP=sp;return $31;
 }
}
/**
 * @param {number} $L
 * @param {number} $t
 * @param {number} $ek
 * @return {number}
 */
function _rehash($L,$t,$ek){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+136)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $nasize=sp;
 /** @type {number} */ var $na;
 /** @type {number} */ var $nums=(sp)+(8);
 /** @type {number} */ var $i;
 /** @type {number} */ var $totaluse;
 $1=$L;
 $2=$t;
 $3=$ek;
 $i=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $5=$i;
 /** @type {number} */ var $6=($5|0)<=30;
 if($6){label=3;break;}else{label=5;break;}
 case 3: 
 /** @type {number} */ var $8=$i;
 /** @type {number} */ var $9=(($nums+($8<<2))|0);
 HEAP32[(($9)>>2)]=0;
 label=4;break;
 case 4: 
 /** @type {number} */ var $11=$i;
 /** @type {number} */ var $12=((($11)+(1))|0);
 $i=$12;
 label=2;break;
 case 5: 
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=(($nums)|0);
 /** @type {number} */ var $16=_numusearray($14,$15);
 HEAP32[(($nasize)>>2)]=$16;
 /** @type {number} */ var $17=HEAP32[(($nasize)>>2)];
 $totaluse=$17;
 /** @type {number} */ var $18=$2;
 /** @type {number} */ var $19=(($nums)|0);
 /** @type {number} */ var $20=_numusehash($18,$19,$nasize);
 /** @type {number} */ var $21=$totaluse;
 /** @type {number} */ var $22=((($21)+($20))|0);
 $totaluse=$22;
 /** @type {number} */ var $23=$3;
 /** @type {number} */ var $24=(($nums)|0);
 /** @type {number} */ var $25=_countint($23,$24);
 /** @type {number} */ var $26=HEAP32[(($nasize)>>2)];
 /** @type {number} */ var $27=((($26)+($25))|0);
 HEAP32[(($nasize)>>2)]=$27;
 /** @type {number} */ var $28=$totaluse;
 /** @type {number} */ var $29=((($28)+(1))|0);
 $totaluse=$29;
 /** @type {number} */ var $30=(($nums)|0);
 /** @type {number} */ var $31=_computesizes($30,$nasize);
 $na=$31;
 /** @type {number} */ var $32=$1;
 /** @type {number} */ var $33=$2;
 /** @type {number} */ var $34=HEAP32[(($nasize)>>2)];
 /** @type {number} */ var $35=$totaluse;
 /** @type {number} */ var $36=$na;
 /** @type {number} */ var $37=((($35)-($36))|0);
 _luaH_resize($32,$33,$34,$37);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $t
 * @param {number} $n
 * @return {number}
 */
function _hashnum($t,$n){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $i;
 /** @type {number} */ var $u=sp;
 $1=$t;
 $2=$n;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=($3)+(1);
 /** @type {number} */ var $5=$u;
 HEAPF64[(($5)>>3)]=$4;
 /** @type {number} */ var $6=$u;
 /** @type {number} */ var $7=(($6)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 $i=$8;
 /** @type {number} */ var $9=$u;
 /** @type {number} */ var $10=(($9+4)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=$i;
 /** @type {number} */ var $13=((($12)+($11))|0);
 $i=$13;
 /** @type {number} */ var $14=$i;
 /** @type {number} */ var $15=($14|0)<0;
 if($15){label=2;break;}else{label=5;break;}
 case 2: 
 /** @type {number} */ var $17=$i;
 /** @type {number} */ var $18=$i;
 /** @type {number} */ var $19=(((-$18))|0);
 /** @type {number} */ var $20=($17|0)==($19|0);
 if($20){label=3;break;}else{label=4;break;}
 case 3: 
 $i=0;
 label=4;break;
 case 4: 
 /** @type {number} */ var $23=$i;
 /** @type {number} */ var $24=(((-$23))|0);
 $i=$24;
 label=5;break;
 case 5: 
 /** @type {number} */ var $26=$i;
 /** @type {number} */ var $27=$1;
 /** @type {number} */ var $28=(($27+7)|0);
 /** @type {number} */ var $29=HEAP8[($28)];
 /** @type {number} */ var $30=($29&255);
 /** @type {number} */ var $31=1<<$30;
 /** @type {number} */ var $32=((($31)-(1))|0);
 /** @type {number} */ var $33=$32|1;
 /** @type {number} */ var $34=(((($26|0))%(($33|0)))&-1);
 /** @type {number} */ var $35=$1;
 /** @type {number} */ var $36=(($35+16)|0);
 /** @type {number} */ var $37=HEAP32[(($36)>>2)];
 /** @type {number} */ var $38=(($37+($34<<5))|0);
 STACKTOP=sp;return $38;
 }
}
/**
 * @param {number} $t
 * @param {number} $j
 * @return {number}
 */
function _unbound_search($t,$j){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $i;
 /** @type {number} */ var $m;
 $2=$t;
 $3=$j;
 /** @type {number} */ var $4=$3;
 $i=$4;
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=((($5)+(1))|0);
 $3=$6;
 label=2;break;
 case 2: 
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=$3;
 /** @type {number} */ var $10=_luaH_getint($8,$9);
 /** @type {number} */ var $11=(($10+8)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=($12|0)==0;
 /** @type {number} */ var $14=$13^1;
 if($14){label=3;break;}else{label=9;break;}
 case 3: 
 /** @type {number} */ var $16=$3;
 $i=$16;
 /** @type {number} */ var $17=$3;
 /** @type {number} */ var $18=($17<<1);
 $3=$18;
 /** @type {number} */ var $19=$3;
 /** @type {number} */ var $20=($19>>>0)>2147483645;
 if($20){label=4;break;}else{label=8;break;}
 case 4: 
 $i=1;
 label=5;break;
 case 5: 
 /** @type {number} */ var $23=$2;
 /** @type {number} */ var $24=$i;
 /** @type {number} */ var $25=_luaH_getint($23,$24);
 /** @type {number} */ var $26=(($25+8)|0);
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=($27|0)==0;
 /** @type {number} */ var $29=$28^1;
 if($29){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $31=$i;
 /** @type {number} */ var $32=((($31)+(1))|0);
 $i=$32;
 label=5;break;
 case 7: 
 /** @type {number} */ var $34=$i;
 /** @type {number} */ var $35=((($34)-(1))|0);
 $1=$35;
 label=16;break;
 case 8: 
 label=2;break;
 case 9: 
 label=10;break;
 case 10: 
 /** @type {number} */ var $39=$3;
 /** @type {number} */ var $40=$i;
 /** @type {number} */ var $41=((($39)-($40))|0);
 /** @type {number} */ var $42=($41>>>0)>1;
 if($42){label=11;break;}else{label=15;break;}
 case 11: 
 /** @type {number} */ var $44=$i;
 /** @type {number} */ var $45=$3;
 /** @type {number} */ var $46=((($44)+($45))|0);
 /** @type {number} */ var $47=(((($46>>>0))/(2))&-1);
 $m=$47;
 /** @type {number} */ var $48=$2;
 /** @type {number} */ var $49=$m;
 /** @type {number} */ var $50=_luaH_getint($48,$49);
 /** @type {number} */ var $51=(($50+8)|0);
 /** @type {number} */ var $52=HEAP32[(($51)>>2)];
 /** @type {number} */ var $53=($52|0)==0;
 if($53){label=12;break;}else{label=13;break;}
 case 12: 
 /** @type {number} */ var $55=$m;
 $3=$55;
 label=14;break;
 case 13: 
 /** @type {number} */ var $57=$m;
 $i=$57;
 label=14;break;
 case 14: 
 label=10;break;
 case 15: 
 /** @type {number} */ var $60=$i;
 $1=$60;
 label=16;break;
 case 16: 
 /** @type {number} */ var $62=$1;
 STACKTOP=sp;return $62;
 }
}
/**
 * @param {number} $key
 * @return {number}
 */
function _arrayindex($key){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $n;
 /** @type {number} */ var $k;
 /** @type {number} */ var $u=sp;
 $2=$key;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=(($3+8)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=($5|0)==3;
 if($6){label=2;break;}else{label=5;break;}
 case 2: 
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=(($8)|0);
 /** @type {number} */ var $10=$9;
 /** @type {number} */ var $11=HEAPF64[(($10)>>3)];
 $n=$11;
 /** @type {number} */ var $12=$n;
 /** @type {number} */ var $13=($12)+(6755399441055744);
 /** @type {number} */ var $14=$u;
 HEAPF64[(($14)>>3)]=$13;
 /** @type {number} */ var $15=HEAP32[((2572)>>2)];
 /** @type {number} */ var $16=($15|0)==33;
 /** @type {number} */ var $17=($16&1);
 /** @type {number} */ var $18=$u;
 /** @type {number} */ var $19=(($18+($17<<2))|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 $k=$20;
 /** @type {number} */ var $21=$k;
 /** @type {number} */ var $22=($21|0);
 /** @type {number} */ var $23=$n;
 /** @type {number} */ var $24=$22==$23;
 if($24){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $26=$k;
 $1=$26;
 label=6;break;
 case 4: 
 label=5;break;
 case 5: 
 $1=-1;
 label=6;break;
 case 6: 
 /** @type {number} */ var $30=$1;
 STACKTOP=sp;return $30;
 }
}
/**
 * @param {number} $t
 * @param {number} $nums
 * @return {number}
 */
function _numusearray($t,$nums){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $lg;
 /** @type {number} */ var $ttlg;
 /** @type {number} */ var $ause;
 /** @type {number} */ var $i;
 /** @type {number} */ var $lc;
 /** @type {number} */ var $lim;
 $1=$t;
 $2=$nums;
 $ause=0;
 $i=1;
 $lg=0;
 $ttlg=1;
 label=2;break;
 case 2: 
 /** @type {number} */ var $4=$lg;
 /** @type {number} */ var $5=($4|0)<=30;
 if($5){label=3;break;}else{label=15;break;}
 case 3: 
 $lc=0;
 /** @type {number} */ var $7=$ttlg;
 $lim=$7;
 /** @type {number} */ var $8=$lim;
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=(($9+28)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=($8|0)>($11|0);
 if($12){label=4;break;}else{label=7;break;}
 case 4: 
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=(($14+28)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 $lim=$16;
 /** @type {number} */ var $17=$i;
 /** @type {number} */ var $18=$lim;
 /** @type {number} */ var $19=($17|0)>($18|0);
 if($19){label=5;break;}else{label=6;break;}
 case 5: 
 label=15;break;
 case 6: 
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 /** @type {number} */ var $24=$i;
 /** @type {number} */ var $25=$lim;
 /** @type {number} */ var $26=($24|0)<=($25|0);
 if($26){label=9;break;}else{label=13;break;}
 case 9: 
 /** @type {number} */ var $28=$i;
 /** @type {number} */ var $29=((($28)-(1))|0);
 /** @type {number} */ var $30=$1;
 /** @type {number} */ var $31=(($30+12)|0);
 /** @type {number} */ var $32=HEAP32[(($31)>>2)];
 /** @type {number} */ var $33=(($32+($29<<4))|0);
 /** @type {number} */ var $34=(($33+8)|0);
 /** @type {number} */ var $35=HEAP32[(($34)>>2)];
 /** @type {number} */ var $36=($35|0)==0;
 if($36){label=11;break;}else{label=10;break;}
 case 10: 
 /** @type {number} */ var $38=$lc;
 /** @type {number} */ var $39=((($38)+(1))|0);
 $lc=$39;
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 /** @type {number} */ var $42=$i;
 /** @type {number} */ var $43=((($42)+(1))|0);
 $i=$43;
 label=8;break;
 case 13: 
 /** @type {number} */ var $45=$lc;
 /** @type {number} */ var $46=$lg;
 /** @type {number} */ var $47=$2;
 /** @type {number} */ var $48=(($47+($46<<2))|0);
 /** @type {number} */ var $49=HEAP32[(($48)>>2)];
 /** @type {number} */ var $50=((($49)+($45))|0);
 HEAP32[(($48)>>2)]=$50;
 /** @type {number} */ var $51=$lc;
 /** @type {number} */ var $52=$ause;
 /** @type {number} */ var $53=((($52)+($51))|0);
 $ause=$53;
 label=14;break;
 case 14: 
 /** @type {number} */ var $55=$lg;
 /** @type {number} */ var $56=((($55)+(1))|0);
 $lg=$56;
 /** @type {number} */ var $57=$ttlg;
 /** @type {number} */ var $58=($57<<1);
 $ttlg=$58;
 label=2;break;
 case 15: 
 /** @type {number} */ var $60=$ause;
 STACKTOP=sp;return $60;
 }
}
/**
 * @param {number} $t
 * @param {number} $nums
 * @param {number} $pnasize
 * @return {number}
 */
function _numusehash($t,$nums,$pnasize){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $totaluse;
 /** @type {number} */ var $ause;
 /** @type {number} */ var $i;
 /** @type {number} */ var $n;
 $1=$t;
 $2=$nums;
 $3=$pnasize;
 $totaluse=0;
 $ause=0;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+7)|0);
 /** @type {number} */ var $6=HEAP8[($5)];
 /** @type {number} */ var $7=($6&255);
 /** @type {number} */ var $8=1<<$7;
 $i=$8;
 label=2;break;
 case 2: 
 /** @type {number} */ var $10=$i;
 /** @type {number} */ var $11=((($10)-(1))|0);
 $i=$11;
 /** @type {number} */ var $12=($10|0)!=0;
 if($12){label=3;break;}else{label=6;break;}
 case 3: 
 /** @type {number} */ var $14=$i;
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=(($15+16)|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=(($17+($14<<5))|0);
 $n=$18;
 /** @type {number} */ var $19=$n;
 /** @type {number} */ var $20=(($19)|0);
 /** @type {number} */ var $21=(($20+8)|0);
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 /** @type {number} */ var $23=($22|0)==0;
 if($23){label=5;break;}else{label=4;break;}
 case 4: 
 /** @type {number} */ var $25=$n;
 /** @type {number} */ var $26=(($25+16)|0);
 /** @type {number} */ var $27=$26;
 /** @type {number} */ var $28=$2;
 /** @type {number} */ var $29=_countint($27,$28);
 /** @type {number} */ var $30=$ause;
 /** @type {number} */ var $31=((($30)+($29))|0);
 $ause=$31;
 /** @type {number} */ var $32=$totaluse;
 /** @type {number} */ var $33=((($32)+(1))|0);
 $totaluse=$33;
 label=5;break;
 case 5: 
 label=2;break;
 case 6: 
 /** @type {number} */ var $36=$ause;
 /** @type {number} */ var $37=$3;
 /** @type {number} */ var $38=HEAP32[(($37)>>2)];
 /** @type {number} */ var $39=((($38)+($36))|0);
 HEAP32[(($37)>>2)]=$39;
 /** @type {number} */ var $40=$totaluse;
 STACKTOP=sp;return $40;
 }
}
/**
 * @param {number} $key
 * @param {number} $nums
 * @return {number}
 */
function _countint($key,$nums){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $k;
 $2=$key;
 $3=$nums;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_arrayindex($4);
 $k=$5;
 /** @type {number} */ var $6=$k;
 /** @type {number} */ var $7=0<($6|0);
 if($7){label=2;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $9=$k;
 /** @type {number} */ var $10=($9|0)<=1073741824;
 if($10){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $12=$k;
 /** @type {number} */ var $13=_luaO_ceillog2($12);
 /** @type {number} */ var $14=$3;
 /** @type {number} */ var $15=(($14+($13<<2))|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=((($16)+(1))|0);
 HEAP32[(($15)>>2)]=$17;
 $1=1;
 label=5;break;
 case 4: 
 $1=0;
 label=5;break;
 case 5: 
 /** @type {number} */ var $20=$1;
 STACKTOP=sp;return $20;
 }
}
/**
 * @param {number} $nums
 * @param {number} $narray
 * @return {number}
 */
function _computesizes($nums,$narray){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $i;
 /** @type {number} */ var $twotoi;
 /** @type {number} */ var $a;
 /** @type {number} */ var $na;
 /** @type {number} */ var $n;
 $1=$nums;
 $2=$narray;
 $a=0;
 $na=0;
 $n=0;
 $i=0;
 $twotoi=1;
 label=2;break;
 case 2: 
 /** @type {number} */ var $4=$twotoi;
 /** @type {number} */ var $5=(((($4|0))/(2))&-1);
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=($5|0)<($7|0);
 if($8){label=3;break;}else{label=11;break;}
 case 3: 
 /** @type {number} */ var $10=$i;
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=(($11+($10<<2))|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=($13|0)>0;
 if($14){label=4;break;}else{label=7;break;}
 case 4: 
 /** @type {number} */ var $16=$i;
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=(($17+($16<<2))|0);
 /** @type {number} */ var $19=HEAP32[(($18)>>2)];
 /** @type {number} */ var $20=$a;
 /** @type {number} */ var $21=((($20)+($19))|0);
 $a=$21;
 /** @type {number} */ var $22=$a;
 /** @type {number} */ var $23=$twotoi;
 /** @type {number} */ var $24=(((($23|0))/(2))&-1);
 /** @type {number} */ var $25=($22|0)>($24|0);
 if($25){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $27=$twotoi;
 $n=$27;
 /** @type {number} */ var $28=$a;
 $na=$28;
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 /** @type {number} */ var $31=$a;
 /** @type {number} */ var $32=$2;
 /** @type {number} */ var $33=HEAP32[(($32)>>2)];
 /** @type {number} */ var $34=($31|0)==($33|0);
 if($34){label=8;break;}else{label=9;break;}
 case 8: 
 label=11;break;
 case 9: 
 label=10;break;
 case 10: 
 /** @type {number} */ var $38=$i;
 /** @type {number} */ var $39=((($38)+(1))|0);
 $i=$39;
 /** @type {number} */ var $40=$twotoi;
 /** @type {number} */ var $41=($40<<1);
 $twotoi=$41;
 label=2;break;
 case 11: 
 /** @type {number} */ var $43=$n;
 /** @type {number} */ var $44=$2;
 HEAP32[(($44)>>2)]=$43;
 /** @type {number} */ var $45=$na;
 STACKTOP=sp;return $45;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaT_init($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $i;
 $1=$L;
 $i=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $3=$i;
 /** @type {number} */ var $4=($3|0)<17;
 if($4){label=3;break;}else{label=5;break;}
 case 3: 
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=$i;
 /** @type {number} */ var $8=((1168+($7<<2))|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=_luaS_new($6,$9);
 /** @type {number} */ var $11=$i;
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=(($12+12)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=(($14+184)|0);
 /** @type {number} */ var $16=(($15+($11<<2))|0);
 HEAP32[(($16)>>2)]=$10;
 /** @type {number} */ var $17=$i;
 /** @type {number} */ var $18=$1;
 /** @type {number} */ var $19=(($18+12)|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=(($20+184)|0);
 /** @type {number} */ var $22=(($21+($17<<2))|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 /** @type {number} */ var $24=$23;
 /** @type {number} */ var $25=(($24+5)|0);
 /** @type {number} */ var $26=HEAP8[($25)];
 /** @type {number} */ var $27=($26&255);
 /** @type {number} */ var $28=$27|32;
 /** @type {number} */ var $29=(($28)&255);
 HEAP8[($25)]=$29;
 label=4;break;
 case 4: 
 /** @type {number} */ var $31=$i;
 /** @type {number} */ var $32=((($31)+(1))|0);
 $i=$32;
 label=2;break;
 case 5: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $events
 * @param {number} $event
 * @param {number} $ename
 * @return {number}
 */
function _luaT_gettm($events,$event,$ename){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $tm;
 $2=$events;
 $3=$event;
 $4=$ename;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$4;
 /** @type {number} */ var $7=_luaH_getstr($5,$6);
 $tm=$7;
 /** @type {number} */ var $8=$tm;
 /** @type {number} */ var $9=(($8+8)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=($10|0)==0;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $13=$3;
 /** @type {number} */ var $14=1<<$13;
 /** @type {number} */ var $15=(($14)&255);
 /** @type {number} */ var $16=($15&255);
 /** @type {number} */ var $17=$2;
 /** @type {number} */ var $18=(($17+6)|0);
 /** @type {number} */ var $19=HEAP8[($18)];
 /** @type {number} */ var $20=($19&255);
 /** @type {number} */ var $21=$20|$16;
 /** @type {number} */ var $22=(($21)&255);
 HEAP8[($18)]=$22;
 $1=0;
 label=4;break;
 case 3: 
 /** @type {number} */ var $24=$tm;
 $1=$24;
 label=4;break;
 case 4: 
 /** @type {number} */ var $26=$1;
 STACKTOP=sp;return $26;
 }
}
/**
 * @param {number} $L
 * @param {number} $o
 * @param {number} $event
 * @return {number}
 */
function _luaT_gettmbyobj($L,$o,$event){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $mt;
 $1=$L;
 $2=$o;
 $3=$event;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=(($4+8)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=$6&15;
 if(($7|0)==5){ label=2;break;}else if(($7|0)==7){ label=3;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=(($9)|0);
 /** @type {number} */ var $11=$10;
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=$12;
 /** @type {number} */ var $14=(($13+8)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 $mt=$15;
 label=5;break;
 case 3: 
 /** @type {number} */ var $17=$2;
 /** @type {number} */ var $18=(($17)|0);
 /** @type {number} */ var $19=$18;
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=$20;
 /** @type {number} */ var $22=$21;
 /** @type {number} */ var $23=(($22+8)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 $mt=$24;
 label=5;break;
 case 4: 
 /** @type {number} */ var $26=$2;
 /** @type {number} */ var $27=(($26+8)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=$28&15;
 /** @type {number} */ var $30=$1;
 /** @type {number} */ var $31=(($30+12)|0);
 /** @type {number} */ var $32=HEAP32[(($31)>>2)];
 /** @type {number} */ var $33=(($32+252)|0);
 /** @type {number} */ var $34=(($33+($29<<2))|0);
 /** @type {number} */ var $35=HEAP32[(($34)>>2)];
 $mt=$35;
 label=5;break;
 case 5: 
 /** @type {number} */ var $37=$mt;
 /** @type {number} */ var $38=($37|0)!=0;
 if($38){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $40=$mt;
 /** @type {number} */ var $41=$3;
 /** @type {number} */ var $42=$1;
 /** @type {number} */ var $43=(($42+12)|0);
 /** @type {number} */ var $44=HEAP32[(($43)>>2)];
 /** @type {number} */ var $45=(($44+184)|0);
 /** @type {number} */ var $46=(($45+($41<<2))|0);
 /** @type {number} */ var $47=HEAP32[(($46)>>2)];
 /** @type {number} */ var $48=_luaH_getstr($40,$47);
 var $51=$48;label=8;break;
 case 7: 
 var $51=1280;label=8;break;
 case 8: 
 var $51;
 STACKTOP=sp;return $51;
 }
}
/**
 * @param {number} $L
 * @param {number} $Z
 * @param {number} $buff
 * @param {number} $name
 * @return {number}
 */
function _luaU_undump($L,$Z,$buff,$name){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $S=sp;
 /** @type {number} */ var $cl;
 /** @type {number} */ var $io;
 /** @type {number} */ var $p;
 /** @type {number} */ var $io1;
 $1=$L;
 $2=$Z;
 $3=$buff;
 $4=$name;
 /** @type {number} */ var $5=$4;
 /** @type {number} */ var $6=HEAP8[($5)];
 /** @type {number} */ var $7=(($6<<24)>>24);
 /** @type {number} */ var $8=($7|0)==64;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $10=$4;
 /** @type {number} */ var $11=HEAP8[($10)];
 /** @type {number} */ var $12=(($11<<24)>>24);
 /** @type {number} */ var $13=($12|0)==61;
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $15=$4;
 /** @type {number} */ var $16=(($15+1)|0);
 /** @type {number} */ var $17=(($S+12)|0);
 HEAP32[(($17)>>2)]=$16;
 label=8;break;
 case 4: 
 /** @type {number} */ var $19=$4;
 /** @type {number} */ var $20=HEAP8[($19)];
 /** @type {number} */ var $21=(($20<<24)>>24);
 /** @type {number} */ var $22=HEAP8[(7496)];
 /** @type {number} */ var $23=(($22<<24)>>24);
 /** @type {number} */ var $24=($21|0)==($23|0);
 if($24){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $26=(($S+12)|0);
 HEAP32[(($26)>>2)]=11056;
 label=7;break;
 case 6: 
 /** @type {number} */ var $28=$4;
 /** @type {number} */ var $29=(($S+12)|0);
 HEAP32[(($29)>>2)]=$28;
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 /** @type {number} */ var $32=$1;
 /** @type {number} */ var $33=(($S)|0);
 HEAP32[(($33)>>2)]=$32;
 /** @type {number} */ var $34=$2;
 /** @type {number} */ var $35=(($S+4)|0);
 HEAP32[(($35)>>2)]=$34;
 /** @type {number} */ var $36=$3;
 /** @type {number} */ var $37=(($S+8)|0);
 HEAP32[(($37)>>2)]=$36;
 _LoadHeader($S);
 /** @type {number} */ var $38=$1;
 /** @type {number} */ var $39=_luaF_newLclosure($38,1);
 $cl=$39;
 /** @type {number} */ var $40=$1;
 /** @type {number} */ var $41=(($40+8)|0);
 /** @type {number} */ var $42=HEAP32[(($41)>>2)];
 $io=$42;
 /** @type {number} */ var $43=$cl;
 /** @type {number} */ var $44=$43;
 /** @type {number} */ var $45=$io;
 /** @type {number} */ var $46=(($45)|0);
 /** @type {number} */ var $47=$46;
 HEAP32[(($47)>>2)]=$44;
 /** @type {number} */ var $48=$io;
 /** @type {number} */ var $49=(($48+8)|0);
 HEAP32[(($49)>>2)]=70;
 /** @type {number} */ var $50=$1;
 /** @type {number} */ var $51=(($50+8)|0);
 /** @type {number} */ var $52=HEAP32[(($51)>>2)];
 /** @type {number} */ var $53=(($52+16)|0);
 HEAP32[(($51)>>2)]=$53;
 /** @type {number} */ var $54=$1;
 /** @type {number} */ var $55=(($54+24)|0);
 /** @type {number} */ var $56=HEAP32[(($55)>>2)];
 /** @type {number} */ var $57=$1;
 /** @type {number} */ var $58=(($57+8)|0);
 /** @type {number} */ var $59=HEAP32[(($58)>>2)];
 /** @type {number} */ var $60=$56;
 /** @type {number} */ var $61=$59;
 /** @type {number} */ var $62=((($60)-($61))|0);
 /** @type {number} */ var $63=(((($62|0))/(16))&-1);
 /** @type {number} */ var $64=($63|0)<=0;
 if($64){label=9;break;}else{label=10;break;}
 case 9: 
 /** @type {number} */ var $66=$1;
 _luaD_growstack($66,0);
 label=11;break;
 case 10: 
 label=11;break;
 case 11: 
 /** @type {number} */ var $69=$1;
 /** @type {number} */ var $70=_luaF_newproto($69);
 /** @type {number} */ var $71=$cl;
 /** @type {number} */ var $72=$71;
 /** @type {number} */ var $73=(($72+12)|0);
 HEAP32[(($73)>>2)]=$70;
 /** @type {number} */ var $74=$cl;
 /** @type {number} */ var $75=$74;
 /** @type {number} */ var $76=(($75+12)|0);
 /** @type {number} */ var $77=HEAP32[(($76)>>2)];
 _LoadFunction($S,$77);
 /** @type {number} */ var $78=$cl;
 /** @type {number} */ var $79=$78;
 /** @type {number} */ var $80=(($79+12)|0);
 /** @type {number} */ var $81=HEAP32[(($80)>>2)];
 /** @type {number} */ var $82=(($81+40)|0);
 /** @type {number} */ var $83=HEAP32[(($82)>>2)];
 /** @type {number} */ var $84=($83|0)!=1;
 if($84){label=12;break;}else{label=13;break;}
 case 12: 
 /** @type {number} */ var $86=$cl;
 /** @type {number} */ var $87=$86;
 /** @type {number} */ var $88=(($87+12)|0);
 /** @type {number} */ var $89=HEAP32[(($88)>>2)];
 $p=$89;
 /** @type {number} */ var $90=$1;
 /** @type {number} */ var $91=$cl;
 /** @type {number} */ var $92=$91;
 /** @type {number} */ var $93=(($92+12)|0);
 /** @type {number} */ var $94=HEAP32[(($93)>>2)];
 /** @type {number} */ var $95=(($94+40)|0);
 /** @type {number} */ var $96=HEAP32[(($95)>>2)];
 /** @type {number} */ var $97=_luaF_newLclosure($90,$96);
 $cl=$97;
 /** @type {number} */ var $98=$p;
 /** @type {number} */ var $99=$cl;
 /** @type {number} */ var $100=$99;
 /** @type {number} */ var $101=(($100+12)|0);
 HEAP32[(($101)>>2)]=$98;
 /** @type {number} */ var $102=$1;
 /** @type {number} */ var $103=(($102+8)|0);
 /** @type {number} */ var $104=HEAP32[(($103)>>2)];
 /** @type {number} */ var $105=((($104)-(16))|0);
 $io1=$105;
 /** @type {number} */ var $106=$cl;
 /** @type {number} */ var $107=$106;
 /** @type {number} */ var $108=$io1;
 /** @type {number} */ var $109=(($108)|0);
 /** @type {number} */ var $110=$109;
 HEAP32[(($110)>>2)]=$107;
 /** @type {number} */ var $111=$io1;
 /** @type {number} */ var $112=(($111+8)|0);
 HEAP32[(($112)>>2)]=70;
 label=13;break;
 case 13: 
 /** @type {number} */ var $114=$cl;
 STACKTOP=sp;return $114;
 }
}
/**
 * @param {number} $h
 * @return {number}
 */
function _luaU_header($h){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 /** @type {number} */ var $1;
 /** @type {number} */ var $x=sp;
 $1=$h;
 HEAP32[(($x)>>2)]=1;
 /** @type {number} */ var $2=$1;
 HEAP8[($2)]=HEAP8[(7496)];HEAP8[((($2)+(1))|0)]=HEAP8[(7497)];HEAP8[((($2)+(2))|0)]=HEAP8[(7498)];HEAP8[((($2)+(3))|0)]=HEAP8[(7499)];
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+4)|0);
 $1=$4;
 /** @type {number} */ var $5=HEAP8[(8784)];
 /** @type {number} */ var $6=(($5<<24)>>24);
 /** @type {number} */ var $7=((($6)-(48))|0);
 /** @type {number} */ var $8=($7<<4);
 /** @type {number} */ var $9=HEAP8[(6736)];
 /** @type {number} */ var $10=(($9<<24)>>24);
 /** @type {number} */ var $11=((($10)-(48))|0);
 /** @type {number} */ var $12=((($8)+($11))|0);
 /** @type {number} */ var $13=(($12)&255);
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=(($14+1)|0);
 $1=$15;
 HEAP8[($14)]=$13;
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=(($16+1)|0);
 $1=$17;
 HEAP8[($16)]=0;
 /** @type {number} */ var $18=$x;
 /** @type {number} */ var $19=HEAP8[($18)];
 /** @type {number} */ var $20=$1;
 /** @type {number} */ var $21=(($20+1)|0);
 $1=$21;
 HEAP8[($20)]=$19;
 /** @type {number} */ var $22=$1;
 /** @type {number} */ var $23=(($22+1)|0);
 $1=$23;
 HEAP8[($22)]=4;
 /** @type {number} */ var $24=$1;
 /** @type {number} */ var $25=(($24+1)|0);
 $1=$25;
 HEAP8[($24)]=4;
 /** @type {number} */ var $26=$1;
 /** @type {number} */ var $27=(($26+1)|0);
 $1=$27;
 HEAP8[($26)]=4;
 /** @type {number} */ var $28=$1;
 /** @type {number} */ var $29=(($28+1)|0);
 $1=$29;
 HEAP8[($28)]=8;
 /** @type {number} */ var $30=$1;
 /** @type {number} */ var $31=(($30+1)|0);
 $1=$31;
 HEAP8[($30)]=0;
 /** @type {number} */ var $32=$1;
 HEAP8[($32)]=HEAP8[(5344)];HEAP8[((($32)+(1))|0)]=HEAP8[(5345)];HEAP8[((($32)+(2))|0)]=HEAP8[(5346)];HEAP8[((($32)+(3))|0)]=HEAP8[(5347)];HEAP8[((($32)+(4))|0)]=HEAP8[(5348)];HEAP8[((($32)+(5))|0)]=HEAP8[(5349)];
 STACKTOP=sp;return;
}
/**
 * @param {number} $S
 * @return {number}
 */
function _LoadHeader($S){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $h=sp;
 /** @type {number} */ var $s=(sp)+(24);
 $1=$S;
 /** @type {number} */ var $2=(($h)|0);
 _luaU_header($2);
 /** @type {number} */ var $3=$s;
 /** @type {number} */ var $4=$h;
 HEAP8[($3)]=HEAP8[($4)];
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($s)|0);
 /** @type {number} */ var $7=(($6+1)|0);
 _LoadBlock($5,$7,17);
 /** @type {number} */ var $8=(($h)|0);
 /** @type {number} */ var $9=(($s)|0);
 /** @type {number} */ var $10=_memcmp($8,$9,18);
 /** @type {number} */ var $11=($10|0)==0;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 STACKTOP=sp;return;
 case 3: 
 /** @type {number} */ var $14=(($h)|0);
 /** @type {number} */ var $15=(($s)|0);
 /** @type {number} */ var $16=_memcmp($14,$15,4);
 /** @type {number} */ var $17=($16|0)!=0;
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $19=$1;
 _error($19,3064);
 case 5: 
 /** @type {number} */ var $21=(($h)|0);
 /** @type {number} */ var $22=(($s)|0);
 /** @type {number} */ var $23=_memcmp($21,$22,6);
 /** @type {number} */ var $24=($23|0)!=0;
 if($24){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $26=$1;
 _error($26,2768);
 case 7: 
 /** @type {number} */ var $28=(($h)|0);
 /** @type {number} */ var $29=(($s)|0);
 /** @type {number} */ var $30=_memcmp($28,$29,12);
 /** @type {number} */ var $31=($30|0)!=0;
 if($31){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $33=$1;
 _error($33,11984);
 case 9: 
 /** @type {number} */ var $35=$1;
 _error($35,3440);
 }
}
/**
 * @param {number} $S
 * @param {number} $f
 * @return {number}
 */
function _LoadFunction($S,$f){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$S;
 $2=$f;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_LoadInt($3);
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=(($5+64)|0);
 HEAP32[(($6)>>2)]=$4;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=_LoadInt($7);
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=(($9+68)|0);
 HEAP32[(($10)>>2)]=$8;
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=_LoadChar($11);
 /** @type {number} */ var $13=(($12)&255);
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=(($14+76)|0);
 HEAP8[($15)]=$13;
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=_LoadChar($16);
 /** @type {number} */ var $18=(($17)&255);
 /** @type {number} */ var $19=$2;
 /** @type {number} */ var $20=(($19+77)|0);
 HEAP8[($20)]=$18;
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=_LoadChar($21);
 /** @type {number} */ var $23=(($22)&255);
 /** @type {number} */ var $24=$2;
 /** @type {number} */ var $25=(($24+78)|0);
 HEAP8[($25)]=$23;
 /** @type {number} */ var $26=$1;
 /** @type {number} */ var $27=$2;
 _LoadCode($26,$27);
 /** @type {number} */ var $28=$1;
 /** @type {number} */ var $29=$2;
 _LoadConstants($28,$29);
 /** @type {number} */ var $30=$1;
 /** @type {number} */ var $31=$2;
 _LoadUpvalues($30,$31);
 /** @type {number} */ var $32=$1;
 /** @type {number} */ var $33=$2;
 _LoadDebug($32,$33);
 STACKTOP=sp;return;
}
/**
 * @param {number} $S
 * @param {number} $b
 * @param {number} $size
 * @return {number}
 */
function _LoadBlock($S,$b,$size){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$S;
 $2=$b;
 $3=$size;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+4)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=$3;
 /** @type {number} */ var $9=_luaZ_read($6,$7,$8);
 /** @type {number} */ var $10=($9|0)!=0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $12=$1;
 _error($12,4208);
 case 3: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $S
 * @param {number} $why
 * @return {number}
 */
function _error($S,$why){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$S;
 $2=$why;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+12)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=_luaO_pushfstring($5,3856,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$8,HEAP32[(((tempVarArgs)+(8))>>2)]=$9,tempVarArgs)); STACKTOP=tempVarArgs;
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=(($11)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 _luaD_throw($13,3);
 STACKTOP=sp;return;
}
/**
 * @param {number} $S
 * @return {number}
 */
function _LoadInt($S){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $x=sp;
 $1=$S;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$x;
 _LoadBlock($2,$3,4);
 /** @type {number} */ var $4=HEAP32[(($x)>>2)];
 /** @type {number} */ var $5=($4|0)<0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $7=$1;
 _error($7,3440);
 case 3: 
 /** @type {number} */ var $9=HEAP32[(($x)>>2)];
 STACKTOP=sp;return $9;
 }
}
/**
 * @param {number} $S
 * @return {number}
 */
function _LoadChar($S){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 /** @type {number} */ var $1;
 /** @type {number} */ var $x=sp;
 $1=$S;
 /** @type {number} */ var $2=$1;
 _LoadBlock($2,$x,1);
 /** @type {number} */ var $3=HEAP8[($x)];
 /** @type {number} */ var $4=(($3<<24)>>24);
 STACKTOP=sp;return $4;
}
/**
 * @param {number} $S
 * @param {number} $f
 * @return {number}
 */
function _LoadCode($S,$f){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $n;
 $1=$S;
 $2=$f;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_LoadInt($3);
 $n=$4;
 /** @type {number} */ var $5=$n;
 /** @type {number} */ var $6=((($5)+(1))|0);
 /** @type {number} */ var $7=($6>>>0)>1073741823;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=(($9)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 _luaM_toobig($11);
 label=4;break;
 case 3: 
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=(($14)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=$n;
 /** @type {number} */ var $18=($17<<2);
 /** @type {number} */ var $19=_luaM_realloc_($16,0,0,$18);
 var $21=$19;label=4;break;
 case 4: 
 var $21;
 /** @type {number} */ var $22=$21;
 /** @type {number} */ var $23=$2;
 /** @type {number} */ var $24=(($23+12)|0);
 HEAP32[(($24)>>2)]=$22;
 /** @type {number} */ var $25=$n;
 /** @type {number} */ var $26=$2;
 /** @type {number} */ var $27=(($26+48)|0);
 HEAP32[(($27)>>2)]=$25;
 /** @type {number} */ var $28=$1;
 /** @type {number} */ var $29=$2;
 /** @type {number} */ var $30=(($29+12)|0);
 /** @type {number} */ var $31=HEAP32[(($30)>>2)];
 /** @type {number} */ var $32=$31;
 /** @type {number} */ var $33=$n;
 /** @type {number} */ var $34=($33<<2);
 _LoadBlock($28,$32,$34);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $S
 * @param {number} $f
 * @return {number}
 */
function _LoadConstants($S,$f){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $i;
 /** @type {number} */ var $n;
 /** @type {number} */ var $o;
 /** @type {number} */ var $t;
 /** @type {number} */ var $io;
 /** @type {number} */ var $io1;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $x_;
 $1=$S;
 $2=$f;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_LoadInt($3);
 $n=$4;
 /** @type {number} */ var $5=$n;
 /** @type {number} */ var $6=((($5)+(1))|0);
 /** @type {number} */ var $7=($6>>>0)>268435455;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=(($9)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 _luaM_toobig($11);
 label=4;break;
 case 3: 
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=(($14)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=$n;
 /** @type {number} */ var $18=($17<<4);
 /** @type {number} */ var $19=_luaM_realloc_($16,0,0,$18);
 var $21=$19;label=4;break;
 case 4: 
 var $21;
 /** @type {number} */ var $22=$21;
 /** @type {number} */ var $23=$2;
 /** @type {number} */ var $24=(($23+8)|0);
 HEAP32[(($24)>>2)]=$22;
 /** @type {number} */ var $25=$n;
 /** @type {number} */ var $26=$2;
 /** @type {number} */ var $27=(($26+44)|0);
 HEAP32[(($27)>>2)]=$25;
 $i=0;
 label=5;break;
 case 5: 
 /** @type {number} */ var $29=$i;
 /** @type {number} */ var $30=$n;
 /** @type {number} */ var $31=($29|0)<($30|0);
 if($31){label=6;break;}else{label=8;break;}
 case 6: 
 /** @type {number} */ var $33=$i;
 /** @type {number} */ var $34=$2;
 /** @type {number} */ var $35=(($34+8)|0);
 /** @type {number} */ var $36=HEAP32[(($35)>>2)];
 /** @type {number} */ var $37=(($36+($33<<4))|0);
 /** @type {number} */ var $38=(($37+8)|0);
 HEAP32[(($38)>>2)]=0;
 label=7;break;
 case 7: 
 /** @type {number} */ var $40=$i;
 /** @type {number} */ var $41=((($40)+(1))|0);
 $i=$41;
 label=5;break;
 case 8: 
 $i=0;
 label=9;break;
 case 9: 
 /** @type {number} */ var $44=$i;
 /** @type {number} */ var $45=$n;
 /** @type {number} */ var $46=($44|0)<($45|0);
 if($46){label=10;break;}else{label=18;break;}
 case 10: 
 /** @type {number} */ var $48=$i;
 /** @type {number} */ var $49=$2;
 /** @type {number} */ var $50=(($49+8)|0);
 /** @type {number} */ var $51=HEAP32[(($50)>>2)];
 /** @type {number} */ var $52=(($51+($48<<4))|0);
 $o=$52;
 /** @type {number} */ var $53=$1;
 /** @type {number} */ var $54=_LoadChar($53);
 $t=$54;
 /** @type {number} */ var $55=$t;
 if(($55|0)==0){ label=11;break;}else if(($55|0)==1){ label=12;break;}else if(($55|0)==3){ label=13;break;}else if(($55|0)==4){ label=14;break;}else{label=15;break;}
 case 11: 
 /** @type {number} */ var $57=$o;
 /** @type {number} */ var $58=(($57+8)|0);
 HEAP32[(($58)>>2)]=0;
 label=16;break;
 case 12: 
 /** @type {number} */ var $60=$o;
 $io=$60;
 /** @type {number} */ var $61=$1;
 /** @type {number} */ var $62=_LoadChar($61);
 /** @type {number} */ var $63=$io;
 /** @type {number} */ var $64=(($63)|0);
 /** @type {number} */ var $65=$64;
 HEAP32[(($65)>>2)]=$62;
 /** @type {number} */ var $66=$io;
 /** @type {number} */ var $67=(($66+8)|0);
 HEAP32[(($67)>>2)]=1;
 label=16;break;
 case 13: 
 /** @type {number} */ var $69=$o;
 $io1=$69;
 /** @type {number} */ var $70=$1;
 /** @type {number} */ var $71=_LoadNumber($70);
 /** @type {number} */ var $72=$io1;
 /** @type {number} */ var $73=(($72)|0);
 /** @type {number} */ var $74=$73;
 HEAPF64[(($74)>>3)]=$71;
 /** @type {number} */ var $75=$io1;
 /** @type {number} */ var $76=(($75+8)|0);
 HEAP32[(($76)>>2)]=3;
 label=16;break;
 case 14: 
 /** @type {number} */ var $78=$o;
 $io2=$78;
 /** @type {number} */ var $79=$1;
 /** @type {number} */ var $80=_LoadString($79);
 $x_=$80;
 /** @type {number} */ var $81=$x_;
 /** @type {number} */ var $82=$81;
 /** @type {number} */ var $83=$io2;
 /** @type {number} */ var $84=(($83)|0);
 /** @type {number} */ var $85=$84;
 HEAP32[(($85)>>2)]=$82;
 /** @type {number} */ var $86=$x_;
 /** @type {number} */ var $87=$86;
 /** @type {number} */ var $88=(($87+4)|0);
 /** @type {number} */ var $89=HEAP8[($88)];
 /** @type {number} */ var $90=($89&255);
 /** @type {number} */ var $91=$90|64;
 /** @type {number} */ var $92=$io2;
 /** @type {number} */ var $93=(($92+8)|0);
 HEAP32[(($93)>>2)]=$91;
 label=16;break;
 case 15: 
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 /** @type {number} */ var $97=$i;
 /** @type {number} */ var $98=((($97)+(1))|0);
 $i=$98;
 label=9;break;
 case 18: 
 /** @type {number} */ var $100=$1;
 /** @type {number} */ var $101=_LoadInt($100);
 $n=$101;
 /** @type {number} */ var $102=$n;
 /** @type {number} */ var $103=((($102)+(1))|0);
 /** @type {number} */ var $104=($103>>>0)>1073741823;
 if($104){label=19;break;}else{label=20;break;}
 case 19: 
 /** @type {number} */ var $106=$1;
 /** @type {number} */ var $107=(($106)|0);
 /** @type {number} */ var $108=HEAP32[(($107)>>2)];
 _luaM_toobig($108);
 label=21;break;
 case 20: 
 /** @type {number} */ var $111=$1;
 /** @type {number} */ var $112=(($111)|0);
 /** @type {number} */ var $113=HEAP32[(($112)>>2)];
 /** @type {number} */ var $114=$n;
 /** @type {number} */ var $115=($114<<2);
 /** @type {number} */ var $116=_luaM_realloc_($113,0,0,$115);
 var $118=$116;label=21;break;
 case 21: 
 var $118;
 /** @type {number} */ var $119=$118;
 /** @type {number} */ var $120=$2;
 /** @type {number} */ var $121=(($120+16)|0);
 HEAP32[(($121)>>2)]=$119;
 /** @type {number} */ var $122=$n;
 /** @type {number} */ var $123=$2;
 /** @type {number} */ var $124=(($123+56)|0);
 HEAP32[(($124)>>2)]=$122;
 $i=0;
 label=22;break;
 case 22: 
 /** @type {number} */ var $126=$i;
 /** @type {number} */ var $127=$n;
 /** @type {number} */ var $128=($126|0)<($127|0);
 if($128){label=23;break;}else{label=25;break;}
 case 23: 
 /** @type {number} */ var $130=$i;
 /** @type {number} */ var $131=$2;
 /** @type {number} */ var $132=(($131+16)|0);
 /** @type {number} */ var $133=HEAP32[(($132)>>2)];
 /** @type {number} */ var $134=(($133+($130<<2))|0);
 HEAP32[(($134)>>2)]=0;
 label=24;break;
 case 24: 
 /** @type {number} */ var $136=$i;
 /** @type {number} */ var $137=((($136)+(1))|0);
 $i=$137;
 label=22;break;
 case 25: 
 $i=0;
 label=26;break;
 case 26: 
 /** @type {number} */ var $140=$i;
 /** @type {number} */ var $141=$n;
 /** @type {number} */ var $142=($140|0)<($141|0);
 if($142){label=27;break;}else{label=29;break;}
 case 27: 
 /** @type {number} */ var $144=$1;
 /** @type {number} */ var $145=(($144)|0);
 /** @type {number} */ var $146=HEAP32[(($145)>>2)];
 /** @type {number} */ var $147=_luaF_newproto($146);
 /** @type {number} */ var $148=$i;
 /** @type {number} */ var $149=$2;
 /** @type {number} */ var $150=(($149+16)|0);
 /** @type {number} */ var $151=HEAP32[(($150)>>2)];
 /** @type {number} */ var $152=(($151+($148<<2))|0);
 HEAP32[(($152)>>2)]=$147;
 /** @type {number} */ var $153=$1;
 /** @type {number} */ var $154=$i;
 /** @type {number} */ var $155=$2;
 /** @type {number} */ var $156=(($155+16)|0);
 /** @type {number} */ var $157=HEAP32[(($156)>>2)];
 /** @type {number} */ var $158=(($157+($154<<2))|0);
 /** @type {number} */ var $159=HEAP32[(($158)>>2)];
 _LoadFunction($153,$159);
 label=28;break;
 case 28: 
 /** @type {number} */ var $161=$i;
 /** @type {number} */ var $162=((($161)+(1))|0);
 $i=$162;
 label=26;break;
 case 29: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $S
 * @param {number} $f
 * @return {number}
 */
function _LoadUpvalues($S,$f){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $i;
 /** @type {number} */ var $n;
 $1=$S;
 $2=$f;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_LoadInt($3);
 $n=$4;
 /** @type {number} */ var $5=$n;
 /** @type {number} */ var $6=((($5)+(1))|0);
 /** @type {number} */ var $7=($6>>>0)>536870911;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=(($9)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 _luaM_toobig($11);
 label=4;break;
 case 3: 
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=(($14)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=$n;
 /** @type {number} */ var $18=($17<<3);
 /** @type {number} */ var $19=_luaM_realloc_($16,0,0,$18);
 var $21=$19;label=4;break;
 case 4: 
 var $21;
 /** @type {number} */ var $22=$21;
 /** @type {number} */ var $23=$2;
 /** @type {number} */ var $24=(($23+28)|0);
 HEAP32[(($24)>>2)]=$22;
 /** @type {number} */ var $25=$n;
 /** @type {number} */ var $26=$2;
 /** @type {number} */ var $27=(($26+40)|0);
 HEAP32[(($27)>>2)]=$25;
 $i=0;
 label=5;break;
 case 5: 
 /** @type {number} */ var $29=$i;
 /** @type {number} */ var $30=$n;
 /** @type {number} */ var $31=($29|0)<($30|0);
 if($31){label=6;break;}else{label=8;break;}
 case 6: 
 /** @type {number} */ var $33=$i;
 /** @type {number} */ var $34=$2;
 /** @type {number} */ var $35=(($34+28)|0);
 /** @type {number} */ var $36=HEAP32[(($35)>>2)];
 /** @type {number} */ var $37=(($36+($33<<3))|0);
 /** @type {number} */ var $38=(($37)|0);
 HEAP32[(($38)>>2)]=0;
 label=7;break;
 case 7: 
 /** @type {number} */ var $40=$i;
 /** @type {number} */ var $41=((($40)+(1))|0);
 $i=$41;
 label=5;break;
 case 8: 
 $i=0;
 label=9;break;
 case 9: 
 /** @type {number} */ var $44=$i;
 /** @type {number} */ var $45=$n;
 /** @type {number} */ var $46=($44|0)<($45|0);
 if($46){label=10;break;}else{label=12;break;}
 case 10: 
 /** @type {number} */ var $48=$1;
 /** @type {number} */ var $49=_LoadChar($48);
 /** @type {number} */ var $50=(($49)&255);
 /** @type {number} */ var $51=$i;
 /** @type {number} */ var $52=$2;
 /** @type {number} */ var $53=(($52+28)|0);
 /** @type {number} */ var $54=HEAP32[(($53)>>2)];
 /** @type {number} */ var $55=(($54+($51<<3))|0);
 /** @type {number} */ var $56=(($55+4)|0);
 HEAP8[($56)]=$50;
 /** @type {number} */ var $57=$1;
 /** @type {number} */ var $58=_LoadChar($57);
 /** @type {number} */ var $59=(($58)&255);
 /** @type {number} */ var $60=$i;
 /** @type {number} */ var $61=$2;
 /** @type {number} */ var $62=(($61+28)|0);
 /** @type {number} */ var $63=HEAP32[(($62)>>2)];
 /** @type {number} */ var $64=(($63+($60<<3))|0);
 /** @type {number} */ var $65=(($64+5)|0);
 HEAP8[($65)]=$59;
 label=11;break;
 case 11: 
 /** @type {number} */ var $67=$i;
 /** @type {number} */ var $68=((($67)+(1))|0);
 $i=$68;
 label=9;break;
 case 12: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $S
 * @param {number} $f
 * @return {number}
 */
function _LoadDebug($S,$f){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $i;
 /** @type {number} */ var $n;
 $1=$S;
 $2=$f;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_LoadString($3);
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=(($5+36)|0);
 HEAP32[(($6)>>2)]=$4;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=_LoadInt($7);
 $n=$8;
 /** @type {number} */ var $9=$n;
 /** @type {number} */ var $10=((($9)+(1))|0);
 /** @type {number} */ var $11=($10>>>0)>1073741823;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=(($13)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 _luaM_toobig($15);
 label=4;break;
 case 3: 
 /** @type {number} */ var $18=$1;
 /** @type {number} */ var $19=(($18)|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=$n;
 /** @type {number} */ var $22=($21<<2);
 /** @type {number} */ var $23=_luaM_realloc_($20,0,0,$22);
 var $25=$23;label=4;break;
 case 4: 
 var $25;
 /** @type {number} */ var $26=$25;
 /** @type {number} */ var $27=$2;
 /** @type {number} */ var $28=(($27+20)|0);
 HEAP32[(($28)>>2)]=$26;
 /** @type {number} */ var $29=$n;
 /** @type {number} */ var $30=$2;
 /** @type {number} */ var $31=(($30+52)|0);
 HEAP32[(($31)>>2)]=$29;
 /** @type {number} */ var $32=$1;
 /** @type {number} */ var $33=$2;
 /** @type {number} */ var $34=(($33+20)|0);
 /** @type {number} */ var $35=HEAP32[(($34)>>2)];
 /** @type {number} */ var $36=$35;
 /** @type {number} */ var $37=$n;
 /** @type {number} */ var $38=($37<<2);
 _LoadBlock($32,$36,$38);
 /** @type {number} */ var $39=$1;
 /** @type {number} */ var $40=_LoadInt($39);
 $n=$40;
 /** @type {number} */ var $41=$n;
 /** @type {number} */ var $42=((($41)+(1))|0);
 /** @type {number} */ var $43=($42>>>0)>357913941;
 if($43){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $45=$1;
 /** @type {number} */ var $46=(($45)|0);
 /** @type {number} */ var $47=HEAP32[(($46)>>2)];
 _luaM_toobig($47);
 label=7;break;
 case 6: 
 /** @type {number} */ var $50=$1;
 /** @type {number} */ var $51=(($50)|0);
 /** @type {number} */ var $52=HEAP32[(($51)>>2)];
 /** @type {number} */ var $53=$n;
 /** @type {number} */ var $54=((($53)*(12))&-1);
 /** @type {number} */ var $55=_luaM_realloc_($52,0,0,$54);
 var $57=$55;label=7;break;
 case 7: 
 var $57;
 /** @type {number} */ var $58=$57;
 /** @type {number} */ var $59=$2;
 /** @type {number} */ var $60=(($59+24)|0);
 HEAP32[(($60)>>2)]=$58;
 /** @type {number} */ var $61=$n;
 /** @type {number} */ var $62=$2;
 /** @type {number} */ var $63=(($62+60)|0);
 HEAP32[(($63)>>2)]=$61;
 $i=0;
 label=8;break;
 case 8: 
 /** @type {number} */ var $65=$i;
 /** @type {number} */ var $66=$n;
 /** @type {number} */ var $67=($65|0)<($66|0);
 if($67){label=9;break;}else{label=11;break;}
 case 9: 
 /** @type {number} */ var $69=$i;
 /** @type {number} */ var $70=$2;
 /** @type {number} */ var $71=(($70+24)|0);
 /** @type {number} */ var $72=HEAP32[(($71)>>2)];
 /** @type {number} */ var $73=(($72+((($69)*(12))&-1))|0);
 /** @type {number} */ var $74=(($73)|0);
 HEAP32[(($74)>>2)]=0;
 label=10;break;
 case 10: 
 /** @type {number} */ var $76=$i;
 /** @type {number} */ var $77=((($76)+(1))|0);
 $i=$77;
 label=8;break;
 case 11: 
 $i=0;
 label=12;break;
 case 12: 
 /** @type {number} */ var $80=$i;
 /** @type {number} */ var $81=$n;
 /** @type {number} */ var $82=($80|0)<($81|0);
 if($82){label=13;break;}else{label=15;break;}
 case 13: 
 /** @type {number} */ var $84=$1;
 /** @type {number} */ var $85=_LoadString($84);
 /** @type {number} */ var $86=$i;
 /** @type {number} */ var $87=$2;
 /** @type {number} */ var $88=(($87+24)|0);
 /** @type {number} */ var $89=HEAP32[(($88)>>2)];
 /** @type {number} */ var $90=(($89+((($86)*(12))&-1))|0);
 /** @type {number} */ var $91=(($90)|0);
 HEAP32[(($91)>>2)]=$85;
 /** @type {number} */ var $92=$1;
 /** @type {number} */ var $93=_LoadInt($92);
 /** @type {number} */ var $94=$i;
 /** @type {number} */ var $95=$2;
 /** @type {number} */ var $96=(($95+24)|0);
 /** @type {number} */ var $97=HEAP32[(($96)>>2)];
 /** @type {number} */ var $98=(($97+((($94)*(12))&-1))|0);
 /** @type {number} */ var $99=(($98+4)|0);
 HEAP32[(($99)>>2)]=$93;
 /** @type {number} */ var $100=$1;
 /** @type {number} */ var $101=_LoadInt($100);
 /** @type {number} */ var $102=$i;
 /** @type {number} */ var $103=$2;
 /** @type {number} */ var $104=(($103+24)|0);
 /** @type {number} */ var $105=HEAP32[(($104)>>2)];
 /** @type {number} */ var $106=(($105+((($102)*(12))&-1))|0);
 /** @type {number} */ var $107=(($106+8)|0);
 HEAP32[(($107)>>2)]=$101;
 label=14;break;
 case 14: 
 /** @type {number} */ var $109=$i;
 /** @type {number} */ var $110=((($109)+(1))|0);
 $i=$110;
 label=12;break;
 case 15: 
 /** @type {number} */ var $112=$1;
 /** @type {number} */ var $113=_LoadInt($112);
 $n=$113;
 $i=0;
 label=16;break;
 case 16: 
 /** @type {number} */ var $115=$i;
 /** @type {number} */ var $116=$n;
 /** @type {number} */ var $117=($115|0)<($116|0);
 if($117){label=17;break;}else{label=19;break;}
 case 17: 
 /** @type {number} */ var $119=$1;
 /** @type {number} */ var $120=_LoadString($119);
 /** @type {number} */ var $121=$i;
 /** @type {number} */ var $122=$2;
 /** @type {number} */ var $123=(($122+28)|0);
 /** @type {number} */ var $124=HEAP32[(($123)>>2)];
 /** @type {number} */ var $125=(($124+($121<<3))|0);
 /** @type {number} */ var $126=(($125)|0);
 HEAP32[(($126)>>2)]=$120;
 label=18;break;
 case 18: 
 /** @type {number} */ var $128=$i;
 /** @type {number} */ var $129=((($128)+(1))|0);
 $i=$129;
 label=16;break;
 case 19: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $S
 * @return {number}
 */
function _LoadNumber($S){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 /** @type {number} */ var $1;
 /** @type {number} */ var $x=sp;
 $1=$S;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$x;
 _LoadBlock($2,$3,8);
 /** @type {number} */ var $4=HEAPF64[(($x)>>3)];
 STACKTOP=sp;return $4;
}
/**
 * @param {number} $S
 * @return {number}
 */
function _LoadString($S){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $size=sp;
 /** @type {number} */ var $s;
 $2=$S;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=$size;
 _LoadBlock($3,$4,4);
 /** @type {number} */ var $5=HEAP32[(($size)>>2)];
 /** @type {number} */ var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=4;break;
 case 3: 
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=(($9)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=(($12+8)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=HEAP32[(($size)>>2)];
 /** @type {number} */ var $16=_luaZ_openspace($11,$14,$15);
 $s=$16;
 /** @type {number} */ var $17=$2;
 /** @type {number} */ var $18=$s;
 /** @type {number} */ var $19=HEAP32[(($size)>>2)];
 /** @type {number} */ var $20=$19;
 _LoadBlock($17,$18,$20);
 /** @type {number} */ var $21=$2;
 /** @type {number} */ var $22=(($21)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 /** @type {number} */ var $24=$s;
 /** @type {number} */ var $25=HEAP32[(($size)>>2)];
 /** @type {number} */ var $26=((($25)-(1))|0);
 /** @type {number} */ var $27=_luaS_newlstr($23,$24,$26);
 $1=$27;
 label=4;break;
 case 4: 
 /** @type {number} */ var $29=$1;
 STACKTOP=sp;return $29;
 }
}
/**
 * @param {number} $obj
 * @param {number} $n
 * @return {number}
 */
function _luaV_tonumber($obj,$n){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $num=sp;
 /** @type {number} */ var $io;
 $2=$obj;
 $3=$n;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=(($4+8)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=($6|0)==3;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $9=$2;
 $1=$9;
 label=7;break;
 case 3: 
 /** @type {number} */ var $11=$2;
 /** @type {number} */ var $12=(($11+8)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=$13&15;
 /** @type {number} */ var $15=($14|0)==4;
 if($15){label=4;break;}else{label=6;break;}
 case 4: 
 /** @type {number} */ var $17=$2;
 /** @type {number} */ var $18=(($17)|0);
 /** @type {number} */ var $19=$18;
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=$20;
 /** @type {number} */ var $22=(($21+16)|0);
 /** @type {number} */ var $23=$22;
 /** @type {number} */ var $24=$2;
 /** @type {number} */ var $25=(($24)|0);
 /** @type {number} */ var $26=$25;
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=$27;
 /** @type {number} */ var $29=$28;
 /** @type {number} */ var $30=(($29+12)|0);
 /** @type {number} */ var $31=HEAP32[(($30)>>2)];
 /** @type {number} */ var $32=_luaO_str2d($23,$31,$num);
 /** @type {number} */ var $33=($32|0)!=0;
 if($33){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $35=$3;
 $io=$35;
 /** @type {number} */ var $36=HEAPF64[(($num)>>3)];
 /** @type {number} */ var $37=$io;
 /** @type {number} */ var $38=(($37)|0);
 /** @type {number} */ var $39=$38;
 HEAPF64[(($39)>>3)]=$36;
 /** @type {number} */ var $40=$io;
 /** @type {number} */ var $41=(($40+8)|0);
 HEAP32[(($41)>>2)]=3;
 /** @type {number} */ var $42=$3;
 $1=$42;
 label=7;break;
 case 6: 
 $1=0;
 label=7;break;
 case 7: 
 /** @type {number} */ var $45=$1;
 STACKTOP=sp;return $45;
 }
}
/**
 * @param {number} $L
 * @param {number} $obj
 * @return {number}
 */
function _luaV_tostring($L,$obj){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $s=sp;
 /** @type {number} */ var $n;
 /** @type {number} */ var $l;
 /** @type {number} */ var $io;
 /** @type {number} */ var $x_;
 $2=$L;
 $3=$obj;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=(($4+8)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=($6|0)==3;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 $1=0;
 label=4;break;
 case 3: 
 /** @type {number} */ var $10=$3;
 /** @type {number} */ var $11=(($10)|0);
 /** @type {number} */ var $12=$11;
 /** @type {number} */ var $13=HEAPF64[(($12)>>3)];
 $n=$13;
 /** @type {number} */ var $14=(($s)|0);
 /** @type {number} */ var $15=$n;
 /** @type {number} */ var $16=_sprintf($14,7200,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAPF64[((tempVarArgs)>>3)]=$15,tempVarArgs)); STACKTOP=tempVarArgs;
 $l=$16;
 /** @type {number} */ var $17=$3;
 $io=$17;
 /** @type {number} */ var $18=$2;
 /** @type {number} */ var $19=(($s)|0);
 /** @type {number} */ var $20=$l;
 /** @type {number} */ var $21=_luaS_newlstr($18,$19,$20);
 $x_=$21;
 /** @type {number} */ var $22=$x_;
 /** @type {number} */ var $23=$22;
 /** @type {number} */ var $24=$io;
 /** @type {number} */ var $25=(($24)|0);
 /** @type {number} */ var $26=$25;
 HEAP32[(($26)>>2)]=$23;
 /** @type {number} */ var $27=$x_;
 /** @type {number} */ var $28=$27;
 /** @type {number} */ var $29=(($28+4)|0);
 /** @type {number} */ var $30=HEAP8[($29)];
 /** @type {number} */ var $31=($30&255);
 /** @type {number} */ var $32=$31|64;
 /** @type {number} */ var $33=$io;
 /** @type {number} */ var $34=(($33+8)|0);
 HEAP32[(($34)>>2)]=$32;
 $1=1;
 label=4;break;
 case 4: 
 /** @type {number} */ var $36=$1;
 STACKTOP=sp;return $36;
 }
}
/**
 * @param {number} $L
 * @param {number} $t
 * @param {number} $key
 * @param {number} $val
 * @return {number}
 */
function _luaV_gettable($L,$t,$key,$val){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $loop;
 /** @type {number} */ var $tm;
 /** @type {number} */ var $h;
 /** @type {number} */ var $res;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io1;
 $1=$L;
 $2=$t;
 $3=$key;
 $4=$val;
 $loop=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $6=$loop;
 /** @type {number} */ var $7=($6|0)<100;
 if($7){label=3;break;}else{label=21;break;}
 case 3: 
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=(($9+8)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=($11|0)==69;
 if($12){label=4;break;}else{label=14;break;}
 case 4: 
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=(($14)|0);
 /** @type {number} */ var $16=$15;
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=$17;
 $h=$18;
 /** @type {number} */ var $19=$h;
 /** @type {number} */ var $20=$3;
 /** @type {number} */ var $21=_luaH_get($19,$20);
 $res=$21;
 /** @type {number} */ var $22=$res;
 /** @type {number} */ var $23=(($22+8)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=($24|0)==0;
 if($25){label=5;break;}else{label=12;break;}
 case 5: 
 /** @type {number} */ var $27=$h;
 /** @type {number} */ var $28=(($27+8)|0);
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 /** @type {number} */ var $30=($29|0)==0;
 if($30){label=6;break;}else{label=7;break;}
 case 6: 
 var $56=0;label=11;break;
 case 7: 
 /** @type {number} */ var $33=$h;
 /** @type {number} */ var $34=(($33+8)|0);
 /** @type {number} */ var $35=HEAP32[(($34)>>2)];
 /** @type {number} */ var $36=(($35+6)|0);
 /** @type {number} */ var $37=HEAP8[($36)];
 /** @type {number} */ var $38=($37&255);
 /** @type {number} */ var $39=$38&1;
 /** @type {number} */ var $40=($39|0)!=0;
 if($40){label=8;break;}else{label=9;break;}
 case 8: 
 var $54=0;label=10;break;
 case 9: 
 /** @type {number} */ var $43=$h;
 /** @type {number} */ var $44=(($43+8)|0);
 /** @type {number} */ var $45=HEAP32[(($44)>>2)];
 /** @type {number} */ var $46=$1;
 /** @type {number} */ var $47=(($46+12)|0);
 /** @type {number} */ var $48=HEAP32[(($47)>>2)];
 /** @type {number} */ var $49=(($48+184)|0);
 /** @type {number} */ var $50=(($49)|0);
 /** @type {number} */ var $51=HEAP32[(($50)>>2)];
 /** @type {number} */ var $52=_luaT_gettm($45,0,$51);
 var $54=$52;label=10;break;
 case 10: 
 var $54;
 var $56=$54;label=11;break;
 case 11: 
 var $56;
 $tm=$56;
 /** @type {number} */ var $57=($56|0)==0;
 if($57){label=12;break;}else{label=13;break;}
 case 12: 
 /** @type {number} */ var $59=$res;
 $io2=$59;
 /** @type {number} */ var $60=$4;
 $io1=$60;
 /** @type {number} */ var $61=$io1;
 /** @type {number} */ var $62=(($61)|0);
 /** @type {number} */ var $63=$io2;
 /** @type {number} */ var $64=(($63)|0);
 /** @type {number} */ var $65=$62;
 /** @type {number} */ var $66=$64;
 HEAP32[(($65)>>2)]=HEAP32[(($66)>>2)];HEAP32[((($65)+(4))>>2)]=HEAP32[((($66)+(4))>>2)];
 /** @type {number} */ var $67=$io2;
 /** @type {number} */ var $68=(($67+8)|0);
 /** @type {number} */ var $69=HEAP32[(($68)>>2)];
 /** @type {number} */ var $70=$io1;
 /** @type {number} */ var $71=(($70+8)|0);
 HEAP32[(($71)>>2)]=$69;
 label=22;break;
 case 13: 
 label=17;break;
 case 14: 
 /** @type {number} */ var $74=$1;
 /** @type {number} */ var $75=$2;
 /** @type {number} */ var $76=_luaT_gettmbyobj($74,$75,0);
 $tm=$76;
 /** @type {number} */ var $77=(($76+8)|0);
 /** @type {number} */ var $78=HEAP32[(($77)>>2)];
 /** @type {number} */ var $79=($78|0)==0;
 if($79){label=15;break;}else{label=16;break;}
 case 15: 
 /** @type {number} */ var $81=$1;
 /** @type {number} */ var $82=$2;
 _luaG_typeerror($81,$82,11024);
 case 16: 
 label=17;break;
 case 17: 
 /** @type {number} */ var $85=$tm;
 /** @type {number} */ var $86=(($85+8)|0);
 /** @type {number} */ var $87=HEAP32[(($86)>>2)];
 /** @type {number} */ var $88=$87&15;
 /** @type {number} */ var $89=($88|0)==6;
 if($89){label=18;break;}else{label=19;break;}
 case 18: 
 /** @type {number} */ var $91=$1;
 /** @type {number} */ var $92=$tm;
 /** @type {number} */ var $93=$2;
 /** @type {number} */ var $94=$3;
 /** @type {number} */ var $95=$4;
 _callTM($91,$92,$93,$94,$95,1);
 label=22;break;
 case 19: 
 /** @type {number} */ var $97=$tm;
 $2=$97;
 label=20;break;
 case 20: 
 /** @type {number} */ var $99=$loop;
 /** @type {number} */ var $100=((($99)+(1))|0);
 $loop=$100;
 label=2;break;
 case 21: 
 /** @type {number} */ var $102=$1;
 _luaG_runerror($102,8744,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 case 22: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $t
 * @param {number} $key
 * @param {number} $val
 * @return {number}
 */
function _luaV_settable($L,$t,$key,$val){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $loop;
 /** @type {number} */ var $tm;
 /** @type {number} */ var $h;
 /** @type {number} */ var $oldval;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io1;
 $1=$L;
 $2=$t;
 $3=$key;
 $4=$val;
 $loop=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $6=$loop;
 /** @type {number} */ var $7=($6|0)<100;
 if($7){label=3;break;}else{label=27;break;}
 case 3: 
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=(($9+8)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=($11|0)==69;
 if($12){label=4;break;}else{label=20;break;}
 case 4: 
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=(($14)|0);
 /** @type {number} */ var $16=$15;
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=$17;
 $h=$18;
 /** @type {number} */ var $19=$h;
 /** @type {number} */ var $20=$3;
 /** @type {number} */ var $21=_luaH_get($19,$20);
 $oldval=$21;
 /** @type {number} */ var $22=$oldval;
 /** @type {number} */ var $23=(($22+8)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=($24|0)==0;
 if($25){label=5;break;}else{label=14;break;}
 case 5: 
 /** @type {number} */ var $27=$h;
 /** @type {number} */ var $28=(($27+8)|0);
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 /** @type {number} */ var $30=($29|0)==0;
 if($30){label=6;break;}else{label=7;break;}
 case 6: 
 var $56=0;label=11;break;
 case 7: 
 /** @type {number} */ var $33=$h;
 /** @type {number} */ var $34=(($33+8)|0);
 /** @type {number} */ var $35=HEAP32[(($34)>>2)];
 /** @type {number} */ var $36=(($35+6)|0);
 /** @type {number} */ var $37=HEAP8[($36)];
 /** @type {number} */ var $38=($37&255);
 /** @type {number} */ var $39=$38&2;
 /** @type {number} */ var $40=($39|0)!=0;
 if($40){label=8;break;}else{label=9;break;}
 case 8: 
 var $54=0;label=10;break;
 case 9: 
 /** @type {number} */ var $43=$h;
 /** @type {number} */ var $44=(($43+8)|0);
 /** @type {number} */ var $45=HEAP32[(($44)>>2)];
 /** @type {number} */ var $46=$1;
 /** @type {number} */ var $47=(($46+12)|0);
 /** @type {number} */ var $48=HEAP32[(($47)>>2)];
 /** @type {number} */ var $49=(($48+184)|0);
 /** @type {number} */ var $50=(($49+4)|0);
 /** @type {number} */ var $51=HEAP32[(($50)>>2)];
 /** @type {number} */ var $52=_luaT_gettm($45,1,$51);
 var $54=$52;label=10;break;
 case 10: 
 var $54;
 var $56=$54;label=11;break;
 case 11: 
 var $56;
 $tm=$56;
 /** @type {number} */ var $57=($56|0)==0;
 if($57){label=12;break;}else{label=19;break;}
 case 12: 
 /** @type {number} */ var $59=$oldval;
 /** @type {number} */ var $60=($59|0)!=1280;
 if($60){label=14;break;}else{label=13;break;}
 case 13: 
 /** @type {number} */ var $62=$1;
 /** @type {number} */ var $63=$h;
 /** @type {number} */ var $64=$3;
 /** @type {number} */ var $65=_luaH_newkey($62,$63,$64);
 $oldval=$65;
 if(1){label=14;break;}else{label=19;break;}
 case 14: 
 /** @type {number} */ var $67=$4;
 $io2=$67;
 /** @type {number} */ var $68=$oldval;
 $io1=$68;
 /** @type {number} */ var $69=$io1;
 /** @type {number} */ var $70=(($69)|0);
 /** @type {number} */ var $71=$io2;
 /** @type {number} */ var $72=(($71)|0);
 /** @type {number} */ var $73=$70;
 /** @type {number} */ var $74=$72;
 HEAP32[(($73)>>2)]=HEAP32[(($74)>>2)];HEAP32[((($73)+(4))>>2)]=HEAP32[((($74)+(4))>>2)];
 /** @type {number} */ var $75=$io2;
 /** @type {number} */ var $76=(($75+8)|0);
 /** @type {number} */ var $77=HEAP32[(($76)>>2)];
 /** @type {number} */ var $78=$io1;
 /** @type {number} */ var $79=(($78+8)|0);
 HEAP32[(($79)>>2)]=$77;
 /** @type {number} */ var $80=$h;
 /** @type {number} */ var $81=(($80+6)|0);
 HEAP8[($81)]=0;
 /** @type {number} */ var $82=$4;
 /** @type {number} */ var $83=(($82+8)|0);
 /** @type {number} */ var $84=HEAP32[(($83)>>2)];
 /** @type {number} */ var $85=$84&64;
 /** @type {number} */ var $86=($85|0)!=0;
 if($86){label=15;break;}else{label=18;break;}
 case 15: 
 /** @type {number} */ var $88=$4;
 /** @type {number} */ var $89=(($88)|0);
 /** @type {number} */ var $90=$89;
 /** @type {number} */ var $91=HEAP32[(($90)>>2)];
 /** @type {number} */ var $92=$91;
 /** @type {number} */ var $93=(($92+5)|0);
 /** @type {number} */ var $94=HEAP8[($93)];
 /** @type {number} */ var $95=($94&255);
 /** @type {number} */ var $96=$95&3;
 /** @type {number} */ var $97=($96|0)!=0;
 if($97){label=16;break;}else{label=18;break;}
 case 16: 
 /** @type {number} */ var $99=$h;
 /** @type {number} */ var $100=$99;
 /** @type {number} */ var $101=$100;
 /** @type {number} */ var $102=(($101+5)|0);
 /** @type {number} */ var $103=HEAP8[($102)];
 /** @type {number} */ var $104=($103&255);
 /** @type {number} */ var $105=$104&4;
 /** @type {number} */ var $106=($105|0)!=0;
 if($106){label=17;break;}else{label=18;break;}
 case 17: 
 /** @type {number} */ var $108=$1;
 /** @type {number} */ var $109=$h;
 /** @type {number} */ var $110=$109;
 _luaC_barrierback_($108,$110);
 label=18;break;
 case 18: 
 label=28;break;
 case 19: 
 label=23;break;
 case 20: 
 /** @type {number} */ var $114=$1;
 /** @type {number} */ var $115=$2;
 /** @type {number} */ var $116=_luaT_gettmbyobj($114,$115,1);
 $tm=$116;
 /** @type {number} */ var $117=(($116+8)|0);
 /** @type {number} */ var $118=HEAP32[(($117)>>2)];
 /** @type {number} */ var $119=($118|0)==0;
 if($119){label=21;break;}else{label=22;break;}
 case 21: 
 /** @type {number} */ var $121=$1;
 /** @type {number} */ var $122=$2;
 _luaG_typeerror($121,$122,11024);
 case 22: 
 label=23;break;
 case 23: 
 /** @type {number} */ var $125=$tm;
 /** @type {number} */ var $126=(($125+8)|0);
 /** @type {number} */ var $127=HEAP32[(($126)>>2)];
 /** @type {number} */ var $128=$127&15;
 /** @type {number} */ var $129=($128|0)==6;
 if($129){label=24;break;}else{label=25;break;}
 case 24: 
 /** @type {number} */ var $131=$1;
 /** @type {number} */ var $132=$tm;
 /** @type {number} */ var $133=$2;
 /** @type {number} */ var $134=$3;
 /** @type {number} */ var $135=$4;
 _callTM($131,$132,$133,$134,$135,0);
 label=28;break;
 case 25: 
 /** @type {number} */ var $137=$tm;
 $2=$137;
 label=26;break;
 case 26: 
 /** @type {number} */ var $139=$loop;
 /** @type {number} */ var $140=((($139)+(1))|0);
 $loop=$140;
 label=2;break;
 case 27: 
 /** @type {number} */ var $142=$1;
 _luaG_runerror($142,6704,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 case 28: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $l
 * @param {number} $r
 * @return {number}
 */
function _luaV_lessthan($L,$l,$r){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $res;
 $2=$L;
 $3=$l;
 $4=$r;
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=(($5+8)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=($7|0)==3;
 if($8){label=2;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $10=$4;
 /** @type {number} */ var $11=(($10+8)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=($12|0)==3;
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $15=$3;
 /** @type {number} */ var $16=(($15)|0);
 /** @type {number} */ var $17=$16;
 /** @type {number} */ var $18=HEAPF64[(($17)>>3)];
 /** @type {number} */ var $19=$4;
 /** @type {number} */ var $20=(($19)|0);
 /** @type {number} */ var $21=$20;
 /** @type {number} */ var $22=HEAPF64[(($21)>>3)];
 /** @type {number} */ var $23=$18<$22;
 /** @type {number} */ var $24=($23&1);
 $1=$24;
 label=12;break;
 case 4: 
 /** @type {number} */ var $26=$3;
 /** @type {number} */ var $27=(($26+8)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=$28&15;
 /** @type {number} */ var $30=($29|0)==4;
 if($30){label=5;break;}else{label=7;break;}
 case 5: 
 /** @type {number} */ var $32=$4;
 /** @type {number} */ var $33=(($32+8)|0);
 /** @type {number} */ var $34=HEAP32[(($33)>>2)];
 /** @type {number} */ var $35=$34&15;
 /** @type {number} */ var $36=($35|0)==4;
 if($36){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $38=$3;
 /** @type {number} */ var $39=(($38)|0);
 /** @type {number} */ var $40=$39;
 /** @type {number} */ var $41=HEAP32[(($40)>>2)];
 /** @type {number} */ var $42=$41;
 /** @type {number} */ var $43=$4;
 /** @type {number} */ var $44=(($43)|0);
 /** @type {number} */ var $45=$44;
 /** @type {number} */ var $46=HEAP32[(($45)>>2)];
 /** @type {number} */ var $47=$46;
 /** @type {number} */ var $48=_l_strcmp($42,$47);
 /** @type {number} */ var $49=($48|0)<0;
 /** @type {number} */ var $50=($49&1);
 $1=$50;
 label=12;break;
 case 7: 
 /** @type {number} */ var $52=$2;
 /** @type {number} */ var $53=$3;
 /** @type {number} */ var $54=$4;
 /** @type {number} */ var $55=_call_orderTM($52,$53,$54,13);
 $res=$55;
 /** @type {number} */ var $56=($55|0)<0;
 if($56){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $58=$2;
 /** @type {number} */ var $59=$3;
 /** @type {number} */ var $60=$4;
 _luaG_ordererror($58,$59,$60);
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 /** @type {number} */ var $64=$res;
 $1=$64;
 label=12;break;
 case 12: 
 /** @type {number} */ var $66=$1;
 STACKTOP=sp;return $66;
 }
}
/**
 * @param {number} $L
 * @param {number} $l
 * @param {number} $r
 * @return {number}
 */
function _luaV_lessequal($L,$l,$r){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $res;
 $2=$L;
 $3=$l;
 $4=$r;
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=(($5+8)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=($7|0)==3;
 if($8){label=2;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $10=$4;
 /** @type {number} */ var $11=(($10+8)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=($12|0)==3;
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $15=$3;
 /** @type {number} */ var $16=(($15)|0);
 /** @type {number} */ var $17=$16;
 /** @type {number} */ var $18=HEAPF64[(($17)>>3)];
 /** @type {number} */ var $19=$4;
 /** @type {number} */ var $20=(($19)|0);
 /** @type {number} */ var $21=$20;
 /** @type {number} */ var $22=HEAPF64[(($21)>>3)];
 /** @type {number} */ var $23=$18<=$22;
 /** @type {number} */ var $24=($23&1);
 $1=$24;
 label=15;break;
 case 4: 
 /** @type {number} */ var $26=$3;
 /** @type {number} */ var $27=(($26+8)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=$28&15;
 /** @type {number} */ var $30=($29|0)==4;
 if($30){label=5;break;}else{label=7;break;}
 case 5: 
 /** @type {number} */ var $32=$4;
 /** @type {number} */ var $33=(($32+8)|0);
 /** @type {number} */ var $34=HEAP32[(($33)>>2)];
 /** @type {number} */ var $35=$34&15;
 /** @type {number} */ var $36=($35|0)==4;
 if($36){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $38=$3;
 /** @type {number} */ var $39=(($38)|0);
 /** @type {number} */ var $40=$39;
 /** @type {number} */ var $41=HEAP32[(($40)>>2)];
 /** @type {number} */ var $42=$41;
 /** @type {number} */ var $43=$4;
 /** @type {number} */ var $44=(($43)|0);
 /** @type {number} */ var $45=$44;
 /** @type {number} */ var $46=HEAP32[(($45)>>2)];
 /** @type {number} */ var $47=$46;
 /** @type {number} */ var $48=_l_strcmp($42,$47);
 /** @type {number} */ var $49=($48|0)<=0;
 /** @type {number} */ var $50=($49&1);
 $1=$50;
 label=15;break;
 case 7: 
 /** @type {number} */ var $52=$2;
 /** @type {number} */ var $53=$3;
 /** @type {number} */ var $54=$4;
 /** @type {number} */ var $55=_call_orderTM($52,$53,$54,14);
 $res=$55;
 /** @type {number} */ var $56=($55|0)>=0;
 if($56){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $58=$res;
 $1=$58;
 label=15;break;
 case 9: 
 /** @type {number} */ var $60=$2;
 /** @type {number} */ var $61=$4;
 /** @type {number} */ var $62=$3;
 /** @type {number} */ var $63=_call_orderTM($60,$61,$62,13);
 $res=$63;
 /** @type {number} */ var $64=($63|0)<0;
 if($64){label=10;break;}else{label=11;break;}
 case 10: 
 /** @type {number} */ var $66=$2;
 /** @type {number} */ var $67=$3;
 /** @type {number} */ var $68=$4;
 _luaG_ordererror($66,$67,$68);
 case 11: 
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 /** @type {number} */ var $73=$res;
 /** @type {number} */ var $74=($73|0)!=0;
 /** @type {number} */ var $75=$74^1;
 /** @type {number} */ var $76=($75&1);
 $1=$76;
 label=15;break;
 case 15: 
 /** @type {number} */ var $78=$1;
 STACKTOP=sp;return $78;
 }
}
/**
 * @param {number} $L
 * @param {number} $t1
 * @param {number} $t2
 * @return {number}
 */
function _luaV_equalobj_($L,$t1,$t2){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $tm;
 $2=$L;
 $3=$t1;
 $4=$t2;
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=(($5+8)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=$7&63;
 switch(($8|0)){case 5:{ label=15;break;}case 0:{ label=2;break;}case 3:{ label=3;break;}case 1:{ label=4;break;}case 2:{ label=5;break;}case 22:{ label=6;break;}case 4:{ label=7;break;}case 20:{ label=8;break;}case 7:{ label=9;break;}default:{label=21;break;}}break;
 case 2: 
 $1=1;
 label=29;break;
 case 3: 
 /** @type {number} */ var $11=$3;
 /** @type {number} */ var $12=(($11)|0);
 /** @type {number} */ var $13=$12;
 /** @type {number} */ var $14=HEAPF64[(($13)>>3)];
 /** @type {number} */ var $15=$4;
 /** @type {number} */ var $16=(($15)|0);
 /** @type {number} */ var $17=$16;
 /** @type {number} */ var $18=HEAPF64[(($17)>>3)];
 /** @type {number} */ var $19=$14==$18;
 /** @type {number} */ var $20=($19&1);
 $1=$20;
 label=29;break;
 case 4: 
 /** @type {number} */ var $22=$3;
 /** @type {number} */ var $23=(($22)|0);
 /** @type {number} */ var $24=$23;
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=$4;
 /** @type {number} */ var $27=(($26)|0);
 /** @type {number} */ var $28=$27;
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 /** @type {number} */ var $30=($25|0)==($29|0);
 /** @type {number} */ var $31=($30&1);
 $1=$31;
 label=29;break;
 case 5: 
 /** @type {number} */ var $33=$3;
 /** @type {number} */ var $34=(($33)|0);
 /** @type {number} */ var $35=$34;
 /** @type {number} */ var $36=HEAP32[(($35)>>2)];
 /** @type {number} */ var $37=$4;
 /** @type {number} */ var $38=(($37)|0);
 /** @type {number} */ var $39=$38;
 /** @type {number} */ var $40=HEAP32[(($39)>>2)];
 /** @type {number} */ var $41=($36|0)==($40|0);
 /** @type {number} */ var $42=($41&1);
 $1=$42;
 label=29;break;
 case 6: 
 /** @type {number} */ var $44=$3;
 /** @type {number} */ var $45=(($44)|0);
 /** @type {number} */ var $46=$45;
 /** @type {number} */ var $47=HEAP32[(($46)>>2)];
 /** @type {number} */ var $48=$4;
 /** @type {number} */ var $49=(($48)|0);
 /** @type {number} */ var $50=$49;
 /** @type {number} */ var $51=HEAP32[(($50)>>2)];
 /** @type {number} */ var $52=($47|0)==($51|0);
 /** @type {number} */ var $53=($52&1);
 $1=$53;
 label=29;break;
 case 7: 
 /** @type {number} */ var $55=$3;
 /** @type {number} */ var $56=(($55)|0);
 /** @type {number} */ var $57=$56;
 /** @type {number} */ var $58=HEAP32[(($57)>>2)];
 /** @type {number} */ var $59=$58;
 /** @type {number} */ var $60=$4;
 /** @type {number} */ var $61=(($60)|0);
 /** @type {number} */ var $62=$61;
 /** @type {number} */ var $63=HEAP32[(($62)>>2)];
 /** @type {number} */ var $64=$63;
 /** @type {number} */ var $65=($59|0)==($64|0);
 /** @type {number} */ var $66=($65&1);
 $1=$66;
 label=29;break;
 case 8: 
 /** @type {number} */ var $68=$3;
 /** @type {number} */ var $69=(($68)|0);
 /** @type {number} */ var $70=$69;
 /** @type {number} */ var $71=HEAP32[(($70)>>2)];
 /** @type {number} */ var $72=$71;
 /** @type {number} */ var $73=$4;
 /** @type {number} */ var $74=(($73)|0);
 /** @type {number} */ var $75=$74;
 /** @type {number} */ var $76=HEAP32[(($75)>>2)];
 /** @type {number} */ var $77=$76;
 /** @type {number} */ var $78=_luaS_eqlngstr($72,$77);
 $1=$78;
 label=29;break;
 case 9: 
 /** @type {number} */ var $80=$3;
 /** @type {number} */ var $81=(($80)|0);
 /** @type {number} */ var $82=$81;
 /** @type {number} */ var $83=HEAP32[(($82)>>2)];
 /** @type {number} */ var $84=$83;
 /** @type {number} */ var $85=$84;
 /** @type {number} */ var $86=$4;
 /** @type {number} */ var $87=(($86)|0);
 /** @type {number} */ var $88=$87;
 /** @type {number} */ var $89=HEAP32[(($88)>>2)];
 /** @type {number} */ var $90=$89;
 /** @type {number} */ var $91=$90;
 /** @type {number} */ var $92=($85|0)==($91|0);
 if($92){label=10;break;}else{label=11;break;}
 case 10: 
 $1=1;
 label=29;break;
 case 11: 
 /** @type {number} */ var $95=$2;
 /** @type {number} */ var $96=($95|0)==0;
 if($96){label=12;break;}else{label=13;break;}
 case 12: 
 $1=0;
 label=29;break;
 case 13: 
 label=14;break;
 case 14: 
 /** @type {number} */ var $100=$2;
 /** @type {number} */ var $101=$3;
 /** @type {number} */ var $102=(($101)|0);
 /** @type {number} */ var $103=$102;
 /** @type {number} */ var $104=HEAP32[(($103)>>2)];
 /** @type {number} */ var $105=$104;
 /** @type {number} */ var $106=$105;
 /** @type {number} */ var $107=(($106+8)|0);
 /** @type {number} */ var $108=HEAP32[(($107)>>2)];
 /** @type {number} */ var $109=$4;
 /** @type {number} */ var $110=(($109)|0);
 /** @type {number} */ var $111=$110;
 /** @type {number} */ var $112=HEAP32[(($111)>>2)];
 /** @type {number} */ var $113=$112;
 /** @type {number} */ var $114=$113;
 /** @type {number} */ var $115=(($114+8)|0);
 /** @type {number} */ var $116=HEAP32[(($115)>>2)];
 /** @type {number} */ var $117=_get_equalTM($100,$108,$116,5);
 $tm=$117;
 label=22;break;
 case 15: 
 /** @type {number} */ var $119=$3;
 /** @type {number} */ var $120=(($119)|0);
 /** @type {number} */ var $121=$120;
 /** @type {number} */ var $122=HEAP32[(($121)>>2)];
 /** @type {number} */ var $123=$122;
 /** @type {number} */ var $124=$4;
 /** @type {number} */ var $125=(($124)|0);
 /** @type {number} */ var $126=$125;
 /** @type {number} */ var $127=HEAP32[(($126)>>2)];
 /** @type {number} */ var $128=$127;
 /** @type {number} */ var $129=($123|0)==($128|0);
 if($129){label=16;break;}else{label=17;break;}
 case 16: 
 $1=1;
 label=29;break;
 case 17: 
 /** @type {number} */ var $132=$2;
 /** @type {number} */ var $133=($132|0)==0;
 if($133){label=18;break;}else{label=19;break;}
 case 18: 
 $1=0;
 label=29;break;
 case 19: 
 label=20;break;
 case 20: 
 /** @type {number} */ var $137=$2;
 /** @type {number} */ var $138=$3;
 /** @type {number} */ var $139=(($138)|0);
 /** @type {number} */ var $140=$139;
 /** @type {number} */ var $141=HEAP32[(($140)>>2)];
 /** @type {number} */ var $142=$141;
 /** @type {number} */ var $143=(($142+8)|0);
 /** @type {number} */ var $144=HEAP32[(($143)>>2)];
 /** @type {number} */ var $145=$4;
 /** @type {number} */ var $146=(($145)|0);
 /** @type {number} */ var $147=$146;
 /** @type {number} */ var $148=HEAP32[(($147)>>2)];
 /** @type {number} */ var $149=$148;
 /** @type {number} */ var $150=(($149+8)|0);
 /** @type {number} */ var $151=HEAP32[(($150)>>2)];
 /** @type {number} */ var $152=_get_equalTM($137,$144,$151,5);
 $tm=$152;
 label=22;break;
 case 21: 
 /** @type {number} */ var $154=$3;
 /** @type {number} */ var $155=(($154)|0);
 /** @type {number} */ var $156=$155;
 /** @type {number} */ var $157=HEAP32[(($156)>>2)];
 /** @type {number} */ var $158=$4;
 /** @type {number} */ var $159=(($158)|0);
 /** @type {number} */ var $160=$159;
 /** @type {number} */ var $161=HEAP32[(($160)>>2)];
 /** @type {number} */ var $162=($157|0)==($161|0);
 /** @type {number} */ var $163=($162&1);
 $1=$163;
 label=29;break;
 case 22: 
 /** @type {number} */ var $165=$tm;
 /** @type {number} */ var $166=($165|0)==0;
 if($166){label=23;break;}else{label=24;break;}
 case 23: 
 $1=0;
 label=29;break;
 case 24: 
 /** @type {number} */ var $169=$2;
 /** @type {number} */ var $170=$tm;
 /** @type {number} */ var $171=$3;
 /** @type {number} */ var $172=$4;
 /** @type {number} */ var $173=$2;
 /** @type {number} */ var $174=(($173+8)|0);
 /** @type {number} */ var $175=HEAP32[(($174)>>2)];
 _callTM($169,$170,$171,$172,$175,1);
 /** @type {number} */ var $176=$2;
 /** @type {number} */ var $177=(($176+8)|0);
 /** @type {number} */ var $178=HEAP32[(($177)>>2)];
 /** @type {number} */ var $179=(($178+8)|0);
 /** @type {number} */ var $180=HEAP32[(($179)>>2)];
 /** @type {number} */ var $181=($180|0)==0;
 if($181){var $200=1;label=28;break;}else{label=25;break;}
 case 25: 
 /** @type {number} */ var $183=$2;
 /** @type {number} */ var $184=(($183+8)|0);
 /** @type {number} */ var $185=HEAP32[(($184)>>2)];
 /** @type {number} */ var $186=(($185+8)|0);
 /** @type {number} */ var $187=HEAP32[(($186)>>2)];
 /** @type {number} */ var $188=($187|0)==1;
 if($188){label=26;break;}else{var $198=0;label=27;break;}
 case 26: 
 /** @type {number} */ var $190=$2;
 /** @type {number} */ var $191=(($190+8)|0);
 /** @type {number} */ var $192=HEAP32[(($191)>>2)];
 /** @type {number} */ var $193=(($192)|0);
 /** @type {number} */ var $194=$193;
 /** @type {number} */ var $195=HEAP32[(($194)>>2)];
 /** @type {number} */ var $196=($195|0)==0;
 var $198=$196;label=27;break;
 case 27: 
 var $198;
 var $200=$198;label=28;break;
 case 28: 
 var $200;
 /** @type {number} */ var $201=$200^1;
 /** @type {number} */ var $202=($201&1);
 $1=$202;
 label=29;break;
 case 29: 
 /** @type {number} */ var $204=$1;
 STACKTOP=sp;return $204;
 }
}
/**
 * @param {number} $L
 * @param {number} $total
 * @return {number}
 */
function _luaV_concat($L,$total){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $top;
 /** @type {number} */ var $n;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io1;
 /** @type {number} */ var $tl;
 /** @type {number} */ var $buffer;
 /** @type {number} */ var $i;
 /** @type {number} */ var $l;
 /** @type {number} */ var $l1;
 /** @type {number} */ var $io;
 /** @type {number} */ var $x_;
 $1=$L;
 $2=$total;
 label=2;break;
 case 2: 
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+8)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 $top=$6;
 $n=2;
 /** @type {number} */ var $7=$top;
 /** @type {number} */ var $8=((($7)-(32))|0);
 /** @type {number} */ var $9=(($8+8)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=$10&15;
 /** @type {number} */ var $12=($11|0)==4;
 if($12){label=4;break;}else{label=3;break;}
 case 3: 
 /** @type {number} */ var $14=$top;
 /** @type {number} */ var $15=((($14)-(32))|0);
 /** @type {number} */ var $16=(($15+8)|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=($17|0)==3;
 if($18){label=4;break;}else{label=6;break;}
 case 4: 
 /** @type {number} */ var $20=$top;
 /** @type {number} */ var $21=((($20)-(16))|0);
 /** @type {number} */ var $22=(($21+8)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 /** @type {number} */ var $24=$23&15;
 /** @type {number} */ var $25=($24|0)==4;
 if($25){label=9;break;}else{label=5;break;}
 case 5: 
 /** @type {number} */ var $27=$1;
 /** @type {number} */ var $28=$top;
 /** @type {number} */ var $29=((($28)-(16))|0);
 /** @type {number} */ var $30=_luaV_tostring($27,$29);
 /** @type {number} */ var $31=($30|0)!=0;
 if($31){label=9;break;}else{label=6;break;}
 case 6: 
 /** @type {number} */ var $33=$1;
 /** @type {number} */ var $34=$top;
 /** @type {number} */ var $35=((($34)-(32))|0);
 /** @type {number} */ var $36=$top;
 /** @type {number} */ var $37=((($36)-(16))|0);
 /** @type {number} */ var $38=$top;
 /** @type {number} */ var $39=((($38)-(32))|0);
 /** @type {number} */ var $40=_call_binTM($33,$35,$37,$39,15);
 /** @type {number} */ var $41=($40|0)!=0;
 if($41){label=8;break;}else{label=7;break;}
 case 7: 
 /** @type {number} */ var $43=$1;
 /** @type {number} */ var $44=$top;
 /** @type {number} */ var $45=((($44)-(32))|0);
 /** @type {number} */ var $46=$top;
 /** @type {number} */ var $47=((($46)-(16))|0);
 _luaG_concaterror($43,$45,$47);
 case 8: 
 label=30;break;
 case 9: 
 /** @type {number} */ var $50=$top;
 /** @type {number} */ var $51=((($50)-(16))|0);
 /** @type {number} */ var $52=(($51)|0);
 /** @type {number} */ var $53=$52;
 /** @type {number} */ var $54=HEAP32[(($53)>>2)];
 /** @type {number} */ var $55=$54;
 /** @type {number} */ var $56=$55;
 /** @type {number} */ var $57=(($56+12)|0);
 /** @type {number} */ var $58=HEAP32[(($57)>>2)];
 /** @type {number} */ var $59=($58|0)==0;
 if($59){label=10;break;}else{label=13;break;}
 case 10: 
 /** @type {number} */ var $61=$top;
 /** @type {number} */ var $62=((($61)-(32))|0);
 /** @type {number} */ var $63=(($62+8)|0);
 /** @type {number} */ var $64=HEAP32[(($63)>>2)];
 /** @type {number} */ var $65=$64&15;
 /** @type {number} */ var $66=($65|0)==4;
 if($66){var $74=1;label=12;break;}else{label=11;break;}
 case 11: 
 /** @type {number} */ var $68=$1;
 /** @type {number} */ var $69=$top;
 /** @type {number} */ var $70=((($69)-(32))|0);
 /** @type {number} */ var $71=_luaV_tostring($68,$70);
 /** @type {number} */ var $72=($71|0)!=0;
 var $74=$72;label=12;break;
 case 12: 
 var $74;
 /** @type {number} */ var $75=($74&1);
 label=29;break;
 case 13: 
 /** @type {number} */ var $77=$top;
 /** @type {number} */ var $78=((($77)-(32))|0);
 /** @type {number} */ var $79=(($78+8)|0);
 /** @type {number} */ var $80=HEAP32[(($79)>>2)];
 /** @type {number} */ var $81=$80&15;
 /** @type {number} */ var $82=($81|0)==4;
 if($82){label=14;break;}else{label=16;break;}
 case 14: 
 /** @type {number} */ var $84=$top;
 /** @type {number} */ var $85=((($84)-(32))|0);
 /** @type {number} */ var $86=(($85)|0);
 /** @type {number} */ var $87=$86;
 /** @type {number} */ var $88=HEAP32[(($87)>>2)];
 /** @type {number} */ var $89=$88;
 /** @type {number} */ var $90=$89;
 /** @type {number} */ var $91=(($90+12)|0);
 /** @type {number} */ var $92=HEAP32[(($91)>>2)];
 /** @type {number} */ var $93=($92|0)==0;
 if($93){label=15;break;}else{label=16;break;}
 case 15: 
 /** @type {number} */ var $95=$top;
 /** @type {number} */ var $96=((($95)-(16))|0);
 $io2=$96;
 /** @type {number} */ var $97=$top;
 /** @type {number} */ var $98=((($97)-(32))|0);
 $io1=$98;
 /** @type {number} */ var $99=$io1;
 /** @type {number} */ var $100=(($99)|0);
 /** @type {number} */ var $101=$io2;
 /** @type {number} */ var $102=(($101)|0);
 /** @type {number} */ var $103=$100;
 /** @type {number} */ var $104=$102;
 HEAP32[(($103)>>2)]=HEAP32[(($104)>>2)];HEAP32[((($103)+(4))>>2)]=HEAP32[((($104)+(4))>>2)];
 /** @type {number} */ var $105=$io2;
 /** @type {number} */ var $106=(($105+8)|0);
 /** @type {number} */ var $107=HEAP32[(($106)>>2)];
 /** @type {number} */ var $108=$io1;
 /** @type {number} */ var $109=(($108+8)|0);
 HEAP32[(($109)>>2)]=$107;
 label=28;break;
 case 16: 
 /** @type {number} */ var $111=$top;
 /** @type {number} */ var $112=((($111)-(16))|0);
 /** @type {number} */ var $113=(($112)|0);
 /** @type {number} */ var $114=$113;
 /** @type {number} */ var $115=HEAP32[(($114)>>2)];
 /** @type {number} */ var $116=$115;
 /** @type {number} */ var $117=$116;
 /** @type {number} */ var $118=(($117+12)|0);
 /** @type {number} */ var $119=HEAP32[(($118)>>2)];
 $tl=$119;
 $i=1;
 label=17;break;
 case 17: 
 /** @type {number} */ var $121=$i;
 /** @type {number} */ var $122=$2;
 /** @type {number} */ var $123=($121|0)<($122|0);
 if($123){label=18;break;}else{label=24;break;}
 case 18: 
 /** @type {number} */ var $125=$top;
 /** @type {number} */ var $126=$i;
 /** @type {number} */ var $127=(((-$126))|0);
 /** @type {number} */ var $128=(($125+($127<<4))|0);
 /** @type {number} */ var $129=((($128)-(16))|0);
 /** @type {number} */ var $130=(($129+8)|0);
 /** @type {number} */ var $131=HEAP32[(($130)>>2)];
 /** @type {number} */ var $132=$131&15;
 /** @type {number} */ var $133=($132|0)==4;
 if($133){label=20;break;}else{label=19;break;}
 case 19: 
 /** @type {number} */ var $135=$1;
 /** @type {number} */ var $136=$top;
 /** @type {number} */ var $137=$i;
 /** @type {number} */ var $138=(((-$137))|0);
 /** @type {number} */ var $139=(($136+($138<<4))|0);
 /** @type {number} */ var $140=((($139)-(16))|0);
 /** @type {number} */ var $141=_luaV_tostring($135,$140);
 /** @type {number} */ var $142=($141|0)!=0;
 if($142){label=20;break;}else{label=24;break;}
 case 20: 
 /** @type {number} */ var $144=$top;
 /** @type {number} */ var $145=$i;
 /** @type {number} */ var $146=(((-$145))|0);
 /** @type {number} */ var $147=(($144+($146<<4))|0);
 /** @type {number} */ var $148=((($147)-(16))|0);
 /** @type {number} */ var $149=(($148)|0);
 /** @type {number} */ var $150=$149;
 /** @type {number} */ var $151=HEAP32[(($150)>>2)];
 /** @type {number} */ var $152=$151;
 /** @type {number} */ var $153=$152;
 /** @type {number} */ var $154=(($153+12)|0);
 /** @type {number} */ var $155=HEAP32[(($154)>>2)];
 $l=$155;
 /** @type {number} */ var $156=$l;
 /** @type {number} */ var $157=$tl;
 /** @type {number} */ var $158=(((-3)-($157))|0);
 /** @type {number} */ var $159=($156>>>0)>=($158>>>0);
 if($159){label=21;break;}else{label=22;break;}
 case 21: 
 /** @type {number} */ var $161=$1;
 _luaG_runerror($161,5312,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 case 22: 
 /** @type {number} */ var $163=$l;
 /** @type {number} */ var $164=$tl;
 /** @type {number} */ var $165=((($164)+($163))|0);
 $tl=$165;
 label=23;break;
 case 23: 
 /** @type {number} */ var $167=$i;
 /** @type {number} */ var $168=((($167)+(1))|0);
 $i=$168;
 label=17;break;
 case 24: 
 /** @type {number} */ var $170=$1;
 /** @type {number} */ var $171=$1;
 /** @type {number} */ var $172=(($171+12)|0);
 /** @type {number} */ var $173=HEAP32[(($172)>>2)];
 /** @type {number} */ var $174=(($173+144)|0);
 /** @type {number} */ var $175=$tl;
 /** @type {number} */ var $176=_luaZ_openspace($170,$174,$175);
 $buffer=$176;
 $tl=0;
 /** @type {number} */ var $177=$i;
 $n=$177;
 label=25;break;
 case 25: 
 /** @type {number} */ var $179=$top;
 /** @type {number} */ var $180=$i;
 /** @type {number} */ var $181=(((-$180))|0);
 /** @type {number} */ var $182=(($179+($181<<4))|0);
 /** @type {number} */ var $183=(($182)|0);
 /** @type {number} */ var $184=$183;
 /** @type {number} */ var $185=HEAP32[(($184)>>2)];
 /** @type {number} */ var $186=$185;
 /** @type {number} */ var $187=$186;
 /** @type {number} */ var $188=(($187+12)|0);
 /** @type {number} */ var $189=HEAP32[(($188)>>2)];
 $l1=$189;
 /** @type {number} */ var $190=$buffer;
 /** @type {number} */ var $191=$tl;
 /** @type {number} */ var $192=(($190+$191)|0);
 /** @type {number} */ var $193=$top;
 /** @type {number} */ var $194=$i;
 /** @type {number} */ var $195=(((-$194))|0);
 /** @type {number} */ var $196=(($193+($195<<4))|0);
 /** @type {number} */ var $197=(($196)|0);
 /** @type {number} */ var $198=$197;
 /** @type {number} */ var $199=HEAP32[(($198)>>2)];
 /** @type {number} */ var $200=$199;
 /** @type {number} */ var $201=(($200+16)|0);
 /** @type {number} */ var $202=$201;
 /** @type {number} */ var $203=$l1;
 /** @type {number} */ var $204=$203;
 (_memcpy($192, $202, $204)|0);
 /** @type {number} */ var $205=$l1;
 /** @type {number} */ var $206=$tl;
 /** @type {number} */ var $207=((($206)+($205))|0);
 $tl=$207;
 label=26;break;
 case 26: 
 /** @type {number} */ var $209=$i;
 /** @type {number} */ var $210=((($209)-(1))|0);
 $i=$210;
 /** @type {number} */ var $211=($210|0)>0;
 if($211){label=25;break;}else{label=27;break;}
 case 27: 
 /** @type {number} */ var $213=$top;
 /** @type {number} */ var $214=$n;
 /** @type {number} */ var $215=(((-$214))|0);
 /** @type {number} */ var $216=(($213+($215<<4))|0);
 $io=$216;
 /** @type {number} */ var $217=$1;
 /** @type {number} */ var $218=$buffer;
 /** @type {number} */ var $219=$tl;
 /** @type {number} */ var $220=_luaS_newlstr($217,$218,$219);
 $x_=$220;
 /** @type {number} */ var $221=$x_;
 /** @type {number} */ var $222=$221;
 /** @type {number} */ var $223=$io;
 /** @type {number} */ var $224=(($223)|0);
 /** @type {number} */ var $225=$224;
 HEAP32[(($225)>>2)]=$222;
 /** @type {number} */ var $226=$x_;
 /** @type {number} */ var $227=$226;
 /** @type {number} */ var $228=(($227+4)|0);
 /** @type {number} */ var $229=HEAP8[($228)];
 /** @type {number} */ var $230=($229&255);
 /** @type {number} */ var $231=$230|64;
 /** @type {number} */ var $232=$io;
 /** @type {number} */ var $233=(($232+8)|0);
 HEAP32[(($233)>>2)]=$231;
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 /** @type {number} */ var $237=$n;
 /** @type {number} */ var $238=((($237)-(1))|0);
 /** @type {number} */ var $239=$2;
 /** @type {number} */ var $240=((($239)-($238))|0);
 $2=$240;
 /** @type {number} */ var $241=$n;
 /** @type {number} */ var $242=((($241)-(1))|0);
 /** @type {number} */ var $243=$1;
 /** @type {number} */ var $244=(($243+8)|0);
 /** @type {number} */ var $245=HEAP32[(($244)>>2)];
 /** @type {number} */ var $246=(((-$242))|0);
 /** @type {number} */ var $247=(($245+($246<<4))|0);
 HEAP32[(($244)>>2)]=$247;
 label=31;break;
 case 31: 
 /** @type {number} */ var $249=$2;
 /** @type {number} */ var $250=($249|0)>1;
 if($250){label=2;break;}else{label=32;break;}
 case 32: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $ra
 * @param {number} $rb
 * @return {number}
 */
function _luaV_objlen($L,$ra,$rb){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $tm;
 /** @type {number} */ var $h;
 /** @type {number} */ var $io;
 /** @type {number} */ var $io1;
 $1=$L;
 $2=$ra;
 $3=$rb;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=(($4+8)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=$6&15;
 if(($7|0)==4){ label=11;break;}else if(($7|0)==5){ label=2;break;}else{label=12;break;}
 case 2: 
 /** @type {number} */ var $9=$3;
 /** @type {number} */ var $10=(($9)|0);
 /** @type {number} */ var $11=$10;
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=$12;
 $h=$13;
 /** @type {number} */ var $14=$h;
 /** @type {number} */ var $15=(($14+8)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=($16|0)==0;
 if($17){label=3;break;}else{label=4;break;}
 case 3: 
 var $43=0;label=8;break;
 case 4: 
 /** @type {number} */ var $20=$h;
 /** @type {number} */ var $21=(($20+8)|0);
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 /** @type {number} */ var $23=(($22+6)|0);
 /** @type {number} */ var $24=HEAP8[($23)];
 /** @type {number} */ var $25=($24&255);
 /** @type {number} */ var $26=$25&16;
 /** @type {number} */ var $27=($26|0)!=0;
 if($27){label=5;break;}else{label=6;break;}
 case 5: 
 var $41=0;label=7;break;
 case 6: 
 /** @type {number} */ var $30=$h;
 /** @type {number} */ var $31=(($30+8)|0);
 /** @type {number} */ var $32=HEAP32[(($31)>>2)];
 /** @type {number} */ var $33=$1;
 /** @type {number} */ var $34=(($33+12)|0);
 /** @type {number} */ var $35=HEAP32[(($34)>>2)];
 /** @type {number} */ var $36=(($35+184)|0);
 /** @type {number} */ var $37=(($36+16)|0);
 /** @type {number} */ var $38=HEAP32[(($37)>>2)];
 /** @type {number} */ var $39=_luaT_gettm($32,4,$38);
 var $41=$39;label=7;break;
 case 7: 
 var $41;
 var $43=$41;label=8;break;
 case 8: 
 var $43;
 $tm=$43;
 /** @type {number} */ var $44=$tm;
 /** @type {number} */ var $45=($44|0)!=0;
 if($45){label=9;break;}else{label=10;break;}
 case 9: 
 label=15;break;
 case 10: 
 /** @type {number} */ var $48=$2;
 $io=$48;
 /** @type {number} */ var $49=$h;
 /** @type {number} */ var $50=_luaH_getn($49);
 /** @type {number} */ var $51=($50|0);
 /** @type {number} */ var $52=$io;
 /** @type {number} */ var $53=(($52)|0);
 /** @type {number} */ var $54=$53;
 HEAPF64[(($54)>>3)]=$51;
 /** @type {number} */ var $55=$io;
 /** @type {number} */ var $56=(($55+8)|0);
 HEAP32[(($56)>>2)]=3;
 label=16;break;
 case 11: 
 /** @type {number} */ var $58=$2;
 $io1=$58;
 /** @type {number} */ var $59=$3;
 /** @type {number} */ var $60=(($59)|0);
 /** @type {number} */ var $61=$60;
 /** @type {number} */ var $62=HEAP32[(($61)>>2)];
 /** @type {number} */ var $63=$62;
 /** @type {number} */ var $64=$63;
 /** @type {number} */ var $65=(($64+12)|0);
 /** @type {number} */ var $66=HEAP32[(($65)>>2)];
 /** @type {number} */ var $67=($66>>>0);
 /** @type {number} */ var $68=$io1;
 /** @type {number} */ var $69=(($68)|0);
 /** @type {number} */ var $70=$69;
 HEAPF64[(($70)>>3)]=$67;
 /** @type {number} */ var $71=$io1;
 /** @type {number} */ var $72=(($71+8)|0);
 HEAP32[(($72)>>2)]=3;
 label=16;break;
 case 12: 
 /** @type {number} */ var $74=$1;
 /** @type {number} */ var $75=$3;
 /** @type {number} */ var $76=_luaT_gettmbyobj($74,$75,4);
 $tm=$76;
 /** @type {number} */ var $77=$tm;
 /** @type {number} */ var $78=(($77+8)|0);
 /** @type {number} */ var $79=HEAP32[(($78)>>2)];
 /** @type {number} */ var $80=($79|0)==0;
 if($80){label=13;break;}else{label=14;break;}
 case 13: 
 /** @type {number} */ var $82=$1;
 /** @type {number} */ var $83=$3;
 _luaG_typeerror($82,$83,4168);
 case 14: 
 label=15;break;
 case 15: 
 /** @type {number} */ var $86=$1;
 /** @type {number} */ var $87=$tm;
 /** @type {number} */ var $88=$3;
 /** @type {number} */ var $89=$3;
 /** @type {number} */ var $90=$2;
 _callTM($86,$87,$88,$89,$90,1);
 label=16;break;
 case 16: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $ra
 * @param {number} $rb
 * @param {number} $rc
 * @param {number} $op
 * @return {number}
 */
function _luaV_arith($L,$ra,$rb,$rc,$op){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 /** @type {number} */ var $tempb=sp;
 /** @type {number} */ var $tempc=(sp)+(16);
 /** @type {number} */ var $b;
 /** @type {number} */ var $c;
 /** @type {number} */ var $res;
 /** @type {number} */ var $io;
 $1=$L;
 $2=$ra;
 $3=$rb;
 $4=$rc;
 $5=$op;
 /** @type {number} */ var $6=$3;
 /** @type {number} */ var $7=_luaV_tonumber($6,$tempb);
 $b=$7;
 /** @type {number} */ var $8=($7|0)!=0;
 if($8){label=2;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $10=$4;
 /** @type {number} */ var $11=_luaV_tonumber($10,$tempc);
 $c=$11;
 /** @type {number} */ var $12=($11|0)!=0;
 if($12){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $14=$5;
 /** @type {number} */ var $15=((($14)-(6))|0);
 /** @type {number} */ var $16=(($15)|0);
 /** @type {number} */ var $17=$b;
 /** @type {number} */ var $18=(($17)|0);
 /** @type {number} */ var $19=$18;
 /** @type {number} */ var $20=HEAPF64[(($19)>>3)];
 /** @type {number} */ var $21=$c;
 /** @type {number} */ var $22=(($21)|0);
 /** @type {number} */ var $23=$22;
 /** @type {number} */ var $24=HEAPF64[(($23)>>3)];
 /** @type {number} */ var $25=_luaO_arith($16,$20,$24);
 $res=$25;
 /** @type {number} */ var $26=$2;
 $io=$26;
 /** @type {number} */ var $27=$res;
 /** @type {number} */ var $28=$io;
 /** @type {number} */ var $29=(($28)|0);
 /** @type {number} */ var $30=$29;
 HEAPF64[(($30)>>3)]=$27;
 /** @type {number} */ var $31=$io;
 /** @type {number} */ var $32=(($31+8)|0);
 HEAP32[(($32)>>2)]=3;
 label=7;break;
 case 4: 
 /** @type {number} */ var $34=$1;
 /** @type {number} */ var $35=$3;
 /** @type {number} */ var $36=$4;
 /** @type {number} */ var $37=$2;
 /** @type {number} */ var $38=$5;
 /** @type {number} */ var $39=_call_binTM($34,$35,$36,$37,$38);
 /** @type {number} */ var $40=($39|0)!=0;
 if($40){label=6;break;}else{label=5;break;}
 case 5: 
 /** @type {number} */ var $42=$1;
 /** @type {number} */ var $43=$3;
 /** @type {number} */ var $44=$4;
 _luaG_aritherror($42,$43,$44);
 case 6: 
 label=7;break;
 case 7: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaV_finishOp($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $ci;
 /** @type {number} */ var $base;
 /** @type {number} */ var $inst;
 /** @type {number} */ var $op;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io1;
 /** @type {number} */ var $res;
 /** @type {number} */ var $top;
 /** @type {number} */ var $b;
 /** @type {number} */ var $total;
 /** @type {number} */ var $io21;
 /** @type {number} */ var $io12;
 /** @type {number} */ var $io23;
 /** @type {number} */ var $io14;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+16)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $ci=$4;
 /** @type {number} */ var $5=$ci;
 /** @type {number} */ var $6=(($5+24)|0);
 /** @type {number} */ var $7=$6;
 /** @type {number} */ var $8=(($7)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 $base=$9;
 /** @type {number} */ var $10=$ci;
 /** @type {number} */ var $11=(($10+24)|0);
 /** @type {number} */ var $12=$11;
 /** @type {number} */ var $13=(($12+4)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=((($14)-(4))|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 $inst=$16;
 /** @type {number} */ var $17=$inst;
 /** @type {number} */ var $18=$17>>>0;
 /** @type {number} */ var $19=$18&63;
 $op=$19;
 /** @type {number} */ var $20=$op;
 switch(($20|0)){case 22:{ label=13;break;}case 34:{ label=16;break;}case 29:{ label=17;break;}case 13:case 14:case 15:case 16:case 17:case 18:case 19:case 21:case 6:case 7:case 12:{ label=2;break;}case 30:case 8:case 10:{ label=20;break;}case 26:case 25:case 24:{ label=3;break;}default:{label=21;break;}}break;
 case 2: 
 /** @type {number} */ var $22=$1;
 /** @type {number} */ var $23=(($22+8)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=((($24)-(16))|0);
 HEAP32[(($23)>>2)]=$25;
 $io2=$25;
 /** @type {number} */ var $26=$base;
 /** @type {number} */ var $27=$inst;
 /** @type {number} */ var $28=$27>>>6;
 /** @type {number} */ var $29=$28&255;
 /** @type {number} */ var $30=(($26+($29<<4))|0);
 $io1=$30;
 /** @type {number} */ var $31=$io1;
 /** @type {number} */ var $32=(($31)|0);
 /** @type {number} */ var $33=$io2;
 /** @type {number} */ var $34=(($33)|0);
 /** @type {number} */ var $35=$32;
 /** @type {number} */ var $36=$34;
 HEAP32[(($35)>>2)]=HEAP32[(($36)>>2)];HEAP32[((($35)+(4))>>2)]=HEAP32[((($36)+(4))>>2)];
 /** @type {number} */ var $37=$io2;
 /** @type {number} */ var $38=(($37+8)|0);
 /** @type {number} */ var $39=HEAP32[(($38)>>2)];
 /** @type {number} */ var $40=$io1;
 /** @type {number} */ var $41=(($40+8)|0);
 HEAP32[(($41)>>2)]=$39;
 label=22;break;
 case 3: 
 /** @type {number} */ var $43=$1;
 /** @type {number} */ var $44=(($43+8)|0);
 /** @type {number} */ var $45=HEAP32[(($44)>>2)];
 /** @type {number} */ var $46=((($45)-(16))|0);
 /** @type {number} */ var $47=(($46+8)|0);
 /** @type {number} */ var $48=HEAP32[(($47)>>2)];
 /** @type {number} */ var $49=($48|0)==0;
 if($49){var $70=1;label=7;break;}else{label=4;break;}
 case 4: 
 /** @type {number} */ var $51=$1;
 /** @type {number} */ var $52=(($51+8)|0);
 /** @type {number} */ var $53=HEAP32[(($52)>>2)];
 /** @type {number} */ var $54=((($53)-(16))|0);
 /** @type {number} */ var $55=(($54+8)|0);
 /** @type {number} */ var $56=HEAP32[(($55)>>2)];
 /** @type {number} */ var $57=($56|0)==1;
 if($57){label=5;break;}else{var $68=0;label=6;break;}
 case 5: 
 /** @type {number} */ var $59=$1;
 /** @type {number} */ var $60=(($59+8)|0);
 /** @type {number} */ var $61=HEAP32[(($60)>>2)];
 /** @type {number} */ var $62=((($61)-(16))|0);
 /** @type {number} */ var $63=(($62)|0);
 /** @type {number} */ var $64=$63;
 /** @type {number} */ var $65=HEAP32[(($64)>>2)];
 /** @type {number} */ var $66=($65|0)==0;
 var $68=$66;label=6;break;
 case 6: 
 var $68;
 var $70=$68;label=7;break;
 case 7: 
 var $70;
 /** @type {number} */ var $71=$70^1;
 /** @type {number} */ var $72=($71&1);
 $res=$72;
 /** @type {number} */ var $73=$1;
 /** @type {number} */ var $74=(($73+8)|0);
 /** @type {number} */ var $75=HEAP32[(($74)>>2)];
 /** @type {number} */ var $76=((($75)-(16))|0);
 HEAP32[(($74)>>2)]=$76;
 /** @type {number} */ var $77=$op;
 /** @type {number} */ var $78=($77|0)==26;
 if($78){label=8;break;}else{label=10;break;}
 case 8: 
 /** @type {number} */ var $80=$1;
 /** @type {number} */ var $81=$base;
 /** @type {number} */ var $82=$inst;
 /** @type {number} */ var $83=$82>>>23;
 /** @type {number} */ var $84=$83&511;
 /** @type {number} */ var $85=(($81+($84<<4))|0);
 /** @type {number} */ var $86=_luaT_gettmbyobj($80,$85,14);
 /** @type {number} */ var $87=(($86+8)|0);
 /** @type {number} */ var $88=HEAP32[(($87)>>2)];
 /** @type {number} */ var $89=($88|0)==0;
 if($89){label=9;break;}else{label=10;break;}
 case 9: 
 /** @type {number} */ var $91=$res;
 /** @type {number} */ var $92=($91|0)!=0;
 /** @type {number} */ var $93=$92^1;
 /** @type {number} */ var $94=($93&1);
 $res=$94;
 label=10;break;
 case 10: 
 /** @type {number} */ var $96=$res;
 /** @type {number} */ var $97=$inst;
 /** @type {number} */ var $98=$97>>>6;
 /** @type {number} */ var $99=$98&255;
 /** @type {number} */ var $100=($96|0)!=($99|0);
 if($100){label=11;break;}else{label=12;break;}
 case 11: 
 /** @type {number} */ var $102=$ci;
 /** @type {number} */ var $103=(($102+24)|0);
 /** @type {number} */ var $104=$103;
 /** @type {number} */ var $105=(($104+4)|0);
 /** @type {number} */ var $106=HEAP32[(($105)>>2)];
 /** @type {number} */ var $107=(($106+4)|0);
 HEAP32[(($105)>>2)]=$107;
 label=12;break;
 case 12: 
 label=22;break;
 case 13: 
 /** @type {number} */ var $110=$1;
 /** @type {number} */ var $111=(($110+8)|0);
 /** @type {number} */ var $112=HEAP32[(($111)>>2)];
 /** @type {number} */ var $113=((($112)-(16))|0);
 $top=$113;
 /** @type {number} */ var $114=$inst;
 /** @type {number} */ var $115=$114>>>23;
 /** @type {number} */ var $116=$115&511;
 $b=$116;
 /** @type {number} */ var $117=$top;
 /** @type {number} */ var $118=((($117)-(16))|0);
 /** @type {number} */ var $119=$base;
 /** @type {number} */ var $120=$b;
 /** @type {number} */ var $121=(($119+($120<<4))|0);
 /** @type {number} */ var $122=$118;
 /** @type {number} */ var $123=$121;
 /** @type {number} */ var $124=((($122)-($123))|0);
 /** @type {number} */ var $125=(((($124|0))/(16))&-1);
 $total=$125;
 /** @type {number} */ var $126=$top;
 $io21=$126;
 /** @type {number} */ var $127=$top;
 /** @type {number} */ var $128=((($127)-(32))|0);
 $io12=$128;
 /** @type {number} */ var $129=$io12;
 /** @type {number} */ var $130=(($129)|0);
 /** @type {number} */ var $131=$io21;
 /** @type {number} */ var $132=(($131)|0);
 /** @type {number} */ var $133=$130;
 /** @type {number} */ var $134=$132;
 HEAP32[(($133)>>2)]=HEAP32[(($134)>>2)];HEAP32[((($133)+(4))>>2)]=HEAP32[((($134)+(4))>>2)];
 /** @type {number} */ var $135=$io21;
 /** @type {number} */ var $136=(($135+8)|0);
 /** @type {number} */ var $137=HEAP32[(($136)>>2)];
 /** @type {number} */ var $138=$io12;
 /** @type {number} */ var $139=(($138+8)|0);
 HEAP32[(($139)>>2)]=$137;
 /** @type {number} */ var $140=$total;
 /** @type {number} */ var $141=($140|0)>1;
 if($141){label=14;break;}else{label=15;break;}
 case 14: 
 /** @type {number} */ var $143=$top;
 /** @type {number} */ var $144=((($143)-(16))|0);
 /** @type {number} */ var $145=$1;
 /** @type {number} */ var $146=(($145+8)|0);
 HEAP32[(($146)>>2)]=$144;
 /** @type {number} */ var $147=$1;
 /** @type {number} */ var $148=$total;
 _luaV_concat($147,$148);
 label=15;break;
 case 15: 
 /** @type {number} */ var $150=$1;
 /** @type {number} */ var $151=(($150+8)|0);
 /** @type {number} */ var $152=HEAP32[(($151)>>2)];
 /** @type {number} */ var $153=((($152)-(16))|0);
 $io23=$153;
 /** @type {number} */ var $154=$ci;
 /** @type {number} */ var $155=(($154+24)|0);
 /** @type {number} */ var $156=$155;
 /** @type {number} */ var $157=(($156)|0);
 /** @type {number} */ var $158=HEAP32[(($157)>>2)];
 /** @type {number} */ var $159=$inst;
 /** @type {number} */ var $160=$159>>>6;
 /** @type {number} */ var $161=$160&255;
 /** @type {number} */ var $162=(($158+($161<<4))|0);
 $io14=$162;
 /** @type {number} */ var $163=$io14;
 /** @type {number} */ var $164=(($163)|0);
 /** @type {number} */ var $165=$io23;
 /** @type {number} */ var $166=(($165)|0);
 /** @type {number} */ var $167=$164;
 /** @type {number} */ var $168=$166;
 HEAP32[(($167)>>2)]=HEAP32[(($168)>>2)];HEAP32[((($167)+(4))>>2)]=HEAP32[((($168)+(4))>>2)];
 /** @type {number} */ var $169=$io23;
 /** @type {number} */ var $170=(($169+8)|0);
 /** @type {number} */ var $171=HEAP32[(($170)>>2)];
 /** @type {number} */ var $172=$io14;
 /** @type {number} */ var $173=(($172+8)|0);
 HEAP32[(($173)>>2)]=$171;
 /** @type {number} */ var $174=$ci;
 /** @type {number} */ var $175=(($174+4)|0);
 /** @type {number} */ var $176=HEAP32[(($175)>>2)];
 /** @type {number} */ var $177=$1;
 /** @type {number} */ var $178=(($177+8)|0);
 HEAP32[(($178)>>2)]=$176;
 label=22;break;
 case 16: 
 /** @type {number} */ var $180=$ci;
 /** @type {number} */ var $181=(($180+4)|0);
 /** @type {number} */ var $182=HEAP32[(($181)>>2)];
 /** @type {number} */ var $183=$1;
 /** @type {number} */ var $184=(($183+8)|0);
 HEAP32[(($184)>>2)]=$182;
 label=22;break;
 case 17: 
 /** @type {number} */ var $186=$inst;
 /** @type {number} */ var $187=$186>>>14;
 /** @type {number} */ var $188=$187&511;
 /** @type {number} */ var $189=((($188)-(1))|0);
 /** @type {number} */ var $190=($189|0)>=0;
 if($190){label=18;break;}else{label=19;break;}
 case 18: 
 /** @type {number} */ var $192=$ci;
 /** @type {number} */ var $193=(($192+4)|0);
 /** @type {number} */ var $194=HEAP32[(($193)>>2)];
 /** @type {number} */ var $195=$1;
 /** @type {number} */ var $196=(($195+8)|0);
 HEAP32[(($196)>>2)]=$194;
 label=19;break;
 case 19: 
 label=22;break;
 case 20: 
 label=22;break;
 case 21: 
 label=22;break;
 case 22: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaV_execute($L){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $ci;
 /** @type {number} */ var $cl;
 /** @type {number} */ var $k;
 /** @type {number} */ var $base;
 /** @type {number} */ var $i;
 /** @type {number} */ var $ra;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io1;
 /** @type {number} */ var $rb;
 /** @type {number} */ var $io21;
 /** @type {number} */ var $io12;
 /** @type {number} */ var $rb3;
 /** @type {number} */ var $io24;
 /** @type {number} */ var $io15;
 /** @type {number} */ var $io;
 /** @type {number} */ var $b;
 /** @type {number} */ var $b6;
 /** @type {number} */ var $io27;
 /** @type {number} */ var $io18;
 /** @type {number} */ var $b9;
 /** @type {number} */ var $a;
 /** @type {number} */ var $uv;
 /** @type {number} */ var $io210;
 /** @type {number} */ var $io111;
 /** @type {number} */ var $b12;
 /** @type {number} */ var $c;
 /** @type {number} */ var $t;
 /** @type {number} */ var $io13;
 /** @type {number} */ var $rb14;
 /** @type {number} */ var $io215;
 /** @type {number} */ var $io116;
 /** @type {number} */ var $rb17;
 /** @type {number} */ var $rc;
 /** @type {number} */ var $nb;
 /** @type {number} */ var $nc;
 /** @type {number} */ var $io19;
 /** @type {number} */ var $rb20;
 /** @type {number} */ var $rc21;
 /** @type {number} */ var $nb22;
 /** @type {number} */ var $nc23;
 /** @type {number} */ var $io25;
 /** @type {number} */ var $rb26;
 /** @type {number} */ var $rc27;
 /** @type {number} */ var $nb28;
 /** @type {number} */ var $nc29;
 /** @type {number} */ var $io30;
 /** @type {number} */ var $rb31;
 /** @type {number} */ var $rc32;
 /** @type {number} */ var $nb33;
 /** @type {number} */ var $nc34;
 /** @type {number} */ var $io35;
 /** @type {number} */ var $rb36;
 /** @type {number} */ var $rc37;
 /** @type {number} */ var $nb38;
 /** @type {number} */ var $nc39;
 /** @type {number} */ var $io40;
 /** @type {number} */ var $rb41;
 /** @type {number} */ var $rc42;
 /** @type {number} */ var $nb43;
 /** @type {number} */ var $nc44;
 /** @type {number} */ var $io45;
 /** @type {number} */ var $rb46;
 /** @type {number} */ var $nb47;
 /** @type {number} */ var $io48;
 /** @type {number} */ var $rb49;
 /** @type {number} */ var $res;
 /** @type {number} */ var $io50;
 /** @type {number} */ var $b51;
 /** @type {number} */ var $c52;
 /** @type {number} */ var $rb53;
 /** @type {number} */ var $io254;
 /** @type {number} */ var $io155;
 /** @type {number} */ var $a56;
 /** @type {number} */ var $rb57;
 /** @type {number} */ var $rc58;
 /** @type {number} */ var $a59;
 /** @type {number} */ var $a60;
 /** @type {number} */ var $a61;
 /** @type {number} */ var $a62;
 /** @type {number} */ var $rb63;
 /** @type {number} */ var $io264;
 /** @type {number} */ var $io165;
 /** @type {number} */ var $a66;
 /** @type {number} */ var $b67;
 /** @type {number} */ var $nresults;
 /** @type {number} */ var $b68;
 /** @type {number} */ var $nci;
 /** @type {number} */ var $oci;
 /** @type {number} */ var $nfunc;
 /** @type {number} */ var $ofunc;
 /** @type {number} */ var $lim;
 /** @type {number} */ var $aux;
 /** @type {number} */ var $io269;
 /** @type {number} */ var $io170;
 /** @type {number} */ var $b71;
 /** @type {number} */ var $step;
 /** @type {number} */ var $idx;
 /** @type {number} */ var $limit;
 /** @type {number} */ var $io72;
 /** @type {number} */ var $io73;
 /** @type {number} */ var $init;
 /** @type {number} */ var $plimit;
 /** @type {number} */ var $pstep;
 /** @type {number} */ var $io74;
 /** @type {number} */ var $cb;
 /** @type {number} */ var $io275;
 /** @type {number} */ var $io176;
 /** @type {number} */ var $io277;
 /** @type {number} */ var $io178;
 /** @type {number} */ var $io279;
 /** @type {number} */ var $io180;
 /** @type {number} */ var $io281;
 /** @type {number} */ var $io182;
 /** @type {number} */ var $n;
 /** @type {number} */ var $c83;
 /** @type {number} */ var $last;
 /** @type {number} */ var $h;
 /** @type {number} */ var $val;
 /** @type {number} */ var $p;
 /** @type {number} */ var $ncl;
 /** @type {number} */ var $io84;
 /** @type {number} */ var $b85;
 /** @type {number} */ var $j;
 /** @type {number} */ var $n86;
 /** @type {number} */ var $io287;
 /** @type {number} */ var $io188;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+16)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $ci=$4;
 label=2;break;
 case 2: 
 /** @type {number} */ var $6=$ci;
 /** @type {number} */ var $7=(($6)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=(($8)|0);
 /** @type {number} */ var $10=$9;
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=$11;
 /** @type {number} */ var $13=$12;
 $cl=$13;
 /** @type {number} */ var $14=$cl;
 /** @type {number} */ var $15=(($14+12)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=(($16+8)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 $k=$18;
 /** @type {number} */ var $19=$ci;
 /** @type {number} */ var $20=(($19+24)|0);
 /** @type {number} */ var $21=$20;
 /** @type {number} */ var $22=(($21)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 $base=$23;
 label=3;break;
 case 3: 
 /** @type {number} */ var $25=$ci;
 /** @type {number} */ var $26=(($25+24)|0);
 /** @type {number} */ var $27=$26;
 /** @type {number} */ var $28=(($27+4)|0);
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 /** @type {number} */ var $30=(($29+4)|0);
 HEAP32[(($28)>>2)]=$30;
 /** @type {number} */ var $31=HEAP32[(($29)>>2)];
 $i=$31;
 /** @type {number} */ var $32=$1;
 /** @type {number} */ var $33=(($32+40)|0);
 /** @type {number} */ var $34=HEAP8[($33)];
 /** @type {number} */ var $35=($34&255);
 /** @type {number} */ var $36=$35&12;
 /** @type {number} */ var $37=($36|0)!=0;
 if($37){label=4;break;}else{label=7;break;}
 case 4: 
 /** @type {number} */ var $39=$1;
 /** @type {number} */ var $40=(($39+48)|0);
 /** @type {number} */ var $41=HEAP32[(($40)>>2)];
 /** @type {number} */ var $42=((($41)-(1))|0);
 HEAP32[(($40)>>2)]=$42;
 /** @type {number} */ var $43=($42|0)==0;
 if($43){label=6;break;}else{label=5;break;}
 case 5: 
 /** @type {number} */ var $45=$1;
 /** @type {number} */ var $46=(($45+40)|0);
 /** @type {number} */ var $47=HEAP8[($46)];
 /** @type {number} */ var $48=($47&255);
 /** @type {number} */ var $49=$48&4;
 /** @type {number} */ var $50=($49|0)!=0;
 if($50){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $52=$1;
 _traceexec($52);
 /** @type {number} */ var $53=$ci;
 /** @type {number} */ var $54=(($53+24)|0);
 /** @type {number} */ var $55=$54;
 /** @type {number} */ var $56=(($55)|0);
 /** @type {number} */ var $57=HEAP32[(($56)>>2)];
 $base=$57;
 label=7;break;
 case 7: 
 /** @type {number} */ var $59=$base;
 /** @type {number} */ var $60=$i;
 /** @type {number} */ var $61=$60>>>6;
 /** @type {number} */ var $62=$61&255;
 /** @type {number} */ var $63=(($59+($62<<4))|0);
 $ra=$63;
 /** @type {number} */ var $64=$i;
 /** @type {number} */ var $65=$64>>>0;
 /** @type {number} */ var $66=$65&63;
 switch(($66|0)){case 2:{ label=10;break;}case 17:{ label=100;break;}case 3:{ label=11;break;}case 18:{ label=111;break;}case 19:{ label=122;break;}case 20:{ label=126;break;}case 21:{ label=131;break;}case 22:{ label=132;break;}case 23:{ label=138;break;}case 4:{ label=14;break;}case 24:{ label=141;break;}case 25:{ label=155;break;}case 26:{ label=167;break;}case 27:{ label=179;break;}case 5:{ label=18;break;}case 6:{ label=19;break;}case 28:{ label=191;break;}case 29:{ label=203;break;}case 30:{ label=211;break;}case 31:{ label=223;break;}case 7:{ label=23;break;}case 32:{ label=232;break;}case 33:{ label=237;break;}case 34:{ label=249;break;}case 35:{ label=250;break;}case 36:{ label=254;break;}case 37:{ label=269;break;}case 8:{ label=27;break;}case 38:{ label=275;break;}case 39:{ label=288;break;}case 9:{ label=34;break;}case 10:{ label=39;break;}case 11:{ label=46;break;}case 12:{ label=52;break;}case 13:{ label=56;break;}case 14:{ label=67;break;}case 15:{ label=78;break;}case 0:{ label=8;break;}case 16:{ label=89;break;}case 1:{ label=9;break;}default:{label=289;break;}}break;
 case 8: 
 /** @type {number} */ var $68=$base;
 /** @type {number} */ var $69=$i;
 /** @type {number} */ var $70=$69>>>23;
 /** @type {number} */ var $71=$70&511;
 /** @type {number} */ var $72=(($68+($71<<4))|0);
 $io2=$72;
 /** @type {number} */ var $73=$ra;
 $io1=$73;
 /** @type {number} */ var $74=$io1;
 /** @type {number} */ var $75=(($74)|0);
 /** @type {number} */ var $76=$io2;
 /** @type {number} */ var $77=(($76)|0);
 /** @type {number} */ var $78=$75;
 /** @type {number} */ var $79=$77;
 HEAP32[(($78)>>2)]=HEAP32[(($79)>>2)];HEAP32[((($78)+(4))>>2)]=HEAP32[((($79)+(4))>>2)];
 /** @type {number} */ var $80=$io2;
 /** @type {number} */ var $81=(($80+8)|0);
 /** @type {number} */ var $82=HEAP32[(($81)>>2)];
 /** @type {number} */ var $83=$io1;
 /** @type {number} */ var $84=(($83+8)|0);
 HEAP32[(($84)>>2)]=$82;
 label=289;break;
 case 9: 
 /** @type {number} */ var $86=$k;
 /** @type {number} */ var $87=$i;
 /** @type {number} */ var $88=$87>>>14;
 /** @type {number} */ var $89=$88&262143;
 /** @type {number} */ var $90=(($86+($89<<4))|0);
 $rb=$90;
 /** @type {number} */ var $91=$rb;
 $io21=$91;
 /** @type {number} */ var $92=$ra;
 $io12=$92;
 /** @type {number} */ var $93=$io12;
 /** @type {number} */ var $94=(($93)|0);
 /** @type {number} */ var $95=$io21;
 /** @type {number} */ var $96=(($95)|0);
 /** @type {number} */ var $97=$94;
 /** @type {number} */ var $98=$96;
 HEAP32[(($97)>>2)]=HEAP32[(($98)>>2)];HEAP32[((($97)+(4))>>2)]=HEAP32[((($98)+(4))>>2)];
 /** @type {number} */ var $99=$io21;
 /** @type {number} */ var $100=(($99+8)|0);
 /** @type {number} */ var $101=HEAP32[(($100)>>2)];
 /** @type {number} */ var $102=$io12;
 /** @type {number} */ var $103=(($102+8)|0);
 HEAP32[(($103)>>2)]=$101;
 label=289;break;
 case 10: 
 /** @type {number} */ var $105=$k;
 /** @type {number} */ var $106=$ci;
 /** @type {number} */ var $107=(($106+24)|0);
 /** @type {number} */ var $108=$107;
 /** @type {number} */ var $109=(($108+4)|0);
 /** @type {number} */ var $110=HEAP32[(($109)>>2)];
 /** @type {number} */ var $111=(($110+4)|0);
 HEAP32[(($109)>>2)]=$111;
 /** @type {number} */ var $112=HEAP32[(($110)>>2)];
 /** @type {number} */ var $113=$112>>>6;
 /** @type {number} */ var $114=$113&67108863;
 /** @type {number} */ var $115=(($105+($114<<4))|0);
 $rb3=$115;
 /** @type {number} */ var $116=$rb3;
 $io24=$116;
 /** @type {number} */ var $117=$ra;
 $io15=$117;
 /** @type {number} */ var $118=$io15;
 /** @type {number} */ var $119=(($118)|0);
 /** @type {number} */ var $120=$io24;
 /** @type {number} */ var $121=(($120)|0);
 /** @type {number} */ var $122=$119;
 /** @type {number} */ var $123=$121;
 HEAP32[(($122)>>2)]=HEAP32[(($123)>>2)];HEAP32[((($122)+(4))>>2)]=HEAP32[((($123)+(4))>>2)];
 /** @type {number} */ var $124=$io24;
 /** @type {number} */ var $125=(($124+8)|0);
 /** @type {number} */ var $126=HEAP32[(($125)>>2)];
 /** @type {number} */ var $127=$io15;
 /** @type {number} */ var $128=(($127+8)|0);
 HEAP32[(($128)>>2)]=$126;
 label=289;break;
 case 11: 
 /** @type {number} */ var $130=$ra;
 $io=$130;
 /** @type {number} */ var $131=$i;
 /** @type {number} */ var $132=$131>>>23;
 /** @type {number} */ var $133=$132&511;
 /** @type {number} */ var $134=$io;
 /** @type {number} */ var $135=(($134)|0);
 /** @type {number} */ var $136=$135;
 HEAP32[(($136)>>2)]=$133;
 /** @type {number} */ var $137=$io;
 /** @type {number} */ var $138=(($137+8)|0);
 HEAP32[(($138)>>2)]=1;
 /** @type {number} */ var $139=$i;
 /** @type {number} */ var $140=$139>>>14;
 /** @type {number} */ var $141=$140&511;
 /** @type {number} */ var $142=($141|0)!=0;
 if($142){label=12;break;}else{label=13;break;}
 case 12: 
 /** @type {number} */ var $144=$ci;
 /** @type {number} */ var $145=(($144+24)|0);
 /** @type {number} */ var $146=$145;
 /** @type {number} */ var $147=(($146+4)|0);
 /** @type {number} */ var $148=HEAP32[(($147)>>2)];
 /** @type {number} */ var $149=(($148+4)|0);
 HEAP32[(($147)>>2)]=$149;
 label=13;break;
 case 13: 
 label=289;break;
 case 14: 
 /** @type {number} */ var $152=$i;
 /** @type {number} */ var $153=$152>>>23;
 /** @type {number} */ var $154=$153&511;
 $b=$154;
 label=15;break;
 case 15: 
 /** @type {number} */ var $156=$ra;
 /** @type {number} */ var $157=(($156+16)|0);
 $ra=$157;
 /** @type {number} */ var $158=(($156+8)|0);
 HEAP32[(($158)>>2)]=0;
 label=16;break;
 case 16: 
 /** @type {number} */ var $160=$b;
 /** @type {number} */ var $161=((($160)-(1))|0);
 $b=$161;
 /** @type {number} */ var $162=($160|0)!=0;
 if($162){label=15;break;}else{label=17;break;}
 case 17: 
 label=289;break;
 case 18: 
 /** @type {number} */ var $165=$i;
 /** @type {number} */ var $166=$165>>>23;
 /** @type {number} */ var $167=$166&511;
 $b6=$167;
 /** @type {number} */ var $168=$b6;
 /** @type {number} */ var $169=$cl;
 /** @type {number} */ var $170=(($169+16)|0);
 /** @type {number} */ var $171=(($170+($168<<2))|0);
 /** @type {number} */ var $172=HEAP32[(($171)>>2)];
 /** @type {number} */ var $173=(($172+8)|0);
 /** @type {number} */ var $174=HEAP32[(($173)>>2)];
 $io27=$174;
 /** @type {number} */ var $175=$ra;
 $io18=$175;
 /** @type {number} */ var $176=$io18;
 /** @type {number} */ var $177=(($176)|0);
 /** @type {number} */ var $178=$io27;
 /** @type {number} */ var $179=(($178)|0);
 /** @type {number} */ var $180=$177;
 /** @type {number} */ var $181=$179;
 HEAP32[(($180)>>2)]=HEAP32[(($181)>>2)];HEAP32[((($180)+(4))>>2)]=HEAP32[((($181)+(4))>>2)];
 /** @type {number} */ var $182=$io27;
 /** @type {number} */ var $183=(($182+8)|0);
 /** @type {number} */ var $184=HEAP32[(($183)>>2)];
 /** @type {number} */ var $185=$io18;
 /** @type {number} */ var $186=(($185+8)|0);
 HEAP32[(($186)>>2)]=$184;
 label=289;break;
 case 19: 
 /** @type {number} */ var $188=$i;
 /** @type {number} */ var $189=$188>>>23;
 /** @type {number} */ var $190=$189&511;
 $b9=$190;
 /** @type {number} */ var $191=$1;
 /** @type {number} */ var $192=$b9;
 /** @type {number} */ var $193=$cl;
 /** @type {number} */ var $194=(($193+16)|0);
 /** @type {number} */ var $195=(($194+($192<<2))|0);
 /** @type {number} */ var $196=HEAP32[(($195)>>2)];
 /** @type {number} */ var $197=(($196+8)|0);
 /** @type {number} */ var $198=HEAP32[(($197)>>2)];
 /** @type {number} */ var $199=$i;
 /** @type {number} */ var $200=$199>>>14;
 /** @type {number} */ var $201=$200&511;
 /** @type {number} */ var $202=$201&256;
 /** @type {number} */ var $203=($202|0)!=0;
 if($203){label=20;break;}else{label=21;break;}
 case 20: 
 /** @type {number} */ var $205=$k;
 /** @type {number} */ var $206=$i;
 /** @type {number} */ var $207=$206>>>14;
 /** @type {number} */ var $208=$207&511;
 /** @type {number} */ var $209=$208&-257;
 /** @type {number} */ var $210=(($205+($209<<4))|0);
 var $218=$210;label=22;break;
 case 21: 
 /** @type {number} */ var $212=$base;
 /** @type {number} */ var $213=$i;
 /** @type {number} */ var $214=$213>>>14;
 /** @type {number} */ var $215=$214&511;
 /** @type {number} */ var $216=(($212+($215<<4))|0);
 var $218=$216;label=22;break;
 case 22: 
 var $218;
 /** @type {number} */ var $219=$ra;
 _luaV_gettable($191,$198,$218,$219);
 /** @type {number} */ var $220=$ci;
 /** @type {number} */ var $221=(($220+24)|0);
 /** @type {number} */ var $222=$221;
 /** @type {number} */ var $223=(($222)|0);
 /** @type {number} */ var $224=HEAP32[(($223)>>2)];
 $base=$224;
 label=289;break;
 case 23: 
 /** @type {number} */ var $226=$1;
 /** @type {number} */ var $227=$base;
 /** @type {number} */ var $228=$i;
 /** @type {number} */ var $229=$228>>>23;
 /** @type {number} */ var $230=$229&511;
 /** @type {number} */ var $231=(($227+($230<<4))|0);
 /** @type {number} */ var $232=$i;
 /** @type {number} */ var $233=$232>>>14;
 /** @type {number} */ var $234=$233&511;
 /** @type {number} */ var $235=$234&256;
 /** @type {number} */ var $236=($235|0)!=0;
 if($236){label=24;break;}else{label=25;break;}
 case 24: 
 /** @type {number} */ var $238=$k;
 /** @type {number} */ var $239=$i;
 /** @type {number} */ var $240=$239>>>14;
 /** @type {number} */ var $241=$240&511;
 /** @type {number} */ var $242=$241&-257;
 /** @type {number} */ var $243=(($238+($242<<4))|0);
 var $251=$243;label=26;break;
 case 25: 
 /** @type {number} */ var $245=$base;
 /** @type {number} */ var $246=$i;
 /** @type {number} */ var $247=$246>>>14;
 /** @type {number} */ var $248=$247&511;
 /** @type {number} */ var $249=(($245+($248<<4))|0);
 var $251=$249;label=26;break;
 case 26: 
 var $251;
 /** @type {number} */ var $252=$ra;
 _luaV_gettable($226,$231,$251,$252);
 /** @type {number} */ var $253=$ci;
 /** @type {number} */ var $254=(($253+24)|0);
 /** @type {number} */ var $255=$254;
 /** @type {number} */ var $256=(($255)|0);
 /** @type {number} */ var $257=HEAP32[(($256)>>2)];
 $base=$257;
 label=289;break;
 case 27: 
 /** @type {number} */ var $259=$i;
 /** @type {number} */ var $260=$259>>>6;
 /** @type {number} */ var $261=$260&255;
 $a=$261;
 /** @type {number} */ var $262=$1;
 /** @type {number} */ var $263=$a;
 /** @type {number} */ var $264=$cl;
 /** @type {number} */ var $265=(($264+16)|0);
 /** @type {number} */ var $266=(($265+($263<<2))|0);
 /** @type {number} */ var $267=HEAP32[(($266)>>2)];
 /** @type {number} */ var $268=(($267+8)|0);
 /** @type {number} */ var $269=HEAP32[(($268)>>2)];
 /** @type {number} */ var $270=$i;
 /** @type {number} */ var $271=$270>>>23;
 /** @type {number} */ var $272=$271&511;
 /** @type {number} */ var $273=$272&256;
 /** @type {number} */ var $274=($273|0)!=0;
 if($274){label=28;break;}else{label=29;break;}
 case 28: 
 /** @type {number} */ var $276=$k;
 /** @type {number} */ var $277=$i;
 /** @type {number} */ var $278=$277>>>23;
 /** @type {number} */ var $279=$278&511;
 /** @type {number} */ var $280=$279&-257;
 /** @type {number} */ var $281=(($276+($280<<4))|0);
 var $289=$281;label=30;break;
 case 29: 
 /** @type {number} */ var $283=$base;
 /** @type {number} */ var $284=$i;
 /** @type {number} */ var $285=$284>>>23;
 /** @type {number} */ var $286=$285&511;
 /** @type {number} */ var $287=(($283+($286<<4))|0);
 var $289=$287;label=30;break;
 case 30: 
 var $289;
 /** @type {number} */ var $290=$i;
 /** @type {number} */ var $291=$290>>>14;
 /** @type {number} */ var $292=$291&511;
 /** @type {number} */ var $293=$292&256;
 /** @type {number} */ var $294=($293|0)!=0;
 if($294){label=31;break;}else{label=32;break;}
 case 31: 
 /** @type {number} */ var $296=$k;
 /** @type {number} */ var $297=$i;
 /** @type {number} */ var $298=$297>>>14;
 /** @type {number} */ var $299=$298&511;
 /** @type {number} */ var $300=$299&-257;
 /** @type {number} */ var $301=(($296+($300<<4))|0);
 var $309=$301;label=33;break;
 case 32: 
 /** @type {number} */ var $303=$base;
 /** @type {number} */ var $304=$i;
 /** @type {number} */ var $305=$304>>>14;
 /** @type {number} */ var $306=$305&511;
 /** @type {number} */ var $307=(($303+($306<<4))|0);
 var $309=$307;label=33;break;
 case 33: 
 var $309;
 _luaV_settable($262,$269,$289,$309);
 /** @type {number} */ var $310=$ci;
 /** @type {number} */ var $311=(($310+24)|0);
 /** @type {number} */ var $312=$311;
 /** @type {number} */ var $313=(($312)|0);
 /** @type {number} */ var $314=HEAP32[(($313)>>2)];
 $base=$314;
 label=289;break;
 case 34: 
 /** @type {number} */ var $316=$i;
 /** @type {number} */ var $317=$316>>>23;
 /** @type {number} */ var $318=$317&511;
 /** @type {number} */ var $319=$cl;
 /** @type {number} */ var $320=(($319+16)|0);
 /** @type {number} */ var $321=(($320+($318<<2))|0);
 /** @type {number} */ var $322=HEAP32[(($321)>>2)];
 $uv=$322;
 /** @type {number} */ var $323=$ra;
 $io210=$323;
 /** @type {number} */ var $324=$uv;
 /** @type {number} */ var $325=(($324+8)|0);
 /** @type {number} */ var $326=HEAP32[(($325)>>2)];
 $io111=$326;
 /** @type {number} */ var $327=$io111;
 /** @type {number} */ var $328=(($327)|0);
 /** @type {number} */ var $329=$io210;
 /** @type {number} */ var $330=(($329)|0);
 /** @type {number} */ var $331=$328;
 /** @type {number} */ var $332=$330;
 HEAP32[(($331)>>2)]=HEAP32[(($332)>>2)];HEAP32[((($331)+(4))>>2)]=HEAP32[((($332)+(4))>>2)];
 /** @type {number} */ var $333=$io210;
 /** @type {number} */ var $334=(($333+8)|0);
 /** @type {number} */ var $335=HEAP32[(($334)>>2)];
 /** @type {number} */ var $336=$io111;
 /** @type {number} */ var $337=(($336+8)|0);
 HEAP32[(($337)>>2)]=$335;
 /** @type {number} */ var $338=$ra;
 /** @type {number} */ var $339=(($338+8)|0);
 /** @type {number} */ var $340=HEAP32[(($339)>>2)];
 /** @type {number} */ var $341=$340&64;
 /** @type {number} */ var $342=($341|0)!=0;
 if($342){label=35;break;}else{label=38;break;}
 case 35: 
 /** @type {number} */ var $344=$ra;
 /** @type {number} */ var $345=(($344)|0);
 /** @type {number} */ var $346=$345;
 /** @type {number} */ var $347=HEAP32[(($346)>>2)];
 /** @type {number} */ var $348=$347;
 /** @type {number} */ var $349=(($348+5)|0);
 /** @type {number} */ var $350=HEAP8[($349)];
 /** @type {number} */ var $351=($350&255);
 /** @type {number} */ var $352=$351&3;
 /** @type {number} */ var $353=($352|0)!=0;
 if($353){label=36;break;}else{label=38;break;}
 case 36: 
 /** @type {number} */ var $355=$uv;
 /** @type {number} */ var $356=$355;
 /** @type {number} */ var $357=$356;
 /** @type {number} */ var $358=(($357+5)|0);
 /** @type {number} */ var $359=HEAP8[($358)];
 /** @type {number} */ var $360=($359&255);
 /** @type {number} */ var $361=$360&4;
 /** @type {number} */ var $362=($361|0)!=0;
 if($362){label=37;break;}else{label=38;break;}
 case 37: 
 /** @type {number} */ var $364=$1;
 /** @type {number} */ var $365=$uv;
 /** @type {number} */ var $366=$365;
 /** @type {number} */ var $367=$ra;
 /** @type {number} */ var $368=(($367)|0);
 /** @type {number} */ var $369=$368;
 /** @type {number} */ var $370=HEAP32[(($369)>>2)];
 _luaC_barrier_($364,$366,$370);
 label=38;break;
 case 38: 
 label=289;break;
 case 39: 
 /** @type {number} */ var $373=$1;
 /** @type {number} */ var $374=$ra;
 /** @type {number} */ var $375=$i;
 /** @type {number} */ var $376=$375>>>23;
 /** @type {number} */ var $377=$376&511;
 /** @type {number} */ var $378=$377&256;
 /** @type {number} */ var $379=($378|0)!=0;
 if($379){label=40;break;}else{label=41;break;}
 case 40: 
 /** @type {number} */ var $381=$k;
 /** @type {number} */ var $382=$i;
 /** @type {number} */ var $383=$382>>>23;
 /** @type {number} */ var $384=$383&511;
 /** @type {number} */ var $385=$384&-257;
 /** @type {number} */ var $386=(($381+($385<<4))|0);
 var $394=$386;label=42;break;
 case 41: 
 /** @type {number} */ var $388=$base;
 /** @type {number} */ var $389=$i;
 /** @type {number} */ var $390=$389>>>23;
 /** @type {number} */ var $391=$390&511;
 /** @type {number} */ var $392=(($388+($391<<4))|0);
 var $394=$392;label=42;break;
 case 42: 
 var $394;
 /** @type {number} */ var $395=$i;
 /** @type {number} */ var $396=$395>>>14;
 /** @type {number} */ var $397=$396&511;
 /** @type {number} */ var $398=$397&256;
 /** @type {number} */ var $399=($398|0)!=0;
 if($399){label=43;break;}else{label=44;break;}
 case 43: 
 /** @type {number} */ var $401=$k;
 /** @type {number} */ var $402=$i;
 /** @type {number} */ var $403=$402>>>14;
 /** @type {number} */ var $404=$403&511;
 /** @type {number} */ var $405=$404&-257;
 /** @type {number} */ var $406=(($401+($405<<4))|0);
 var $414=$406;label=45;break;
 case 44: 
 /** @type {number} */ var $408=$base;
 /** @type {number} */ var $409=$i;
 /** @type {number} */ var $410=$409>>>14;
 /** @type {number} */ var $411=$410&511;
 /** @type {number} */ var $412=(($408+($411<<4))|0);
 var $414=$412;label=45;break;
 case 45: 
 var $414;
 _luaV_settable($373,$374,$394,$414);
 /** @type {number} */ var $415=$ci;
 /** @type {number} */ var $416=(($415+24)|0);
 /** @type {number} */ var $417=$416;
 /** @type {number} */ var $418=(($417)|0);
 /** @type {number} */ var $419=HEAP32[(($418)>>2)];
 $base=$419;
 label=289;break;
 case 46: 
 /** @type {number} */ var $421=$i;
 /** @type {number} */ var $422=$421>>>23;
 /** @type {number} */ var $423=$422&511;
 $b12=$423;
 /** @type {number} */ var $424=$i;
 /** @type {number} */ var $425=$424>>>14;
 /** @type {number} */ var $426=$425&511;
 $c=$426;
 /** @type {number} */ var $427=$1;
 /** @type {number} */ var $428=_luaH_new($427);
 $t=$428;
 /** @type {number} */ var $429=$ra;
 $io13=$429;
 /** @type {number} */ var $430=$t;
 /** @type {number} */ var $431=$430;
 /** @type {number} */ var $432=$io13;
 /** @type {number} */ var $433=(($432)|0);
 /** @type {number} */ var $434=$433;
 HEAP32[(($434)>>2)]=$431;
 /** @type {number} */ var $435=$io13;
 /** @type {number} */ var $436=(($435+8)|0);
 HEAP32[(($436)>>2)]=69;
 /** @type {number} */ var $437=$b12;
 /** @type {number} */ var $438=($437|0)!=0;
 if($438){label=48;break;}else{label=47;break;}
 case 47: 
 /** @type {number} */ var $440=$c;
 /** @type {number} */ var $441=($440|0)!=0;
 if($441){label=48;break;}else{label=49;break;}
 case 48: 
 /** @type {number} */ var $443=$1;
 /** @type {number} */ var $444=$t;
 /** @type {number} */ var $445=$b12;
 /** @type {number} */ var $446=_luaO_fb2int($445);
 /** @type {number} */ var $447=$c;
 /** @type {number} */ var $448=_luaO_fb2int($447);
 _luaH_resize($443,$444,$446,$448);
 label=49;break;
 case 49: 
 /** @type {number} */ var $450=$1;
 /** @type {number} */ var $451=(($450+12)|0);
 /** @type {number} */ var $452=HEAP32[(($451)>>2)];
 /** @type {number} */ var $453=(($452+12)|0);
 /** @type {number} */ var $454=HEAP32[(($453)>>2)];
 /** @type {number} */ var $455=($454|0)>0;
 if($455){label=50;break;}else{label=51;break;}
 case 50: 
 /** @type {number} */ var $457=$ra;
 /** @type {number} */ var $458=(($457+16)|0);
 /** @type {number} */ var $459=$1;
 /** @type {number} */ var $460=(($459+8)|0);
 HEAP32[(($460)>>2)]=$458;
 /** @type {number} */ var $461=$1;
 _luaC_step($461);
 /** @type {number} */ var $462=$ci;
 /** @type {number} */ var $463=(($462+4)|0);
 /** @type {number} */ var $464=HEAP32[(($463)>>2)];
 /** @type {number} */ var $465=$1;
 /** @type {number} */ var $466=(($465+8)|0);
 HEAP32[(($466)>>2)]=$464;
 label=51;break;
 case 51: 
 /** @type {number} */ var $468=$ci;
 /** @type {number} */ var $469=(($468+24)|0);
 /** @type {number} */ var $470=$469;
 /** @type {number} */ var $471=(($470)|0);
 /** @type {number} */ var $472=HEAP32[(($471)>>2)];
 $base=$472;
 label=289;break;
 case 52: 
 /** @type {number} */ var $474=$base;
 /** @type {number} */ var $475=$i;
 /** @type {number} */ var $476=$475>>>23;
 /** @type {number} */ var $477=$476&511;
 /** @type {number} */ var $478=(($474+($477<<4))|0);
 $rb14=$478;
 /** @type {number} */ var $479=$rb14;
 $io215=$479;
 /** @type {number} */ var $480=$ra;
 /** @type {number} */ var $481=(($480+16)|0);
 $io116=$481;
 /** @type {number} */ var $482=$io116;
 /** @type {number} */ var $483=(($482)|0);
 /** @type {number} */ var $484=$io215;
 /** @type {number} */ var $485=(($484)|0);
 /** @type {number} */ var $486=$483;
 /** @type {number} */ var $487=$485;
 HEAP32[(($486)>>2)]=HEAP32[(($487)>>2)];HEAP32[((($486)+(4))>>2)]=HEAP32[((($487)+(4))>>2)];
 /** @type {number} */ var $488=$io215;
 /** @type {number} */ var $489=(($488+8)|0);
 /** @type {number} */ var $490=HEAP32[(($489)>>2)];
 /** @type {number} */ var $491=$io116;
 /** @type {number} */ var $492=(($491+8)|0);
 HEAP32[(($492)>>2)]=$490;
 /** @type {number} */ var $493=$1;
 /** @type {number} */ var $494=$rb14;
 /** @type {number} */ var $495=$i;
 /** @type {number} */ var $496=$495>>>14;
 /** @type {number} */ var $497=$496&511;
 /** @type {number} */ var $498=$497&256;
 /** @type {number} */ var $499=($498|0)!=0;
 if($499){label=53;break;}else{label=54;break;}
 case 53: 
 /** @type {number} */ var $501=$k;
 /** @type {number} */ var $502=$i;
 /** @type {number} */ var $503=$502>>>14;
 /** @type {number} */ var $504=$503&511;
 /** @type {number} */ var $505=$504&-257;
 /** @type {number} */ var $506=(($501+($505<<4))|0);
 var $514=$506;label=55;break;
 case 54: 
 /** @type {number} */ var $508=$base;
 /** @type {number} */ var $509=$i;
 /** @type {number} */ var $510=$509>>>14;
 /** @type {number} */ var $511=$510&511;
 /** @type {number} */ var $512=(($508+($511<<4))|0);
 var $514=$512;label=55;break;
 case 55: 
 var $514;
 /** @type {number} */ var $515=$ra;
 _luaV_gettable($493,$494,$514,$515);
 /** @type {number} */ var $516=$ci;
 /** @type {number} */ var $517=(($516+24)|0);
 /** @type {number} */ var $518=$517;
 /** @type {number} */ var $519=(($518)|0);
 /** @type {number} */ var $520=HEAP32[(($519)>>2)];
 $base=$520;
 label=289;break;
 case 56: 
 /** @type {number} */ var $522=$i;
 /** @type {number} */ var $523=$522>>>23;
 /** @type {number} */ var $524=$523&511;
 /** @type {number} */ var $525=$524&256;
 /** @type {number} */ var $526=($525|0)!=0;
 if($526){label=57;break;}else{label=58;break;}
 case 57: 
 /** @type {number} */ var $528=$k;
 /** @type {number} */ var $529=$i;
 /** @type {number} */ var $530=$529>>>23;
 /** @type {number} */ var $531=$530&511;
 /** @type {number} */ var $532=$531&-257;
 /** @type {number} */ var $533=(($528+($532<<4))|0);
 var $541=$533;label=59;break;
 case 58: 
 /** @type {number} */ var $535=$base;
 /** @type {number} */ var $536=$i;
 /** @type {number} */ var $537=$536>>>23;
 /** @type {number} */ var $538=$537&511;
 /** @type {number} */ var $539=(($535+($538<<4))|0);
 var $541=$539;label=59;break;
 case 59: 
 var $541;
 $rb17=$541;
 /** @type {number} */ var $542=$i;
 /** @type {number} */ var $543=$542>>>14;
 /** @type {number} */ var $544=$543&511;
 /** @type {number} */ var $545=$544&256;
 /** @type {number} */ var $546=($545|0)!=0;
 if($546){label=60;break;}else{label=61;break;}
 case 60: 
 /** @type {number} */ var $548=$k;
 /** @type {number} */ var $549=$i;
 /** @type {number} */ var $550=$549>>>14;
 /** @type {number} */ var $551=$550&511;
 /** @type {number} */ var $552=$551&-257;
 /** @type {number} */ var $553=(($548+($552<<4))|0);
 var $561=$553;label=62;break;
 case 61: 
 /** @type {number} */ var $555=$base;
 /** @type {number} */ var $556=$i;
 /** @type {number} */ var $557=$556>>>14;
 /** @type {number} */ var $558=$557&511;
 /** @type {number} */ var $559=(($555+($558<<4))|0);
 var $561=$559;label=62;break;
 case 62: 
 var $561;
 $rc=$561;
 /** @type {number} */ var $562=$rb17;
 /** @type {number} */ var $563=(($562+8)|0);
 /** @type {number} */ var $564=HEAP32[(($563)>>2)];
 /** @type {number} */ var $565=($564|0)==3;
 if($565){label=63;break;}else{label=65;break;}
 case 63: 
 /** @type {number} */ var $567=$rc;
 /** @type {number} */ var $568=(($567+8)|0);
 /** @type {number} */ var $569=HEAP32[(($568)>>2)];
 /** @type {number} */ var $570=($569|0)==3;
 if($570){label=64;break;}else{label=65;break;}
 case 64: 
 /** @type {number} */ var $572=$rb17;
 /** @type {number} */ var $573=(($572)|0);
 /** @type {number} */ var $574=$573;
 /** @type {number} */ var $575=HEAPF64[(($574)>>3)];
 $nb=$575;
 /** @type {number} */ var $576=$rc;
 /** @type {number} */ var $577=(($576)|0);
 /** @type {number} */ var $578=$577;
 /** @type {number} */ var $579=HEAPF64[(($578)>>3)];
 $nc=$579;
 /** @type {number} */ var $580=$ra;
 $io19=$580;
 /** @type {number} */ var $581=$nb;
 /** @type {number} */ var $582=$nc;
 /** @type {number} */ var $583=($581)+($582);
 /** @type {number} */ var $584=$io19;
 /** @type {number} */ var $585=(($584)|0);
 /** @type {number} */ var $586=$585;
 HEAPF64[(($586)>>3)]=$583;
 /** @type {number} */ var $587=$io19;
 /** @type {number} */ var $588=(($587+8)|0);
 HEAP32[(($588)>>2)]=3;
 label=66;break;
 case 65: 
 /** @type {number} */ var $590=$1;
 /** @type {number} */ var $591=$ra;
 /** @type {number} */ var $592=$rb17;
 /** @type {number} */ var $593=$rc;
 _luaV_arith($590,$591,$592,$593,6);
 /** @type {number} */ var $594=$ci;
 /** @type {number} */ var $595=(($594+24)|0);
 /** @type {number} */ var $596=$595;
 /** @type {number} */ var $597=(($596)|0);
 /** @type {number} */ var $598=HEAP32[(($597)>>2)];
 $base=$598;
 label=66;break;
 case 66: 
 label=289;break;
 case 67: 
 /** @type {number} */ var $601=$i;
 /** @type {number} */ var $602=$601>>>23;
 /** @type {number} */ var $603=$602&511;
 /** @type {number} */ var $604=$603&256;
 /** @type {number} */ var $605=($604|0)!=0;
 if($605){label=68;break;}else{label=69;break;}
 case 68: 
 /** @type {number} */ var $607=$k;
 /** @type {number} */ var $608=$i;
 /** @type {number} */ var $609=$608>>>23;
 /** @type {number} */ var $610=$609&511;
 /** @type {number} */ var $611=$610&-257;
 /** @type {number} */ var $612=(($607+($611<<4))|0);
 var $620=$612;label=70;break;
 case 69: 
 /** @type {number} */ var $614=$base;
 /** @type {number} */ var $615=$i;
 /** @type {number} */ var $616=$615>>>23;
 /** @type {number} */ var $617=$616&511;
 /** @type {number} */ var $618=(($614+($617<<4))|0);
 var $620=$618;label=70;break;
 case 70: 
 var $620;
 $rb20=$620;
 /** @type {number} */ var $621=$i;
 /** @type {number} */ var $622=$621>>>14;
 /** @type {number} */ var $623=$622&511;
 /** @type {number} */ var $624=$623&256;
 /** @type {number} */ var $625=($624|0)!=0;
 if($625){label=71;break;}else{label=72;break;}
 case 71: 
 /** @type {number} */ var $627=$k;
 /** @type {number} */ var $628=$i;
 /** @type {number} */ var $629=$628>>>14;
 /** @type {number} */ var $630=$629&511;
 /** @type {number} */ var $631=$630&-257;
 /** @type {number} */ var $632=(($627+($631<<4))|0);
 var $640=$632;label=73;break;
 case 72: 
 /** @type {number} */ var $634=$base;
 /** @type {number} */ var $635=$i;
 /** @type {number} */ var $636=$635>>>14;
 /** @type {number} */ var $637=$636&511;
 /** @type {number} */ var $638=(($634+($637<<4))|0);
 var $640=$638;label=73;break;
 case 73: 
 var $640;
 $rc21=$640;
 /** @type {number} */ var $641=$rb20;
 /** @type {number} */ var $642=(($641+8)|0);
 /** @type {number} */ var $643=HEAP32[(($642)>>2)];
 /** @type {number} */ var $644=($643|0)==3;
 if($644){label=74;break;}else{label=76;break;}
 case 74: 
 /** @type {number} */ var $646=$rc21;
 /** @type {number} */ var $647=(($646+8)|0);
 /** @type {number} */ var $648=HEAP32[(($647)>>2)];
 /** @type {number} */ var $649=($648|0)==3;
 if($649){label=75;break;}else{label=76;break;}
 case 75: 
 /** @type {number} */ var $651=$rb20;
 /** @type {number} */ var $652=(($651)|0);
 /** @type {number} */ var $653=$652;
 /** @type {number} */ var $654=HEAPF64[(($653)>>3)];
 $nb22=$654;
 /** @type {number} */ var $655=$rc21;
 /** @type {number} */ var $656=(($655)|0);
 /** @type {number} */ var $657=$656;
 /** @type {number} */ var $658=HEAPF64[(($657)>>3)];
 $nc23=$658;
 /** @type {number} */ var $659=$ra;
 $io25=$659;
 /** @type {number} */ var $660=$nb22;
 /** @type {number} */ var $661=$nc23;
 /** @type {number} */ var $662=($660)-($661);
 /** @type {number} */ var $663=$io25;
 /** @type {number} */ var $664=(($663)|0);
 /** @type {number} */ var $665=$664;
 HEAPF64[(($665)>>3)]=$662;
 /** @type {number} */ var $666=$io25;
 /** @type {number} */ var $667=(($666+8)|0);
 HEAP32[(($667)>>2)]=3;
 label=77;break;
 case 76: 
 /** @type {number} */ var $669=$1;
 /** @type {number} */ var $670=$ra;
 /** @type {number} */ var $671=$rb20;
 /** @type {number} */ var $672=$rc21;
 _luaV_arith($669,$670,$671,$672,7);
 /** @type {number} */ var $673=$ci;
 /** @type {number} */ var $674=(($673+24)|0);
 /** @type {number} */ var $675=$674;
 /** @type {number} */ var $676=(($675)|0);
 /** @type {number} */ var $677=HEAP32[(($676)>>2)];
 $base=$677;
 label=77;break;
 case 77: 
 label=289;break;
 case 78: 
 /** @type {number} */ var $680=$i;
 /** @type {number} */ var $681=$680>>>23;
 /** @type {number} */ var $682=$681&511;
 /** @type {number} */ var $683=$682&256;
 /** @type {number} */ var $684=($683|0)!=0;
 if($684){label=79;break;}else{label=80;break;}
 case 79: 
 /** @type {number} */ var $686=$k;
 /** @type {number} */ var $687=$i;
 /** @type {number} */ var $688=$687>>>23;
 /** @type {number} */ var $689=$688&511;
 /** @type {number} */ var $690=$689&-257;
 /** @type {number} */ var $691=(($686+($690<<4))|0);
 var $699=$691;label=81;break;
 case 80: 
 /** @type {number} */ var $693=$base;
 /** @type {number} */ var $694=$i;
 /** @type {number} */ var $695=$694>>>23;
 /** @type {number} */ var $696=$695&511;
 /** @type {number} */ var $697=(($693+($696<<4))|0);
 var $699=$697;label=81;break;
 case 81: 
 var $699;
 $rb26=$699;
 /** @type {number} */ var $700=$i;
 /** @type {number} */ var $701=$700>>>14;
 /** @type {number} */ var $702=$701&511;
 /** @type {number} */ var $703=$702&256;
 /** @type {number} */ var $704=($703|0)!=0;
 if($704){label=82;break;}else{label=83;break;}
 case 82: 
 /** @type {number} */ var $706=$k;
 /** @type {number} */ var $707=$i;
 /** @type {number} */ var $708=$707>>>14;
 /** @type {number} */ var $709=$708&511;
 /** @type {number} */ var $710=$709&-257;
 /** @type {number} */ var $711=(($706+($710<<4))|0);
 var $719=$711;label=84;break;
 case 83: 
 /** @type {number} */ var $713=$base;
 /** @type {number} */ var $714=$i;
 /** @type {number} */ var $715=$714>>>14;
 /** @type {number} */ var $716=$715&511;
 /** @type {number} */ var $717=(($713+($716<<4))|0);
 var $719=$717;label=84;break;
 case 84: 
 var $719;
 $rc27=$719;
 /** @type {number} */ var $720=$rb26;
 /** @type {number} */ var $721=(($720+8)|0);
 /** @type {number} */ var $722=HEAP32[(($721)>>2)];
 /** @type {number} */ var $723=($722|0)==3;
 if($723){label=85;break;}else{label=87;break;}
 case 85: 
 /** @type {number} */ var $725=$rc27;
 /** @type {number} */ var $726=(($725+8)|0);
 /** @type {number} */ var $727=HEAP32[(($726)>>2)];
 /** @type {number} */ var $728=($727|0)==3;
 if($728){label=86;break;}else{label=87;break;}
 case 86: 
 /** @type {number} */ var $730=$rb26;
 /** @type {number} */ var $731=(($730)|0);
 /** @type {number} */ var $732=$731;
 /** @type {number} */ var $733=HEAPF64[(($732)>>3)];
 $nb28=$733;
 /** @type {number} */ var $734=$rc27;
 /** @type {number} */ var $735=(($734)|0);
 /** @type {number} */ var $736=$735;
 /** @type {number} */ var $737=HEAPF64[(($736)>>3)];
 $nc29=$737;
 /** @type {number} */ var $738=$ra;
 $io30=$738;
 /** @type {number} */ var $739=$nb28;
 /** @type {number} */ var $740=$nc29;
 /** @type {number} */ var $741=($739)*($740);
 /** @type {number} */ var $742=$io30;
 /** @type {number} */ var $743=(($742)|0);
 /** @type {number} */ var $744=$743;
 HEAPF64[(($744)>>3)]=$741;
 /** @type {number} */ var $745=$io30;
 /** @type {number} */ var $746=(($745+8)|0);
 HEAP32[(($746)>>2)]=3;
 label=88;break;
 case 87: 
 /** @type {number} */ var $748=$1;
 /** @type {number} */ var $749=$ra;
 /** @type {number} */ var $750=$rb26;
 /** @type {number} */ var $751=$rc27;
 _luaV_arith($748,$749,$750,$751,8);
 /** @type {number} */ var $752=$ci;
 /** @type {number} */ var $753=(($752+24)|0);
 /** @type {number} */ var $754=$753;
 /** @type {number} */ var $755=(($754)|0);
 /** @type {number} */ var $756=HEAP32[(($755)>>2)];
 $base=$756;
 label=88;break;
 case 88: 
 label=289;break;
 case 89: 
 /** @type {number} */ var $759=$i;
 /** @type {number} */ var $760=$759>>>23;
 /** @type {number} */ var $761=$760&511;
 /** @type {number} */ var $762=$761&256;
 /** @type {number} */ var $763=($762|0)!=0;
 if($763){label=90;break;}else{label=91;break;}
 case 90: 
 /** @type {number} */ var $765=$k;
 /** @type {number} */ var $766=$i;
 /** @type {number} */ var $767=$766>>>23;
 /** @type {number} */ var $768=$767&511;
 /** @type {number} */ var $769=$768&-257;
 /** @type {number} */ var $770=(($765+($769<<4))|0);
 var $778=$770;label=92;break;
 case 91: 
 /** @type {number} */ var $772=$base;
 /** @type {number} */ var $773=$i;
 /** @type {number} */ var $774=$773>>>23;
 /** @type {number} */ var $775=$774&511;
 /** @type {number} */ var $776=(($772+($775<<4))|0);
 var $778=$776;label=92;break;
 case 92: 
 var $778;
 $rb31=$778;
 /** @type {number} */ var $779=$i;
 /** @type {number} */ var $780=$779>>>14;
 /** @type {number} */ var $781=$780&511;
 /** @type {number} */ var $782=$781&256;
 /** @type {number} */ var $783=($782|0)!=0;
 if($783){label=93;break;}else{label=94;break;}
 case 93: 
 /** @type {number} */ var $785=$k;
 /** @type {number} */ var $786=$i;
 /** @type {number} */ var $787=$786>>>14;
 /** @type {number} */ var $788=$787&511;
 /** @type {number} */ var $789=$788&-257;
 /** @type {number} */ var $790=(($785+($789<<4))|0);
 var $798=$790;label=95;break;
 case 94: 
 /** @type {number} */ var $792=$base;
 /** @type {number} */ var $793=$i;
 /** @type {number} */ var $794=$793>>>14;
 /** @type {number} */ var $795=$794&511;
 /** @type {number} */ var $796=(($792+($795<<4))|0);
 var $798=$796;label=95;break;
 case 95: 
 var $798;
 $rc32=$798;
 /** @type {number} */ var $799=$rb31;
 /** @type {number} */ var $800=(($799+8)|0);
 /** @type {number} */ var $801=HEAP32[(($800)>>2)];
 /** @type {number} */ var $802=($801|0)==3;
 if($802){label=96;break;}else{label=98;break;}
 case 96: 
 /** @type {number} */ var $804=$rc32;
 /** @type {number} */ var $805=(($804+8)|0);
 /** @type {number} */ var $806=HEAP32[(($805)>>2)];
 /** @type {number} */ var $807=($806|0)==3;
 if($807){label=97;break;}else{label=98;break;}
 case 97: 
 /** @type {number} */ var $809=$rb31;
 /** @type {number} */ var $810=(($809)|0);
 /** @type {number} */ var $811=$810;
 /** @type {number} */ var $812=HEAPF64[(($811)>>3)];
 $nb33=$812;
 /** @type {number} */ var $813=$rc32;
 /** @type {number} */ var $814=(($813)|0);
 /** @type {number} */ var $815=$814;
 /** @type {number} */ var $816=HEAPF64[(($815)>>3)];
 $nc34=$816;
 /** @type {number} */ var $817=$ra;
 $io35=$817;
 /** @type {number} */ var $818=$nb33;
 /** @type {number} */ var $819=$nc34;
 /** @type {number} */ var $820=($818)/($819);
 /** @type {number} */ var $821=$io35;
 /** @type {number} */ var $822=(($821)|0);
 /** @type {number} */ var $823=$822;
 HEAPF64[(($823)>>3)]=$820;
 /** @type {number} */ var $824=$io35;
 /** @type {number} */ var $825=(($824+8)|0);
 HEAP32[(($825)>>2)]=3;
 label=99;break;
 case 98: 
 /** @type {number} */ var $827=$1;
 /** @type {number} */ var $828=$ra;
 /** @type {number} */ var $829=$rb31;
 /** @type {number} */ var $830=$rc32;
 _luaV_arith($827,$828,$829,$830,9);
 /** @type {number} */ var $831=$ci;
 /** @type {number} */ var $832=(($831+24)|0);
 /** @type {number} */ var $833=$832;
 /** @type {number} */ var $834=(($833)|0);
 /** @type {number} */ var $835=HEAP32[(($834)>>2)];
 $base=$835;
 label=99;break;
 case 99: 
 label=289;break;
 case 100: 
 /** @type {number} */ var $838=$i;
 /** @type {number} */ var $839=$838>>>23;
 /** @type {number} */ var $840=$839&511;
 /** @type {number} */ var $841=$840&256;
 /** @type {number} */ var $842=($841|0)!=0;
 if($842){label=101;break;}else{label=102;break;}
 case 101: 
 /** @type {number} */ var $844=$k;
 /** @type {number} */ var $845=$i;
 /** @type {number} */ var $846=$845>>>23;
 /** @type {number} */ var $847=$846&511;
 /** @type {number} */ var $848=$847&-257;
 /** @type {number} */ var $849=(($844+($848<<4))|0);
 var $857=$849;label=103;break;
 case 102: 
 /** @type {number} */ var $851=$base;
 /** @type {number} */ var $852=$i;
 /** @type {number} */ var $853=$852>>>23;
 /** @type {number} */ var $854=$853&511;
 /** @type {number} */ var $855=(($851+($854<<4))|0);
 var $857=$855;label=103;break;
 case 103: 
 var $857;
 $rb36=$857;
 /** @type {number} */ var $858=$i;
 /** @type {number} */ var $859=$858>>>14;
 /** @type {number} */ var $860=$859&511;
 /** @type {number} */ var $861=$860&256;
 /** @type {number} */ var $862=($861|0)!=0;
 if($862){label=104;break;}else{label=105;break;}
 case 104: 
 /** @type {number} */ var $864=$k;
 /** @type {number} */ var $865=$i;
 /** @type {number} */ var $866=$865>>>14;
 /** @type {number} */ var $867=$866&511;
 /** @type {number} */ var $868=$867&-257;
 /** @type {number} */ var $869=(($864+($868<<4))|0);
 var $877=$869;label=106;break;
 case 105: 
 /** @type {number} */ var $871=$base;
 /** @type {number} */ var $872=$i;
 /** @type {number} */ var $873=$872>>>14;
 /** @type {number} */ var $874=$873&511;
 /** @type {number} */ var $875=(($871+($874<<4))|0);
 var $877=$875;label=106;break;
 case 106: 
 var $877;
 $rc37=$877;
 /** @type {number} */ var $878=$rb36;
 /** @type {number} */ var $879=(($878+8)|0);
 /** @type {number} */ var $880=HEAP32[(($879)>>2)];
 /** @type {number} */ var $881=($880|0)==3;
 if($881){label=107;break;}else{label=109;break;}
 case 107: 
 /** @type {number} */ var $883=$rc37;
 /** @type {number} */ var $884=(($883+8)|0);
 /** @type {number} */ var $885=HEAP32[(($884)>>2)];
 /** @type {number} */ var $886=($885|0)==3;
 if($886){label=108;break;}else{label=109;break;}
 case 108: 
 /** @type {number} */ var $888=$rb36;
 /** @type {number} */ var $889=(($888)|0);
 /** @type {number} */ var $890=$889;
 /** @type {number} */ var $891=HEAPF64[(($890)>>3)];
 $nb38=$891;
 /** @type {number} */ var $892=$rc37;
 /** @type {number} */ var $893=(($892)|0);
 /** @type {number} */ var $894=$893;
 /** @type {number} */ var $895=HEAPF64[(($894)>>3)];
 $nc39=$895;
 /** @type {number} */ var $896=$ra;
 $io40=$896;
 /** @type {number} */ var $897=$nb38;
 /** @type {number} */ var $898=$nb38;
 /** @type {number} */ var $899=$nc39;
 /** @type {number} */ var $900=($898)/($899);
 /** @type {number} */ var $901=Math_floor($900);
 /** @type {number} */ var $902=$nc39;
 /** @type {number} */ var $903=($901)*($902);
 /** @type {number} */ var $904=($897)-($903);
 /** @type {number} */ var $905=$io40;
 /** @type {number} */ var $906=(($905)|0);
 /** @type {number} */ var $907=$906;
 HEAPF64[(($907)>>3)]=$904;
 /** @type {number} */ var $908=$io40;
 /** @type {number} */ var $909=(($908+8)|0);
 HEAP32[(($909)>>2)]=3;
 label=110;break;
 case 109: 
 /** @type {number} */ var $911=$1;
 /** @type {number} */ var $912=$ra;
 /** @type {number} */ var $913=$rb36;
 /** @type {number} */ var $914=$rc37;
 _luaV_arith($911,$912,$913,$914,10);
 /** @type {number} */ var $915=$ci;
 /** @type {number} */ var $916=(($915+24)|0);
 /** @type {number} */ var $917=$916;
 /** @type {number} */ var $918=(($917)|0);
 /** @type {number} */ var $919=HEAP32[(($918)>>2)];
 $base=$919;
 label=110;break;
 case 110: 
 label=289;break;
 case 111: 
 /** @type {number} */ var $922=$i;
 /** @type {number} */ var $923=$922>>>23;
 /** @type {number} */ var $924=$923&511;
 /** @type {number} */ var $925=$924&256;
 /** @type {number} */ var $926=($925|0)!=0;
 if($926){label=112;break;}else{label=113;break;}
 case 112: 
 /** @type {number} */ var $928=$k;
 /** @type {number} */ var $929=$i;
 /** @type {number} */ var $930=$929>>>23;
 /** @type {number} */ var $931=$930&511;
 /** @type {number} */ var $932=$931&-257;
 /** @type {number} */ var $933=(($928+($932<<4))|0);
 var $941=$933;label=114;break;
 case 113: 
 /** @type {number} */ var $935=$base;
 /** @type {number} */ var $936=$i;
 /** @type {number} */ var $937=$936>>>23;
 /** @type {number} */ var $938=$937&511;
 /** @type {number} */ var $939=(($935+($938<<4))|0);
 var $941=$939;label=114;break;
 case 114: 
 var $941;
 $rb41=$941;
 /** @type {number} */ var $942=$i;
 /** @type {number} */ var $943=$942>>>14;
 /** @type {number} */ var $944=$943&511;
 /** @type {number} */ var $945=$944&256;
 /** @type {number} */ var $946=($945|0)!=0;
 if($946){label=115;break;}else{label=116;break;}
 case 115: 
 /** @type {number} */ var $948=$k;
 /** @type {number} */ var $949=$i;
 /** @type {number} */ var $950=$949>>>14;
 /** @type {number} */ var $951=$950&511;
 /** @type {number} */ var $952=$951&-257;
 /** @type {number} */ var $953=(($948+($952<<4))|0);
 var $961=$953;label=117;break;
 case 116: 
 /** @type {number} */ var $955=$base;
 /** @type {number} */ var $956=$i;
 /** @type {number} */ var $957=$956>>>14;
 /** @type {number} */ var $958=$957&511;
 /** @type {number} */ var $959=(($955+($958<<4))|0);
 var $961=$959;label=117;break;
 case 117: 
 var $961;
 $rc42=$961;
 /** @type {number} */ var $962=$rb41;
 /** @type {number} */ var $963=(($962+8)|0);
 /** @type {number} */ var $964=HEAP32[(($963)>>2)];
 /** @type {number} */ var $965=($964|0)==3;
 if($965){label=118;break;}else{label=120;break;}
 case 118: 
 /** @type {number} */ var $967=$rc42;
 /** @type {number} */ var $968=(($967+8)|0);
 /** @type {number} */ var $969=HEAP32[(($968)>>2)];
 /** @type {number} */ var $970=($969|0)==3;
 if($970){label=119;break;}else{label=120;break;}
 case 119: 
 /** @type {number} */ var $972=$rb41;
 /** @type {number} */ var $973=(($972)|0);
 /** @type {number} */ var $974=$973;
 /** @type {number} */ var $975=HEAPF64[(($974)>>3)];
 $nb43=$975;
 /** @type {number} */ var $976=$rc42;
 /** @type {number} */ var $977=(($976)|0);
 /** @type {number} */ var $978=$977;
 /** @type {number} */ var $979=HEAPF64[(($978)>>3)];
 $nc44=$979;
 /** @type {number} */ var $980=$ra;
 $io45=$980;
 /** @type {number} */ var $981=$nb43;
 /** @type {number} */ var $982=$nc44;
 /** @type {number} */ var $983=Math_pow($981,$982);
 /** @type {number} */ var $984=$io45;
 /** @type {number} */ var $985=(($984)|0);
 /** @type {number} */ var $986=$985;
 HEAPF64[(($986)>>3)]=$983;
 /** @type {number} */ var $987=$io45;
 /** @type {number} */ var $988=(($987+8)|0);
 HEAP32[(($988)>>2)]=3;
 label=121;break;
 case 120: 
 /** @type {number} */ var $990=$1;
 /** @type {number} */ var $991=$ra;
 /** @type {number} */ var $992=$rb41;
 /** @type {number} */ var $993=$rc42;
 _luaV_arith($990,$991,$992,$993,11);
 /** @type {number} */ var $994=$ci;
 /** @type {number} */ var $995=(($994+24)|0);
 /** @type {number} */ var $996=$995;
 /** @type {number} */ var $997=(($996)|0);
 /** @type {number} */ var $998=HEAP32[(($997)>>2)];
 $base=$998;
 label=121;break;
 case 121: 
 label=289;break;
 case 122: 
 /** @type {number} */ var $1001=$base;
 /** @type {number} */ var $1002=$i;
 /** @type {number} */ var $1003=$1002>>>23;
 /** @type {number} */ var $1004=$1003&511;
 /** @type {number} */ var $1005=(($1001+($1004<<4))|0);
 $rb46=$1005;
 /** @type {number} */ var $1006=$rb46;
 /** @type {number} */ var $1007=(($1006+8)|0);
 /** @type {number} */ var $1008=HEAP32[(($1007)>>2)];
 /** @type {number} */ var $1009=($1008|0)==3;
 if($1009){label=123;break;}else{label=124;break;}
 case 123: 
 /** @type {number} */ var $1011=$rb46;
 /** @type {number} */ var $1012=(($1011)|0);
 /** @type {number} */ var $1013=$1012;
 /** @type {number} */ var $1014=HEAPF64[(($1013)>>3)];
 $nb47=$1014;
 /** @type {number} */ var $1015=$ra;
 $io48=$1015;
 /** @type {number} */ var $1016=$nb47;
 /** @type {number} */ var $1017=((-.0))-($1016);
 /** @type {number} */ var $1018=$io48;
 /** @type {number} */ var $1019=(($1018)|0);
 /** @type {number} */ var $1020=$1019;
 HEAPF64[(($1020)>>3)]=$1017;
 /** @type {number} */ var $1021=$io48;
 /** @type {number} */ var $1022=(($1021+8)|0);
 HEAP32[(($1022)>>2)]=3;
 label=125;break;
 case 124: 
 /** @type {number} */ var $1024=$1;
 /** @type {number} */ var $1025=$ra;
 /** @type {number} */ var $1026=$rb46;
 /** @type {number} */ var $1027=$rb46;
 _luaV_arith($1024,$1025,$1026,$1027,12);
 /** @type {number} */ var $1028=$ci;
 /** @type {number} */ var $1029=(($1028+24)|0);
 /** @type {number} */ var $1030=$1029;
 /** @type {number} */ var $1031=(($1030)|0);
 /** @type {number} */ var $1032=HEAP32[(($1031)>>2)];
 $base=$1032;
 label=125;break;
 case 125: 
 label=289;break;
 case 126: 
 /** @type {number} */ var $1035=$base;
 /** @type {number} */ var $1036=$i;
 /** @type {number} */ var $1037=$1036>>>23;
 /** @type {number} */ var $1038=$1037&511;
 /** @type {number} */ var $1039=(($1035+($1038<<4))|0);
 $rb49=$1039;
 /** @type {number} */ var $1040=$rb49;
 /** @type {number} */ var $1041=(($1040+8)|0);
 /** @type {number} */ var $1042=HEAP32[(($1041)>>2)];
 /** @type {number} */ var $1043=($1042|0)==0;
 if($1043){var $1058=1;label=130;break;}else{label=127;break;}
 case 127: 
 /** @type {number} */ var $1045=$rb49;
 /** @type {number} */ var $1046=(($1045+8)|0);
 /** @type {number} */ var $1047=HEAP32[(($1046)>>2)];
 /** @type {number} */ var $1048=($1047|0)==1;
 if($1048){label=128;break;}else{var $1056=0;label=129;break;}
 case 128: 
 /** @type {number} */ var $1050=$rb49;
 /** @type {number} */ var $1051=(($1050)|0);
 /** @type {number} */ var $1052=$1051;
 /** @type {number} */ var $1053=HEAP32[(($1052)>>2)];
 /** @type {number} */ var $1054=($1053|0)==0;
 var $1056=$1054;label=129;break;
 case 129: 
 var $1056;
 var $1058=$1056;label=130;break;
 case 130: 
 var $1058;
 /** @type {number} */ var $1059=($1058&1);
 $res=$1059;
 /** @type {number} */ var $1060=$ra;
 $io50=$1060;
 /** @type {number} */ var $1061=$res;
 /** @type {number} */ var $1062=$io50;
 /** @type {number} */ var $1063=(($1062)|0);
 /** @type {number} */ var $1064=$1063;
 HEAP32[(($1064)>>2)]=$1061;
 /** @type {number} */ var $1065=$io50;
 /** @type {number} */ var $1066=(($1065+8)|0);
 HEAP32[(($1066)>>2)]=1;
 label=289;break;
 case 131: 
 /** @type {number} */ var $1068=$1;
 /** @type {number} */ var $1069=$ra;
 /** @type {number} */ var $1070=$base;
 /** @type {number} */ var $1071=$i;
 /** @type {number} */ var $1072=$1071>>>23;
 /** @type {number} */ var $1073=$1072&511;
 /** @type {number} */ var $1074=(($1070+($1073<<4))|0);
 _luaV_objlen($1068,$1069,$1074);
 /** @type {number} */ var $1075=$ci;
 /** @type {number} */ var $1076=(($1075+24)|0);
 /** @type {number} */ var $1077=$1076;
 /** @type {number} */ var $1078=(($1077)|0);
 /** @type {number} */ var $1079=HEAP32[(($1078)>>2)];
 $base=$1079;
 label=289;break;
 case 132: 
 /** @type {number} */ var $1081=$i;
 /** @type {number} */ var $1082=$1081>>>23;
 /** @type {number} */ var $1083=$1082&511;
 $b51=$1083;
 /** @type {number} */ var $1084=$i;
 /** @type {number} */ var $1085=$1084>>>14;
 /** @type {number} */ var $1086=$1085&511;
 $c52=$1086;
 /** @type {number} */ var $1087=$base;
 /** @type {number} */ var $1088=$c52;
 /** @type {number} */ var $1089=(($1087+($1088<<4))|0);
 /** @type {number} */ var $1090=(($1089+16)|0);
 /** @type {number} */ var $1091=$1;
 /** @type {number} */ var $1092=(($1091+8)|0);
 HEAP32[(($1092)>>2)]=$1090;
 /** @type {number} */ var $1093=$1;
 /** @type {number} */ var $1094=$c52;
 /** @type {number} */ var $1095=$b51;
 /** @type {number} */ var $1096=((($1094)-($1095))|0);
 /** @type {number} */ var $1097=((($1096)+(1))|0);
 _luaV_concat($1093,$1097);
 /** @type {number} */ var $1098=$ci;
 /** @type {number} */ var $1099=(($1098+24)|0);
 /** @type {number} */ var $1100=$1099;
 /** @type {number} */ var $1101=(($1100)|0);
 /** @type {number} */ var $1102=HEAP32[(($1101)>>2)];
 $base=$1102;
 /** @type {number} */ var $1103=$base;
 /** @type {number} */ var $1104=$i;
 /** @type {number} */ var $1105=$1104>>>6;
 /** @type {number} */ var $1106=$1105&255;
 /** @type {number} */ var $1107=(($1103+($1106<<4))|0);
 $ra=$1107;
 /** @type {number} */ var $1108=$b51;
 /** @type {number} */ var $1109=$base;
 /** @type {number} */ var $1110=(($1109+($1108<<4))|0);
 $rb53=$1110;
 /** @type {number} */ var $1111=$rb53;
 $io254=$1111;
 /** @type {number} */ var $1112=$ra;
 $io155=$1112;
 /** @type {number} */ var $1113=$io155;
 /** @type {number} */ var $1114=(($1113)|0);
 /** @type {number} */ var $1115=$io254;
 /** @type {number} */ var $1116=(($1115)|0);
 /** @type {number} */ var $1117=$1114;
 /** @type {number} */ var $1118=$1116;
 HEAP32[(($1117)>>2)]=HEAP32[(($1118)>>2)];HEAP32[((($1117)+(4))>>2)]=HEAP32[((($1118)+(4))>>2)];
 /** @type {number} */ var $1119=$io254;
 /** @type {number} */ var $1120=(($1119+8)|0);
 /** @type {number} */ var $1121=HEAP32[(($1120)>>2)];
 /** @type {number} */ var $1122=$io155;
 /** @type {number} */ var $1123=(($1122+8)|0);
 HEAP32[(($1123)>>2)]=$1121;
 /** @type {number} */ var $1124=$1;
 /** @type {number} */ var $1125=(($1124+12)|0);
 /** @type {number} */ var $1126=HEAP32[(($1125)>>2)];
 /** @type {number} */ var $1127=(($1126+12)|0);
 /** @type {number} */ var $1128=HEAP32[(($1127)>>2)];
 /** @type {number} */ var $1129=($1128|0)>0;
 if($1129){label=133;break;}else{label=137;break;}
 case 133: 
 /** @type {number} */ var $1131=$ra;
 /** @type {number} */ var $1132=$rb53;
 /** @type {number} */ var $1133=($1131>>>0)>=($1132>>>0);
 if($1133){label=134;break;}else{label=135;break;}
 case 134: 
 /** @type {number} */ var $1135=$ra;
 /** @type {number} */ var $1136=(($1135+16)|0);
 var $1140=$1136;label=136;break;
 case 135: 
 /** @type {number} */ var $1138=$rb53;
 var $1140=$1138;label=136;break;
 case 136: 
 var $1140;
 /** @type {number} */ var $1141=$1;
 /** @type {number} */ var $1142=(($1141+8)|0);
 HEAP32[(($1142)>>2)]=$1140;
 /** @type {number} */ var $1143=$1;
 _luaC_step($1143);
 /** @type {number} */ var $1144=$ci;
 /** @type {number} */ var $1145=(($1144+4)|0);
 /** @type {number} */ var $1146=HEAP32[(($1145)>>2)];
 /** @type {number} */ var $1147=$1;
 /** @type {number} */ var $1148=(($1147+8)|0);
 HEAP32[(($1148)>>2)]=$1146;
 label=137;break;
 case 137: 
 /** @type {number} */ var $1150=$ci;
 /** @type {number} */ var $1151=(($1150+24)|0);
 /** @type {number} */ var $1152=$1151;
 /** @type {number} */ var $1153=(($1152)|0);
 /** @type {number} */ var $1154=HEAP32[(($1153)>>2)];
 $base=$1154;
 /** @type {number} */ var $1155=$ci;
 /** @type {number} */ var $1156=(($1155+4)|0);
 /** @type {number} */ var $1157=HEAP32[(($1156)>>2)];
 /** @type {number} */ var $1158=$1;
 /** @type {number} */ var $1159=(($1158+8)|0);
 HEAP32[(($1159)>>2)]=$1157;
 label=289;break;
 case 138: 
 /** @type {number} */ var $1161=$i;
 /** @type {number} */ var $1162=$1161>>>6;
 /** @type {number} */ var $1163=$1162&255;
 $a56=$1163;
 /** @type {number} */ var $1164=$a56;
 /** @type {number} */ var $1165=($1164|0)>0;
 if($1165){label=139;break;}else{label=140;break;}
 case 139: 
 /** @type {number} */ var $1167=$1;
 /** @type {number} */ var $1168=$ci;
 /** @type {number} */ var $1169=(($1168+24)|0);
 /** @type {number} */ var $1170=$1169;
 /** @type {number} */ var $1171=(($1170)|0);
 /** @type {number} */ var $1172=HEAP32[(($1171)>>2)];
 /** @type {number} */ var $1173=$a56;
 /** @type {number} */ var $1174=(($1172+($1173<<4))|0);
 /** @type {number} */ var $1175=((($1174)-(16))|0);
 _luaF_close($1167,$1175);
 label=140;break;
 case 140: 
 /** @type {number} */ var $1177=$i;
 /** @type {number} */ var $1178=$1177>>>14;
 /** @type {number} */ var $1179=$1178&262143;
 /** @type {number} */ var $1180=((($1179)-(131071))|0);
 /** @type {number} */ var $1181=(($1180)|0);
 /** @type {number} */ var $1182=$ci;
 /** @type {number} */ var $1183=(($1182+24)|0);
 /** @type {number} */ var $1184=$1183;
 /** @type {number} */ var $1185=(($1184+4)|0);
 /** @type {number} */ var $1186=HEAP32[(($1185)>>2)];
 /** @type {number} */ var $1187=(($1186+($1181<<2))|0);
 HEAP32[(($1185)>>2)]=$1187;
 label=289;break;
 case 141: 
 /** @type {number} */ var $1189=$i;
 /** @type {number} */ var $1190=$1189>>>23;
 /** @type {number} */ var $1191=$1190&511;
 /** @type {number} */ var $1192=$1191&256;
 /** @type {number} */ var $1193=($1192|0)!=0;
 if($1193){label=142;break;}else{label=143;break;}
 case 142: 
 /** @type {number} */ var $1195=$k;
 /** @type {number} */ var $1196=$i;
 /** @type {number} */ var $1197=$1196>>>23;
 /** @type {number} */ var $1198=$1197&511;
 /** @type {number} */ var $1199=$1198&-257;
 /** @type {number} */ var $1200=(($1195+($1199<<4))|0);
 var $1208=$1200;label=144;break;
 case 143: 
 /** @type {number} */ var $1202=$base;
 /** @type {number} */ var $1203=$i;
 /** @type {number} */ var $1204=$1203>>>23;
 /** @type {number} */ var $1205=$1204&511;
 /** @type {number} */ var $1206=(($1202+($1205<<4))|0);
 var $1208=$1206;label=144;break;
 case 144: 
 var $1208;
 $rb57=$1208;
 /** @type {number} */ var $1209=$i;
 /** @type {number} */ var $1210=$1209>>>14;
 /** @type {number} */ var $1211=$1210&511;
 /** @type {number} */ var $1212=$1211&256;
 /** @type {number} */ var $1213=($1212|0)!=0;
 if($1213){label=145;break;}else{label=146;break;}
 case 145: 
 /** @type {number} */ var $1215=$k;
 /** @type {number} */ var $1216=$i;
 /** @type {number} */ var $1217=$1216>>>14;
 /** @type {number} */ var $1218=$1217&511;
 /** @type {number} */ var $1219=$1218&-257;
 /** @type {number} */ var $1220=(($1215+($1219<<4))|0);
 var $1228=$1220;label=147;break;
 case 146: 
 /** @type {number} */ var $1222=$base;
 /** @type {number} */ var $1223=$i;
 /** @type {number} */ var $1224=$1223>>>14;
 /** @type {number} */ var $1225=$1224&511;
 /** @type {number} */ var $1226=(($1222+($1225<<4))|0);
 var $1228=$1226;label=147;break;
 case 147: 
 var $1228;
 $rc58=$1228;
 /** @type {number} */ var $1229=$rb57;
 /** @type {number} */ var $1230=(($1229+8)|0);
 /** @type {number} */ var $1231=HEAP32[(($1230)>>2)];
 /** @type {number} */ var $1232=$rc58;
 /** @type {number} */ var $1233=(($1232+8)|0);
 /** @type {number} */ var $1234=HEAP32[(($1233)>>2)];
 /** @type {number} */ var $1235=($1231|0)==($1234|0);
 if($1235){label=148;break;}else{var $1243=0;label=149;break;}
 case 148: 
 /** @type {number} */ var $1237=$1;
 /** @type {number} */ var $1238=$rb57;
 /** @type {number} */ var $1239=$rc58;
 /** @type {number} */ var $1240=_luaV_equalobj_($1237,$1238,$1239);
 /** @type {number} */ var $1241=($1240|0)!=0;
 var $1243=$1241;label=149;break;
 case 149: 
 var $1243;
 /** @type {number} */ var $1244=($1243&1);
 /** @type {number} */ var $1245=$i;
 /** @type {number} */ var $1246=$1245>>>6;
 /** @type {number} */ var $1247=$1246&255;
 /** @type {number} */ var $1248=($1244|0)!=($1247|0);
 if($1248){label=150;break;}else{label=151;break;}
 case 150: 
 /** @type {number} */ var $1250=$ci;
 /** @type {number} */ var $1251=(($1250+24)|0);
 /** @type {number} */ var $1252=$1251;
 /** @type {number} */ var $1253=(($1252+4)|0);
 /** @type {number} */ var $1254=HEAP32[(($1253)>>2)];
 /** @type {number} */ var $1255=(($1254+4)|0);
 HEAP32[(($1253)>>2)]=$1255;
 label=154;break;
 case 151: 
 /** @type {number} */ var $1257=$ci;
 /** @type {number} */ var $1258=(($1257+24)|0);
 /** @type {number} */ var $1259=$1258;
 /** @type {number} */ var $1260=(($1259+4)|0);
 /** @type {number} */ var $1261=HEAP32[(($1260)>>2)];
 /** @type {number} */ var $1262=HEAP32[(($1261)>>2)];
 $i=$1262;
 /** @type {number} */ var $1263=$i;
 /** @type {number} */ var $1264=$1263>>>6;
 /** @type {number} */ var $1265=$1264&255;
 $a59=$1265;
 /** @type {number} */ var $1266=$a59;
 /** @type {number} */ var $1267=($1266|0)>0;
 if($1267){label=152;break;}else{label=153;break;}
 case 152: 
 /** @type {number} */ var $1269=$1;
 /** @type {number} */ var $1270=$ci;
 /** @type {number} */ var $1271=(($1270+24)|0);
 /** @type {number} */ var $1272=$1271;
 /** @type {number} */ var $1273=(($1272)|0);
 /** @type {number} */ var $1274=HEAP32[(($1273)>>2)];
 /** @type {number} */ var $1275=$a59;
 /** @type {number} */ var $1276=(($1274+($1275<<4))|0);
 /** @type {number} */ var $1277=((($1276)-(16))|0);
 _luaF_close($1269,$1277);
 label=153;break;
 case 153: 
 /** @type {number} */ var $1279=$i;
 /** @type {number} */ var $1280=$1279>>>14;
 /** @type {number} */ var $1281=$1280&262143;
 /** @type {number} */ var $1282=((($1281)-(131071))|0);
 /** @type {number} */ var $1283=((($1282)+(1))|0);
 /** @type {number} */ var $1284=$ci;
 /** @type {number} */ var $1285=(($1284+24)|0);
 /** @type {number} */ var $1286=$1285;
 /** @type {number} */ var $1287=(($1286+4)|0);
 /** @type {number} */ var $1288=HEAP32[(($1287)>>2)];
 /** @type {number} */ var $1289=(($1288+($1283<<2))|0);
 HEAP32[(($1287)>>2)]=$1289;
 label=154;break;
 case 154: 
 /** @type {number} */ var $1291=$ci;
 /** @type {number} */ var $1292=(($1291+24)|0);
 /** @type {number} */ var $1293=$1292;
 /** @type {number} */ var $1294=(($1293)|0);
 /** @type {number} */ var $1295=HEAP32[(($1294)>>2)];
 $base=$1295;
 label=289;break;
 case 155: 
 /** @type {number} */ var $1297=$1;
 /** @type {number} */ var $1298=$i;
 /** @type {number} */ var $1299=$1298>>>23;
 /** @type {number} */ var $1300=$1299&511;
 /** @type {number} */ var $1301=$1300&256;
 /** @type {number} */ var $1302=($1301|0)!=0;
 if($1302){label=156;break;}else{label=157;break;}
 case 156: 
 /** @type {number} */ var $1304=$k;
 /** @type {number} */ var $1305=$i;
 /** @type {number} */ var $1306=$1305>>>23;
 /** @type {number} */ var $1307=$1306&511;
 /** @type {number} */ var $1308=$1307&-257;
 /** @type {number} */ var $1309=(($1304+($1308<<4))|0);
 var $1317=$1309;label=158;break;
 case 157: 
 /** @type {number} */ var $1311=$base;
 /** @type {number} */ var $1312=$i;
 /** @type {number} */ var $1313=$1312>>>23;
 /** @type {number} */ var $1314=$1313&511;
 /** @type {number} */ var $1315=(($1311+($1314<<4))|0);
 var $1317=$1315;label=158;break;
 case 158: 
 var $1317;
 /** @type {number} */ var $1318=$i;
 /** @type {number} */ var $1319=$1318>>>14;
 /** @type {number} */ var $1320=$1319&511;
 /** @type {number} */ var $1321=$1320&256;
 /** @type {number} */ var $1322=($1321|0)!=0;
 if($1322){label=159;break;}else{label=160;break;}
 case 159: 
 /** @type {number} */ var $1324=$k;
 /** @type {number} */ var $1325=$i;
 /** @type {number} */ var $1326=$1325>>>14;
 /** @type {number} */ var $1327=$1326&511;
 /** @type {number} */ var $1328=$1327&-257;
 /** @type {number} */ var $1329=(($1324+($1328<<4))|0);
 var $1337=$1329;label=161;break;
 case 160: 
 /** @type {number} */ var $1331=$base;
 /** @type {number} */ var $1332=$i;
 /** @type {number} */ var $1333=$1332>>>14;
 /** @type {number} */ var $1334=$1333&511;
 /** @type {number} */ var $1335=(($1331+($1334<<4))|0);
 var $1337=$1335;label=161;break;
 case 161: 
 var $1337;
 /** @type {number} */ var $1338=_luaV_lessthan($1297,$1317,$1337);
 /** @type {number} */ var $1339=$i;
 /** @type {number} */ var $1340=$1339>>>6;
 /** @type {number} */ var $1341=$1340&255;
 /** @type {number} */ var $1342=($1338|0)!=($1341|0);
 if($1342){label=162;break;}else{label=163;break;}
 case 162: 
 /** @type {number} */ var $1344=$ci;
 /** @type {number} */ var $1345=(($1344+24)|0);
 /** @type {number} */ var $1346=$1345;
 /** @type {number} */ var $1347=(($1346+4)|0);
 /** @type {number} */ var $1348=HEAP32[(($1347)>>2)];
 /** @type {number} */ var $1349=(($1348+4)|0);
 HEAP32[(($1347)>>2)]=$1349;
 label=166;break;
 case 163: 
 /** @type {number} */ var $1351=$ci;
 /** @type {number} */ var $1352=(($1351+24)|0);
 /** @type {number} */ var $1353=$1352;
 /** @type {number} */ var $1354=(($1353+4)|0);
 /** @type {number} */ var $1355=HEAP32[(($1354)>>2)];
 /** @type {number} */ var $1356=HEAP32[(($1355)>>2)];
 $i=$1356;
 /** @type {number} */ var $1357=$i;
 /** @type {number} */ var $1358=$1357>>>6;
 /** @type {number} */ var $1359=$1358&255;
 $a60=$1359;
 /** @type {number} */ var $1360=$a60;
 /** @type {number} */ var $1361=($1360|0)>0;
 if($1361){label=164;break;}else{label=165;break;}
 case 164: 
 /** @type {number} */ var $1363=$1;
 /** @type {number} */ var $1364=$ci;
 /** @type {number} */ var $1365=(($1364+24)|0);
 /** @type {number} */ var $1366=$1365;
 /** @type {number} */ var $1367=(($1366)|0);
 /** @type {number} */ var $1368=HEAP32[(($1367)>>2)];
 /** @type {number} */ var $1369=$a60;
 /** @type {number} */ var $1370=(($1368+($1369<<4))|0);
 /** @type {number} */ var $1371=((($1370)-(16))|0);
 _luaF_close($1363,$1371);
 label=165;break;
 case 165: 
 /** @type {number} */ var $1373=$i;
 /** @type {number} */ var $1374=$1373>>>14;
 /** @type {number} */ var $1375=$1374&262143;
 /** @type {number} */ var $1376=((($1375)-(131071))|0);
 /** @type {number} */ var $1377=((($1376)+(1))|0);
 /** @type {number} */ var $1378=$ci;
 /** @type {number} */ var $1379=(($1378+24)|0);
 /** @type {number} */ var $1380=$1379;
 /** @type {number} */ var $1381=(($1380+4)|0);
 /** @type {number} */ var $1382=HEAP32[(($1381)>>2)];
 /** @type {number} */ var $1383=(($1382+($1377<<2))|0);
 HEAP32[(($1381)>>2)]=$1383;
 label=166;break;
 case 166: 
 /** @type {number} */ var $1385=$ci;
 /** @type {number} */ var $1386=(($1385+24)|0);
 /** @type {number} */ var $1387=$1386;
 /** @type {number} */ var $1388=(($1387)|0);
 /** @type {number} */ var $1389=HEAP32[(($1388)>>2)];
 $base=$1389;
 label=289;break;
 case 167: 
 /** @type {number} */ var $1391=$1;
 /** @type {number} */ var $1392=$i;
 /** @type {number} */ var $1393=$1392>>>23;
 /** @type {number} */ var $1394=$1393&511;
 /** @type {number} */ var $1395=$1394&256;
 /** @type {number} */ var $1396=($1395|0)!=0;
 if($1396){label=168;break;}else{label=169;break;}
 case 168: 
 /** @type {number} */ var $1398=$k;
 /** @type {number} */ var $1399=$i;
 /** @type {number} */ var $1400=$1399>>>23;
 /** @type {number} */ var $1401=$1400&511;
 /** @type {number} */ var $1402=$1401&-257;
 /** @type {number} */ var $1403=(($1398+($1402<<4))|0);
 var $1411=$1403;label=170;break;
 case 169: 
 /** @type {number} */ var $1405=$base;
 /** @type {number} */ var $1406=$i;
 /** @type {number} */ var $1407=$1406>>>23;
 /** @type {number} */ var $1408=$1407&511;
 /** @type {number} */ var $1409=(($1405+($1408<<4))|0);
 var $1411=$1409;label=170;break;
 case 170: 
 var $1411;
 /** @type {number} */ var $1412=$i;
 /** @type {number} */ var $1413=$1412>>>14;
 /** @type {number} */ var $1414=$1413&511;
 /** @type {number} */ var $1415=$1414&256;
 /** @type {number} */ var $1416=($1415|0)!=0;
 if($1416){label=171;break;}else{label=172;break;}
 case 171: 
 /** @type {number} */ var $1418=$k;
 /** @type {number} */ var $1419=$i;
 /** @type {number} */ var $1420=$1419>>>14;
 /** @type {number} */ var $1421=$1420&511;
 /** @type {number} */ var $1422=$1421&-257;
 /** @type {number} */ var $1423=(($1418+($1422<<4))|0);
 var $1431=$1423;label=173;break;
 case 172: 
 /** @type {number} */ var $1425=$base;
 /** @type {number} */ var $1426=$i;
 /** @type {number} */ var $1427=$1426>>>14;
 /** @type {number} */ var $1428=$1427&511;
 /** @type {number} */ var $1429=(($1425+($1428<<4))|0);
 var $1431=$1429;label=173;break;
 case 173: 
 var $1431;
 /** @type {number} */ var $1432=_luaV_lessequal($1391,$1411,$1431);
 /** @type {number} */ var $1433=$i;
 /** @type {number} */ var $1434=$1433>>>6;
 /** @type {number} */ var $1435=$1434&255;
 /** @type {number} */ var $1436=($1432|0)!=($1435|0);
 if($1436){label=174;break;}else{label=175;break;}
 case 174: 
 /** @type {number} */ var $1438=$ci;
 /** @type {number} */ var $1439=(($1438+24)|0);
 /** @type {number} */ var $1440=$1439;
 /** @type {number} */ var $1441=(($1440+4)|0);
 /** @type {number} */ var $1442=HEAP32[(($1441)>>2)];
 /** @type {number} */ var $1443=(($1442+4)|0);
 HEAP32[(($1441)>>2)]=$1443;
 label=178;break;
 case 175: 
 /** @type {number} */ var $1445=$ci;
 /** @type {number} */ var $1446=(($1445+24)|0);
 /** @type {number} */ var $1447=$1446;
 /** @type {number} */ var $1448=(($1447+4)|0);
 /** @type {number} */ var $1449=HEAP32[(($1448)>>2)];
 /** @type {number} */ var $1450=HEAP32[(($1449)>>2)];
 $i=$1450;
 /** @type {number} */ var $1451=$i;
 /** @type {number} */ var $1452=$1451>>>6;
 /** @type {number} */ var $1453=$1452&255;
 $a61=$1453;
 /** @type {number} */ var $1454=$a61;
 /** @type {number} */ var $1455=($1454|0)>0;
 if($1455){label=176;break;}else{label=177;break;}
 case 176: 
 /** @type {number} */ var $1457=$1;
 /** @type {number} */ var $1458=$ci;
 /** @type {number} */ var $1459=(($1458+24)|0);
 /** @type {number} */ var $1460=$1459;
 /** @type {number} */ var $1461=(($1460)|0);
 /** @type {number} */ var $1462=HEAP32[(($1461)>>2)];
 /** @type {number} */ var $1463=$a61;
 /** @type {number} */ var $1464=(($1462+($1463<<4))|0);
 /** @type {number} */ var $1465=((($1464)-(16))|0);
 _luaF_close($1457,$1465);
 label=177;break;
 case 177: 
 /** @type {number} */ var $1467=$i;
 /** @type {number} */ var $1468=$1467>>>14;
 /** @type {number} */ var $1469=$1468&262143;
 /** @type {number} */ var $1470=((($1469)-(131071))|0);
 /** @type {number} */ var $1471=((($1470)+(1))|0);
 /** @type {number} */ var $1472=$ci;
 /** @type {number} */ var $1473=(($1472+24)|0);
 /** @type {number} */ var $1474=$1473;
 /** @type {number} */ var $1475=(($1474+4)|0);
 /** @type {number} */ var $1476=HEAP32[(($1475)>>2)];
 /** @type {number} */ var $1477=(($1476+($1471<<2))|0);
 HEAP32[(($1475)>>2)]=$1477;
 label=178;break;
 case 178: 
 /** @type {number} */ var $1479=$ci;
 /** @type {number} */ var $1480=(($1479+24)|0);
 /** @type {number} */ var $1481=$1480;
 /** @type {number} */ var $1482=(($1481)|0);
 /** @type {number} */ var $1483=HEAP32[(($1482)>>2)];
 $base=$1483;
 label=289;break;
 case 179: 
 /** @type {number} */ var $1485=$i;
 /** @type {number} */ var $1486=$1485>>>14;
 /** @type {number} */ var $1487=$1486&511;
 /** @type {number} */ var $1488=($1487|0)!=0;
 if($1488){label=180;break;}else{label=183;break;}
 case 180: 
 /** @type {number} */ var $1490=$ra;
 /** @type {number} */ var $1491=(($1490+8)|0);
 /** @type {number} */ var $1492=HEAP32[(($1491)>>2)];
 /** @type {number} */ var $1493=($1492|0)==0;
 if($1493){label=186;break;}else{label=181;break;}
 case 181: 
 /** @type {number} */ var $1495=$ra;
 /** @type {number} */ var $1496=(($1495+8)|0);
 /** @type {number} */ var $1497=HEAP32[(($1496)>>2)];
 /** @type {number} */ var $1498=($1497|0)==1;
 if($1498){label=182;break;}else{label=187;break;}
 case 182: 
 /** @type {number} */ var $1500=$ra;
 /** @type {number} */ var $1501=(($1500)|0);
 /** @type {number} */ var $1502=$1501;
 /** @type {number} */ var $1503=HEAP32[(($1502)>>2)];
 /** @type {number} */ var $1504=($1503|0)==0;
 if($1504){label=186;break;}else{label=187;break;}
 case 183: 
 /** @type {number} */ var $1506=$ra;
 /** @type {number} */ var $1507=(($1506+8)|0);
 /** @type {number} */ var $1508=HEAP32[(($1507)>>2)];
 /** @type {number} */ var $1509=($1508|0)==0;
 if($1509){label=187;break;}else{label=184;break;}
 case 184: 
 /** @type {number} */ var $1511=$ra;
 /** @type {number} */ var $1512=(($1511+8)|0);
 /** @type {number} */ var $1513=HEAP32[(($1512)>>2)];
 /** @type {number} */ var $1514=($1513|0)==1;
 if($1514){label=185;break;}else{label=186;break;}
 case 185: 
 /** @type {number} */ var $1516=$ra;
 /** @type {number} */ var $1517=(($1516)|0);
 /** @type {number} */ var $1518=$1517;
 /** @type {number} */ var $1519=HEAP32[(($1518)>>2)];
 /** @type {number} */ var $1520=($1519|0)==0;
 if($1520){label=187;break;}else{label=186;break;}
 case 186: 
 /** @type {number} */ var $1522=$ci;
 /** @type {number} */ var $1523=(($1522+24)|0);
 /** @type {number} */ var $1524=$1523;
 /** @type {number} */ var $1525=(($1524+4)|0);
 /** @type {number} */ var $1526=HEAP32[(($1525)>>2)];
 /** @type {number} */ var $1527=(($1526+4)|0);
 HEAP32[(($1525)>>2)]=$1527;
 label=190;break;
 case 187: 
 /** @type {number} */ var $1529=$ci;
 /** @type {number} */ var $1530=(($1529+24)|0);
 /** @type {number} */ var $1531=$1530;
 /** @type {number} */ var $1532=(($1531+4)|0);
 /** @type {number} */ var $1533=HEAP32[(($1532)>>2)];
 /** @type {number} */ var $1534=HEAP32[(($1533)>>2)];
 $i=$1534;
 /** @type {number} */ var $1535=$i;
 /** @type {number} */ var $1536=$1535>>>6;
 /** @type {number} */ var $1537=$1536&255;
 $a62=$1537;
 /** @type {number} */ var $1538=$a62;
 /** @type {number} */ var $1539=($1538|0)>0;
 if($1539){label=188;break;}else{label=189;break;}
 case 188: 
 /** @type {number} */ var $1541=$1;
 /** @type {number} */ var $1542=$ci;
 /** @type {number} */ var $1543=(($1542+24)|0);
 /** @type {number} */ var $1544=$1543;
 /** @type {number} */ var $1545=(($1544)|0);
 /** @type {number} */ var $1546=HEAP32[(($1545)>>2)];
 /** @type {number} */ var $1547=$a62;
 /** @type {number} */ var $1548=(($1546+($1547<<4))|0);
 /** @type {number} */ var $1549=((($1548)-(16))|0);
 _luaF_close($1541,$1549);
 label=189;break;
 case 189: 
 /** @type {number} */ var $1551=$i;
 /** @type {number} */ var $1552=$1551>>>14;
 /** @type {number} */ var $1553=$1552&262143;
 /** @type {number} */ var $1554=((($1553)-(131071))|0);
 /** @type {number} */ var $1555=((($1554)+(1))|0);
 /** @type {number} */ var $1556=$ci;
 /** @type {number} */ var $1557=(($1556+24)|0);
 /** @type {number} */ var $1558=$1557;
 /** @type {number} */ var $1559=(($1558+4)|0);
 /** @type {number} */ var $1560=HEAP32[(($1559)>>2)];
 /** @type {number} */ var $1561=(($1560+($1555<<2))|0);
 HEAP32[(($1559)>>2)]=$1561;
 label=190;break;
 case 190: 
 label=289;break;
 case 191: 
 /** @type {number} */ var $1564=$base;
 /** @type {number} */ var $1565=$i;
 /** @type {number} */ var $1566=$1565>>>23;
 /** @type {number} */ var $1567=$1566&511;
 /** @type {number} */ var $1568=(($1564+($1567<<4))|0);
 $rb63=$1568;
 /** @type {number} */ var $1569=$i;
 /** @type {number} */ var $1570=$1569>>>14;
 /** @type {number} */ var $1571=$1570&511;
 /** @type {number} */ var $1572=($1571|0)!=0;
 if($1572){label=192;break;}else{label=195;break;}
 case 192: 
 /** @type {number} */ var $1574=$rb63;
 /** @type {number} */ var $1575=(($1574+8)|0);
 /** @type {number} */ var $1576=HEAP32[(($1575)>>2)];
 /** @type {number} */ var $1577=($1576|0)==0;
 if($1577){label=198;break;}else{label=193;break;}
 case 193: 
 /** @type {number} */ var $1579=$rb63;
 /** @type {number} */ var $1580=(($1579+8)|0);
 /** @type {number} */ var $1581=HEAP32[(($1580)>>2)];
 /** @type {number} */ var $1582=($1581|0)==1;
 if($1582){label=194;break;}else{label=199;break;}
 case 194: 
 /** @type {number} */ var $1584=$rb63;
 /** @type {number} */ var $1585=(($1584)|0);
 /** @type {number} */ var $1586=$1585;
 /** @type {number} */ var $1587=HEAP32[(($1586)>>2)];
 /** @type {number} */ var $1588=($1587|0)==0;
 if($1588){label=198;break;}else{label=199;break;}
 case 195: 
 /** @type {number} */ var $1590=$rb63;
 /** @type {number} */ var $1591=(($1590+8)|0);
 /** @type {number} */ var $1592=HEAP32[(($1591)>>2)];
 /** @type {number} */ var $1593=($1592|0)==0;
 if($1593){label=199;break;}else{label=196;break;}
 case 196: 
 /** @type {number} */ var $1595=$rb63;
 /** @type {number} */ var $1596=(($1595+8)|0);
 /** @type {number} */ var $1597=HEAP32[(($1596)>>2)];
 /** @type {number} */ var $1598=($1597|0)==1;
 if($1598){label=197;break;}else{label=198;break;}
 case 197: 
 /** @type {number} */ var $1600=$rb63;
 /** @type {number} */ var $1601=(($1600)|0);
 /** @type {number} */ var $1602=$1601;
 /** @type {number} */ var $1603=HEAP32[(($1602)>>2)];
 /** @type {number} */ var $1604=($1603|0)==0;
 if($1604){label=199;break;}else{label=198;break;}
 case 198: 
 /** @type {number} */ var $1606=$ci;
 /** @type {number} */ var $1607=(($1606+24)|0);
 /** @type {number} */ var $1608=$1607;
 /** @type {number} */ var $1609=(($1608+4)|0);
 /** @type {number} */ var $1610=HEAP32[(($1609)>>2)];
 /** @type {number} */ var $1611=(($1610+4)|0);
 HEAP32[(($1609)>>2)]=$1611;
 label=202;break;
 case 199: 
 /** @type {number} */ var $1613=$rb63;
 $io264=$1613;
 /** @type {number} */ var $1614=$ra;
 $io165=$1614;
 /** @type {number} */ var $1615=$io165;
 /** @type {number} */ var $1616=(($1615)|0);
 /** @type {number} */ var $1617=$io264;
 /** @type {number} */ var $1618=(($1617)|0);
 /** @type {number} */ var $1619=$1616;
 /** @type {number} */ var $1620=$1618;
 HEAP32[(($1619)>>2)]=HEAP32[(($1620)>>2)];HEAP32[((($1619)+(4))>>2)]=HEAP32[((($1620)+(4))>>2)];
 /** @type {number} */ var $1621=$io264;
 /** @type {number} */ var $1622=(($1621+8)|0);
 /** @type {number} */ var $1623=HEAP32[(($1622)>>2)];
 /** @type {number} */ var $1624=$io165;
 /** @type {number} */ var $1625=(($1624+8)|0);
 HEAP32[(($1625)>>2)]=$1623;
 /** @type {number} */ var $1626=$ci;
 /** @type {number} */ var $1627=(($1626+24)|0);
 /** @type {number} */ var $1628=$1627;
 /** @type {number} */ var $1629=(($1628+4)|0);
 /** @type {number} */ var $1630=HEAP32[(($1629)>>2)];
 /** @type {number} */ var $1631=HEAP32[(($1630)>>2)];
 $i=$1631;
 /** @type {number} */ var $1632=$i;
 /** @type {number} */ var $1633=$1632>>>6;
 /** @type {number} */ var $1634=$1633&255;
 $a66=$1634;
 /** @type {number} */ var $1635=$a66;
 /** @type {number} */ var $1636=($1635|0)>0;
 if($1636){label=200;break;}else{label=201;break;}
 case 200: 
 /** @type {number} */ var $1638=$1;
 /** @type {number} */ var $1639=$ci;
 /** @type {number} */ var $1640=(($1639+24)|0);
 /** @type {number} */ var $1641=$1640;
 /** @type {number} */ var $1642=(($1641)|0);
 /** @type {number} */ var $1643=HEAP32[(($1642)>>2)];
 /** @type {number} */ var $1644=$a66;
 /** @type {number} */ var $1645=(($1643+($1644<<4))|0);
 /** @type {number} */ var $1646=((($1645)-(16))|0);
 _luaF_close($1638,$1646);
 label=201;break;
 case 201: 
 /** @type {number} */ var $1648=$i;
 /** @type {number} */ var $1649=$1648>>>14;
 /** @type {number} */ var $1650=$1649&262143;
 /** @type {number} */ var $1651=((($1650)-(131071))|0);
 /** @type {number} */ var $1652=((($1651)+(1))|0);
 /** @type {number} */ var $1653=$ci;
 /** @type {number} */ var $1654=(($1653+24)|0);
 /** @type {number} */ var $1655=$1654;
 /** @type {number} */ var $1656=(($1655+4)|0);
 /** @type {number} */ var $1657=HEAP32[(($1656)>>2)];
 /** @type {number} */ var $1658=(($1657+($1652<<2))|0);
 HEAP32[(($1656)>>2)]=$1658;
 label=202;break;
 case 202: 
 label=289;break;
 case 203: 
 /** @type {number} */ var $1661=$i;
 /** @type {number} */ var $1662=$1661>>>23;
 /** @type {number} */ var $1663=$1662&511;
 $b67=$1663;
 /** @type {number} */ var $1664=$i;
 /** @type {number} */ var $1665=$1664>>>14;
 /** @type {number} */ var $1666=$1665&511;
 /** @type {number} */ var $1667=((($1666)-(1))|0);
 $nresults=$1667;
 /** @type {number} */ var $1668=$b67;
 /** @type {number} */ var $1669=($1668|0)!=0;
 if($1669){label=204;break;}else{label=205;break;}
 case 204: 
 /** @type {number} */ var $1671=$ra;
 /** @type {number} */ var $1672=$b67;
 /** @type {number} */ var $1673=(($1671+($1672<<4))|0);
 /** @type {number} */ var $1674=$1;
 /** @type {number} */ var $1675=(($1674+8)|0);
 HEAP32[(($1675)>>2)]=$1673;
 label=205;break;
 case 205: 
 /** @type {number} */ var $1677=$1;
 /** @type {number} */ var $1678=$ra;
 /** @type {number} */ var $1679=$nresults;
 /** @type {number} */ var $1680=_luaD_precall($1677,$1678,$1679);
 /** @type {number} */ var $1681=($1680|0)!=0;
 if($1681){label=206;break;}else{label=209;break;}
 case 206: 
 /** @type {number} */ var $1683=$nresults;
 /** @type {number} */ var $1684=($1683|0)>=0;
 if($1684){label=207;break;}else{label=208;break;}
 case 207: 
 /** @type {number} */ var $1686=$ci;
 /** @type {number} */ var $1687=(($1686+4)|0);
 /** @type {number} */ var $1688=HEAP32[(($1687)>>2)];
 /** @type {number} */ var $1689=$1;
 /** @type {number} */ var $1690=(($1689+8)|0);
 HEAP32[(($1690)>>2)]=$1688;
 label=208;break;
 case 208: 
 /** @type {number} */ var $1692=$ci;
 /** @type {number} */ var $1693=(($1692+24)|0);
 /** @type {number} */ var $1694=$1693;
 /** @type {number} */ var $1695=(($1694)|0);
 /** @type {number} */ var $1696=HEAP32[(($1695)>>2)];
 $base=$1696;
 label=210;break;
 case 209: 
 /** @type {number} */ var $1698=$1;
 /** @type {number} */ var $1699=(($1698+16)|0);
 /** @type {number} */ var $1700=HEAP32[(($1699)>>2)];
 $ci=$1700;
 /** @type {number} */ var $1701=$ci;
 /** @type {number} */ var $1702=(($1701+18)|0);
 /** @type {number} */ var $1703=HEAP8[($1702)];
 /** @type {number} */ var $1704=($1703&255);
 /** @type {number} */ var $1705=$1704|4;
 /** @type {number} */ var $1706=(($1705)&255);
 HEAP8[($1702)]=$1706;
 label=2;break;
 case 210: 
 label=289;break;
 case 211: 
 /** @type {number} */ var $1709=$i;
 /** @type {number} */ var $1710=$1709>>>23;
 /** @type {number} */ var $1711=$1710&511;
 $b68=$1711;
 /** @type {number} */ var $1712=$b68;
 /** @type {number} */ var $1713=($1712|0)!=0;
 if($1713){label=212;break;}else{label=213;break;}
 case 212: 
 /** @type {number} */ var $1715=$ra;
 /** @type {number} */ var $1716=$b68;
 /** @type {number} */ var $1717=(($1715+($1716<<4))|0);
 /** @type {number} */ var $1718=$1;
 /** @type {number} */ var $1719=(($1718+8)|0);
 HEAP32[(($1719)>>2)]=$1717;
 label=213;break;
 case 213: 
 /** @type {number} */ var $1721=$1;
 /** @type {number} */ var $1722=$ra;
 /** @type {number} */ var $1723=_luaD_precall($1721,$1722,-1);
 /** @type {number} */ var $1724=($1723|0)!=0;
 if($1724){label=214;break;}else{label=215;break;}
 case 214: 
 /** @type {number} */ var $1726=$ci;
 /** @type {number} */ var $1727=(($1726+24)|0);
 /** @type {number} */ var $1728=$1727;
 /** @type {number} */ var $1729=(($1728)|0);
 /** @type {number} */ var $1730=HEAP32[(($1729)>>2)];
 $base=$1730;
 label=222;break;
 case 215: 
 /** @type {number} */ var $1732=$1;
 /** @type {number} */ var $1733=(($1732+16)|0);
 /** @type {number} */ var $1734=HEAP32[(($1733)>>2)];
 $nci=$1734;
 /** @type {number} */ var $1735=$nci;
 /** @type {number} */ var $1736=(($1735+8)|0);
 /** @type {number} */ var $1737=HEAP32[(($1736)>>2)];
 $oci=$1737;
 /** @type {number} */ var $1738=$nci;
 /** @type {number} */ var $1739=(($1738)|0);
 /** @type {number} */ var $1740=HEAP32[(($1739)>>2)];
 $nfunc=$1740;
 /** @type {number} */ var $1741=$oci;
 /** @type {number} */ var $1742=(($1741)|0);
 /** @type {number} */ var $1743=HEAP32[(($1742)>>2)];
 $ofunc=$1743;
 /** @type {number} */ var $1744=$nci;
 /** @type {number} */ var $1745=(($1744+24)|0);
 /** @type {number} */ var $1746=$1745;
 /** @type {number} */ var $1747=(($1746)|0);
 /** @type {number} */ var $1748=HEAP32[(($1747)>>2)];
 /** @type {number} */ var $1749=$nfunc;
 /** @type {number} */ var $1750=(($1749)|0);
 /** @type {number} */ var $1751=$1750;
 /** @type {number} */ var $1752=HEAP32[(($1751)>>2)];
 /** @type {number} */ var $1753=$1752;
 /** @type {number} */ var $1754=$1753;
 /** @type {number} */ var $1755=(($1754+12)|0);
 /** @type {number} */ var $1756=HEAP32[(($1755)>>2)];
 /** @type {number} */ var $1757=(($1756+76)|0);
 /** @type {number} */ var $1758=HEAP8[($1757)];
 /** @type {number} */ var $1759=($1758&255);
 /** @type {number} */ var $1760=(($1748+($1759<<4))|0);
 $lim=$1760;
 /** @type {number} */ var $1761=$cl;
 /** @type {number} */ var $1762=(($1761+12)|0);
 /** @type {number} */ var $1763=HEAP32[(($1762)>>2)];
 /** @type {number} */ var $1764=(($1763+56)|0);
 /** @type {number} */ var $1765=HEAP32[(($1764)>>2)];
 /** @type {number} */ var $1766=($1765|0)>0;
 if($1766){label=216;break;}else{label=217;break;}
 case 216: 
 /** @type {number} */ var $1768=$1;
 /** @type {number} */ var $1769=$oci;
 /** @type {number} */ var $1770=(($1769+24)|0);
 /** @type {number} */ var $1771=$1770;
 /** @type {number} */ var $1772=(($1771)|0);
 /** @type {number} */ var $1773=HEAP32[(($1772)>>2)];
 _luaF_close($1768,$1773);
 label=217;break;
 case 217: 
 $aux=0;
 label=218;break;
 case 218: 
 /** @type {number} */ var $1776=$nfunc;
 /** @type {number} */ var $1777=$aux;
 /** @type {number} */ var $1778=(($1776+($1777<<4))|0);
 /** @type {number} */ var $1779=$lim;
 /** @type {number} */ var $1780=($1778>>>0)<($1779>>>0);
 if($1780){label=219;break;}else{label=221;break;}
 case 219: 
 /** @type {number} */ var $1782=$nfunc;
 /** @type {number} */ var $1783=$aux;
 /** @type {number} */ var $1784=(($1782+($1783<<4))|0);
 $io269=$1784;
 /** @type {number} */ var $1785=$ofunc;
 /** @type {number} */ var $1786=$aux;
 /** @type {number} */ var $1787=(($1785+($1786<<4))|0);
 $io170=$1787;
 /** @type {number} */ var $1788=$io170;
 /** @type {number} */ var $1789=(($1788)|0);
 /** @type {number} */ var $1790=$io269;
 /** @type {number} */ var $1791=(($1790)|0);
 /** @type {number} */ var $1792=$1789;
 /** @type {number} */ var $1793=$1791;
 HEAP32[(($1792)>>2)]=HEAP32[(($1793)>>2)];HEAP32[((($1792)+(4))>>2)]=HEAP32[((($1793)+(4))>>2)];
 /** @type {number} */ var $1794=$io269;
 /** @type {number} */ var $1795=(($1794+8)|0);
 /** @type {number} */ var $1796=HEAP32[(($1795)>>2)];
 /** @type {number} */ var $1797=$io170;
 /** @type {number} */ var $1798=(($1797+8)|0);
 HEAP32[(($1798)>>2)]=$1796;
 label=220;break;
 case 220: 
 /** @type {number} */ var $1800=$aux;
 /** @type {number} */ var $1801=((($1800)+(1))|0);
 $aux=$1801;
 label=218;break;
 case 221: 
 /** @type {number} */ var $1803=$ofunc;
 /** @type {number} */ var $1804=$nci;
 /** @type {number} */ var $1805=(($1804+24)|0);
 /** @type {number} */ var $1806=$1805;
 /** @type {number} */ var $1807=(($1806)|0);
 /** @type {number} */ var $1808=HEAP32[(($1807)>>2)];
 /** @type {number} */ var $1809=$nfunc;
 /** @type {number} */ var $1810=$1808;
 /** @type {number} */ var $1811=$1809;
 /** @type {number} */ var $1812=((($1810)-($1811))|0);
 /** @type {number} */ var $1813=(((($1812|0))/(16))&-1);
 /** @type {number} */ var $1814=(($1803+($1813<<4))|0);
 /** @type {number} */ var $1815=$oci;
 /** @type {number} */ var $1816=(($1815+24)|0);
 /** @type {number} */ var $1817=$1816;
 /** @type {number} */ var $1818=(($1817)|0);
 HEAP32[(($1818)>>2)]=$1814;
 /** @type {number} */ var $1819=$ofunc;
 /** @type {number} */ var $1820=$1;
 /** @type {number} */ var $1821=(($1820+8)|0);
 /** @type {number} */ var $1822=HEAP32[(($1821)>>2)];
 /** @type {number} */ var $1823=$nfunc;
 /** @type {number} */ var $1824=$1822;
 /** @type {number} */ var $1825=$1823;
 /** @type {number} */ var $1826=((($1824)-($1825))|0);
 /** @type {number} */ var $1827=(((($1826|0))/(16))&-1);
 /** @type {number} */ var $1828=(($1819+($1827<<4))|0);
 /** @type {number} */ var $1829=$1;
 /** @type {number} */ var $1830=(($1829+8)|0);
 HEAP32[(($1830)>>2)]=$1828;
 /** @type {number} */ var $1831=$oci;
 /** @type {number} */ var $1832=(($1831+4)|0);
 HEAP32[(($1832)>>2)]=$1828;
 /** @type {number} */ var $1833=$nci;
 /** @type {number} */ var $1834=(($1833+24)|0);
 /** @type {number} */ var $1835=$1834;
 /** @type {number} */ var $1836=(($1835+4)|0);
 /** @type {number} */ var $1837=HEAP32[(($1836)>>2)];
 /** @type {number} */ var $1838=$oci;
 /** @type {number} */ var $1839=(($1838+24)|0);
 /** @type {number} */ var $1840=$1839;
 /** @type {number} */ var $1841=(($1840+4)|0);
 HEAP32[(($1841)>>2)]=$1837;
 /** @type {number} */ var $1842=$oci;
 /** @type {number} */ var $1843=(($1842+18)|0);
 /** @type {number} */ var $1844=HEAP8[($1843)];
 /** @type {number} */ var $1845=($1844&255);
 /** @type {number} */ var $1846=$1845|64;
 /** @type {number} */ var $1847=(($1846)&255);
 HEAP8[($1843)]=$1847;
 /** @type {number} */ var $1848=$oci;
 /** @type {number} */ var $1849=$1;
 /** @type {number} */ var $1850=(($1849+16)|0);
 HEAP32[(($1850)>>2)]=$1848;
 $ci=$1848;
 label=2;break;
 case 222: 
 label=289;break;
 case 223: 
 /** @type {number} */ var $1853=$i;
 /** @type {number} */ var $1854=$1853>>>23;
 /** @type {number} */ var $1855=$1854&511;
 $b71=$1855;
 /** @type {number} */ var $1856=$b71;
 /** @type {number} */ var $1857=($1856|0)!=0;
 if($1857){label=224;break;}else{label=225;break;}
 case 224: 
 /** @type {number} */ var $1859=$ra;
 /** @type {number} */ var $1860=$b71;
 /** @type {number} */ var $1861=(($1859+($1860<<4))|0);
 /** @type {number} */ var $1862=((($1861)-(16))|0);
 /** @type {number} */ var $1863=$1;
 /** @type {number} */ var $1864=(($1863+8)|0);
 HEAP32[(($1864)>>2)]=$1862;
 label=225;break;
 case 225: 
 /** @type {number} */ var $1866=$cl;
 /** @type {number} */ var $1867=(($1866+12)|0);
 /** @type {number} */ var $1868=HEAP32[(($1867)>>2)];
 /** @type {number} */ var $1869=(($1868+56)|0);
 /** @type {number} */ var $1870=HEAP32[(($1869)>>2)];
 /** @type {number} */ var $1871=($1870|0)>0;
 if($1871){label=226;break;}else{label=227;break;}
 case 226: 
 /** @type {number} */ var $1873=$1;
 /** @type {number} */ var $1874=$base;
 _luaF_close($1873,$1874);
 label=227;break;
 case 227: 
 /** @type {number} */ var $1876=$1;
 /** @type {number} */ var $1877=$ra;
 /** @type {number} */ var $1878=_luaD_poscall($1876,$1877);
 $b71=$1878;
 /** @type {number} */ var $1879=$ci;
 /** @type {number} */ var $1880=(($1879+18)|0);
 /** @type {number} */ var $1881=HEAP8[($1880)];
 /** @type {number} */ var $1882=($1881&255);
 /** @type {number} */ var $1883=$1882&4;
 /** @type {number} */ var $1884=($1883|0)!=0;
 if($1884){label=229;break;}else{label=228;break;}
 case 228: 
 STACKTOP=sp;return;
 case 229: 
 /** @type {number} */ var $1887=$1;
 /** @type {number} */ var $1888=(($1887+16)|0);
 /** @type {number} */ var $1889=HEAP32[(($1888)>>2)];
 $ci=$1889;
 /** @type {number} */ var $1890=$b71;
 /** @type {number} */ var $1891=($1890|0)!=0;
 if($1891){label=230;break;}else{label=231;break;}
 case 230: 
 /** @type {number} */ var $1893=$ci;
 /** @type {number} */ var $1894=(($1893+4)|0);
 /** @type {number} */ var $1895=HEAP32[(($1894)>>2)];
 /** @type {number} */ var $1896=$1;
 /** @type {number} */ var $1897=(($1896+8)|0);
 HEAP32[(($1897)>>2)]=$1895;
 label=231;break;
 case 231: 
 label=2;break;
 case 232: 
 /** @type {number} */ var $1900=$ra;
 /** @type {number} */ var $1901=(($1900+32)|0);
 /** @type {number} */ var $1902=(($1901)|0);
 /** @type {number} */ var $1903=$1902;
 /** @type {number} */ var $1904=HEAPF64[(($1903)>>3)];
 $step=$1904;
 /** @type {number} */ var $1905=$ra;
 /** @type {number} */ var $1906=(($1905)|0);
 /** @type {number} */ var $1907=$1906;
 /** @type {number} */ var $1908=HEAPF64[(($1907)>>3)];
 /** @type {number} */ var $1909=$step;
 /** @type {number} */ var $1910=($1908)+($1909);
 $idx=$1910;
 /** @type {number} */ var $1911=$ra;
 /** @type {number} */ var $1912=(($1911+16)|0);
 /** @type {number} */ var $1913=(($1912)|0);
 /** @type {number} */ var $1914=$1913;
 /** @type {number} */ var $1915=HEAPF64[(($1914)>>3)];
 $limit=$1915;
 /** @type {number} */ var $1916=$step;
 /** @type {number} */ var $1917=0<$1916;
 if($1917){label=233;break;}else{label=234;break;}
 case 233: 
 /** @type {number} */ var $1919=$idx;
 /** @type {number} */ var $1920=$limit;
 /** @type {number} */ var $1921=$1919<=$1920;
 if($1921){label=235;break;}else{label=236;break;}
 case 234: 
 /** @type {number} */ var $1923=$limit;
 /** @type {number} */ var $1924=$idx;
 /** @type {number} */ var $1925=$1923<=$1924;
 if($1925){label=235;break;}else{label=236;break;}
 case 235: 
 /** @type {number} */ var $1927=$i;
 /** @type {number} */ var $1928=$1927>>>14;
 /** @type {number} */ var $1929=$1928&262143;
 /** @type {number} */ var $1930=((($1929)-(131071))|0);
 /** @type {number} */ var $1931=$ci;
 /** @type {number} */ var $1932=(($1931+24)|0);
 /** @type {number} */ var $1933=$1932;
 /** @type {number} */ var $1934=(($1933+4)|0);
 /** @type {number} */ var $1935=HEAP32[(($1934)>>2)];
 /** @type {number} */ var $1936=(($1935+($1930<<2))|0);
 HEAP32[(($1934)>>2)]=$1936;
 /** @type {number} */ var $1937=$ra;
 $io72=$1937;
 /** @type {number} */ var $1938=$idx;
 /** @type {number} */ var $1939=$io72;
 /** @type {number} */ var $1940=(($1939)|0);
 /** @type {number} */ var $1941=$1940;
 HEAPF64[(($1941)>>3)]=$1938;
 /** @type {number} */ var $1942=$io72;
 /** @type {number} */ var $1943=(($1942+8)|0);
 HEAP32[(($1943)>>2)]=3;
 /** @type {number} */ var $1944=$ra;
 /** @type {number} */ var $1945=(($1944+48)|0);
 $io73=$1945;
 /** @type {number} */ var $1946=$idx;
 /** @type {number} */ var $1947=$io73;
 /** @type {number} */ var $1948=(($1947)|0);
 /** @type {number} */ var $1949=$1948;
 HEAPF64[(($1949)>>3)]=$1946;
 /** @type {number} */ var $1950=$io73;
 /** @type {number} */ var $1951=(($1950+8)|0);
 HEAP32[(($1951)>>2)]=3;
 label=236;break;
 case 236: 
 label=289;break;
 case 237: 
 /** @type {number} */ var $1954=$ra;
 $init=$1954;
 /** @type {number} */ var $1955=$ra;
 /** @type {number} */ var $1956=(($1955+16)|0);
 $plimit=$1956;
 /** @type {number} */ var $1957=$ra;
 /** @type {number} */ var $1958=(($1957+32)|0);
 $pstep=$1958;
 /** @type {number} */ var $1959=$init;
 /** @type {number} */ var $1960=(($1959+8)|0);
 /** @type {number} */ var $1961=HEAP32[(($1960)>>2)];
 /** @type {number} */ var $1962=($1961|0)==3;
 if($1962){label=240;break;}else{label=238;break;}
 case 238: 
 /** @type {number} */ var $1964=$init;
 /** @type {number} */ var $1965=$ra;
 /** @type {number} */ var $1966=_luaV_tonumber($1964,$1965);
 $init=$1966;
 /** @type {number} */ var $1967=($1966|0)!=0;
 if($1967){label=240;break;}else{label=239;break;}
 case 239: 
 /** @type {number} */ var $1969=$1;
 _luaG_runerror($1969,3808,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 case 240: 
 /** @type {number} */ var $1971=$plimit;
 /** @type {number} */ var $1972=(($1971+8)|0);
 /** @type {number} */ var $1973=HEAP32[(($1972)>>2)];
 /** @type {number} */ var $1974=($1973|0)==3;
 if($1974){label=243;break;}else{label=241;break;}
 case 241: 
 /** @type {number} */ var $1976=$plimit;
 /** @type {number} */ var $1977=$ra;
 /** @type {number} */ var $1978=(($1977+16)|0);
 /** @type {number} */ var $1979=_luaV_tonumber($1976,$1978);
 $plimit=$1979;
 /** @type {number} */ var $1980=($1979|0)!=0;
 if($1980){label=243;break;}else{label=242;break;}
 case 242: 
 /** @type {number} */ var $1982=$1;
 _luaG_runerror($1982,3408,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 case 243: 
 /** @type {number} */ var $1984=$pstep;
 /** @type {number} */ var $1985=(($1984+8)|0);
 /** @type {number} */ var $1986=HEAP32[(($1985)>>2)];
 /** @type {number} */ var $1987=($1986|0)==3;
 if($1987){label=246;break;}else{label=244;break;}
 case 244: 
 /** @type {number} */ var $1989=$pstep;
 /** @type {number} */ var $1990=$ra;
 /** @type {number} */ var $1991=(($1990+32)|0);
 /** @type {number} */ var $1992=_luaV_tonumber($1989,$1991);
 $pstep=$1992;
 /** @type {number} */ var $1993=($1992|0)!=0;
 if($1993){label=246;break;}else{label=245;break;}
 case 245: 
 /** @type {number} */ var $1995=$1;
 _luaG_runerror($1995,3032,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 case 246: 
 label=247;break;
 case 247: 
 label=248;break;
 case 248: 
 /** @type {number} */ var $1999=$ra;
 $io74=$1999;
 /** @type {number} */ var $2000=$ra;
 /** @type {number} */ var $2001=(($2000)|0);
 /** @type {number} */ var $2002=$2001;
 /** @type {number} */ var $2003=HEAPF64[(($2002)>>3)];
 /** @type {number} */ var $2004=$pstep;
 /** @type {number} */ var $2005=(($2004)|0);
 /** @type {number} */ var $2006=$2005;
 /** @type {number} */ var $2007=HEAPF64[(($2006)>>3)];
 /** @type {number} */ var $2008=($2003)-($2007);
 /** @type {number} */ var $2009=$io74;
 /** @type {number} */ var $2010=(($2009)|0);
 /** @type {number} */ var $2011=$2010;
 HEAPF64[(($2011)>>3)]=$2008;
 /** @type {number} */ var $2012=$io74;
 /** @type {number} */ var $2013=(($2012+8)|0);
 HEAP32[(($2013)>>2)]=3;
 /** @type {number} */ var $2014=$i;
 /** @type {number} */ var $2015=$2014>>>14;
 /** @type {number} */ var $2016=$2015&262143;
 /** @type {number} */ var $2017=((($2016)-(131071))|0);
 /** @type {number} */ var $2018=$ci;
 /** @type {number} */ var $2019=(($2018+24)|0);
 /** @type {number} */ var $2020=$2019;
 /** @type {number} */ var $2021=(($2020+4)|0);
 /** @type {number} */ var $2022=HEAP32[(($2021)>>2)];
 /** @type {number} */ var $2023=(($2022+($2017<<2))|0);
 HEAP32[(($2021)>>2)]=$2023;
 label=289;break;
 case 249: 
 /** @type {number} */ var $2025=$ra;
 /** @type {number} */ var $2026=(($2025+48)|0);
 $cb=$2026;
 /** @type {number} */ var $2027=$ra;
 /** @type {number} */ var $2028=(($2027+32)|0);
 $io275=$2028;
 /** @type {number} */ var $2029=$cb;
 /** @type {number} */ var $2030=(($2029+32)|0);
 $io176=$2030;
 /** @type {number} */ var $2031=$io176;
 /** @type {number} */ var $2032=(($2031)|0);
 /** @type {number} */ var $2033=$io275;
 /** @type {number} */ var $2034=(($2033)|0);
 /** @type {number} */ var $2035=$2032;
 /** @type {number} */ var $2036=$2034;
 HEAP32[(($2035)>>2)]=HEAP32[(($2036)>>2)];HEAP32[((($2035)+(4))>>2)]=HEAP32[((($2036)+(4))>>2)];
 /** @type {number} */ var $2037=$io275;
 /** @type {number} */ var $2038=(($2037+8)|0);
 /** @type {number} */ var $2039=HEAP32[(($2038)>>2)];
 /** @type {number} */ var $2040=$io176;
 /** @type {number} */ var $2041=(($2040+8)|0);
 HEAP32[(($2041)>>2)]=$2039;
 /** @type {number} */ var $2042=$ra;
 /** @type {number} */ var $2043=(($2042+16)|0);
 $io277=$2043;
 /** @type {number} */ var $2044=$cb;
 /** @type {number} */ var $2045=(($2044+16)|0);
 $io178=$2045;
 /** @type {number} */ var $2046=$io178;
 /** @type {number} */ var $2047=(($2046)|0);
 /** @type {number} */ var $2048=$io277;
 /** @type {number} */ var $2049=(($2048)|0);
 /** @type {number} */ var $2050=$2047;
 /** @type {number} */ var $2051=$2049;
 HEAP32[(($2050)>>2)]=HEAP32[(($2051)>>2)];HEAP32[((($2050)+(4))>>2)]=HEAP32[((($2051)+(4))>>2)];
 /** @type {number} */ var $2052=$io277;
 /** @type {number} */ var $2053=(($2052+8)|0);
 /** @type {number} */ var $2054=HEAP32[(($2053)>>2)];
 /** @type {number} */ var $2055=$io178;
 /** @type {number} */ var $2056=(($2055+8)|0);
 HEAP32[(($2056)>>2)]=$2054;
 /** @type {number} */ var $2057=$ra;
 $io279=$2057;
 /** @type {number} */ var $2058=$cb;
 $io180=$2058;
 /** @type {number} */ var $2059=$io180;
 /** @type {number} */ var $2060=(($2059)|0);
 /** @type {number} */ var $2061=$io279;
 /** @type {number} */ var $2062=(($2061)|0);
 /** @type {number} */ var $2063=$2060;
 /** @type {number} */ var $2064=$2062;
 HEAP32[(($2063)>>2)]=HEAP32[(($2064)>>2)];HEAP32[((($2063)+(4))>>2)]=HEAP32[((($2064)+(4))>>2)];
 /** @type {number} */ var $2065=$io279;
 /** @type {number} */ var $2066=(($2065+8)|0);
 /** @type {number} */ var $2067=HEAP32[(($2066)>>2)];
 /** @type {number} */ var $2068=$io180;
 /** @type {number} */ var $2069=(($2068+8)|0);
 HEAP32[(($2069)>>2)]=$2067;
 /** @type {number} */ var $2070=$cb;
 /** @type {number} */ var $2071=(($2070+48)|0);
 /** @type {number} */ var $2072=$1;
 /** @type {number} */ var $2073=(($2072+8)|0);
 HEAP32[(($2073)>>2)]=$2071;
 /** @type {number} */ var $2074=$1;
 /** @type {number} */ var $2075=$cb;
 /** @type {number} */ var $2076=$i;
 /** @type {number} */ var $2077=$2076>>>14;
 /** @type {number} */ var $2078=$2077&511;
 _luaD_call($2074,$2075,$2078,1);
 /** @type {number} */ var $2079=$ci;
 /** @type {number} */ var $2080=(($2079+24)|0);
 /** @type {number} */ var $2081=$2080;
 /** @type {number} */ var $2082=(($2081)|0);
 /** @type {number} */ var $2083=HEAP32[(($2082)>>2)];
 $base=$2083;
 /** @type {number} */ var $2084=$ci;
 /** @type {number} */ var $2085=(($2084+4)|0);
 /** @type {number} */ var $2086=HEAP32[(($2085)>>2)];
 /** @type {number} */ var $2087=$1;
 /** @type {number} */ var $2088=(($2087+8)|0);
 HEAP32[(($2088)>>2)]=$2086;
 /** @type {number} */ var $2089=$ci;
 /** @type {number} */ var $2090=(($2089+24)|0);
 /** @type {number} */ var $2091=$2090;
 /** @type {number} */ var $2092=(($2091+4)|0);
 /** @type {number} */ var $2093=HEAP32[(($2092)>>2)];
 /** @type {number} */ var $2094=(($2093+4)|0);
 HEAP32[(($2092)>>2)]=$2094;
 /** @type {number} */ var $2095=HEAP32[(($2093)>>2)];
 $i=$2095;
 /** @type {number} */ var $2096=$base;
 /** @type {number} */ var $2097=$i;
 /** @type {number} */ var $2098=$2097>>>6;
 /** @type {number} */ var $2099=$2098&255;
 /** @type {number} */ var $2100=(($2096+($2099<<4))|0);
 $ra=$2100;
 label=251;break;
 case 250: 
 label=251;break;
 case 251: 
 /** @type {number} */ var $2103=$ra;
 /** @type {number} */ var $2104=(($2103+16)|0);
 /** @type {number} */ var $2105=(($2104+8)|0);
 /** @type {number} */ var $2106=HEAP32[(($2105)>>2)];
 /** @type {number} */ var $2107=($2106|0)==0;
 if($2107){label=253;break;}else{label=252;break;}
 case 252: 
 /** @type {number} */ var $2109=$ra;
 /** @type {number} */ var $2110=(($2109+16)|0);
 $io281=$2110;
 /** @type {number} */ var $2111=$ra;
 $io182=$2111;
 /** @type {number} */ var $2112=$io182;
 /** @type {number} */ var $2113=(($2112)|0);
 /** @type {number} */ var $2114=$io281;
 /** @type {number} */ var $2115=(($2114)|0);
 /** @type {number} */ var $2116=$2113;
 /** @type {number} */ var $2117=$2115;
 HEAP32[(($2116)>>2)]=HEAP32[(($2117)>>2)];HEAP32[((($2116)+(4))>>2)]=HEAP32[((($2117)+(4))>>2)];
 /** @type {number} */ var $2118=$io281;
 /** @type {number} */ var $2119=(($2118+8)|0);
 /** @type {number} */ var $2120=HEAP32[(($2119)>>2)];
 /** @type {number} */ var $2121=$io182;
 /** @type {number} */ var $2122=(($2121+8)|0);
 HEAP32[(($2122)>>2)]=$2120;
 /** @type {number} */ var $2123=$i;
 /** @type {number} */ var $2124=$2123>>>14;
 /** @type {number} */ var $2125=$2124&262143;
 /** @type {number} */ var $2126=((($2125)-(131071))|0);
 /** @type {number} */ var $2127=$ci;
 /** @type {number} */ var $2128=(($2127+24)|0);
 /** @type {number} */ var $2129=$2128;
 /** @type {number} */ var $2130=(($2129+4)|0);
 /** @type {number} */ var $2131=HEAP32[(($2130)>>2)];
 /** @type {number} */ var $2132=(($2131+($2126<<2))|0);
 HEAP32[(($2130)>>2)]=$2132;
 label=253;break;
 case 253: 
 label=289;break;
 case 254: 
 /** @type {number} */ var $2135=$i;
 /** @type {number} */ var $2136=$2135>>>23;
 /** @type {number} */ var $2137=$2136&511;
 $n=$2137;
 /** @type {number} */ var $2138=$i;
 /** @type {number} */ var $2139=$2138>>>14;
 /** @type {number} */ var $2140=$2139&511;
 $c83=$2140;
 /** @type {number} */ var $2141=$n;
 /** @type {number} */ var $2142=($2141|0)==0;
 if($2142){label=255;break;}else{label=256;break;}
 case 255: 
 /** @type {number} */ var $2144=$1;
 /** @type {number} */ var $2145=(($2144+8)|0);
 /** @type {number} */ var $2146=HEAP32[(($2145)>>2)];
 /** @type {number} */ var $2147=$ra;
 /** @type {number} */ var $2148=$2146;
 /** @type {number} */ var $2149=$2147;
 /** @type {number} */ var $2150=((($2148)-($2149))|0);
 /** @type {number} */ var $2151=(((($2150|0))/(16))&-1);
 /** @type {number} */ var $2152=((($2151)-(1))|0);
 $n=$2152;
 label=256;break;
 case 256: 
 /** @type {number} */ var $2154=$c83;
 /** @type {number} */ var $2155=($2154|0)==0;
 if($2155){label=257;break;}else{label=258;break;}
 case 257: 
 /** @type {number} */ var $2157=$ci;
 /** @type {number} */ var $2158=(($2157+24)|0);
 /** @type {number} */ var $2159=$2158;
 /** @type {number} */ var $2160=(($2159+4)|0);
 /** @type {number} */ var $2161=HEAP32[(($2160)>>2)];
 /** @type {number} */ var $2162=(($2161+4)|0);
 HEAP32[(($2160)>>2)]=$2162;
 /** @type {number} */ var $2163=HEAP32[(($2161)>>2)];
 /** @type {number} */ var $2164=$2163>>>6;
 /** @type {number} */ var $2165=$2164&67108863;
 $c83=$2165;
 label=258;break;
 case 258: 
 /** @type {number} */ var $2167=$ra;
 /** @type {number} */ var $2168=(($2167)|0);
 /** @type {number} */ var $2169=$2168;
 /** @type {number} */ var $2170=HEAP32[(($2169)>>2)];
 /** @type {number} */ var $2171=$2170;
 $h=$2171;
 /** @type {number} */ var $2172=$c83;
 /** @type {number} */ var $2173=((($2172)-(1))|0);
 /** @type {number} */ var $2174=((($2173)*(50))&-1);
 /** @type {number} */ var $2175=$n;
 /** @type {number} */ var $2176=((($2174)+($2175))|0);
 $last=$2176;
 /** @type {number} */ var $2177=$last;
 /** @type {number} */ var $2178=$h;
 /** @type {number} */ var $2179=(($2178+28)|0);
 /** @type {number} */ var $2180=HEAP32[(($2179)>>2)];
 /** @type {number} */ var $2181=($2177|0)>($2180|0);
 if($2181){label=259;break;}else{label=260;break;}
 case 259: 
 /** @type {number} */ var $2183=$1;
 /** @type {number} */ var $2184=$h;
 /** @type {number} */ var $2185=$last;
 _luaH_resizearray($2183,$2184,$2185);
 label=260;break;
 case 260: 
 label=261;break;
 case 261: 
 /** @type {number} */ var $2188=$n;
 /** @type {number} */ var $2189=($2188|0)>0;
 if($2189){label=262;break;}else{label=268;break;}
 case 262: 
 /** @type {number} */ var $2191=$ra;
 /** @type {number} */ var $2192=$n;
 /** @type {number} */ var $2193=(($2191+($2192<<4))|0);
 $val=$2193;
 /** @type {number} */ var $2194=$1;
 /** @type {number} */ var $2195=$h;
 /** @type {number} */ var $2196=$last;
 /** @type {number} */ var $2197=((($2196)-(1))|0);
 $last=$2197;
 /** @type {number} */ var $2198=$val;
 _luaH_setint($2194,$2195,$2196,$2198);
 /** @type {number} */ var $2199=$val;
 /** @type {number} */ var $2200=(($2199+8)|0);
 /** @type {number} */ var $2201=HEAP32[(($2200)>>2)];
 /** @type {number} */ var $2202=$2201&64;
 /** @type {number} */ var $2203=($2202|0)!=0;
 if($2203){label=263;break;}else{label=266;break;}
 case 263: 
 /** @type {number} */ var $2205=$val;
 /** @type {number} */ var $2206=(($2205)|0);
 /** @type {number} */ var $2207=$2206;
 /** @type {number} */ var $2208=HEAP32[(($2207)>>2)];
 /** @type {number} */ var $2209=$2208;
 /** @type {number} */ var $2210=(($2209+5)|0);
 /** @type {number} */ var $2211=HEAP8[($2210)];
 /** @type {number} */ var $2212=($2211&255);
 /** @type {number} */ var $2213=$2212&3;
 /** @type {number} */ var $2214=($2213|0)!=0;
 if($2214){label=264;break;}else{label=266;break;}
 case 264: 
 /** @type {number} */ var $2216=$h;
 /** @type {number} */ var $2217=$2216;
 /** @type {number} */ var $2218=$2217;
 /** @type {number} */ var $2219=(($2218+5)|0);
 /** @type {number} */ var $2220=HEAP8[($2219)];
 /** @type {number} */ var $2221=($2220&255);
 /** @type {number} */ var $2222=$2221&4;
 /** @type {number} */ var $2223=($2222|0)!=0;
 if($2223){label=265;break;}else{label=266;break;}
 case 265: 
 /** @type {number} */ var $2225=$1;
 /** @type {number} */ var $2226=$h;
 /** @type {number} */ var $2227=$2226;
 _luaC_barrierback_($2225,$2227);
 label=266;break;
 case 266: 
 label=267;break;
 case 267: 
 /** @type {number} */ var $2230=$n;
 /** @type {number} */ var $2231=((($2230)-(1))|0);
 $n=$2231;
 label=261;break;
 case 268: 
 /** @type {number} */ var $2233=$ci;
 /** @type {number} */ var $2234=(($2233+4)|0);
 /** @type {number} */ var $2235=HEAP32[(($2234)>>2)];
 /** @type {number} */ var $2236=$1;
 /** @type {number} */ var $2237=(($2236+8)|0);
 HEAP32[(($2237)>>2)]=$2235;
 label=289;break;
 case 269: 
 /** @type {number} */ var $2239=$i;
 /** @type {number} */ var $2240=$2239>>>14;
 /** @type {number} */ var $2241=$2240&262143;
 /** @type {number} */ var $2242=$cl;
 /** @type {number} */ var $2243=(($2242+12)|0);
 /** @type {number} */ var $2244=HEAP32[(($2243)>>2)];
 /** @type {number} */ var $2245=(($2244+16)|0);
 /** @type {number} */ var $2246=HEAP32[(($2245)>>2)];
 /** @type {number} */ var $2247=(($2246+($2241<<2))|0);
 /** @type {number} */ var $2248=HEAP32[(($2247)>>2)];
 $p=$2248;
 /** @type {number} */ var $2249=$p;
 /** @type {number} */ var $2250=$cl;
 /** @type {number} */ var $2251=(($2250+16)|0);
 /** @type {number} */ var $2252=(($2251)|0);
 /** @type {number} */ var $2253=$base;
 /** @type {number} */ var $2254=_getcached($2249,$2252,$2253);
 $ncl=$2254;
 /** @type {number} */ var $2255=$ncl;
 /** @type {number} */ var $2256=($2255|0)==0;
 if($2256){label=270;break;}else{label=271;break;}
 case 270: 
 /** @type {number} */ var $2258=$1;
 /** @type {number} */ var $2259=$p;
 /** @type {number} */ var $2260=$cl;
 /** @type {number} */ var $2261=(($2260+16)|0);
 /** @type {number} */ var $2262=(($2261)|0);
 /** @type {number} */ var $2263=$base;
 /** @type {number} */ var $2264=$ra;
 _pushclosure($2258,$2259,$2262,$2263,$2264);
 label=272;break;
 case 271: 
 /** @type {number} */ var $2266=$ra;
 $io84=$2266;
 /** @type {number} */ var $2267=$ncl;
 /** @type {number} */ var $2268=$2267;
 /** @type {number} */ var $2269=$io84;
 /** @type {number} */ var $2270=(($2269)|0);
 /** @type {number} */ var $2271=$2270;
 HEAP32[(($2271)>>2)]=$2268;
 /** @type {number} */ var $2272=$io84;
 /** @type {number} */ var $2273=(($2272+8)|0);
 HEAP32[(($2273)>>2)]=70;
 label=272;break;
 case 272: 
 /** @type {number} */ var $2275=$1;
 /** @type {number} */ var $2276=(($2275+12)|0);
 /** @type {number} */ var $2277=HEAP32[(($2276)>>2)];
 /** @type {number} */ var $2278=(($2277+12)|0);
 /** @type {number} */ var $2279=HEAP32[(($2278)>>2)];
 /** @type {number} */ var $2280=($2279|0)>0;
 if($2280){label=273;break;}else{label=274;break;}
 case 273: 
 /** @type {number} */ var $2282=$ra;
 /** @type {number} */ var $2283=(($2282+16)|0);
 /** @type {number} */ var $2284=$1;
 /** @type {number} */ var $2285=(($2284+8)|0);
 HEAP32[(($2285)>>2)]=$2283;
 /** @type {number} */ var $2286=$1;
 _luaC_step($2286);
 /** @type {number} */ var $2287=$ci;
 /** @type {number} */ var $2288=(($2287+4)|0);
 /** @type {number} */ var $2289=HEAP32[(($2288)>>2)];
 /** @type {number} */ var $2290=$1;
 /** @type {number} */ var $2291=(($2290+8)|0);
 HEAP32[(($2291)>>2)]=$2289;
 label=274;break;
 case 274: 
 /** @type {number} */ var $2293=$ci;
 /** @type {number} */ var $2294=(($2293+24)|0);
 /** @type {number} */ var $2295=$2294;
 /** @type {number} */ var $2296=(($2295)|0);
 /** @type {number} */ var $2297=HEAP32[(($2296)>>2)];
 $base=$2297;
 label=289;break;
 case 275: 
 /** @type {number} */ var $2299=$i;
 /** @type {number} */ var $2300=$2299>>>23;
 /** @type {number} */ var $2301=$2300&511;
 /** @type {number} */ var $2302=((($2301)-(1))|0);
 $b85=$2302;
 /** @type {number} */ var $2303=$base;
 /** @type {number} */ var $2304=$ci;
 /** @type {number} */ var $2305=(($2304)|0);
 /** @type {number} */ var $2306=HEAP32[(($2305)>>2)];
 /** @type {number} */ var $2307=$2303;
 /** @type {number} */ var $2308=$2306;
 /** @type {number} */ var $2309=((($2307)-($2308))|0);
 /** @type {number} */ var $2310=(((($2309|0))/(16))&-1);
 /** @type {number} */ var $2311=$cl;
 /** @type {number} */ var $2312=(($2311+12)|0);
 /** @type {number} */ var $2313=HEAP32[(($2312)>>2)];
 /** @type {number} */ var $2314=(($2313+76)|0);
 /** @type {number} */ var $2315=HEAP8[($2314)];
 /** @type {number} */ var $2316=($2315&255);
 /** @type {number} */ var $2317=((($2310)-($2316))|0);
 /** @type {number} */ var $2318=((($2317)-(1))|0);
 $n86=$2318;
 /** @type {number} */ var $2319=$b85;
 /** @type {number} */ var $2320=($2319|0)<0;
 if($2320){label=276;break;}else{label=280;break;}
 case 276: 
 /** @type {number} */ var $2322=$n86;
 $b85=$2322;
 /** @type {number} */ var $2323=$1;
 /** @type {number} */ var $2324=(($2323+24)|0);
 /** @type {number} */ var $2325=HEAP32[(($2324)>>2)];
 /** @type {number} */ var $2326=$1;
 /** @type {number} */ var $2327=(($2326+8)|0);
 /** @type {number} */ var $2328=HEAP32[(($2327)>>2)];
 /** @type {number} */ var $2329=$2325;
 /** @type {number} */ var $2330=$2328;
 /** @type {number} */ var $2331=((($2329)-($2330))|0);
 /** @type {number} */ var $2332=(((($2331|0))/(16))&-1);
 /** @type {number} */ var $2333=$n86;
 /** @type {number} */ var $2334=($2332|0)<=($2333|0);
 if($2334){label=277;break;}else{label=278;break;}
 case 277: 
 /** @type {number} */ var $2336=$1;
 /** @type {number} */ var $2337=$n86;
 _luaD_growstack($2336,$2337);
 label=279;break;
 case 278: 
 label=279;break;
 case 279: 
 /** @type {number} */ var $2340=$ci;
 /** @type {number} */ var $2341=(($2340+24)|0);
 /** @type {number} */ var $2342=$2341;
 /** @type {number} */ var $2343=(($2342)|0);
 /** @type {number} */ var $2344=HEAP32[(($2343)>>2)];
 $base=$2344;
 /** @type {number} */ var $2345=$base;
 /** @type {number} */ var $2346=$i;
 /** @type {number} */ var $2347=$2346>>>6;
 /** @type {number} */ var $2348=$2347&255;
 /** @type {number} */ var $2349=(($2345+($2348<<4))|0);
 $ra=$2349;
 /** @type {number} */ var $2350=$ra;
 /** @type {number} */ var $2351=$n86;
 /** @type {number} */ var $2352=(($2350+($2351<<4))|0);
 /** @type {number} */ var $2353=$1;
 /** @type {number} */ var $2354=(($2353+8)|0);
 HEAP32[(($2354)>>2)]=$2352;
 label=280;break;
 case 280: 
 $j=0;
 label=281;break;
 case 281: 
 /** @type {number} */ var $2357=$j;
 /** @type {number} */ var $2358=$b85;
 /** @type {number} */ var $2359=($2357|0)<($2358|0);
 if($2359){label=282;break;}else{label=287;break;}
 case 282: 
 /** @type {number} */ var $2361=$j;
 /** @type {number} */ var $2362=$n86;
 /** @type {number} */ var $2363=($2361|0)<($2362|0);
 if($2363){label=283;break;}else{label=284;break;}
 case 283: 
 /** @type {number} */ var $2365=$base;
 /** @type {number} */ var $2366=$n86;
 /** @type {number} */ var $2367=(((-$2366))|0);
 /** @type {number} */ var $2368=(($2365+($2367<<4))|0);
 /** @type {number} */ var $2369=$j;
 /** @type {number} */ var $2370=(($2368+($2369<<4))|0);
 $io287=$2370;
 /** @type {number} */ var $2371=$ra;
 /** @type {number} */ var $2372=$j;
 /** @type {number} */ var $2373=(($2371+($2372<<4))|0);
 $io188=$2373;
 /** @type {number} */ var $2374=$io188;
 /** @type {number} */ var $2375=(($2374)|0);
 /** @type {number} */ var $2376=$io287;
 /** @type {number} */ var $2377=(($2376)|0);
 /** @type {number} */ var $2378=$2375;
 /** @type {number} */ var $2379=$2377;
 HEAP32[(($2378)>>2)]=HEAP32[(($2379)>>2)];HEAP32[((($2378)+(4))>>2)]=HEAP32[((($2379)+(4))>>2)];
 /** @type {number} */ var $2380=$io287;
 /** @type {number} */ var $2381=(($2380+8)|0);
 /** @type {number} */ var $2382=HEAP32[(($2381)>>2)];
 /** @type {number} */ var $2383=$io188;
 /** @type {number} */ var $2384=(($2383+8)|0);
 HEAP32[(($2384)>>2)]=$2382;
 label=285;break;
 case 284: 
 /** @type {number} */ var $2386=$ra;
 /** @type {number} */ var $2387=$j;
 /** @type {number} */ var $2388=(($2386+($2387<<4))|0);
 /** @type {number} */ var $2389=(($2388+8)|0);
 HEAP32[(($2389)>>2)]=0;
 label=285;break;
 case 285: 
 label=286;break;
 case 286: 
 /** @type {number} */ var $2392=$j;
 /** @type {number} */ var $2393=((($2392)+(1))|0);
 $j=$2393;
 label=281;break;
 case 287: 
 label=289;break;
 case 288: 
 label=289;break;
 case 289: 
 label=3;break;
 }
}
/**
 * @param {number} $L
 * @param {number} $f
 * @param {number} $p1
 * @param {number} $p2
 * @param {number} $p3
 * @param {number} $hasres
 * @return {number}
 */
function _callTM($L,$f,$p1,$p2,$p3,$hasres){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 /** @type {number} */ var $6;
 /** @type {number} */ var $result;
 /** @type {number} */ var $io2;
 /** @type {number} */ var $io1;
 /** @type {number} */ var $io21;
 /** @type {number} */ var $io12;
 /** @type {number} */ var $io23;
 /** @type {number} */ var $io14;
 /** @type {number} */ var $io25;
 /** @type {number} */ var $io16;
 /** @type {number} */ var $io27;
 /** @type {number} */ var $io18;
 $1=$L;
 $2=$f;
 $3=$p1;
 $4=$p2;
 $5=$p3;
 $6=$hasres;
 /** @type {number} */ var $7=$5;
 /** @type {number} */ var $8=$7;
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=(($9+28)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=$11;
 /** @type {number} */ var $13=$8;
 /** @type {number} */ var $14=$12;
 /** @type {number} */ var $15=((($13)-($14))|0);
 $result=$15;
 /** @type {number} */ var $16=$2;
 $io2=$16;
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=(($17+8)|0);
 /** @type {number} */ var $19=HEAP32[(($18)>>2)];
 /** @type {number} */ var $20=(($19+16)|0);
 HEAP32[(($18)>>2)]=$20;
 $io1=$19;
 /** @type {number} */ var $21=$io1;
 /** @type {number} */ var $22=(($21)|0);
 /** @type {number} */ var $23=$io2;
 /** @type {number} */ var $24=(($23)|0);
 /** @type {number} */ var $25=$22;
 /** @type {number} */ var $26=$24;
 HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];
 /** @type {number} */ var $27=$io2;
 /** @type {number} */ var $28=(($27+8)|0);
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 /** @type {number} */ var $30=$io1;
 /** @type {number} */ var $31=(($30+8)|0);
 HEAP32[(($31)>>2)]=$29;
 /** @type {number} */ var $32=$3;
 $io21=$32;
 /** @type {number} */ var $33=$1;
 /** @type {number} */ var $34=(($33+8)|0);
 /** @type {number} */ var $35=HEAP32[(($34)>>2)];
 /** @type {number} */ var $36=(($35+16)|0);
 HEAP32[(($34)>>2)]=$36;
 $io12=$35;
 /** @type {number} */ var $37=$io12;
 /** @type {number} */ var $38=(($37)|0);
 /** @type {number} */ var $39=$io21;
 /** @type {number} */ var $40=(($39)|0);
 /** @type {number} */ var $41=$38;
 /** @type {number} */ var $42=$40;
 HEAP32[(($41)>>2)]=HEAP32[(($42)>>2)];HEAP32[((($41)+(4))>>2)]=HEAP32[((($42)+(4))>>2)];
 /** @type {number} */ var $43=$io21;
 /** @type {number} */ var $44=(($43+8)|0);
 /** @type {number} */ var $45=HEAP32[(($44)>>2)];
 /** @type {number} */ var $46=$io12;
 /** @type {number} */ var $47=(($46+8)|0);
 HEAP32[(($47)>>2)]=$45;
 /** @type {number} */ var $48=$4;
 $io23=$48;
 /** @type {number} */ var $49=$1;
 /** @type {number} */ var $50=(($49+8)|0);
 /** @type {number} */ var $51=HEAP32[(($50)>>2)];
 /** @type {number} */ var $52=(($51+16)|0);
 HEAP32[(($50)>>2)]=$52;
 $io14=$51;
 /** @type {number} */ var $53=$io14;
 /** @type {number} */ var $54=(($53)|0);
 /** @type {number} */ var $55=$io23;
 /** @type {number} */ var $56=(($55)|0);
 /** @type {number} */ var $57=$54;
 /** @type {number} */ var $58=$56;
 HEAP32[(($57)>>2)]=HEAP32[(($58)>>2)];HEAP32[((($57)+(4))>>2)]=HEAP32[((($58)+(4))>>2)];
 /** @type {number} */ var $59=$io23;
 /** @type {number} */ var $60=(($59+8)|0);
 /** @type {number} */ var $61=HEAP32[(($60)>>2)];
 /** @type {number} */ var $62=$io14;
 /** @type {number} */ var $63=(($62+8)|0);
 HEAP32[(($63)>>2)]=$61;
 /** @type {number} */ var $64=$6;
 /** @type {number} */ var $65=($64|0)!=0;
 if($65){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $67=$5;
 $io25=$67;
 /** @type {number} */ var $68=$1;
 /** @type {number} */ var $69=(($68+8)|0);
 /** @type {number} */ var $70=HEAP32[(($69)>>2)];
 /** @type {number} */ var $71=(($70+16)|0);
 HEAP32[(($69)>>2)]=$71;
 $io16=$70;
 /** @type {number} */ var $72=$io16;
 /** @type {number} */ var $73=(($72)|0);
 /** @type {number} */ var $74=$io25;
 /** @type {number} */ var $75=(($74)|0);
 /** @type {number} */ var $76=$73;
 /** @type {number} */ var $77=$75;
 HEAP32[(($76)>>2)]=HEAP32[(($77)>>2)];HEAP32[((($76)+(4))>>2)]=HEAP32[((($77)+(4))>>2)];
 /** @type {number} */ var $78=$io25;
 /** @type {number} */ var $79=(($78+8)|0);
 /** @type {number} */ var $80=HEAP32[(($79)>>2)];
 /** @type {number} */ var $81=$io16;
 /** @type {number} */ var $82=(($81+8)|0);
 HEAP32[(($82)>>2)]=$80;
 label=3;break;
 case 3: 
 /** @type {number} */ var $84=$1;
 /** @type {number} */ var $85=(($84+24)|0);
 /** @type {number} */ var $86=HEAP32[(($85)>>2)];
 /** @type {number} */ var $87=$1;
 /** @type {number} */ var $88=(($87+8)|0);
 /** @type {number} */ var $89=HEAP32[(($88)>>2)];
 /** @type {number} */ var $90=$86;
 /** @type {number} */ var $91=$89;
 /** @type {number} */ var $92=((($90)-($91))|0);
 /** @type {number} */ var $93=(((($92|0))/(16))&-1);
 /** @type {number} */ var $94=($93|0)<=0;
 if($94){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $96=$1;
 _luaD_growstack($96,0);
 label=6;break;
 case 5: 
 label=6;break;
 case 6: 
 /** @type {number} */ var $99=$1;
 /** @type {number} */ var $100=$1;
 /** @type {number} */ var $101=(($100+8)|0);
 /** @type {number} */ var $102=HEAP32[(($101)>>2)];
 /** @type {number} */ var $103=$6;
 /** @type {number} */ var $104=(((4)-($103))|0);
 /** @type {number} */ var $105=(((-$104))|0);
 /** @type {number} */ var $106=(($102+($105<<4))|0);
 /** @type {number} */ var $107=$6;
 /** @type {number} */ var $108=$1;
 /** @type {number} */ var $109=(($108+16)|0);
 /** @type {number} */ var $110=HEAP32[(($109)>>2)];
 /** @type {number} */ var $111=(($110+18)|0);
 /** @type {number} */ var $112=HEAP8[($111)];
 /** @type {number} */ var $113=($112&255);
 /** @type {number} */ var $114=$113&1;
 _luaD_call($99,$106,$107,$114);
 /** @type {number} */ var $115=$6;
 /** @type {number} */ var $116=($115|0)!=0;
 if($116){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $118=$1;
 /** @type {number} */ var $119=(($118+28)|0);
 /** @type {number} */ var $120=HEAP32[(($119)>>2)];
 /** @type {number} */ var $121=$120;
 /** @type {number} */ var $122=$result;
 /** @type {number} */ var $123=(($121+$122)|0);
 /** @type {number} */ var $124=$123;
 $5=$124;
 /** @type {number} */ var $125=$1;
 /** @type {number} */ var $126=(($125+8)|0);
 /** @type {number} */ var $127=HEAP32[(($126)>>2)];
 /** @type {number} */ var $128=((($127)-(16))|0);
 HEAP32[(($126)>>2)]=$128;
 $io27=$128;
 /** @type {number} */ var $129=$5;
 $io18=$129;
 /** @type {number} */ var $130=$io18;
 /** @type {number} */ var $131=(($130)|0);
 /** @type {number} */ var $132=$io27;
 /** @type {number} */ var $133=(($132)|0);
 /** @type {number} */ var $134=$131;
 /** @type {number} */ var $135=$133;
 HEAP32[(($134)>>2)]=HEAP32[(($135)>>2)];HEAP32[((($134)+(4))>>2)]=HEAP32[((($135)+(4))>>2)];
 /** @type {number} */ var $136=$io27;
 /** @type {number} */ var $137=(($136+8)|0);
 /** @type {number} */ var $138=HEAP32[(($137)>>2)];
 /** @type {number} */ var $139=$io18;
 /** @type {number} */ var $140=(($139+8)|0);
 HEAP32[(($140)>>2)]=$138;
 label=8;break;
 case 8: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ls
 * @param {number} $rs
 * @return {number}
 */
function _l_strcmp($ls,$rs){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $l;
 /** @type {number} */ var $ll;
 /** @type {number} */ var $r;
 /** @type {number} */ var $lr;
 /** @type {number} */ var $temp;
 /** @type {number} */ var $len;
 $2=$ls;
 $3=$rs;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=(($4+16)|0);
 /** @type {number} */ var $6=$5;
 $l=$6;
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=$7;
 /** @type {number} */ var $9=(($8+12)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 $ll=$10;
 /** @type {number} */ var $11=$3;
 /** @type {number} */ var $12=(($11+16)|0);
 /** @type {number} */ var $13=$12;
 $r=$13;
 /** @type {number} */ var $14=$3;
 /** @type {number} */ var $15=$14;
 /** @type {number} */ var $16=(($15+12)|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 $lr=$17;
 label=2;break;
 case 2: 
 /** @type {number} */ var $19=$l;
 /** @type {number} */ var $20=$r;
 /** @type {number} */ var $21=_strcmp($19,$20);
 $temp=$21;
 /** @type {number} */ var $22=$temp;
 /** @type {number} */ var $23=($22|0)!=0;
 if($23){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $25=$temp;
 $1=$25;
 label=11;break;
 case 4: 
 /** @type {number} */ var $27=$l;
 /** @type {number} */ var $28=_strlen($27);
 $len=$28;
 /** @type {number} */ var $29=$len;
 /** @type {number} */ var $30=$lr;
 /** @type {number} */ var $31=($29|0)==($30|0);
 if($31){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $33=$len;
 /** @type {number} */ var $34=$ll;
 /** @type {number} */ var $35=($33|0)==($34|0);
 /** @type {number} */ var $36=($35?0:1);
 $1=$36;
 label=11;break;
 case 6: 
 /** @type {number} */ var $38=$len;
 /** @type {number} */ var $39=$ll;
 /** @type {number} */ var $40=($38|0)==($39|0);
 if($40){label=7;break;}else{label=8;break;}
 case 7: 
 $1=-1;
 label=11;break;
 case 8: 
 label=9;break;
 case 9: 
 /** @type {number} */ var $44=$len;
 /** @type {number} */ var $45=((($44)+(1))|0);
 $len=$45;
 /** @type {number} */ var $46=$len;
 /** @type {number} */ var $47=$l;
 /** @type {number} */ var $48=(($47+$46)|0);
 $l=$48;
 /** @type {number} */ var $49=$len;
 /** @type {number} */ var $50=$ll;
 /** @type {number} */ var $51=((($50)-($49))|0);
 $ll=$51;
 /** @type {number} */ var $52=$len;
 /** @type {number} */ var $53=$r;
 /** @type {number} */ var $54=(($53+$52)|0);
 $r=$54;
 /** @type {number} */ var $55=$len;
 /** @type {number} */ var $56=$lr;
 /** @type {number} */ var $57=((($56)-($55))|0);
 $lr=$57;
 label=10;break;
 case 10: 
 label=2;break;
 case 11: 
 /** @type {number} */ var $60=$1;
 STACKTOP=sp;return $60;
 }
}
/**
 * @param {number} $L
 * @param {number} $p1
 * @param {number} $p2
 * @param {number} $event
 * @return {number}
 */
function _call_orderTM($L,$p1,$p2,$event){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 $2=$L;
 $3=$p1;
 $4=$p2;
 $5=$event;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=$3;
 /** @type {number} */ var $8=$4;
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=(($9+8)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=$5;
 /** @type {number} */ var $13=_call_binTM($6,$7,$8,$11,$12);
 /** @type {number} */ var $14=($13|0)!=0;
 if($14){label=3;break;}else{label=2;break;}
 case 2: 
 $1=-1;
 label=8;break;
 case 3: 
 /** @type {number} */ var $17=$2;
 /** @type {number} */ var $18=(($17+8)|0);
 /** @type {number} */ var $19=HEAP32[(($18)>>2)];
 /** @type {number} */ var $20=(($19+8)|0);
 /** @type {number} */ var $21=HEAP32[(($20)>>2)];
 /** @type {number} */ var $22=($21|0)==0;
 if($22){var $41=1;label=7;break;}else{label=4;break;}
 case 4: 
 /** @type {number} */ var $24=$2;
 /** @type {number} */ var $25=(($24+8)|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 /** @type {number} */ var $27=(($26+8)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=($28|0)==1;
 if($29){label=5;break;}else{var $39=0;label=6;break;}
 case 5: 
 /** @type {number} */ var $31=$2;
 /** @type {number} */ var $32=(($31+8)|0);
 /** @type {number} */ var $33=HEAP32[(($32)>>2)];
 /** @type {number} */ var $34=(($33)|0);
 /** @type {number} */ var $35=$34;
 /** @type {number} */ var $36=HEAP32[(($35)>>2)];
 /** @type {number} */ var $37=($36|0)==0;
 var $39=$37;label=6;break;
 case 6: 
 var $39;
 var $41=$39;label=7;break;
 case 7: 
 var $41;
 /** @type {number} */ var $42=$41^1;
 /** @type {number} */ var $43=($42&1);
 $1=$43;
 label=8;break;
 case 8: 
 /** @type {number} */ var $45=$1;
 STACKTOP=sp;return $45;
 }
}
/**
 * @param {number} $L
 * @param {number} $mt1
 * @param {number} $mt2
 * @param {number} $event
 * @return {number}
 */
function _get_equalTM($L,$mt1,$mt2,$event){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 /** @type {number} */ var $tm1;
 /** @type {number} */ var $tm2;
 $2=$L;
 $3=$mt1;
 $4=$mt2;
 $5=$event;
 /** @type {number} */ var $6=$3;
 /** @type {number} */ var $7=($6|0)==0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $33=0;label=7;break;
 case 3: 
 /** @type {number} */ var $10=$3;
 /** @type {number} */ var $11=(($10+6)|0);
 /** @type {number} */ var $12=HEAP8[($11)];
 /** @type {number} */ var $13=($12&255);
 /** @type {number} */ var $14=$5;
 /** @type {number} */ var $15=1<<$14;
 /** @type {number} */ var $16=$13&$15;
 /** @type {number} */ var $17=($16|0)!=0;
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $31=0;label=6;break;
 case 5: 
 /** @type {number} */ var $20=$3;
 /** @type {number} */ var $21=$5;
 /** @type {number} */ var $22=$5;
 /** @type {number} */ var $23=$2;
 /** @type {number} */ var $24=(($23+12)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=(($25+184)|0);
 /** @type {number} */ var $27=(($26+($22<<2))|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=_luaT_gettm($20,$21,$28);
 var $31=$29;label=6;break;
 case 6: 
 var $31;
 var $33=$31;label=7;break;
 case 7: 
 var $33;
 $tm1=$33;
 /** @type {number} */ var $34=$tm1;
 /** @type {number} */ var $35=($34|0)==0;
 if($35){label=8;break;}else{label=9;break;}
 case 8: 
 $1=0;
 label=23;break;
 case 9: 
 /** @type {number} */ var $38=$3;
 /** @type {number} */ var $39=$4;
 /** @type {number} */ var $40=($38|0)==($39|0);
 if($40){label=10;break;}else{label=11;break;}
 case 10: 
 /** @type {number} */ var $42=$tm1;
 $1=$42;
 label=23;break;
 case 11: 
 /** @type {number} */ var $44=$4;
 /** @type {number} */ var $45=($44|0)==0;
 if($45){label=12;break;}else{label=13;break;}
 case 12: 
 var $71=0;label=17;break;
 case 13: 
 /** @type {number} */ var $48=$4;
 /** @type {number} */ var $49=(($48+6)|0);
 /** @type {number} */ var $50=HEAP8[($49)];
 /** @type {number} */ var $51=($50&255);
 /** @type {number} */ var $52=$5;
 /** @type {number} */ var $53=1<<$52;
 /** @type {number} */ var $54=$51&$53;
 /** @type {number} */ var $55=($54|0)!=0;
 if($55){label=14;break;}else{label=15;break;}
 case 14: 
 var $69=0;label=16;break;
 case 15: 
 /** @type {number} */ var $58=$4;
 /** @type {number} */ var $59=$5;
 /** @type {number} */ var $60=$5;
 /** @type {number} */ var $61=$2;
 /** @type {number} */ var $62=(($61+12)|0);
 /** @type {number} */ var $63=HEAP32[(($62)>>2)];
 /** @type {number} */ var $64=(($63+184)|0);
 /** @type {number} */ var $65=(($64+($60<<2))|0);
 /** @type {number} */ var $66=HEAP32[(($65)>>2)];
 /** @type {number} */ var $67=_luaT_gettm($58,$59,$66);
 var $69=$67;label=16;break;
 case 16: 
 var $69;
 var $71=$69;label=17;break;
 case 17: 
 var $71;
 $tm2=$71;
 /** @type {number} */ var $72=$tm2;
 /** @type {number} */ var $73=($72|0)==0;
 if($73){label=18;break;}else{label=19;break;}
 case 18: 
 $1=0;
 label=23;break;
 case 19: 
 /** @type {number} */ var $76=$tm1;
 /** @type {number} */ var $77=(($76+8)|0);
 /** @type {number} */ var $78=HEAP32[(($77)>>2)];
 /** @type {number} */ var $79=$tm2;
 /** @type {number} */ var $80=(($79+8)|0);
 /** @type {number} */ var $81=HEAP32[(($80)>>2)];
 /** @type {number} */ var $82=($78|0)==($81|0);
 if($82){label=20;break;}else{label=22;break;}
 case 20: 
 /** @type {number} */ var $84=$tm1;
 /** @type {number} */ var $85=$tm2;
 /** @type {number} */ var $86=_luaV_equalobj_(0,$84,$85);
 /** @type {number} */ var $87=($86|0)!=0;
 if($87){label=21;break;}else{label=22;break;}
 case 21: 
 /** @type {number} */ var $89=$tm1;
 $1=$89;
 label=23;break;
 case 22: 
 $1=0;
 label=23;break;
 case 23: 
 /** @type {number} */ var $92=$1;
 STACKTOP=sp;return $92;
 }
}
/**
 * @param {number} $L
 * @param {number} $p1
 * @param {number} $p2
 * @param {number} $res
 * @param {number} $event
 * @return {number}
 */
function _call_binTM($L,$p1,$p2,$res,$event){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 /** @type {number} */ var $6;
 /** @type {number} */ var $tm;
 $2=$L;
 $3=$p1;
 $4=$p2;
 $5=$res;
 $6=$event;
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=$3;
 /** @type {number} */ var $9=$6;
 /** @type {number} */ var $10=_luaT_gettmbyobj($7,$8,$9);
 $tm=$10;
 /** @type {number} */ var $11=$tm;
 /** @type {number} */ var $12=(($11+8)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=($13|0)==0;
 if($14){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=$4;
 /** @type {number} */ var $18=$6;
 /** @type {number} */ var $19=_luaT_gettmbyobj($16,$17,$18);
 $tm=$19;
 label=3;break;
 case 3: 
 /** @type {number} */ var $21=$tm;
 /** @type {number} */ var $22=(($21+8)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 /** @type {number} */ var $24=($23|0)==0;
 if($24){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=6;break;
 case 5: 
 /** @type {number} */ var $27=$2;
 /** @type {number} */ var $28=$tm;
 /** @type {number} */ var $29=$3;
 /** @type {number} */ var $30=$4;
 /** @type {number} */ var $31=$5;
 _callTM($27,$28,$29,$30,$31,1);
 $1=1;
 label=6;break;
 case 6: 
 /** @type {number} */ var $33=$1;
 STACKTOP=sp;return $33;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _traceexec($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $ci;
 /** @type {number} */ var $mask;
 /** @type {number} */ var $counthook;
 /** @type {number} */ var $p;
 /** @type {number} */ var $npc;
 /** @type {number} */ var $newline;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+16)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $ci=$4;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($5+40)|0);
 /** @type {number} */ var $7=HEAP8[($6)];
 $mask=$7;
 /** @type {number} */ var $8=$mask;
 /** @type {number} */ var $9=($8&255);
 /** @type {number} */ var $10=$9&8;
 /** @type {number} */ var $11=($10|0)!=0;
 if($11){label=2;break;}else{var $18=0;label=3;break;}
 case 2: 
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=(($13+48)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=($15|0)==0;
 var $18=$16;label=3;break;
 case 3: 
 var $18;
 /** @type {number} */ var $19=($18&1);
 $counthook=$19;
 /** @type {number} */ var $20=$counthook;
 /** @type {number} */ var $21=($20|0)!=0;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $23=$1;
 /** @type {number} */ var $24=(($23+44)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=$1;
 /** @type {number} */ var $27=(($26+48)|0);
 HEAP32[(($27)>>2)]=$25;
 label=5;break;
 case 5: 
 /** @type {number} */ var $29=$ci;
 /** @type {number} */ var $30=(($29+18)|0);
 /** @type {number} */ var $31=HEAP8[($30)];
 /** @type {number} */ var $32=($31&255);
 /** @type {number} */ var $33=$32&128;
 /** @type {number} */ var $34=($33|0)!=0;
 if($34){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $36=$ci;
 /** @type {number} */ var $37=(($36+18)|0);
 /** @type {number} */ var $38=HEAP8[($37)];
 /** @type {number} */ var $39=($38&255);
 /** @type {number} */ var $40=$39&-129;
 /** @type {number} */ var $41=(($40)&255);
 HEAP8[($37)]=$41;
 label=25;break;
 case 7: 
 /** @type {number} */ var $43=$counthook;
 /** @type {number} */ var $44=($43|0)!=0;
 if($44){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $46=$1;
 _luaD_hook($46,3,-1);
 label=9;break;
 case 9: 
 /** @type {number} */ var $48=$mask;
 /** @type {number} */ var $49=($48&255);
 /** @type {number} */ var $50=$49&4;
 /** @type {number} */ var $51=($50|0)!=0;
 if($51){label=10;break;}else{label=21;break;}
 case 10: 
 /** @type {number} */ var $53=$ci;
 /** @type {number} */ var $54=(($53)|0);
 /** @type {number} */ var $55=HEAP32[(($54)>>2)];
 /** @type {number} */ var $56=(($55)|0);
 /** @type {number} */ var $57=$56;
 /** @type {number} */ var $58=HEAP32[(($57)>>2)];
 /** @type {number} */ var $59=$58;
 /** @type {number} */ var $60=$59;
 /** @type {number} */ var $61=(($60+12)|0);
 /** @type {number} */ var $62=HEAP32[(($61)>>2)];
 $p=$62;
 /** @type {number} */ var $63=$ci;
 /** @type {number} */ var $64=(($63+24)|0);
 /** @type {number} */ var $65=$64;
 /** @type {number} */ var $66=(($65+4)|0);
 /** @type {number} */ var $67=HEAP32[(($66)>>2)];
 /** @type {number} */ var $68=$p;
 /** @type {number} */ var $69=(($68+12)|0);
 /** @type {number} */ var $70=HEAP32[(($69)>>2)];
 /** @type {number} */ var $71=$67;
 /** @type {number} */ var $72=$70;
 /** @type {number} */ var $73=((($71)-($72))|0);
 /** @type {number} */ var $74=(((($73|0))/(4))&-1);
 /** @type {number} */ var $75=((($74)-(1))|0);
 $npc=$75;
 /** @type {number} */ var $76=$p;
 /** @type {number} */ var $77=(($76+20)|0);
 /** @type {number} */ var $78=HEAP32[(($77)>>2)];
 /** @type {number} */ var $79=($78|0)!=0;
 if($79){label=11;break;}else{label=12;break;}
 case 11: 
 /** @type {number} */ var $81=$npc;
 /** @type {number} */ var $82=$p;
 /** @type {number} */ var $83=(($82+20)|0);
 /** @type {number} */ var $84=HEAP32[(($83)>>2)];
 /** @type {number} */ var $85=(($84+($81<<2))|0);
 /** @type {number} */ var $86=HEAP32[(($85)>>2)];
 var $89=$86;label=13;break;
 case 12: 
 var $89=0;label=13;break;
 case 13: 
 var $89;
 $newline=$89;
 /** @type {number} */ var $90=$npc;
 /** @type {number} */ var $91=($90|0)==0;
 if($91){label=19;break;}else{label=14;break;}
 case 14: 
 /** @type {number} */ var $93=$ci;
 /** @type {number} */ var $94=(($93+24)|0);
 /** @type {number} */ var $95=$94;
 /** @type {number} */ var $96=(($95+4)|0);
 /** @type {number} */ var $97=HEAP32[(($96)>>2)];
 /** @type {number} */ var $98=$1;
 /** @type {number} */ var $99=(($98+20)|0);
 /** @type {number} */ var $100=HEAP32[(($99)>>2)];
 /** @type {number} */ var $101=($97>>>0)<=($100>>>0);
 if($101){label=19;break;}else{label=15;break;}
 case 15: 
 /** @type {number} */ var $103=$newline;
 /** @type {number} */ var $104=$p;
 /** @type {number} */ var $105=(($104+20)|0);
 /** @type {number} */ var $106=HEAP32[(($105)>>2)];
 /** @type {number} */ var $107=($106|0)!=0;
 if($107){label=16;break;}else{label=17;break;}
 case 16: 
 /** @type {number} */ var $109=$1;
 /** @type {number} */ var $110=(($109+20)|0);
 /** @type {number} */ var $111=HEAP32[(($110)>>2)];
 /** @type {number} */ var $112=$p;
 /** @type {number} */ var $113=(($112+12)|0);
 /** @type {number} */ var $114=HEAP32[(($113)>>2)];
 /** @type {number} */ var $115=$111;
 /** @type {number} */ var $116=$114;
 /** @type {number} */ var $117=((($115)-($116))|0);
 /** @type {number} */ var $118=(((($117|0))/(4))&-1);
 /** @type {number} */ var $119=((($118)-(1))|0);
 /** @type {number} */ var $120=$p;
 /** @type {number} */ var $121=(($120+20)|0);
 /** @type {number} */ var $122=HEAP32[(($121)>>2)];
 /** @type {number} */ var $123=(($122+($119<<2))|0);
 /** @type {number} */ var $124=HEAP32[(($123)>>2)];
 var $127=$124;label=18;break;
 case 17: 
 var $127=0;label=18;break;
 case 18: 
 var $127;
 /** @type {number} */ var $128=($103|0)!=($127|0);
 if($128){label=19;break;}else{label=20;break;}
 case 19: 
 /** @type {number} */ var $130=$1;
 /** @type {number} */ var $131=$newline;
 _luaD_hook($130,2,$131);
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 /** @type {number} */ var $134=$ci;
 /** @type {number} */ var $135=(($134+24)|0);
 /** @type {number} */ var $136=$135;
 /** @type {number} */ var $137=(($136+4)|0);
 /** @type {number} */ var $138=HEAP32[(($137)>>2)];
 /** @type {number} */ var $139=$1;
 /** @type {number} */ var $140=(($139+20)|0);
 HEAP32[(($140)>>2)]=$138;
 /** @type {number} */ var $141=$1;
 /** @type {number} */ var $142=(($141+6)|0);
 /** @type {number} */ var $143=HEAP8[($142)];
 /** @type {number} */ var $144=($143&255);
 /** @type {number} */ var $145=($144|0)==1;
 if($145){label=22;break;}else{label=25;break;}
 case 22: 
 /** @type {number} */ var $147=$counthook;
 /** @type {number} */ var $148=($147|0)!=0;
 if($148){label=23;break;}else{label=24;break;}
 case 23: 
 /** @type {number} */ var $150=$1;
 /** @type {number} */ var $151=(($150+48)|0);
 HEAP32[(($151)>>2)]=1;
 label=24;break;
 case 24: 
 /** @type {number} */ var $153=$ci;
 /** @type {number} */ var $154=(($153+24)|0);
 /** @type {number} */ var $155=$154;
 /** @type {number} */ var $156=(($155+4)|0);
 /** @type {number} */ var $157=HEAP32[(($156)>>2)];
 /** @type {number} */ var $158=((($157)-(4))|0);
 HEAP32[(($156)>>2)]=$158;
 /** @type {number} */ var $159=$ci;
 /** @type {number} */ var $160=(($159+18)|0);
 /** @type {number} */ var $161=HEAP8[($160)];
 /** @type {number} */ var $162=($161&255);
 /** @type {number} */ var $163=$162|128;
 /** @type {number} */ var $164=(($163)&255);
 HEAP8[($160)]=$164;
 /** @type {number} */ var $165=$1;
 /** @type {number} */ var $166=(($165+8)|0);
 /** @type {number} */ var $167=HEAP32[(($166)>>2)];
 /** @type {number} */ var $168=((($167)-(16))|0);
 /** @type {number} */ var $169=$ci;
 /** @type {number} */ var $170=(($169)|0);
 HEAP32[(($170)>>2)]=$168;
 /** @type {number} */ var $171=$1;
 _luaD_throw($171,1);
 case 25: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $p
 * @param {number} $encup
 * @param {number} $base
 * @return {number}
 */
function _getcached($p,$encup,$base){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $c;
 /** @type {number} */ var $nup;
 /** @type {number} */ var $uv;
 /** @type {number} */ var $i;
 /** @type {number} */ var $v;
 $2=$p;
 $3=$encup;
 $4=$base;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=(($5+32)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 $c=$7;
 /** @type {number} */ var $8=$c;
 /** @type {number} */ var $9=($8|0)!=0;
 if($9){label=2;break;}else{label=12;break;}
 case 2: 
 /** @type {number} */ var $11=$2;
 /** @type {number} */ var $12=(($11+40)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 $nup=$13;
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=(($14+28)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 $uv=$16;
 $i=0;
 label=3;break;
 case 3: 
 /** @type {number} */ var $18=$i;
 /** @type {number} */ var $19=$nup;
 /** @type {number} */ var $20=($18|0)<($19|0);
 if($20){label=4;break;}else{label=11;break;}
 case 4: 
 /** @type {number} */ var $22=$i;
 /** @type {number} */ var $23=$uv;
 /** @type {number} */ var $24=(($23+($22<<3))|0);
 /** @type {number} */ var $25=(($24+4)|0);
 /** @type {number} */ var $26=HEAP8[($25)];
 /** @type {number} */ var $27=($26&255);
 /** @type {number} */ var $28=($27|0)!=0;
 if($28){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $30=$4;
 /** @type {number} */ var $31=$i;
 /** @type {number} */ var $32=$uv;
 /** @type {number} */ var $33=(($32+($31<<3))|0);
 /** @type {number} */ var $34=(($33+5)|0);
 /** @type {number} */ var $35=HEAP8[($34)];
 /** @type {number} */ var $36=($35&255);
 /** @type {number} */ var $37=(($30+($36<<4))|0);
 var $51=$37;label=7;break;
 case 6: 
 /** @type {number} */ var $39=$i;
 /** @type {number} */ var $40=$uv;
 /** @type {number} */ var $41=(($40+($39<<3))|0);
 /** @type {number} */ var $42=(($41+5)|0);
 /** @type {number} */ var $43=HEAP8[($42)];
 /** @type {number} */ var $44=($43&255);
 /** @type {number} */ var $45=$3;
 /** @type {number} */ var $46=(($45+($44<<2))|0);
 /** @type {number} */ var $47=HEAP32[(($46)>>2)];
 /** @type {number} */ var $48=(($47+8)|0);
 /** @type {number} */ var $49=HEAP32[(($48)>>2)];
 var $51=$49;label=7;break;
 case 7: 
 var $51;
 $v=$51;
 /** @type {number} */ var $52=$i;
 /** @type {number} */ var $53=$c;
 /** @type {number} */ var $54=$53;
 /** @type {number} */ var $55=(($54+16)|0);
 /** @type {number} */ var $56=(($55+($52<<2))|0);
 /** @type {number} */ var $57=HEAP32[(($56)>>2)];
 /** @type {number} */ var $58=(($57+8)|0);
 /** @type {number} */ var $59=HEAP32[(($58)>>2)];
 /** @type {number} */ var $60=$v;
 /** @type {number} */ var $61=($59|0)!=($60|0);
 if($61){label=8;break;}else{label=9;break;}
 case 8: 
 $1=0;
 label=13;break;
 case 9: 
 label=10;break;
 case 10: 
 /** @type {number} */ var $65=$i;
 /** @type {number} */ var $66=((($65)+(1))|0);
 $i=$66;
 label=3;break;
 case 11: 
 label=12;break;
 case 12: 
 /** @type {number} */ var $69=$c;
 $1=$69;
 label=13;break;
 case 13: 
 /** @type {number} */ var $71=$1;
 STACKTOP=sp;return $71;
 }
}
/**
 * @param {number} $L
 * @param {number} $p
 * @param {number} $encup
 * @param {number} $base
 * @param {number} $ra
 * @return {number}
 */
function _pushclosure($L,$p,$encup,$base,$ra){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 /** @type {number} */ var $nup;
 /** @type {number} */ var $uv;
 /** @type {number} */ var $i;
 /** @type {number} */ var $ncl;
 /** @type {number} */ var $io;
 $1=$L;
 $2=$p;
 $3=$encup;
 $4=$base;
 $5=$ra;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=(($6+40)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 $nup=$8;
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=(($9+28)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 $uv=$11;
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=$nup;
 /** @type {number} */ var $14=_luaF_newLclosure($12,$13);
 $ncl=$14;
 /** @type {number} */ var $15=$2;
 /** @type {number} */ var $16=$ncl;
 /** @type {number} */ var $17=$16;
 /** @type {number} */ var $18=(($17+12)|0);
 HEAP32[(($18)>>2)]=$15;
 /** @type {number} */ var $19=$5;
 $io=$19;
 /** @type {number} */ var $20=$ncl;
 /** @type {number} */ var $21=$20;
 /** @type {number} */ var $22=$io;
 /** @type {number} */ var $23=(($22)|0);
 /** @type {number} */ var $24=$23;
 HEAP32[(($24)>>2)]=$21;
 /** @type {number} */ var $25=$io;
 /** @type {number} */ var $26=(($25+8)|0);
 HEAP32[(($26)>>2)]=70;
 $i=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $28=$i;
 /** @type {number} */ var $29=$nup;
 /** @type {number} */ var $30=($28|0)<($29|0);
 if($30){label=3;break;}else{label=8;break;}
 case 3: 
 /** @type {number} */ var $32=$i;
 /** @type {number} */ var $33=$uv;
 /** @type {number} */ var $34=(($33+($32<<3))|0);
 /** @type {number} */ var $35=(($34+4)|0);
 /** @type {number} */ var $36=HEAP8[($35)];
 /** @type {number} */ var $37=(($36<<24)>>24)!=0;
 if($37){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $39=$1;
 /** @type {number} */ var $40=$4;
 /** @type {number} */ var $41=$i;
 /** @type {number} */ var $42=$uv;
 /** @type {number} */ var $43=(($42+($41<<3))|0);
 /** @type {number} */ var $44=(($43+5)|0);
 /** @type {number} */ var $45=HEAP8[($44)];
 /** @type {number} */ var $46=($45&255);
 /** @type {number} */ var $47=(($40+($46<<4))|0);
 /** @type {number} */ var $48=_luaF_findupval($39,$47);
 /** @type {number} */ var $49=$i;
 /** @type {number} */ var $50=$ncl;
 /** @type {number} */ var $51=$50;
 /** @type {number} */ var $52=(($51+16)|0);
 /** @type {number} */ var $53=(($52+($49<<2))|0);
 HEAP32[(($53)>>2)]=$48;
 label=6;break;
 case 5: 
 /** @type {number} */ var $55=$i;
 /** @type {number} */ var $56=$uv;
 /** @type {number} */ var $57=(($56+($55<<3))|0);
 /** @type {number} */ var $58=(($57+5)|0);
 /** @type {number} */ var $59=HEAP8[($58)];
 /** @type {number} */ var $60=($59&255);
 /** @type {number} */ var $61=$3;
 /** @type {number} */ var $62=(($61+($60<<2))|0);
 /** @type {number} */ var $63=HEAP32[(($62)>>2)];
 /** @type {number} */ var $64=$i;
 /** @type {number} */ var $65=$ncl;
 /** @type {number} */ var $66=$65;
 /** @type {number} */ var $67=(($66+16)|0);
 /** @type {number} */ var $68=(($67+($64<<2))|0);
 HEAP32[(($68)>>2)]=$63;
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 /** @type {number} */ var $71=$i;
 /** @type {number} */ var $72=((($71)+(1))|0);
 $i=$72;
 label=2;break;
 case 8: 
 /** @type {number} */ var $74=$2;
 /** @type {number} */ var $75=$74;
 /** @type {number} */ var $76=$75;
 /** @type {number} */ var $77=(($76+5)|0);
 /** @type {number} */ var $78=HEAP8[($77)];
 /** @type {number} */ var $79=($78&255);
 /** @type {number} */ var $80=$79&4;
 /** @type {number} */ var $81=($80|0)!=0;
 if($81){label=9;break;}else{label=10;break;}
 case 9: 
 /** @type {number} */ var $83=$1;
 /** @type {number} */ var $84=$2;
 /** @type {number} */ var $85=$ncl;
 _luaC_barrierproto_($83,$84,$85);
 label=10;break;
 case 10: 
 /** @type {number} */ var $87=$ncl;
 /** @type {number} */ var $88=$2;
 /** @type {number} */ var $89=(($88+32)|0);
 HEAP32[(($89)>>2)]=$87;
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $z
 * @return {number}
 */
function _luaZ_fill($z){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $size=sp;
 /** @type {number} */ var $L;
 /** @type {number} */ var $buff;
 $2=$z;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=(($3+16)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $L=$5;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=(($6+8)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=$L;
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=(($10+12)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=FUNCTION_TABLE[$8]($9,$12,$size);
 $buff=$13;
 /** @type {number} */ var $14=$buff;
 /** @type {number} */ var $15=($14|0)==0;
 if($15){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $17=HEAP32[(($size)>>2)];
 /** @type {number} */ var $18=($17|0)==0;
 if($18){label=3;break;}else{label=4;break;}
 case 3: 
 $1=-1;
 label=5;break;
 case 4: 
 /** @type {number} */ var $21=HEAP32[(($size)>>2)];
 /** @type {number} */ var $22=((($21)-(1))|0);
 /** @type {number} */ var $23=$2;
 /** @type {number} */ var $24=(($23)|0);
 HEAP32[(($24)>>2)]=$22;
 /** @type {number} */ var $25=$buff;
 /** @type {number} */ var $26=$2;
 /** @type {number} */ var $27=(($26+4)|0);
 HEAP32[(($27)>>2)]=$25;
 /** @type {number} */ var $28=$2;
 /** @type {number} */ var $29=(($28+4)|0);
 /** @type {number} */ var $30=HEAP32[(($29)>>2)];
 /** @type {number} */ var $31=(($30+1)|0);
 HEAP32[(($29)>>2)]=$31;
 /** @type {number} */ var $32=HEAP8[($30)];
 /** @type {number} */ var $33=($32&255);
 $1=$33;
 label=5;break;
 case 5: 
 /** @type {number} */ var $35=$1;
 STACKTOP=sp;return $35;
 }
}
/**
 * @param {number} $L
 * @param {number} $z
 * @param {number} $reader
 * @param {number} $data
 * @return {number}
 */
function _luaZ_init($L,$z,$reader,$data){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 $1=$L;
 $2=$z;
 $3=$reader;
 $4=$data;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=(($6+16)|0);
 HEAP32[(($7)>>2)]=$5;
 /** @type {number} */ var $8=$3;
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=(($9+8)|0);
 HEAP32[(($10)>>2)]=$8;
 /** @type {number} */ var $11=$4;
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=(($12+12)|0);
 HEAP32[(($13)>>2)]=$11;
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=(($14)|0);
 HEAP32[(($15)>>2)]=0;
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=(($16+4)|0);
 HEAP32[(($17)>>2)]=0;
 STACKTOP=sp;return;
}
/**
 * @param {number} $z
 * @param {number} $b
 * @param {number} $n
 * @return {number}
 */
function _luaZ_read($z,$b,$n){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $m;
 $2=$z;
 $3=$b;
 $4=$n;
 label=2;break;
 case 2: 
 /** @type {number} */ var $6=$4;
 /** @type {number} */ var $7=($6|0)!=0;
 if($7){label=3;break;}else{label=12;break;}
 case 3: 
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=(($9)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=($11|0)==0;
 if($12){label=4;break;}else{label=8;break;}
 case 4: 
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=_luaZ_fill($14);
 /** @type {number} */ var $16=($15|0)==-1;
 if($16){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $18=$4;
 $1=$18;
 label=13;break;
 case 6: 
 /** @type {number} */ var $20=$2;
 /** @type {number} */ var $21=(($20)|0);
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 /** @type {number} */ var $23=((($22)+(1))|0);
 HEAP32[(($21)>>2)]=$23;
 /** @type {number} */ var $24=$2;
 /** @type {number} */ var $25=(($24+4)|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 /** @type {number} */ var $27=((($26)-(1))|0);
 HEAP32[(($25)>>2)]=$27;
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 /** @type {number} */ var $30=$4;
 /** @type {number} */ var $31=$2;
 /** @type {number} */ var $32=(($31)|0);
 /** @type {number} */ var $33=HEAP32[(($32)>>2)];
 /** @type {number} */ var $34=($30>>>0)<=($33>>>0);
 if($34){label=9;break;}else{label=10;break;}
 case 9: 
 /** @type {number} */ var $36=$4;
 var $42=$36;label=11;break;
 case 10: 
 /** @type {number} */ var $38=$2;
 /** @type {number} */ var $39=(($38)|0);
 /** @type {number} */ var $40=HEAP32[(($39)>>2)];
 var $42=$40;label=11;break;
 case 11: 
 var $42;
 $m=$42;
 /** @type {number} */ var $43=$3;
 /** @type {number} */ var $44=$2;
 /** @type {number} */ var $45=(($44+4)|0);
 /** @type {number} */ var $46=HEAP32[(($45)>>2)];
 /** @type {number} */ var $47=$m;
 (_memcpy($43, $46, $47)|0);
 /** @type {number} */ var $48=$m;
 /** @type {number} */ var $49=$2;
 /** @type {number} */ var $50=(($49)|0);
 /** @type {number} */ var $51=HEAP32[(($50)>>2)];
 /** @type {number} */ var $52=((($51)-($48))|0);
 HEAP32[(($50)>>2)]=$52;
 /** @type {number} */ var $53=$m;
 /** @type {number} */ var $54=$2;
 /** @type {number} */ var $55=(($54+4)|0);
 /** @type {number} */ var $56=HEAP32[(($55)>>2)];
 /** @type {number} */ var $57=(($56+$53)|0);
 HEAP32[(($55)>>2)]=$57;
 /** @type {number} */ var $58=$3;
 /** @type {number} */ var $59=$m;
 /** @type {number} */ var $60=(($58+$59)|0);
 $3=$60;
 /** @type {number} */ var $61=$m;
 /** @type {number} */ var $62=$4;
 /** @type {number} */ var $63=((($62)-($61))|0);
 $4=$63;
 label=2;break;
 case 12: 
 $1=0;
 label=13;break;
 case 13: 
 /** @type {number} */ var $66=$1;
 STACKTOP=sp;return $66;
 }
}
/**
 * @param {number} $L
 * @param {number} $buff
 * @param {number} $n
 * @return {number}
 */
function _luaZ_openspace($L,$buff,$n){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$L;
 $2=$buff;
 $3=$n;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=(($5+8)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=($4>>>0)>($7>>>0);
 if($8){label=2;break;}else{label=8;break;}
 case 2: 
 /** @type {number} */ var $10=$3;
 /** @type {number} */ var $11=($10>>>0)<32;
 if($11){label=3;break;}else{label=4;break;}
 case 3: 
 $3=32;
 label=4;break;
 case 4: 
 /** @type {number} */ var $14=$3;
 /** @type {number} */ var $15=((($14)+(1))|0);
 /** @type {number} */ var $16=($15>>>0)>4294967293;
 if($16){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $18=$1;
 _luaM_toobig($18);
 label=7;break;
 case 6: 
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=$2;
 /** @type {number} */ var $23=(($22)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=$2;
 /** @type {number} */ var $26=(($25+8)|0);
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=$27;
 /** @type {number} */ var $29=$3;
 /** @type {number} */ var $30=$29;
 /** @type {number} */ var $31=_luaM_realloc_($21,$24,$28,$30);
 var $33=$31;label=7;break;
 case 7: 
 var $33;
 /** @type {number} */ var $34=$2;
 /** @type {number} */ var $35=(($34)|0);
 HEAP32[(($35)>>2)]=$33;
 /** @type {number} */ var $36=$3;
 /** @type {number} */ var $37=$2;
 /** @type {number} */ var $38=(($37+8)|0);
 HEAP32[(($38)>>2)]=$36;
 label=8;break;
 case 8: 
 /** @type {number} */ var $40=$2;
 /** @type {number} */ var $41=(($40)|0);
 /** @type {number} */ var $42=HEAP32[(($41)>>2)];
 STACKTOP=sp;return $42;
 }
}
/**
 * @param {number} $L
 * @param {number} $L1
 * @param {number} $msg
 * @param {number} $level
 * @return {number}
 */
function _luaL_traceback($L,$L1,$msg,$level){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $ar=sp;
 /** @type {number} */ var $top;
 /** @type {number} */ var $numlevels;
 /** @type {number} */ var $mark;
 $1=$L;
 $2=$L1;
 $3=$msg;
 $4=$level;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=_lua_gettop($5);
 $top=$6;
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=_countlevels($7);
 $numlevels=$8;
 /** @type {number} */ var $9=$numlevels;
 /** @type {number} */ var $10=($9|0)>22;
 /** @type {number} */ var $11=($10?12:0);
 $mark=$11;
 /** @type {number} */ var $12=$3;
 /** @type {number} */ var $13=($12|0)!=0;
 if($13){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=$3;
 /** @type {number} */ var $17=_lua_pushfstring($15,6360,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$16,tempVarArgs)); STACKTOP=tempVarArgs;
 label=3;break;
 case 3: 
 /** @type {number} */ var $19=$1;
 /** @type {number} */ var $20=_lua_pushlstring($19,10896,16);
 label=4;break;
 case 4: 
 /** @type {number} */ var $22=$2;
 /** @type {number} */ var $23=$4;
 /** @type {number} */ var $24=((($23)+(1))|0);
 $4=$24;
 /** @type {number} */ var $25=_lua_getstack($22,$23,$ar);
 /** @type {number} */ var $26=($25|0)!=0;
 if($26){label=5;break;}else{label=13;break;}
 case 5: 
 /** @type {number} */ var $28=$4;
 /** @type {number} */ var $29=$mark;
 /** @type {number} */ var $30=($28|0)==($29|0);
 if($30){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $32=$1;
 /** @type {number} */ var $33=_lua_pushlstring($32,8656,5);
 /** @type {number} */ var $34=$numlevels;
 /** @type {number} */ var $35=((($34)-(10))|0);
 $4=$35;
 label=12;break;
 case 7: 
 /** @type {number} */ var $37=$2;
 /** @type {number} */ var $38=_lua_getinfo($37,6632,$ar);
 /** @type {number} */ var $39=$1;
 /** @type {number} */ var $40=(($ar+36)|0);
 /** @type {number} */ var $41=(($40)|0);
 /** @type {number} */ var $42=_lua_pushfstring($39,5224,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$41,tempVarArgs)); STACKTOP=tempVarArgs;
 /** @type {number} */ var $43=(($ar+20)|0);
 /** @type {number} */ var $44=HEAP32[(($43)>>2)];
 /** @type {number} */ var $45=($44|0)>0;
 if($45){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $47=$1;
 /** @type {number} */ var $48=(($ar+20)|0);
 /** @type {number} */ var $49=HEAP32[(($48)>>2)];
 /** @type {number} */ var $50=_lua_pushfstring($47,4144,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$49,tempVarArgs)); STACKTOP=tempVarArgs;
 label=9;break;
 case 9: 
 /** @type {number} */ var $52=$1;
 /** @type {number} */ var $53=_lua_pushlstring($52,3800,4);
 /** @type {number} */ var $54=$1;
 _pushfuncname($54,$ar);
 /** @type {number} */ var $55=(($ar+35)|0);
 /** @type {number} */ var $56=HEAP8[($55)];
 /** @type {number} */ var $57=(($56<<24)>>24)!=0;
 if($57){label=10;break;}else{label=11;break;}
 case 10: 
 /** @type {number} */ var $59=$1;
 /** @type {number} */ var $60=_lua_pushlstring($59,3336,20);
 label=11;break;
 case 11: 
 /** @type {number} */ var $62=$1;
 /** @type {number} */ var $63=$1;
 /** @type {number} */ var $64=_lua_gettop($63);
 /** @type {number} */ var $65=$top;
 /** @type {number} */ var $66=((($64)-($65))|0);
 _lua_concat($62,$66);
 label=12;break;
 case 12: 
 label=4;break;
 case 13: 
 /** @type {number} */ var $69=$1;
 /** @type {number} */ var $70=$1;
 /** @type {number} */ var $71=_lua_gettop($70);
 /** @type {number} */ var $72=$top;
 /** @type {number} */ var $73=((($71)-($72))|0);
 _lua_concat($69,$73);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $narg
 * @param {number} $extramsg
 * @return {number}
 */
function _luaL_argerror($L,$narg,$extramsg){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $ar=sp;
 $2=$L;
 $3=$narg;
 $4=$extramsg;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=_lua_getstack($5,0,$ar);
 /** @type {number} */ var $7=($6|0)!=0;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=$3;
 /** @type {number} */ var $11=$4;
 /** @type {number} */ var $12=_luaL_error($9,2984,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$10,HEAP32[(((tempVarArgs)+(8))>>2)]=$11,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=$12;
 label=13;break;
 case 3: 
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=_lua_getinfo($14,2720,$ar);
 /** @type {number} */ var $16=(($ar+8)|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=_strcmp($17,11944);
 /** @type {number} */ var $19=($18|0)==0;
 if($19){label=4;break;}else{label=7;break;}
 case 4: 
 /** @type {number} */ var $21=$3;
 /** @type {number} */ var $22=((($21)-(1))|0);
 $3=$22;
 /** @type {number} */ var $23=$3;
 /** @type {number} */ var $24=($23|0)==0;
 if($24){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $26=$2;
 /** @type {number} */ var $27=(($ar+4)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=_luaL_error($26,11568,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$28,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=$29;
 label=13;break;
 case 6: 
 label=7;break;
 case 7: 
 /** @type {number} */ var $32=(($ar+4)|0);
 /** @type {number} */ var $33=HEAP32[(($32)>>2)];
 /** @type {number} */ var $34=($33|0)==0;
 if($34){label=8;break;}else{label=12;break;}
 case 8: 
 /** @type {number} */ var $36=$2;
 /** @type {number} */ var $37=_pushglobalfuncname($36,$ar);
 /** @type {number} */ var $38=($37|0)!=0;
 if($38){label=9;break;}else{label=10;break;}
 case 9: 
 /** @type {number} */ var $40=$2;
 /** @type {number} */ var $41=_lua_tolstring($40,-1,0);
 var $44=$41;label=11;break;
 case 10: 
 var $44=11232;label=11;break;
 case 11: 
 var $44;
 /** @type {number} */ var $45=(($ar+4)|0);
 HEAP32[(($45)>>2)]=$44;
 label=12;break;
 case 12: 
 /** @type {number} */ var $47=$2;
 /** @type {number} */ var $48=$3;
 /** @type {number} */ var $49=(($ar+4)|0);
 /** @type {number} */ var $50=HEAP32[(($49)>>2)];
 /** @type {number} */ var $51=$4;
 /** @type {number} */ var $52=_luaL_error($47,10952,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,HEAP32[((tempVarArgs)>>2)]=$48,HEAP32[(((tempVarArgs)+(8))>>2)]=$50,HEAP32[(((tempVarArgs)+(16))>>2)]=$51,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=$52;
 label=13;break;
 case 13: 
 /** @type {number} */ var $54=$1;
 STACKTOP=sp;return $54;
 }
}
/**
 * @param {number} $L
 * @param {number} $fmt
 * @param {number} varrp
 * @return {number}
 */
function _luaL_error($L,$fmt,varrp){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $argp=sp;
 $1=$L;
 $2=$fmt;
 /** @type {number} */ var $3=(($argp)|0);
 /** @type {number} */ var $4=$3;
 HEAP32[(($4)>>2)]=varrp;HEAP32[((($4)+(4))>>2)]=0;
 /** @type {number} */ var $5=$1;
 _luaL_where($5,1);
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=(($argp)|0);
 /** @type {number} */ var $9=_lua_pushvfstring($6,$7,$8);
 /** @type {number} */ var $10=(($argp)|0);
 /** @type {number} */ var $11=$10;
 /** @type {number} */ var $12=$1;
 _lua_concat($12,2);
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=_lua_error($13);
 STACKTOP=sp;return $14;
}
/**
 * @param {number} $L
 * @param {number} $level
 * @return {number}
 */
function _luaL_where($L,$level){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $ar=sp;
 $1=$L;
 $2=$level;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_lua_getstack($3,$4,$ar);
 /** @type {number} */ var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=5;break;}
 case 2: 
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=_lua_getinfo($8,10768,$ar);
 /** @type {number} */ var $10=(($ar+20)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=($11|0)>0;
 if($12){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=(($ar+36)|0);
 /** @type {number} */ var $16=(($15)|0);
 /** @type {number} */ var $17=(($ar+20)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=_lua_pushfstring($14,10560,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$16,HEAP32[(((tempVarArgs)+(8))>>2)]=$18,tempVarArgs)); STACKTOP=tempVarArgs;
 label=6;break;
 case 4: 
 label=5;break;
 case 5: 
 /** @type {number} */ var $22=$1;
 /** @type {number} */ var $23=_lua_pushlstring($22,12112,0);
 label=6;break;
 case 6: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $stat
 * @param {number} $fname
 * @return {number}
 */
function _luaL_fileresult($L,$stat,$fname){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $en;
 $2=$L;
 $3=$stat;
 $4=$fname;
 /** @type {number} */ var $5=___errno_location();
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 $en=$6;
 /** @type {number} */ var $7=$3;
 /** @type {number} */ var $8=($7|0)!=0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $10=$2;
 _lua_pushboolean($10,1);
 $1=1;
 label=7;break;
 case 3: 
 /** @type {number} */ var $12=$2;
 _lua_pushnil($12);
 /** @type {number} */ var $13=$4;
 /** @type {number} */ var $14=($13|0)!=0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=$4;
 /** @type {number} */ var $18=$en;
 /** @type {number} */ var $19=_strerror($18);
 /** @type {number} */ var $20=_lua_pushfstring($16,10088,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$17,HEAP32[(((tempVarArgs)+(8))>>2)]=$19,tempVarArgs)); STACKTOP=tempVarArgs;
 label=6;break;
 case 5: 
 /** @type {number} */ var $22=$2;
 /** @type {number} */ var $23=$en;
 /** @type {number} */ var $24=_strerror($23);
 /** @type {number} */ var $25=_lua_pushfstring($22,9856,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$24,tempVarArgs)); STACKTOP=tempVarArgs;
 label=6;break;
 case 6: 
 /** @type {number} */ var $27=$2;
 /** @type {number} */ var $28=$en;
 _lua_pushinteger($27,$28);
 $1=3;
 label=7;break;
 case 7: 
 /** @type {number} */ var $30=$1;
 STACKTOP=sp;return $30;
 }
}
/**
 * @param {number} $L
 * @param {number} $stat
 * @return {number}
 */
function _luaL_execresult($L,$stat){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $what;
 $2=$L;
 $3=$stat;
 $what=9648;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=($4|0)==-1;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=_luaL_fileresult($7,0,0);
 $1=$8;
 label=8;break;
 case 3: 
 /** @type {number} */ var $10=$what;
 /** @type {number} */ var $11=HEAP8[($10)];
 /** @type {number} */ var $12=(($11<<24)>>24);
 /** @type {number} */ var $13=($12|0)==101;
 if($13){label=4;break;}else{label=6;break;}
 case 4: 
 /** @type {number} */ var $15=$3;
 /** @type {number} */ var $16=($15|0)==0;
 if($16){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $18=$2;
 _lua_pushboolean($18,1);
 label=7;break;
 case 6: 
 /** @type {number} */ var $20=$2;
 _lua_pushnil($20);
 label=7;break;
 case 7: 
 /** @type {number} */ var $22=$2;
 /** @type {number} */ var $23=$what;
 /** @type {number} */ var $24=_lua_pushstring($22,$23);
 /** @type {number} */ var $25=$2;
 /** @type {number} */ var $26=$3;
 _lua_pushinteger($25,$26);
 $1=3;
 label=8;break;
 case 8: 
 /** @type {number} */ var $28=$1;
 STACKTOP=sp;return $28;
 }
}
/**
 * @param {number} $L
 * @param {number} $tname
 * @return {number}
 */
function _luaL_newmetatable($L,$tname){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $2=$L;
 $3=$tname;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=$3;
 _lua_getfield($4,-1001000,$5);
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=_lua_type($6,-1);
 /** @type {number} */ var $8=($7|0)==0;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 $1=0;
 label=4;break;
 case 3: 
 /** @type {number} */ var $11=$2;
 _lua_settop($11,-2);
 /** @type {number} */ var $12=$2;
 _lua_createtable($12,0,0);
 /** @type {number} */ var $13=$2;
 _lua_pushvalue($13,-1);
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=$3;
 _lua_setfield($14,-1001000,$15);
 $1=1;
 label=4;break;
 case 4: 
 /** @type {number} */ var $17=$1;
 STACKTOP=sp;return $17;
 }
}
/**
 * @param {number} $L
 * @param {number} $tname
 * @return {number}
 */
function _luaL_setmetatable($L,$tname){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$L;
 $2=$tname;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 _lua_getfield($3,-1001000,$4);
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=_lua_setmetatable($5,-2);
 STACKTOP=sp;return;
}
/**
 * @param {number} $L
 * @param {number} $ud
 * @param {number} $tname
 * @return {number}
 */
function _luaL_testudata($L,$ud,$tname){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $p;
 $2=$L;
 $3=$ud;
 $4=$tname;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$3;
 /** @type {number} */ var $7=_lua_touserdata($5,$6);
 $p=$7;
 /** @type {number} */ var $8=$p;
 /** @type {number} */ var $9=($8|0)!=0;
 if($9){label=2;break;}else{label=7;break;}
 case 2: 
 /** @type {number} */ var $11=$2;
 /** @type {number} */ var $12=$3;
 /** @type {number} */ var $13=_lua_getmetatable($11,$12);
 /** @type {number} */ var $14=($13|0)!=0;
 if($14){label=3;break;}else{label=6;break;}
 case 3: 
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=$4;
 _lua_getfield($16,-1001000,$17);
 /** @type {number} */ var $18=$2;
 /** @type {number} */ var $19=_lua_rawequal($18,-1,-2);
 /** @type {number} */ var $20=($19|0)!=0;
 if($20){label=5;break;}else{label=4;break;}
 case 4: 
 $p=0;
 label=5;break;
 case 5: 
 /** @type {number} */ var $23=$2;
 _lua_settop($23,-3);
 /** @type {number} */ var $24=$p;
 $1=$24;
 label=8;break;
 case 6: 
 label=7;break;
 case 7: 
 $1=0;
 label=8;break;
 case 8: 
 /** @type {number} */ var $28=$1;
 STACKTOP=sp;return $28;
 }
}
/**
 * @param {number} $L
 * @param {number} $ud
 * @param {number} $tname
 * @return {number}
 */
function _luaL_checkudata($L,$ud,$tname){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $p;
 $1=$L;
 $2=$ud;
 $3=$tname;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$3;
 /** @type {number} */ var $7=_luaL_testudata($4,$5,$6);
 $p=$7;
 /** @type {number} */ var $8=$p;
 /** @type {number} */ var $9=($8|0)==0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=$3;
 /** @type {number} */ var $14=_typeerror($11,$12,$13);
 label=3;break;
 case 3: 
 /** @type {number} */ var $16=$p;
 STACKTOP=sp;return $16;
 }
}
/**
 * @param {number} $L
 * @param {number} $narg
 * @param {number} $def
 * @param {number} $lst
 * @return {number}
 */
function _luaL_checkoption($L,$narg,$def,$lst){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 /** @type {number} */ var $name;
 /** @type {number} */ var $i;
 $2=$L;
 $3=$narg;
 $4=$def;
 $5=$lst;
 /** @type {number} */ var $6=$4;
 /** @type {number} */ var $7=($6|0)!=0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=$3;
 /** @type {number} */ var $11=$4;
 /** @type {number} */ var $12=_luaL_optlstring($9,$10,$11,0);
 var $18=$12;label=4;break;
 case 3: 
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=$3;
 /** @type {number} */ var $16=_luaL_checklstring($14,$15,0);
 var $18=$16;label=4;break;
 case 4: 
 var $18;
 $name=$18;
 $i=0;
 label=5;break;
 case 5: 
 /** @type {number} */ var $20=$i;
 /** @type {number} */ var $21=$5;
 /** @type {number} */ var $22=(($21+($20<<2))|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 /** @type {number} */ var $24=($23|0)!=0;
 if($24){label=6;break;}else{label=10;break;}
 case 6: 
 /** @type {number} */ var $26=$i;
 /** @type {number} */ var $27=$5;
 /** @type {number} */ var $28=(($27+($26<<2))|0);
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 /** @type {number} */ var $30=$name;
 /** @type {number} */ var $31=_strcmp($29,$30);
 /** @type {number} */ var $32=($31|0)==0;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $34=$i;
 $1=$34;
 label=11;break;
 case 8: 
 label=9;break;
 case 9: 
 /** @type {number} */ var $37=$i;
 /** @type {number} */ var $38=((($37)+(1))|0);
 $i=$38;
 label=5;break;
 case 10: 
 /** @type {number} */ var $40=$2;
 /** @type {number} */ var $41=$3;
 /** @type {number} */ var $42=$2;
 /** @type {number} */ var $43=$name;
 /** @type {number} */ var $44=_lua_pushfstring($42,9400,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$43,tempVarArgs)); STACKTOP=tempVarArgs;
 /** @type {number} */ var $45=_luaL_argerror($40,$41,$44);
 $1=$45;
 label=11;break;
 case 11: 
 /** @type {number} */ var $47=$1;
 STACKTOP=sp;return $47;
 }
}
/**
 * @param {number} $L
 * @param {number} $narg
 * @param {number} $def
 * @param {number} $len
 * @return {number}
 */
function _luaL_optlstring($L,$narg,$def,$len){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 $2=$L;
 $3=$narg;
 $4=$def;
 $5=$len;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=$3;
 /** @type {number} */ var $8=_lua_type($6,$7);
 /** @type {number} */ var $9=($8|0)<=0;
 if($9){label=2;break;}else{label=8;break;}
 case 2: 
 /** @type {number} */ var $11=$5;
 /** @type {number} */ var $12=($11|0)!=0;
 if($12){label=3;break;}else{label=7;break;}
 case 3: 
 /** @type {number} */ var $14=$4;
 /** @type {number} */ var $15=($14|0)!=0;
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $17=$4;
 /** @type {number} */ var $18=_strlen($17);
 var $21=$18;label=6;break;
 case 5: 
 var $21=0;label=6;break;
 case 6: 
 var $21;
 /** @type {number} */ var $22=$5;
 HEAP32[(($22)>>2)]=$21;
 label=7;break;
 case 7: 
 /** @type {number} */ var $24=$4;
 $1=$24;
 label=9;break;
 case 8: 
 /** @type {number} */ var $26=$2;
 /** @type {number} */ var $27=$3;
 /** @type {number} */ var $28=$5;
 /** @type {number} */ var $29=_luaL_checklstring($26,$27,$28);
 $1=$29;
 label=9;break;
 case 9: 
 /** @type {number} */ var $31=$1;
 STACKTOP=sp;return $31;
 }
}
/**
 * @param {number} $L
 * @param {number} $narg
 * @param {number} $len
 * @return {number}
 */
function _luaL_checklstring($L,$narg,$len){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $s;
 $1=$L;
 $2=$narg;
 $3=$len;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$3;
 /** @type {number} */ var $7=_lua_tolstring($4,$5,$6);
 $s=$7;
 /** @type {number} */ var $8=$s;
 /** @type {number} */ var $9=($8|0)!=0;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=$2;
 _tag_error($11,$12,4);
 label=3;break;
 case 3: 
 /** @type {number} */ var $14=$s;
 STACKTOP=sp;return $14;
 }
}
/**
 * @param {number} $L
 * @param {number} $space
 * @param {number} $msg
 * @return {number}
 */
function _luaL_checkstack($L,$space,$msg){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $extra;
 $1=$L;
 $2=$space;
 $3=$msg;
 $extra=20;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=((($5)+(20))|0);
 /** @type {number} */ var $7=_lua_checkstack($4,$6);
 /** @type {number} */ var $8=($7|0)!=0;
 if($8){label=6;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $10=$3;
 /** @type {number} */ var $11=($10|0)!=0;
 if($11){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=$3;
 /** @type {number} */ var $15=_luaL_error($13,9192,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$14,tempVarArgs)); STACKTOP=tempVarArgs;
 label=5;break;
 case 4: 
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=_luaL_error($17,8952,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $narg
 * @param {number} $t
 * @return {number}
 */
function _luaL_checktype($L,$narg,$t){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$L;
 $2=$narg;
 $3=$t;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=_lua_type($4,$5);
 /** @type {number} */ var $7=$3;
 /** @type {number} */ var $8=($6|0)!=($7|0);
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=$2;
 /** @type {number} */ var $12=$3;
 _tag_error($10,$11,$12);
 label=3;break;
 case 3: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $narg
 * @return {number}
 */
function _luaL_checkany($L,$narg){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$L;
 $2=$narg;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_lua_type($3,$4);
 /** @type {number} */ var $6=($5|0)==-1;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=_luaL_argerror($8,$9,8696);
 label=3;break;
 case 3: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $narg
 * @return {number}
 */
function _luaL_checknumber($L,$narg){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $isnum=sp;
 /** @type {number} */ var $d;
 $1=$L;
 $2=$narg;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_lua_tonumberx($3,$4,$isnum);
 $d=$5;
 /** @type {number} */ var $6=HEAP32[(($isnum)>>2)];
 /** @type {number} */ var $7=($6|0)!=0;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=$2;
 _tag_error($9,$10,3);
 label=3;break;
 case 3: 
 /** @type {number} */ var $12=$d;
 STACKTOP=sp;return $12;
 }
}
/**
 * @param {number} $L
 * @param {number} $narg
 * @param {number} $def
 * @return {number}
 */
function _luaL_optnumber($L,$narg,$def){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$L;
 $2=$narg;
 $3=$def;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=_lua_type($4,$5);
 /** @type {number} */ var $7=($6|0)<=0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $9=$3;
 var $15=$9;label=4;break;
 case 3: 
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=_luaL_checknumber($11,$12);
 var $15=$13;label=4;break;
 case 4: 
 var $15;
 STACKTOP=sp;return $15;
 }
}
/**
 * @param {number} $L
 * @param {number} $narg
 * @return {number}
 */
function _luaL_checkinteger($L,$narg){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $isnum=sp;
 /** @type {number} */ var $d;
 $1=$L;
 $2=$narg;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_lua_tointegerx($3,$4,$isnum);
 $d=$5;
 /** @type {number} */ var $6=HEAP32[(($isnum)>>2)];
 /** @type {number} */ var $7=($6|0)!=0;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=$2;
 _tag_error($9,$10,3);
 label=3;break;
 case 3: 
 /** @type {number} */ var $12=$d;
 STACKTOP=sp;return $12;
 }
}
/**
 * @param {number} $L
 * @param {number} $narg
 * @return {number}
 */
function _luaL_checkunsigned($L,$narg){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $isnum=sp;
 /** @type {number} */ var $d;
 $1=$L;
 $2=$narg;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_lua_tounsignedx($3,$4,$isnum);
 $d=$5;
 /** @type {number} */ var $6=HEAP32[(($isnum)>>2)];
 /** @type {number} */ var $7=($6|0)!=0;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=$2;
 _tag_error($9,$10,3);
 label=3;break;
 case 3: 
 /** @type {number} */ var $12=$d;
 STACKTOP=sp;return $12;
 }
}
/**
 * @param {number} $L
 * @param {number} $narg
 * @param {number} $def
 * @return {number}
 */
function _luaL_optinteger($L,$narg,$def){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$L;
 $2=$narg;
 $3=$def;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=_lua_type($4,$5);
 /** @type {number} */ var $7=($6|0)<=0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $9=$3;
 var $15=$9;label=4;break;
 case 3: 
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=_luaL_checkinteger($11,$12);
 var $15=$13;label=4;break;
 case 4: 
 var $15;
 STACKTOP=sp;return $15;
 }
}
/**
 * @param {number} $B
 * @param {number} $sz
 * @return {number}
 */
function _luaL_prepbuffsize($B,$sz){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $L;
 /** @type {number} */ var $newbuff;
 /** @type {number} */ var $newsize;
 $1=$B;
 $2=$sz;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=(($3+12)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $L=$5;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+4)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=(($9+8)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=((($8)-($11))|0);
 /** @type {number} */ var $13=$2;
 /** @type {number} */ var $14=($12>>>0)<($13>>>0);
 if($14){label=2;break;}else{label=10;break;}
 case 2: 
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=(($16+4)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=($18<<1);
 $newsize=$19;
 /** @type {number} */ var $20=$newsize;
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=(($21+8)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 /** @type {number} */ var $24=((($20)-($23))|0);
 /** @type {number} */ var $25=$2;
 /** @type {number} */ var $26=($24>>>0)<($25>>>0);
 if($26){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $28=$1;
 /** @type {number} */ var $29=(($28+8)|0);
 /** @type {number} */ var $30=HEAP32[(($29)>>2)];
 /** @type {number} */ var $31=$2;
 /** @type {number} */ var $32=((($30)+($31))|0);
 $newsize=$32;
 label=4;break;
 case 4: 
 /** @type {number} */ var $34=$newsize;
 /** @type {number} */ var $35=$1;
 /** @type {number} */ var $36=(($35+8)|0);
 /** @type {number} */ var $37=HEAP32[(($36)>>2)];
 /** @type {number} */ var $38=($34>>>0)<($37>>>0);
 if($38){label=6;break;}else{label=5;break;}
 case 5: 
 /** @type {number} */ var $40=$newsize;
 /** @type {number} */ var $41=$1;
 /** @type {number} */ var $42=(($41+8)|0);
 /** @type {number} */ var $43=HEAP32[(($42)>>2)];
 /** @type {number} */ var $44=((($40)-($43))|0);
 /** @type {number} */ var $45=$2;
 /** @type {number} */ var $46=($44>>>0)<($45>>>0);
 if($46){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $48=$L;
 /** @type {number} */ var $49=_luaL_error($48,8456,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=7;break;
 case 7: 
 /** @type {number} */ var $51=$L;
 /** @type {number} */ var $52=$newsize;
 /** @type {number} */ var $53=$52;
 /** @type {number} */ var $54=_lua_newuserdata($51,$53);
 $newbuff=$54;
 /** @type {number} */ var $55=$newbuff;
 /** @type {number} */ var $56=$1;
 /** @type {number} */ var $57=(($56)|0);
 /** @type {number} */ var $58=HEAP32[(($57)>>2)];
 /** @type {number} */ var $59=$1;
 /** @type {number} */ var $60=(($59+8)|0);
 /** @type {number} */ var $61=HEAP32[(($60)>>2)];
 /** @type {number} */ var $62=$61;
 (_memcpy($55, $58, $62)|0);
 /** @type {number} */ var $63=$1;
 /** @type {number} */ var $64=(($63)|0);
 /** @type {number} */ var $65=HEAP32[(($64)>>2)];
 /** @type {number} */ var $66=$1;
 /** @type {number} */ var $67=(($66+16)|0);
 /** @type {number} */ var $68=(($67)|0);
 /** @type {number} */ var $69=($65|0)!=($68|0);
 if($69){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $71=$L;
 _lua_remove($71,-2);
 label=9;break;
 case 9: 
 /** @type {number} */ var $73=$newbuff;
 /** @type {number} */ var $74=$1;
 /** @type {number} */ var $75=(($74)|0);
 HEAP32[(($75)>>2)]=$73;
 /** @type {number} */ var $76=$newsize;
 /** @type {number} */ var $77=$1;
 /** @type {number} */ var $78=(($77+4)|0);
 HEAP32[(($78)>>2)]=$76;
 label=10;break;
 case 10: 
 /** @type {number} */ var $80=$1;
 /** @type {number} */ var $81=(($80+8)|0);
 /** @type {number} */ var $82=HEAP32[(($81)>>2)];
 /** @type {number} */ var $83=$1;
 /** @type {number} */ var $84=(($83)|0);
 /** @type {number} */ var $85=HEAP32[(($84)>>2)];
 /** @type {number} */ var $86=(($85+$82)|0);
 STACKTOP=sp;return $86;
 }
}
/**
 * @param {number} $B
 * @param {number} $s
 * @param {number} $l
 * @return {number}
 */
function _luaL_addlstring($B,$s,$l){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $b;
 $1=$B;
 $2=$s;
 $3=$l;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=_luaL_prepbuffsize($4,$5);
 $b=$6;
 /** @type {number} */ var $7=$b;
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=$3;
 /** @type {number} */ var $10=$9;
 (_memcpy($7, $8, $10)|0);
 /** @type {number} */ var $11=$3;
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=(($12+8)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=((($14)+($11))|0);
 HEAP32[(($13)>>2)]=$15;
 STACKTOP=sp;return;
}
/**
 * @param {number} $B
 * @param {number} $s
 * @return {number}
 */
function _luaL_addstring($B,$s){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$B;
 $2=$s;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=_strlen($5);
 _luaL_addlstring($3,$4,$6);
 STACKTOP=sp;return;
}
/**
 * @param {number} $B
 * @return {number}
 */
function _luaL_pushresult($B){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $L;
 $1=$B;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+12)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $L=$4;
 /** @type {number} */ var $5=$L;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=(($9+8)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=_lua_pushlstring($5,$8,$11);
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=(($13)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=(($16+16)|0);
 /** @type {number} */ var $18=(($17)|0);
 /** @type {number} */ var $19=($15|0)!=($18|0);
 if($19){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $21=$L;
 _lua_remove($21,-2);
 label=3;break;
 case 3: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $B
 * @param {number} $sz
 * @return {number}
 */
function _luaL_pushresultsize($B,$sz){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$B;
 $2=$sz;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+8)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=((($6)+($3))|0);
 HEAP32[(($5)>>2)]=$7;
 /** @type {number} */ var $8=$1;
 _luaL_pushresult($8);
 STACKTOP=sp;return;
}
/**
 * @param {number} $B
 * @return {number}
 */
function _luaL_addvalue($B){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $L;
 /** @type {number} */ var $l=sp;
 /** @type {number} */ var $s;
 $1=$B;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=(($2+12)|0);
 /** @type {number} */ var $4=HEAP32[(($3)>>2)];
 $L=$4;
 /** @type {number} */ var $5=$L;
 /** @type {number} */ var $6=_lua_tolstring($5,-1,$l);
 $s=$6;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=(($7)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=(($10+16)|0);
 /** @type {number} */ var $12=(($11)|0);
 /** @type {number} */ var $13=($9|0)!=($12|0);
 if($13){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $15=$L;
 _lua_insert($15,-2);
 label=3;break;
 case 3: 
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=$s;
 /** @type {number} */ var $19=HEAP32[(($l)>>2)];
 _luaL_addlstring($17,$18,$19);
 /** @type {number} */ var $20=$L;
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=(($21)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 /** @type {number} */ var $24=$1;
 /** @type {number} */ var $25=(($24+16)|0);
 /** @type {number} */ var $26=(($25)|0);
 /** @type {number} */ var $27=($23|0)!=($26|0);
 /** @type {number} */ var $28=($27?-2:-1);
 _lua_remove($20,$28);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $B
 * @return {number}
 */
function _luaL_buffinit($L,$B){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$L;
 $2=$B;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=(($4+12)|0);
 HEAP32[(($5)>>2)]=$3;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=(($6+16)|0);
 /** @type {number} */ var $8=(($7)|0);
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=(($9)|0);
 HEAP32[(($10)>>2)]=$8;
 /** @type {number} */ var $11=$2;
 /** @type {number} */ var $12=(($11+8)|0);
 HEAP32[(($12)>>2)]=0;
 /** @type {number} */ var $13=$2;
 /** @type {number} */ var $14=(($13+4)|0);
 HEAP32[(($14)>>2)]=1024;
 STACKTOP=sp;return;
}
/**
 * @param {number} $L
 * @param {number} $B
 * @param {number} $sz
 * @return {number}
 */
function _luaL_buffinitsize($L,$B,$sz){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$L;
 $2=$B;
 $3=$sz;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$2;
 _luaL_buffinit($4,$5);
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=$3;
 /** @type {number} */ var $8=_luaL_prepbuffsize($6,$7);
 STACKTOP=sp;return $8;
}
/**
 * @param {number} $L
 * @param {number} $filename
 * @param {number} $mode
 * @return {number}
 */
function _luaL_loadfilex($L,$filename,$mode){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1040)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $lf=sp;
 /** @type {number} */ var $status;
 /** @type {number} */ var $readstatus;
 /** @type {number} */ var $c=(sp)+(1032);
 /** @type {number} */ var $fnameindex;
 $2=$L;
 $3=$filename;
 $4=$mode;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=_lua_gettop($5);
 /** @type {number} */ var $7=((($6)+(1))|0);
 $fnameindex=$7;
 /** @type {number} */ var $8=$3;
 /** @type {number} */ var $9=($8|0)==0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $11=$2;
 /** @type {number} */ var $12=_lua_pushlstring($11,8272,6);
 /** @type {number} */ var $13=HEAP32[((_stdin)>>2)];
 /** @type {number} */ var $14=(($lf+4)|0);
 HEAP32[(($14)>>2)]=$13;
 label=6;break;
 case 3: 
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=$3;
 /** @type {number} */ var $18=_lua_pushfstring($16,8064,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$17,tempVarArgs)); STACKTOP=tempVarArgs;
 /** @type {number} */ var $19=$3;
 /** @type {number} */ var $20=_fopen($19,7808);
 /** @type {number} */ var $21=(($lf+4)|0);
 HEAP32[(($21)>>2)]=$20;
 /** @type {number} */ var $22=(($lf+4)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 /** @type {number} */ var $24=($23|0)==0;
 if($24){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $26=$2;
 /** @type {number} */ var $27=$fnameindex;
 /** @type {number} */ var $28=_errfile($26,7640,$27);
 $1=$28;
 label=20;break;
 case 5: 
 label=6;break;
 case 6: 
 /** @type {number} */ var $31=_skipcomment($lf,$c);
 /** @type {number} */ var $32=($31|0)!=0;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $34=(($lf)|0);
 /** @type {number} */ var $35=HEAP32[(($34)>>2)];
 /** @type {number} */ var $36=((($35)+(1))|0);
 HEAP32[(($34)>>2)]=$36;
 /** @type {number} */ var $37=(($lf+8)|0);
 /** @type {number} */ var $38=(($37+$35)|0);
 HEAP8[($38)]=10;
 label=8;break;
 case 8: 
 /** @type {number} */ var $40=HEAP32[(($c)>>2)];
 /** @type {number} */ var $41=HEAP8[(7488)];
 /** @type {number} */ var $42=(($41<<24)>>24);
 /** @type {number} */ var $43=($40|0)==($42|0);
 if($43){label=9;break;}else{label=13;break;}
 case 9: 
 /** @type {number} */ var $45=$3;
 /** @type {number} */ var $46=($45|0)!=0;
 if($46){label=10;break;}else{label=13;break;}
 case 10: 
 /** @type {number} */ var $48=$3;
 /** @type {number} */ var $49=(($lf+4)|0);
 /** @type {number} */ var $50=HEAP32[(($49)>>2)];
 /** @type {number} */ var $51=_freopen($48,7296,$50);
 /** @type {number} */ var $52=(($lf+4)|0);
 HEAP32[(($52)>>2)]=$51;
 /** @type {number} */ var $53=(($lf+4)|0);
 /** @type {number} */ var $54=HEAP32[(($53)>>2)];
 /** @type {number} */ var $55=($54|0)==0;
 if($55){label=11;break;}else{label=12;break;}
 case 11: 
 /** @type {number} */ var $57=$2;
 /** @type {number} */ var $58=$fnameindex;
 /** @type {number} */ var $59=_errfile($57,7160,$58);
 $1=$59;
 label=20;break;
 case 12: 
 /** @type {number} */ var $61=_skipcomment($lf,$c);
 label=13;break;
 case 13: 
 /** @type {number} */ var $63=HEAP32[(($c)>>2)];
 /** @type {number} */ var $64=($63|0)!=-1;
 if($64){label=14;break;}else{label=15;break;}
 case 14: 
 /** @type {number} */ var $66=HEAP32[(($c)>>2)];
 /** @type {number} */ var $67=(($66)&255);
 /** @type {number} */ var $68=(($lf)|0);
 /** @type {number} */ var $69=HEAP32[(($68)>>2)];
 /** @type {number} */ var $70=((($69)+(1))|0);
 HEAP32[(($68)>>2)]=$70;
 /** @type {number} */ var $71=(($lf+8)|0);
 /** @type {number} */ var $72=(($71+$69)|0);
 HEAP8[($72)]=$67;
 label=15;break;
 case 15: 
 /** @type {number} */ var $74=$2;
 /** @type {number} */ var $75=$lf;
 /** @type {number} */ var $76=$2;
 /** @type {number} */ var $77=_lua_tolstring($76,-1,0);
 /** @type {number} */ var $78=$4;
 /** @type {number} */ var $79=_lua_load($74,348,$75,$77,$78);
 $status=$79;
 /** @type {number} */ var $80=(($lf+4)|0);
 /** @type {number} */ var $81=HEAP32[(($80)>>2)];
 /** @type {number} */ var $82=_ferror($81);
 $readstatus=$82;
 /** @type {number} */ var $83=$3;
 /** @type {number} */ var $84=($83|0)!=0;
 if($84){label=16;break;}else{label=17;break;}
 case 16: 
 /** @type {number} */ var $86=(($lf+4)|0);
 /** @type {number} */ var $87=HEAP32[(($86)>>2)];
 /** @type {number} */ var $88=_fclose($87);
 label=17;break;
 case 17: 
 /** @type {number} */ var $90=$readstatus;
 /** @type {number} */ var $91=($90|0)!=0;
 if($91){label=18;break;}else{label=19;break;}
 case 18: 
 /** @type {number} */ var $93=$2;
 /** @type {number} */ var $94=$fnameindex;
 _lua_settop($93,$94);
 /** @type {number} */ var $95=$2;
 /** @type {number} */ var $96=$fnameindex;
 /** @type {number} */ var $97=_errfile($95,6920,$96);
 $1=$97;
 label=20;break;
 case 19: 
 /** @type {number} */ var $99=$2;
 /** @type {number} */ var $100=$fnameindex;
 _lua_remove($99,$100);
 /** @type {number} */ var $101=$status;
 $1=$101;
 label=20;break;
 case 20: 
 /** @type {number} */ var $103=$1;
 STACKTOP=sp;return $103;
 }
}
/**
 * @param {number} $L
 * @param {number} $buff
 * @param {number} $size
 * @param {number} $name
 * @param {number} $mode
 * @return {number}
 */
function _luaL_loadbufferx($L,$buff,$size,$name,$mode){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 /** @type {number} */ var $ls=sp;
 $1=$L;
 $2=$buff;
 $3=$size;
 $4=$name;
 $5=$mode;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=(($ls)|0);
 HEAP32[(($7)>>2)]=$6;
 /** @type {number} */ var $8=$3;
 /** @type {number} */ var $9=(($ls+4)|0);
 HEAP32[(($9)>>2)]=$8;
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=$ls;
 /** @type {number} */ var $12=$4;
 /** @type {number} */ var $13=$5;
 /** @type {number} */ var $14=_lua_load($10,338,$11,$12,$13);
 STACKTOP=sp;return $14;
}
Module["_luaL_loadbufferx"] = _luaL_loadbufferx;
/**
 * @param {number} $L
 * @param {number} $obj
 * @param {number} $event
 * @return {number}
 */
function _luaL_getmetafield($L,$obj,$event){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 $2=$L;
 $3=$obj;
 $4=$event;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$3;
 /** @type {number} */ var $7=_lua_getmetatable($5,$6);
 /** @type {number} */ var $8=($7|0)!=0;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 $1=0;
 label=6;break;
 case 3: 
 /** @type {number} */ var $11=$2;
 /** @type {number} */ var $12=$4;
 /** @type {number} */ var $13=_lua_pushstring($11,$12);
 /** @type {number} */ var $14=$2;
 _lua_rawget($14,-2);
 /** @type {number} */ var $15=$2;
 /** @type {number} */ var $16=_lua_type($15,-1);
 /** @type {number} */ var $17=($16|0)==0;
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $19=$2;
 _lua_settop($19,-3);
 $1=0;
 label=6;break;
 case 5: 
 /** @type {number} */ var $21=$2;
 _lua_remove($21,-2);
 $1=1;
 label=6;break;
 case 6: 
 /** @type {number} */ var $23=$1;
 STACKTOP=sp;return $23;
 }
}
Module["_luaL_getmetafield"] = _luaL_getmetafield;
/**
 * @param {number} $L
 * @param {number} $obj
 * @param {number} $event
 * @return {number}
 */
function _luaL_callmeta($L,$obj,$event){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 $2=$L;
 $3=$obj;
 $4=$event;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$3;
 /** @type {number} */ var $7=_lua_absindex($5,$6);
 $3=$7;
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=$3;
 /** @type {number} */ var $10=$4;
 /** @type {number} */ var $11=_luaL_getmetafield($8,$9,$10);
 /** @type {number} */ var $12=($11|0)!=0;
 if($12){label=3;break;}else{label=2;break;}
 case 2: 
 $1=0;
 label=4;break;
 case 3: 
 /** @type {number} */ var $15=$2;
 /** @type {number} */ var $16=$3;
 _lua_pushvalue($15,$16);
 /** @type {number} */ var $17=$2;
 _lua_callk($17,1,1,0,0);
 $1=1;
 label=4;break;
 case 4: 
 /** @type {number} */ var $19=$1;
 STACKTOP=sp;return $19;
 }
}
/**
 * @param {number} $L
 * @param {number} $idx
 * @return {number}
 */
function _luaL_len($L,$idx){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $l;
 /** @type {number} */ var $isnum=sp;
 $1=$L;
 $2=$idx;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 _lua_len($3,$4);
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=_lua_tointegerx($5,-1,$isnum);
 $l=$6;
 /** @type {number} */ var $7=HEAP32[(($isnum)>>2)];
 /** @type {number} */ var $8=($7|0)!=0;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=_luaL_error($10,6672,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=3;break;
 case 3: 
 /** @type {number} */ var $13=$1;
 _lua_settop($13,-2);
 /** @type {number} */ var $14=$l;
 STACKTOP=sp;return $14;
 }
}
/**
 * @param {number} $L
 * @param {number} $idx
 * @param {number} $len
 * @return {number}
 */
function _luaL_tolstring($L,$idx,$len){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$L;
 $2=$idx;
 $3=$len;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=_luaL_callmeta($4,$5,6504);
 /** @type {number} */ var $7=($6|0)!=0;
 if($7){label=8;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=_lua_type($9,$10);
 if(($11|0)==3|($11|0)==4){ label=3;break;}else if(($11|0)==1){ label=4;break;}else if(($11|0)==0){ label=5;break;}else{label=6;break;}
 case 3: 
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=$2;
 _lua_pushvalue($13,$14);
 label=7;break;
 case 4: 
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=$2;
 /** @type {number} */ var $19=_lua_toboolean($17,$18);
 /** @type {number} */ var $20=($19|0)!=0;
 /** @type {number} */ var $21=($20?6336:6248);
 /** @type {number} */ var $22=_lua_pushstring($16,$21);
 label=7;break;
 case 5: 
 /** @type {number} */ var $24=$1;
 /** @type {number} */ var $25=_lua_pushlstring($24,6160,3);
 label=7;break;
 case 6: 
 /** @type {number} */ var $27=$1;
 /** @type {number} */ var $28=$1;
 /** @type {number} */ var $29=$1;
 /** @type {number} */ var $30=$2;
 /** @type {number} */ var $31=_lua_type($29,$30);
 /** @type {number} */ var $32=_lua_typename($28,$31);
 /** @type {number} */ var $33=$1;
 /** @type {number} */ var $34=$2;
 /** @type {number} */ var $35=_lua_topointer($33,$34);
 /** @type {number} */ var $36=_lua_pushfstring($27,6016,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$32,HEAP32[(((tempVarArgs)+(8))>>2)]=$35,tempVarArgs)); STACKTOP=tempVarArgs;
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 /** @type {number} */ var $39=$1;
 /** @type {number} */ var $40=$3;
 /** @type {number} */ var $41=_lua_tolstring($39,-1,$40);
 STACKTOP=sp;return $41;
 }
}
/**
 * @param {number} $L
 * @param {number} $l
 * @param {number} $nup
 * @return {number}
 */
function _luaL_setfuncs($L,$l,$nup){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $i;
 $1=$L;
 $2=$l;
 $3=$nup;
 /** @type {number} */ var $4=$1;
 _luaL_checkversion_($4,502);
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=$3;
 _luaL_checkstack($5,$6,5920);
 label=2;break;
 case 2: 
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=(($8)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=($10|0)!=0;
 if($11){label=3;break;}else{label=9;break;}
 case 3: 
 $i=0;
 label=4;break;
 case 4: 
 /** @type {number} */ var $14=$i;
 /** @type {number} */ var $15=$3;
 /** @type {number} */ var $16=($14|0)<($15|0);
 if($16){label=5;break;}else{label=7;break;}
 case 5: 
 /** @type {number} */ var $18=$1;
 /** @type {number} */ var $19=$3;
 /** @type {number} */ var $20=(((-$19))|0);
 _lua_pushvalue($18,$20);
 label=6;break;
 case 6: 
 /** @type {number} */ var $22=$i;
 /** @type {number} */ var $23=((($22)+(1))|0);
 $i=$23;
 label=4;break;
 case 7: 
 /** @type {number} */ var $25=$1;
 /** @type {number} */ var $26=$2;
 /** @type {number} */ var $27=(($26+4)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=$3;
 _lua_pushcclosure($25,$28,$29);
 /** @type {number} */ var $30=$1;
 /** @type {number} */ var $31=$3;
 /** @type {number} */ var $32=((($31)+(2))|0);
 /** @type {number} */ var $33=(((-$32))|0);
 /** @type {number} */ var $34=$2;
 /** @type {number} */ var $35=(($34)|0);
 /** @type {number} */ var $36=HEAP32[(($35)>>2)];
 _lua_setfield($30,$33,$36);
 label=8;break;
 case 8: 
 /** @type {number} */ var $38=$2;
 /** @type {number} */ var $39=(($38+8)|0);
 $2=$39;
 label=2;break;
 case 9: 
 /** @type {number} */ var $41=$1;
 /** @type {number} */ var $42=$3;
 /** @type {number} */ var $43=(((-$42))|0);
 /** @type {number} */ var $44=((($43)-(1))|0);
 _lua_settop($41,$44);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $ver
 * @return {number}
 */
function _luaL_checkversion_($L,$ver){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $v;
 $1=$L;
 $2=$ver;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_lua_version($3);
 $v=$4;
 /** @type {number} */ var $5=$v;
 /** @type {number} */ var $6=_lua_version(0);
 /** @type {number} */ var $7=($5|0)!=($6|0);
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=_luaL_error($9,5632,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=6;break;
 case 3: 
 /** @type {number} */ var $12=$v;
 /** @type {number} */ var $13=HEAPF64[(($12)>>3)];
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=$13!=$14;
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=$2;
 /** @type {number} */ var $19=$v;
 /** @type {number} */ var $20=HEAPF64[(($19)>>3)];
 /** @type {number} */ var $21=_luaL_error($17,5440,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAPF64[((tempVarArgs)>>3)]=$18,HEAPF64[(((tempVarArgs)+(8))>>3)]=$20,tempVarArgs)); STACKTOP=tempVarArgs;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 /** @type {number} */ var $24=$1;
 _lua_pushnumber($24,-4660);
 /** @type {number} */ var $25=$1;
 /** @type {number} */ var $26=_lua_tointegerx($25,-1,0);
 /** @type {number} */ var $27=($26|0)!=-4660;
 if($27){label=8;break;}else{label=7;break;}
 case 7: 
 /** @type {number} */ var $29=$1;
 /** @type {number} */ var $30=_lua_tounsignedx($29,-1,0);
 /** @type {number} */ var $31=($30|0)!=-4660;
 if($31){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $33=$1;
 /** @type {number} */ var $34=_luaL_error($33,5240,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=9;break;
 case 9: 
 /** @type {number} */ var $36=$1;
 _lua_settop($36,-2);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $idx
 * @param {number} $fname
 * @return {number}
 */
function _luaL_getsubtable($L,$idx,$fname){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 $2=$L;
 $3=$idx;
 $4=$fname;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$3;
 /** @type {number} */ var $7=$4;
 _lua_getfield($5,$6,$7);
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=_lua_type($8,-1);
 /** @type {number} */ var $10=($9|0)==5;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 $1=1;
 label=4;break;
 case 3: 
 /** @type {number} */ var $13=$2;
 _lua_settop($13,-2);
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=$3;
 /** @type {number} */ var $16=_lua_absindex($14,$15);
 $3=$16;
 /** @type {number} */ var $17=$2;
 _lua_createtable($17,0,0);
 /** @type {number} */ var $18=$2;
 _lua_pushvalue($18,-1);
 /** @type {number} */ var $19=$2;
 /** @type {number} */ var $20=$3;
 /** @type {number} */ var $21=$4;
 _lua_setfield($19,$20,$21);
 $1=0;
 label=4;break;
 case 4: 
 /** @type {number} */ var $23=$1;
 STACKTOP=sp;return $23;
 }
}
/**
 * @param {number} $L
 * @param {number} $modname
 * @param {number} $openf
 * @param {number} $glb
 * @return {number}
 */
function _luaL_requiref($L,$modname,$openf,$glb){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 $1=$L;
 $2=$modname;
 $3=$openf;
 $4=$glb;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=$3;
 _lua_pushcclosure($5,$6,0);
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=_lua_pushstring($7,$8);
 /** @type {number} */ var $10=$1;
 _lua_callk($10,1,1,0,0);
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=_luaL_getsubtable($11,-1001000,5768);
 /** @type {number} */ var $13=$1;
 _lua_pushvalue($13,-2);
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=$2;
 _lua_setfield($14,-2,$15);
 /** @type {number} */ var $16=$1;
 _lua_settop($16,-2);
 /** @type {number} */ var $17=$4;
 /** @type {number} */ var $18=($17|0)!=0;
 if($18){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $20=$1;
 _lua_pushvalue($20,-1);
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=$2;
 _lua_setglobal($21,$22);
 label=3;break;
 case 3: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $s
 * @param {number} $p
 * @param {number} $r
 * @return {number}
 */
function _luaL_gsub($L,$s,$p,$r){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1040)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $wild;
 /** @type {number} */ var $l;
 /** @type {number} */ var $b=sp;
 $1=$L;
 $2=$s;
 $3=$p;
 $4=$r;
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=_strlen($5);
 $l=$6;
 /** @type {number} */ var $7=$1;
 _luaL_buffinit($7,$b);
 label=2;break;
 case 2: 
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=$3;
 /** @type {number} */ var $11=_strstr($9,$10);
 $wild=$11;
 /** @type {number} */ var $12=($11|0)!=0;
 if($12){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=$wild;
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=$15;
 /** @type {number} */ var $18=$16;
 /** @type {number} */ var $19=((($17)-($18))|0);
 _luaL_addlstring($b,$14,$19);
 /** @type {number} */ var $20=$4;
 _luaL_addstring($b,$20);
 /** @type {number} */ var $21=$wild;
 /** @type {number} */ var $22=$l;
 /** @type {number} */ var $23=(($21+$22)|0);
 $2=$23;
 label=2;break;
 case 4: 
 /** @type {number} */ var $25=$2;
 _luaL_addstring($b,$25);
 _luaL_pushresult($b);
 /** @type {number} */ var $26=$1;
 /** @type {number} */ var $27=_lua_tolstring($26,-1,0);
 STACKTOP=sp;return $27;
 }
}
/**
 * @return {number}
 */
function _luaL_newstate(){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $L;
 /** @type {number} */ var $1=_lua_newstate(192,0);
 $L=$1;
 /** @type {number} */ var $2=$L;
 /** @type {number} */ var $3=($2|0)!=0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $5=$L;
 /** @type {number} */ var $6=_lua_atpanic($5,96);
 label=3;break;
 case 3: 
 /** @type {number} */ var $8=$L;
 STACKTOP=sp;return $8;
 }
}
Module["_luaL_newstate"] = _luaL_newstate;
/**
 * @param {number} $L
 * @return {number}
 */
function _countlevels($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $ar=sp;
 /** @type {number} */ var $li;
 /** @type {number} */ var $le;
 /** @type {number} */ var $m;
 $1=$L;
 $li=1;
 $le=1;
 label=2;break;
 case 2: 
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$le;
 /** @type {number} */ var $5=_lua_getstack($3,$4,$ar);
 /** @type {number} */ var $6=($5|0)!=0;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $8=$le;
 $li=$8;
 /** @type {number} */ var $9=$le;
 /** @type {number} */ var $10=($9<<1);
 $le=$10;
 label=2;break;
 case 4: 
 label=5;break;
 case 5: 
 /** @type {number} */ var $13=$li;
 /** @type {number} */ var $14=$le;
 /** @type {number} */ var $15=($13|0)<($14|0);
 if($15){label=6;break;}else{label=10;break;}
 case 6: 
 /** @type {number} */ var $17=$li;
 /** @type {number} */ var $18=$le;
 /** @type {number} */ var $19=((($17)+($18))|0);
 /** @type {number} */ var $20=(((($19|0))/(2))&-1);
 $m=$20;
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=$m;
 /** @type {number} */ var $23=_lua_getstack($21,$22,$ar);
 /** @type {number} */ var $24=($23|0)!=0;
 if($24){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $26=$m;
 /** @type {number} */ var $27=((($26)+(1))|0);
 $li=$27;
 label=9;break;
 case 8: 
 /** @type {number} */ var $29=$m;
 $le=$29;
 label=9;break;
 case 9: 
 label=5;break;
 case 10: 
 /** @type {number} */ var $32=$le;
 /** @type {number} */ var $33=((($32)-(1))|0);
 STACKTOP=sp;return $33;
 }
}
/**
 * @param {number} $L
 * @param {number} $ar
 * @return {number}
 */
function _pushfuncname($L,$ar){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$L;
 $2=$ar;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=(($3+8)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=HEAP8[($5)];
 /** @type {number} */ var $7=(($6<<24)>>24);
 /** @type {number} */ var $8=($7|0)!=0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=$2;
 /** @type {number} */ var $12=(($11+4)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=_lua_pushfstring($10,4488,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$13,tempVarArgs)); STACKTOP=tempVarArgs;
 label=13;break;
 case 3: 
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=(($16+12)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=HEAP8[($18)];
 /** @type {number} */ var $20=(($19<<24)>>24);
 /** @type {number} */ var $21=($20|0)==109;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $23=$1;
 /** @type {number} */ var $24=_lua_pushfstring($23,4344,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=12;break;
 case 5: 
 /** @type {number} */ var $26=$2;
 /** @type {number} */ var $27=(($26+12)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=HEAP8[($28)];
 /** @type {number} */ var $30=(($29<<24)>>24);
 /** @type {number} */ var $31=($30|0)==67;
 if($31){label=6;break;}else{label=10;break;}
 case 6: 
 /** @type {number} */ var $33=$1;
 /** @type {number} */ var $34=$2;
 /** @type {number} */ var $35=_pushglobalfuncname($33,$34);
 /** @type {number} */ var $36=($35|0)!=0;
 if($36){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $38=$1;
 /** @type {number} */ var $39=$1;
 /** @type {number} */ var $40=_lua_tolstring($39,-1,0);
 /** @type {number} */ var $41=_lua_pushfstring($38,4488,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$40,tempVarArgs)); STACKTOP=tempVarArgs;
 /** @type {number} */ var $42=$1;
 _lua_remove($42,-2);
 label=9;break;
 case 8: 
 /** @type {number} */ var $44=$1;
 /** @type {number} */ var $45=_lua_pushlstring($44,11232,1);
 label=9;break;
 case 9: 
 label=11;break;
 case 10: 
 /** @type {number} */ var $48=$1;
 /** @type {number} */ var $49=$2;
 /** @type {number} */ var $50=(($49+36)|0);
 /** @type {number} */ var $51=(($50)|0);
 /** @type {number} */ var $52=$2;
 /** @type {number} */ var $53=(($52+24)|0);
 /** @type {number} */ var $54=HEAP32[(($53)>>2)];
 /** @type {number} */ var $55=_lua_pushfstring($48,4272,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$51,HEAP32[(((tempVarArgs)+(8))>>2)]=$54,tempVarArgs)); STACKTOP=tempVarArgs;
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $ar
 * @return {number}
 */
function _pushglobalfuncname($L,$ar){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $top;
 $2=$L;
 $3=$ar;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_lua_gettop($4);
 $top=$5;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=$3;
 /** @type {number} */ var $8=_lua_getinfo($6,4728,$7);
 /** @type {number} */ var $9=$2;
 _lua_rawgeti($9,-1001000,2);
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=$top;
 /** @type {number} */ var $12=((($11)+(1))|0);
 /** @type {number} */ var $13=_findfield($10,$12,2);
 /** @type {number} */ var $14=($13|0)!=0;
 if($14){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=$top;
 /** @type {number} */ var $18=((($17)+(1))|0);
 _lua_copy($16,-1,$18);
 /** @type {number} */ var $19=$2;
 _lua_settop($19,-3);
 $1=1;
 label=4;break;
 case 3: 
 /** @type {number} */ var $21=$2;
 /** @type {number} */ var $22=$top;
 _lua_settop($21,$22);
 $1=0;
 label=4;break;
 case 4: 
 /** @type {number} */ var $24=$1;
 STACKTOP=sp;return $24;
 }
}
/**
 * @param {number} $L
 * @param {number} $narg
 * @param {number} $tname
 * @return {number}
 */
function _typeerror($L,$narg,$tname){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $msg;
 $1=$L;
 $2=$narg;
 $3=$tname;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=_lua_type($7,$8);
 /** @type {number} */ var $10=_lua_typename($6,$9);
 /** @type {number} */ var $11=_lua_pushfstring($4,4832,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$5,HEAP32[(((tempVarArgs)+(8))>>2)]=$10,tempVarArgs)); STACKTOP=tempVarArgs;
 $msg=$11;
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=$2;
 /** @type {number} */ var $14=$msg;
 /** @type {number} */ var $15=_luaL_argerror($12,$13,$14);
 STACKTOP=sp;return $15;
}
/**
 * @param {number} $L
 * @param {number} $narg
 * @param {number} $tag
 * @return {number}
 */
function _tag_error($L,$narg,$tag){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$L;
 $2=$narg;
 $3=$tag;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=$3;
 /** @type {number} */ var $8=_lua_typename($6,$7);
 /** @type {number} */ var $9=_typeerror($4,$5,$8);
 STACKTOP=sp;return;
}
/**
 * @param {number} $L
 * @param {number} $what
 * @param {number} $fnameindex
 * @return {number}
 */
function _errfile($L,$what,$fnameindex){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $serr;
 /** @type {number} */ var $filename;
 $1=$L;
 $2=$what;
 $3=$fnameindex;
 /** @type {number} */ var $4=___errno_location();
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=_strerror($5);
 $serr=$6;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=$3;
 /** @type {number} */ var $9=_lua_tolstring($7,$8,0);
 /** @type {number} */ var $10=(($9+1)|0);
 $filename=$10;
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=$filename;
 /** @type {number} */ var $14=$serr;
 /** @type {number} */ var $15=_lua_pushfstring($11,4936,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,HEAP32[((tempVarArgs)>>2)]=$12,HEAP32[(((tempVarArgs)+(8))>>2)]=$13,HEAP32[(((tempVarArgs)+(16))>>2)]=$14,tempVarArgs)); STACKTOP=tempVarArgs;
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=$3;
 _lua_remove($16,$17);
 STACKTOP=sp;return 7;
}
/**
 * @param {number} $lf
 * @param {number} $cp
 * @return {number}
 */
function _skipcomment($lf,$cp){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $c;
 $2=$lf;
 $3=$cp;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_skipBOM($4);
 /** @type {number} */ var $6=$3;
 HEAP32[(($6)>>2)]=$5;
 $c=$5;
 /** @type {number} */ var $7=$c;
 /** @type {number} */ var $8=($7|0)==35;
 if($8){label=2;break;}else{label=8;break;}
 case 2: 
 label=3;break;
 case 3: 
 /** @type {number} */ var $11=$2;
 /** @type {number} */ var $12=(($11+4)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=_fgetc($13);
 $c=$14;
 label=4;break;
 case 4: 
 /** @type {number} */ var $16=$c;
 /** @type {number} */ var $17=($16|0)!=-1;
 if($17){label=5;break;}else{var $22=0;label=6;break;}
 case 5: 
 /** @type {number} */ var $19=$c;
 /** @type {number} */ var $20=($19|0)!=10;
 var $22=$20;label=6;break;
 case 6: 
 var $22;
 if($22){label=3;break;}else{label=7;break;}
 case 7: 
 /** @type {number} */ var $24=$2;
 /** @type {number} */ var $25=(($24+4)|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 /** @type {number} */ var $27=_fgetc($26);
 /** @type {number} */ var $28=$3;
 HEAP32[(($28)>>2)]=$27;
 $1=1;
 label=9;break;
 case 8: 
 $1=0;
 label=9;break;
 case 9: 
 /** @type {number} */ var $31=$1;
 STACKTOP=sp;return $31;
 }
}
/**
 * @param {number} $L
 * @param {number} $ud
 * @param {number} $size
 * @return {number}
 */
function _getF($L,$ud,$size){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $lf;
 $2=$L;
 $3=$ud;
 $4=$size;
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=$5;
 $lf=$6;
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=$lf;
 /** @type {number} */ var $9=(($8)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=($10|0)>0;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $13=$lf;
 /** @type {number} */ var $14=(($13)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=$4;
 HEAP32[(($16)>>2)]=$15;
 /** @type {number} */ var $17=$lf;
 /** @type {number} */ var $18=(($17)|0);
 HEAP32[(($18)>>2)]=0;
 label=6;break;
 case 3: 
 /** @type {number} */ var $20=$lf;
 /** @type {number} */ var $21=(($20+4)|0);
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 /** @type {number} */ var $23=_feof($22);
 /** @type {number} */ var $24=($23|0)!=0;
 if($24){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=7;break;
 case 5: 
 /** @type {number} */ var $27=$lf;
 /** @type {number} */ var $28=(($27+8)|0);
 /** @type {number} */ var $29=(($28)|0);
 /** @type {number} */ var $30=$lf;
 /** @type {number} */ var $31=(($30+4)|0);
 /** @type {number} */ var $32=HEAP32[(($31)>>2)];
 /** @type {number} */ var $33=_fread($29,1,1024,$32);
 /** @type {number} */ var $34=$4;
 HEAP32[(($34)>>2)]=$33;
 label=6;break;
 case 6: 
 /** @type {number} */ var $36=$lf;
 /** @type {number} */ var $37=(($36+8)|0);
 /** @type {number} */ var $38=(($37)|0);
 $1=$38;
 label=7;break;
 case 7: 
 /** @type {number} */ var $40=$1;
 STACKTOP=sp;return $40;
 }
}
/**
 * @param {number} $L
 * @param {number} $ud
 * @param {number} $size
 * @return {number}
 */
function _getS($L,$ud,$size){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $ls;
 $2=$L;
 $3=$ud;
 $4=$size;
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=$5;
 $ls=$6;
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=$ls;
 /** @type {number} */ var $9=(($8+4)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=($10|0)==0;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=4;break;
 case 3: 
 /** @type {number} */ var $14=$ls;
 /** @type {number} */ var $15=(($14+4)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=$4;
 HEAP32[(($17)>>2)]=$16;
 /** @type {number} */ var $18=$ls;
 /** @type {number} */ var $19=(($18+4)|0);
 HEAP32[(($19)>>2)]=0;
 /** @type {number} */ var $20=$ls;
 /** @type {number} */ var $21=(($20)|0);
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 $1=$22;
 label=4;break;
 case 4: 
 /** @type {number} */ var $24=$1;
 STACKTOP=sp;return $24;
 }
}
/**
 * @param {number} $ud
 * @param {number} $ptr
 * @param {number} $osize
 * @param {number} $nsize
 * @return {number}
 */
function _l_alloc($ud,$ptr,$osize,$nsize){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 $2=$ud;
 $3=$ptr;
 $4=$osize;
 $5=$nsize;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=$4;
 /** @type {number} */ var $8=$5;
 /** @type {number} */ var $9=($8|0)==0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $11=$3;
 _free($11);
 $1=0;
 label=4;break;
 case 3: 
 /** @type {number} */ var $13=$3;
 /** @type {number} */ var $14=$5;
 /** @type {number} */ var $15=_realloc($13,$14);
 $1=$15;
 label=4;break;
 case 4: 
 /** @type {number} */ var $17=$1;
 STACKTOP=sp;return $17;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _panic($L){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=HEAP32[((_stderr)>>2)];
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_lua_tolstring($3,-1,0);
 /** @type {number} */ var $5=_fprintf($2,5128,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$4,tempVarArgs)); STACKTOP=tempVarArgs;
 /** @type {number} */ var $6=HEAP32[((_stderr)>>2)];
 /** @type {number} */ var $7=_fflush($6);
 STACKTOP=sp;return 0;
}
/**
 * @param {number} $L
 * @param {number} $objidx
 * @param {number} $level
 * @return {number}
 */
function _findfield($L,$objidx,$level){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 $2=$L;
 $3=$objidx;
 $4=$level;
 /** @type {number} */ var $5=$4;
 /** @type {number} */ var $6=($5|0)==0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=_lua_type($8,-1);
 /** @type {number} */ var $10=($9|0)==5;
 if($10){label=4;break;}else{label=3;break;}
 case 3: 
 $1=0;
 label=15;break;
 case 4: 
 /** @type {number} */ var $13=$2;
 _lua_pushnil($13);
 label=5;break;
 case 5: 
 /** @type {number} */ var $15=$2;
 /** @type {number} */ var $16=_lua_next($15,-2);
 /** @type {number} */ var $17=($16|0)!=0;
 if($17){label=6;break;}else{label=14;break;}
 case 6: 
 /** @type {number} */ var $19=$2;
 /** @type {number} */ var $20=_lua_type($19,-2);
 /** @type {number} */ var $21=($20|0)==4;
 if($21){label=7;break;}else{label=13;break;}
 case 7: 
 /** @type {number} */ var $23=$2;
 /** @type {number} */ var $24=$3;
 /** @type {number} */ var $25=_lua_rawequal($23,$24,-1);
 /** @type {number} */ var $26=($25|0)!=0;
 if($26){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $28=$2;
 _lua_settop($28,-2);
 $1=1;
 label=15;break;
 case 9: 
 /** @type {number} */ var $30=$2;
 /** @type {number} */ var $31=$3;
 /** @type {number} */ var $32=$4;
 /** @type {number} */ var $33=((($32)-(1))|0);
 /** @type {number} */ var $34=_findfield($30,$31,$33);
 /** @type {number} */ var $35=($34|0)!=0;
 if($35){label=10;break;}else{label=11;break;}
 case 10: 
 /** @type {number} */ var $37=$2;
 _lua_remove($37,-2);
 /** @type {number} */ var $38=$2;
 /** @type {number} */ var $39=_lua_pushlstring($38,4624,1);
 /** @type {number} */ var $40=$2;
 _lua_insert($40,-2);
 /** @type {number} */ var $41=$2;
 _lua_concat($41,3);
 $1=1;
 label=15;break;
 case 11: 
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 /** @type {number} */ var $45=$2;
 _lua_settop($45,-2);
 label=5;break;
 case 14: 
 $1=0;
 label=15;break;
 case 15: 
 /** @type {number} */ var $48=$1;
 STACKTOP=sp;return $48;
 }
}
/**
 * @param {number} $lf
 * @return {number}
 */
function _skipBOM($lf){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $p;
 /** @type {number} */ var $c;
 $2=$lf;
 $p=5048;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=(($3)|0);
 HEAP32[(($4)>>2)]=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=(($6+4)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=_fgetc($8);
 $c=$9;
 /** @type {number} */ var $10=$c;
 /** @type {number} */ var $11=($10|0)==-1;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 /** @type {number} */ var $13=$c;
 /** @type {number} */ var $14=$p;
 /** @type {number} */ var $15=(($14+1)|0);
 $p=$15;
 /** @type {number} */ var $16=HEAP8[($14)];
 /** @type {number} */ var $17=($16&255);
 /** @type {number} */ var $18=($13|0)!=($17|0);
 if($18){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $20=$c;
 $1=$20;
 label=8;break;
 case 5: 
 /** @type {number} */ var $22=$c;
 /** @type {number} */ var $23=(($22)&255);
 /** @type {number} */ var $24=$2;
 /** @type {number} */ var $25=(($24)|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 /** @type {number} */ var $27=((($26)+(1))|0);
 HEAP32[(($25)>>2)]=$27;
 /** @type {number} */ var $28=$2;
 /** @type {number} */ var $29=(($28+8)|0);
 /** @type {number} */ var $30=(($29+$26)|0);
 HEAP8[($30)]=$23;
 label=6;break;
 case 6: 
 /** @type {number} */ var $32=$p;
 /** @type {number} */ var $33=HEAP8[($32)];
 /** @type {number} */ var $34=(($33<<24)>>24);
 /** @type {number} */ var $35=($34|0)!=0;
 if($35){label=2;break;}else{label=7;break;}
 case 7: 
 /** @type {number} */ var $37=$2;
 /** @type {number} */ var $38=(($37)|0);
 HEAP32[(($38)>>2)]=0;
 /** @type {number} */ var $39=$2;
 /** @type {number} */ var $40=(($39+4)|0);
 /** @type {number} */ var $41=HEAP32[(($40)>>2)];
 /** @type {number} */ var $42=_fgetc($41);
 $1=$42;
 label=8;break;
 case 8: 
 /** @type {number} */ var $44=$1;
 STACKTOP=sp;return $44;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaopen_base($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 _lua_rawgeti($2,-1001000,2);
 /** @type {number} */ var $3=$1;
 _lua_rawgeti($3,-1001000,2);
 /** @type {number} */ var $4=$1;
 _lua_setfield($4,-2,5776);
 /** @type {number} */ var $5=$1;
 _luaL_setfuncs($5,2384,0);
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=_lua_pushlstring($6,10800,7);
 /** @type {number} */ var $8=$1;
 _lua_setfield($8,-2,8528);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaB_assert($L){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $2=$L;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=_lua_toboolean($3,1);
 /** @type {number} */ var $5=($4|0)!=0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=_luaL_optlstring($8,2,4048,0);
 /** @type {number} */ var $10=_luaL_error($7,4112,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$9,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=$10;
 label=4;break;
 case 3: 
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=_lua_gettop($12);
 $1=$13;
 label=4;break;
 case 4: 
 /** @type {number} */ var $15=$1;
 STACKTOP=sp;return $15;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaB_collectgarbage($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $o;
 /** @type {number} */ var $ex;
 /** @type {number} */ var $res;
 /** @type {number} */ var $b;
 $2=$L;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=_luaL_checkoption($3,1,5032,1608);
 /** @type {number} */ var $5=((1560+($4<<2))|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 $o=$6;
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=_luaL_optinteger($7,2,0);
 $ex=$8;
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=$o;
 /** @type {number} */ var $11=$ex;
 /** @type {number} */ var $12=_lua_gc($9,$10,$11);
 $res=$12;
 /** @type {number} */ var $13=$o;
 if(($13|0)==3){ label=2;break;}else if(($13|0)==5|($13|0)==9){ label=3;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $15=$2;
 /** @type {number} */ var $16=_lua_gc($15,4,0);
 $b=$16;
 /** @type {number} */ var $17=$2;
 /** @type {number} */ var $18=$res;
 /** @type {number} */ var $19=($18|0);
 /** @type {number} */ var $20=$b;
 /** @type {number} */ var $21=($20|0);
 /** @type {number} */ var $22=($21)/(1024);
 /** @type {number} */ var $23=($19)+($22);
 _lua_pushnumber($17,$23);
 /** @type {number} */ var $24=$2;
 /** @type {number} */ var $25=$b;
 _lua_pushinteger($24,$25);
 $1=2;
 label=5;break;
 case 3: 
 /** @type {number} */ var $27=$2;
 /** @type {number} */ var $28=$res;
 _lua_pushboolean($27,$28);
 $1=1;
 label=5;break;
 case 4: 
 /** @type {number} */ var $30=$2;
 /** @type {number} */ var $31=$res;
 _lua_pushinteger($30,$31);
 $1=1;
 label=5;break;
 case 5: 
 /** @type {number} */ var $33=$1;
 STACKTOP=sp;return $33;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaB_dofile($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $fname;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_optlstring($2,1,0,0);
 $fname=$3;
 /** @type {number} */ var $4=$1;
 _lua_settop($4,1);
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=$fname;
 /** @type {number} */ var $7=_luaL_loadfilex($5,$6,0);
 /** @type {number} */ var $8=($7|0)!=0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=_lua_error($10);
 label=3;break;
 case 3: 
 /** @type {number} */ var $13=$1;
 _lua_callk($13,0,-1,0,194);
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=_dofilecont($14);
 STACKTOP=sp;return $15;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaB_error($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $level;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_optinteger($2,2,1);
 $level=$3;
 /** @type {number} */ var $4=$1;
 _lua_settop($4,1);
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=_lua_isstring($5,1);
 /** @type {number} */ var $7=($6|0)!=0;
 if($7){label=2;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $9=$level;
 /** @type {number} */ var $10=($9|0)>0;
 if($10){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=$level;
 _luaL_where($12,$13);
 /** @type {number} */ var $14=$1;
 _lua_pushvalue($14,1);
 /** @type {number} */ var $15=$1;
 _lua_concat($15,2);
 label=4;break;
 case 4: 
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=_lua_error($17);
 STACKTOP=sp;return $18;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaB_getmetatable($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $2=$L;
 /** @type {number} */ var $3=$2;
 _luaL_checkany($3,1);
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_lua_getmetatable($4,1);
 /** @type {number} */ var $6=($5|0)!=0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $8=$2;
 _lua_pushnil($8);
 $1=1;
 label=4;break;
 case 3: 
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=_luaL_getmetafield($10,1,7280);
 $1=1;
 label=4;break;
 case 4: 
 /** @type {number} */ var $13=$1;
 STACKTOP=sp;return $13;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaB_ipairs($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_pairsmeta($2,5424,1,178);
 STACKTOP=sp;return $3;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaB_loadfile($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $fname;
 /** @type {number} */ var $mode;
 /** @type {number} */ var $env;
 /** @type {number} */ var $status;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_optlstring($2,1,0,0);
 $fname=$3;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=_luaL_optlstring($4,2,0,0);
 $mode=$5;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=_lua_type($6,3);
 /** @type {number} */ var $8=($7|0)==-1;
 /** @type {number} */ var $9=$8^1;
 /** @type {number} */ var $10=($9&1);
 $env=$10;
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=$fname;
 /** @type {number} */ var $13=$mode;
 /** @type {number} */ var $14=_luaL_loadfilex($11,$12,$13);
 $status=$14;
 /** @type {number} */ var $15=$status;
 /** @type {number} */ var $16=($15|0)==0;
 if($16){label=2;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $18=$env;
 /** @type {number} */ var $19=($18|0)!=0;
 if($19){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $21=$1;
 _lua_pushvalue($21,3);
 /** @type {number} */ var $22=$1;
 /** @type {number} */ var $23=_lua_setupvalue($22,-2,1);
 label=4;break;
 case 4: 
 /** @type {number} */ var $25=$1;
 /** @type {number} */ var $26=$status;
 /** @type {number} */ var $27=_load_aux($25,$26);
 STACKTOP=sp;return $27;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaB_load($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $status;
 /** @type {number} */ var $l=sp;
 /** @type {number} */ var $top;
 /** @type {number} */ var $s;
 /** @type {number} */ var $mode;
 /** @type {number} */ var $chunkname;
 /** @type {number} */ var $chunkname1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_lua_gettop($2);
 $top=$3;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=_lua_tolstring($4,1,$l);
 $s=$5;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=_luaL_optlstring($6,3,6008,0);
 $mode=$7;
 /** @type {number} */ var $8=$s;
 /** @type {number} */ var $9=($8|0)!=0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=$s;
 /** @type {number} */ var $13=_luaL_optlstring($11,2,$12,0);
 $chunkname=$13;
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=$s;
 /** @type {number} */ var $16=HEAP32[(($l)>>2)];
 /** @type {number} */ var $17=$chunkname;
 /** @type {number} */ var $18=$mode;
 /** @type {number} */ var $19=_luaL_loadbufferx($14,$15,$16,$17,$18);
 $status=$19;
 label=4;break;
 case 3: 
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=_luaL_optlstring($21,2,5912,0);
 $chunkname1=$22;
 /** @type {number} */ var $23=$1;
 _luaL_checktype($23,1,6);
 /** @type {number} */ var $24=$1;
 _lua_settop($24,5);
 /** @type {number} */ var $25=$1;
 /** @type {number} */ var $26=$chunkname1;
 /** @type {number} */ var $27=$mode;
 /** @type {number} */ var $28=_lua_load($25,350,0,$26,$27);
 $status=$28;
 label=4;break;
 case 4: 
 /** @type {number} */ var $30=$status;
 /** @type {number} */ var $31=($30|0)==0;
 if($31){label=5;break;}else{label=7;break;}
 case 5: 
 /** @type {number} */ var $33=$top;
 /** @type {number} */ var $34=($33|0)>=4;
 if($34){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $36=$1;
 _lua_pushvalue($36,4);
 /** @type {number} */ var $37=$1;
 /** @type {number} */ var $38=_lua_setupvalue($37,-2,1);
 label=7;break;
 case 7: 
 /** @type {number} */ var $40=$1;
 /** @type {number} */ var $41=$status;
 /** @type {number} */ var $42=_load_aux($40,$41);
 STACKTOP=sp;return $42;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaB_next($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $2=$L;
 /** @type {number} */ var $3=$2;
 _luaL_checktype($3,1,5);
 /** @type {number} */ var $4=$2;
 _lua_settop($4,2);
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=_lua_next($5,1);
 /** @type {number} */ var $7=($6|0)!=0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=2;
 label=4;break;
 case 3: 
 /** @type {number} */ var $10=$2;
 _lua_pushnil($10);
 $1=1;
 label=4;break;
 case 4: 
 /** @type {number} */ var $12=$1;
 STACKTOP=sp;return $12;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaB_pairs($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_pairsmeta($2,6152,0,28);
 STACKTOP=sp;return $3;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaB_pcall($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $status;
 $1=$L;
 /** @type {number} */ var $2=$1;
 _luaL_checkany($2,1);
 /** @type {number} */ var $3=$1;
 _lua_pushnil($3);
 /** @type {number} */ var $4=$1;
 _lua_insert($4,1);
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=_lua_gettop($6);
 /** @type {number} */ var $8=((($7)-(2))|0);
 /** @type {number} */ var $9=_lua_pcallk($5,$8,-1,0,0,26);
 $status=$9;
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=$status;
 /** @type {number} */ var $12=($11|0)==0;
 /** @type {number} */ var $13=($12&1);
 /** @type {number} */ var $14=_finishpcall($10,$13);
 STACKTOP=sp;return $14;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaB_print($L){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $n;
 /** @type {number} */ var $i;
 /** @type {number} */ var $s;
 /** @type {number} */ var $l=sp;
 $2=$L;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=_lua_gettop($3);
 $n=$4;
 /** @type {number} */ var $5=$2;
 _lua_getglobal($5,8936);
 $i=1;
 label=2;break;
 case 2: 
 /** @type {number} */ var $7=$i;
 /** @type {number} */ var $8=$n;
 /** @type {number} */ var $9=($7|0)<=($8|0);
 if($9){label=3;break;}else{label=9;break;}
 case 3: 
 /** @type {number} */ var $11=$2;
 _lua_pushvalue($11,-1);
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=$i;
 _lua_pushvalue($12,$13);
 /** @type {number} */ var $14=$2;
 _lua_callk($14,1,1,0,0);
 /** @type {number} */ var $15=$2;
 /** @type {number} */ var $16=_lua_tolstring($15,-1,$l);
 $s=$16;
 /** @type {number} */ var $17=$s;
 /** @type {number} */ var $18=($17|0)==0;
 if($18){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $20=$2;
 /** @type {number} */ var $21=_luaL_error($20,6456,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=$21;
 label=10;break;
 case 5: 
 /** @type {number} */ var $23=$i;
 /** @type {number} */ var $24=($23|0)>1;
 if($24){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $26=HEAP32[((_stdout)>>2)];
 /** @type {number} */ var $27=_fwrite(6320,1,1,$26);
 label=7;break;
 case 7: 
 /** @type {number} */ var $29=$s;
 /** @type {number} */ var $30=HEAP32[(($l)>>2)];
 /** @type {number} */ var $31=HEAP32[((_stdout)>>2)];
 /** @type {number} */ var $32=_fwrite($29,1,$30,$31);
 /** @type {number} */ var $33=$2;
 _lua_settop($33,-2);
 label=8;break;
 case 8: 
 /** @type {number} */ var $35=$i;
 /** @type {number} */ var $36=((($35)+(1))|0);
 $i=$36;
 label=2;break;
 case 9: 
 /** @type {number} */ var $38=HEAP32[((_stdout)>>2)];
 /** @type {number} */ var $39=_fwrite(6240,1,1,$38);
 /** @type {number} */ var $40=HEAP32[((_stdout)>>2)];
 /** @type {number} */ var $41=_fflush($40);
 $1=0;
 label=10;break;
 case 10: 
 /** @type {number} */ var $43=$1;
 STACKTOP=sp;return $43;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaB_rawequal($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 _luaL_checkany($2,1);
 /** @type {number} */ var $3=$1;
 _luaL_checkany($3,2);
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=_lua_rawequal($5,1,2);
 _lua_pushboolean($4,$6);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaB_rawlen($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $t;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_lua_type($2,1);
 $t=$3;
 /** @type {number} */ var $4=$t;
 /** @type {number} */ var $5=($4|0)==5;
 if($5){var $14=1;label=4;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $7=$t;
 /** @type {number} */ var $8=($7|0)==4;
 if($8){var $14=1;label=4;break;}else{label=3;break;}
 case 3: 
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=_luaL_argerror($10,1,6640);
 /** @type {number} */ var $12=($11|0)!=0;
 var $14=$12;label=4;break;
 case 4: 
 var $14;
 /** @type {number} */ var $15=($14&1);
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=_lua_rawlen($17,1);
 _lua_pushinteger($16,$18);
 STACKTOP=sp;return 1;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaB_rawget($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 _luaL_checktype($2,1,5);
 /** @type {number} */ var $3=$1;
 _luaL_checkany($3,2);
 /** @type {number} */ var $4=$1;
 _lua_settop($4,2);
 /** @type {number} */ var $5=$1;
 _lua_rawget($5,1);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaB_rawset($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 _luaL_checktype($2,1,5);
 /** @type {number} */ var $3=$1;
 _luaL_checkany($3,2);
 /** @type {number} */ var $4=$1;
 _luaL_checkany($4,3);
 /** @type {number} */ var $5=$1;
 _lua_settop($5,3);
 /** @type {number} */ var $6=$1;
 _lua_rawset($6,1);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaB_select($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $n;
 /** @type {number} */ var $i;
 $2=$L;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=_lua_gettop($3);
 $n=$4;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=_lua_type($5,1);
 /** @type {number} */ var $7=($6|0)==4;
 if($7){label=2;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=_lua_tolstring($9,1,0);
 /** @type {number} */ var $11=HEAP8[($10)];
 /** @type {number} */ var $12=(($11<<24)>>24);
 /** @type {number} */ var $13=($12|0)==35;
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $15=$2;
 /** @type {number} */ var $16=$n;
 /** @type {number} */ var $17=((($16)-(1))|0);
 _lua_pushinteger($15,$17);
 $1=1;
 label=12;break;
 case 4: 
 /** @type {number} */ var $19=$2;
 /** @type {number} */ var $20=_luaL_checkinteger($19,1);
 $i=$20;
 /** @type {number} */ var $21=$i;
 /** @type {number} */ var $22=($21|0)<0;
 if($22){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $24=$n;
 /** @type {number} */ var $25=$i;
 /** @type {number} */ var $26=((($24)+($25))|0);
 $i=$26;
 label=9;break;
 case 6: 
 /** @type {number} */ var $28=$i;
 /** @type {number} */ var $29=$n;
 /** @type {number} */ var $30=($28|0)>($29|0);
 if($30){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $32=$n;
 $i=$32;
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 /** @type {number} */ var $35=$i;
 /** @type {number} */ var $36=1<=($35|0);
 if($36){var $42=1;label=11;break;}else{label=10;break;}
 case 10: 
 /** @type {number} */ var $38=$2;
 /** @type {number} */ var $39=_luaL_argerror($38,1,6896);
 /** @type {number} */ var $40=($39|0)!=0;
 var $42=$40;label=11;break;
 case 11: 
 var $42;
 /** @type {number} */ var $43=($42&1);
 /** @type {number} */ var $44=$n;
 /** @type {number} */ var $45=$i;
 /** @type {number} */ var $46=((($44)-($45))|0);
 $1=$46;
 label=12;break;
 case 12: 
 /** @type {number} */ var $48=$1;
 STACKTOP=sp;return $48;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaB_setmetatable($L){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $t;
 $2=$L;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=_lua_type($3,2);
 $t=$4;
 /** @type {number} */ var $5=$2;
 _luaL_checktype($5,1,5);
 /** @type {number} */ var $6=$t;
 /** @type {number} */ var $7=($6|0)==0;
 if($7){var $16=1;label=4;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $9=$t;
 /** @type {number} */ var $10=($9|0)==5;
 if($10){var $16=1;label=4;break;}else{label=3;break;}
 case 3: 
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=_luaL_argerror($12,2,7464);
 /** @type {number} */ var $14=($13|0)!=0;
 var $16=$14;label=4;break;
 case 4: 
 var $16;
 /** @type {number} */ var $17=($16&1);
 /** @type {number} */ var $18=$2;
 /** @type {number} */ var $19=_luaL_getmetafield($18,1,7280);
 /** @type {number} */ var $20=($19|0)!=0;
 if($20){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $22=$2;
 /** @type {number} */ var $23=_luaL_error($22,7120,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=$23;
 label=7;break;
 case 6: 
 /** @type {number} */ var $25=$2;
 _lua_settop($25,2);
 /** @type {number} */ var $26=$2;
 /** @type {number} */ var $27=_lua_setmetatable($26,1);
 $1=1;
 label=7;break;
 case 7: 
 /** @type {number} */ var $29=$1;
 STACKTOP=sp;return $29;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaB_tonumber($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $isnum=sp;
 /** @type {number} */ var $n;
 /** @type {number} */ var $l=(sp)+(8);
 /** @type {number} */ var $s;
 /** @type {number} */ var $e;
 /** @type {number} */ var $base;
 /** @type {number} */ var $neg;
 /** @type {number} */ var $n1;
 /** @type {number} */ var $digit;
 $2=$L;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=_lua_type($3,2);
 /** @type {number} */ var $5=($4|0)<=0;
 if($5){label=2;break;}else{label=5;break;}
 case 2: 
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=_lua_tonumberx($7,1,$isnum);
 $n=$8;
 /** @type {number} */ var $9=HEAP32[(($isnum)>>2)];
 /** @type {number} */ var $10=($9|0)!=0;
 if($10){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=$n;
 _lua_pushnumber($12,$13);
 $1=1;
 label=30;break;
 case 4: 
 /** @type {number} */ var $15=$2;
 _luaL_checkany($15,1);
 label=29;break;
 case 5: 
 /** @type {number} */ var $17=$2;
 /** @type {number} */ var $18=_luaL_checklstring($17,1,$l);
 $s=$18;
 /** @type {number} */ var $19=$s;
 /** @type {number} */ var $20=HEAP32[(($l)>>2)];
 /** @type {number} */ var $21=(($19+$20)|0);
 $e=$21;
 /** @type {number} */ var $22=$2;
 /** @type {number} */ var $23=_luaL_checkinteger($22,2);
 $base=$23;
 $neg=0;
 /** @type {number} */ var $24=$base;
 /** @type {number} */ var $25=2<=($24|0);
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $27=$base;
 /** @type {number} */ var $28=($27|0)<=36;
 if($28){var $34=1;label=8;break;}else{label=7;break;}
 case 7: 
 /** @type {number} */ var $30=$2;
 /** @type {number} */ var $31=_luaL_argerror($30,2,7784);
 /** @type {number} */ var $32=($31|0)!=0;
 var $34=$32;label=8;break;
 case 8: 
 var $34;
 /** @type {number} */ var $35=($34&1);
 /** @type {number} */ var $36=$s;
 /** @type {number} */ var $37=_strspn($36,7632);
 /** @type {number} */ var $38=$s;
 /** @type {number} */ var $39=(($38+$37)|0);
 $s=$39;
 /** @type {number} */ var $40=$s;
 /** @type {number} */ var $41=HEAP8[($40)];
 /** @type {number} */ var $42=(($41<<24)>>24);
 /** @type {number} */ var $43=($42|0)==45;
 if($43){label=9;break;}else{label=10;break;}
 case 9: 
 /** @type {number} */ var $45=$s;
 /** @type {number} */ var $46=(($45+1)|0);
 $s=$46;
 $neg=1;
 label=13;break;
 case 10: 
 /** @type {number} */ var $48=$s;
 /** @type {number} */ var $49=HEAP8[($48)];
 /** @type {number} */ var $50=(($49<<24)>>24);
 /** @type {number} */ var $51=($50|0)==43;
 if($51){label=11;break;}else{label=12;break;}
 case 11: 
 /** @type {number} */ var $53=$s;
 /** @type {number} */ var $54=(($53+1)|0);
 $s=$54;
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 /** @type {number} */ var $57=$s;
 /** @type {number} */ var $58=HEAP8[($57)];
 /** @type {number} */ var $59=($58&255);
 /** @type {number} */ var $60=_isalnum($59);
 /** @type {number} */ var $61=($60|0)!=0;
 if($61){label=14;break;}else{label=28;break;}
 case 14: 
 $n1=0;
 label=15;break;
 case 15: 
 /** @type {number} */ var $64=$s;
 /** @type {number} */ var $65=HEAP8[($64)];
 /** @type {number} */ var $66=($65&255);
 /** @type {number} */ var $67=_isdigit($66);
 /** @type {number} */ var $68=($67|0)!=0;
 if($68){label=16;break;}else{label=17;break;}
 case 16: 
 /** @type {number} */ var $70=$s;
 /** @type {number} */ var $71=HEAP8[($70)];
 /** @type {number} */ var $72=(($71<<24)>>24);
 /** @type {number} */ var $73=((($72)-(48))|0);
 var $82=$73;label=18;break;
 case 17: 
 /** @type {number} */ var $75=$s;
 /** @type {number} */ var $76=HEAP8[($75)];
 /** @type {number} */ var $77=($76&255);
 /** @type {number} */ var $78=_toupper($77);
 /** @type {number} */ var $79=((($78)-(65))|0);
 /** @type {number} */ var $80=((($79)+(10))|0);
 var $82=$80;label=18;break;
 case 18: 
 var $82;
 $digit=$82;
 /** @type {number} */ var $83=$digit;
 /** @type {number} */ var $84=$base;
 /** @type {number} */ var $85=($83|0)>=($84|0);
 if($85){label=19;break;}else{label=20;break;}
 case 19: 
 label=22;break;
 case 20: 
 /** @type {number} */ var $88=$n1;
 /** @type {number} */ var $89=$base;
 /** @type {number} */ var $90=($89|0);
 /** @type {number} */ var $91=($88)*($90);
 /** @type {number} */ var $92=$digit;
 /** @type {number} */ var $93=($92|0);
 /** @type {number} */ var $94=($91)+($93);
 $n1=$94;
 /** @type {number} */ var $95=$s;
 /** @type {number} */ var $96=(($95+1)|0);
 $s=$96;
 label=21;break;
 case 21: 
 /** @type {number} */ var $98=$s;
 /** @type {number} */ var $99=HEAP8[($98)];
 /** @type {number} */ var $100=($99&255);
 /** @type {number} */ var $101=_isalnum($100);
 /** @type {number} */ var $102=($101|0)!=0;
 if($102){label=15;break;}else{label=22;break;}
 case 22: 
 /** @type {number} */ var $104=$s;
 /** @type {number} */ var $105=_strspn($104,7632);
 /** @type {number} */ var $106=$s;
 /** @type {number} */ var $107=(($106+$105)|0);
 $s=$107;
 /** @type {number} */ var $108=$s;
 /** @type {number} */ var $109=$e;
 /** @type {number} */ var $110=($108|0)==($109|0);
 if($110){label=23;break;}else{label=27;break;}
 case 23: 
 /** @type {number} */ var $112=$2;
 /** @type {number} */ var $113=$neg;
 /** @type {number} */ var $114=($113|0)!=0;
 if($114){label=24;break;}else{label=25;break;}
 case 24: 
 /** @type {number} */ var $116=$n1;
 /** @type {number} */ var $117=((-.0))-($116);
 var $121=$117;label=26;break;
 case 25: 
 /** @type {number} */ var $119=$n1;
 var $121=$119;label=26;break;
 case 26: 
 var $121;
 _lua_pushnumber($112,$121);
 $1=1;
 label=30;break;
 case 27: 
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 /** @type {number} */ var $125=$2;
 _lua_pushnil($125);
 $1=1;
 label=30;break;
 case 30: 
 /** @type {number} */ var $127=$1;
 STACKTOP=sp;return $127;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaB_tostring($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 _luaL_checkany($2,1);
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaL_tolstring($3,1,0);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaB_type($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 _luaL_checkany($2,1);
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=_lua_type($5,1);
 /** @type {number} */ var $7=_lua_typename($4,$6);
 /** @type {number} */ var $8=_lua_pushstring($3,$7);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaB_xpcall($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $status;
 /** @type {number} */ var $n;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_lua_gettop($2);
 $n=$3;
 /** @type {number} */ var $4=$n;
 /** @type {number} */ var $5=($4|0)>=2;
 if($5){var $11=1;label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=_luaL_argerror($7,2,8240);
 /** @type {number} */ var $9=($8|0)!=0;
 var $11=$9;label=3;break;
 case 3: 
 var $11;
 /** @type {number} */ var $12=($11&1);
 /** @type {number} */ var $13=$1;
 _lua_pushvalue($13,1);
 /** @type {number} */ var $14=$1;
 _lua_copy($14,2,1);
 /** @type {number} */ var $15=$1;
 _lua_replace($15,2);
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=$n;
 /** @type {number} */ var $18=((($17)-(2))|0);
 /** @type {number} */ var $19=_lua_pcallk($16,$18,-1,1,0,26);
 $status=$19;
 /** @type {number} */ var $20=$1;
 /** @type {number} */ var $21=$status;
 /** @type {number} */ var $22=($21|0)==0;
 /** @type {number} */ var $23=($22&1);
 /** @type {number} */ var $24=_finishpcall($20,$23);
 STACKTOP=sp;return $24;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _dofilecont($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_lua_gettop($2);
 /** @type {number} */ var $4=((($3)-(1))|0);
 STACKTOP=sp;return $4;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _ipairsaux($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $i;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_checkinteger($2,2);
 $i=$3;
 /** @type {number} */ var $4=$1;
 _luaL_checktype($4,1,5);
 /** @type {number} */ var $5=$i;
 /** @type {number} */ var $6=((($5)+(1))|0);
 $i=$6;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=$i;
 _lua_pushinteger($7,$8);
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=$i;
 _lua_rawgeti($9,1,$10);
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=_lua_type($11,-1);
 /** @type {number} */ var $13=($12|0)==0;
 /** @type {number} */ var $14=($13?1:2);
 STACKTOP=sp;return $14;
}
/**
 * @param {number} $L
 * @param {number} $method
 * @param {number} $iszero
 * @param {number} $iter
 * @return {number}
 */
function _pairsmeta($L,$method,$iszero,$iter){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 $1=$L;
 $2=$method;
 $3=$iszero;
 $4=$iter;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=_luaL_getmetafield($5,1,$6);
 /** @type {number} */ var $8=($7|0)!=0;
 if($8){label=6;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $10=$1;
 _luaL_checktype($10,1,5);
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=$4;
 _lua_pushcclosure($11,$12,0);
 /** @type {number} */ var $13=$1;
 _lua_pushvalue($13,1);
 /** @type {number} */ var $14=$3;
 /** @type {number} */ var $15=($14|0)!=0;
 if($15){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $17=$1;
 _lua_pushinteger($17,0);
 label=5;break;
 case 4: 
 /** @type {number} */ var $19=$1;
 _lua_pushnil($19);
 label=5;break;
 case 5: 
 label=7;break;
 case 6: 
 /** @type {number} */ var $22=$1;
 _lua_pushvalue($22,1);
 /** @type {number} */ var $23=$1;
 _lua_callk($23,1,3,0,0);
 label=7;break;
 case 7: 
 STACKTOP=sp;return 3;
 }
}
/**
 * @param {number} $L
 * @param {number} $status
 * @return {number}
 */
function _load_aux($L,$status){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $2=$L;
 $3=$status;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 $1=1;
 label=4;break;
 case 3: 
 /** @type {number} */ var $8=$2;
 _lua_pushnil($8);
 /** @type {number} */ var $9=$2;
 _lua_insert($9,-2);
 $1=2;
 label=4;break;
 case 4: 
 /** @type {number} */ var $11=$1;
 STACKTOP=sp;return $11;
 }
}
/**
 * @param {number} $L
 * @param {number} $ud
 * @param {number} $size
 * @return {number}
 */
function _generic_reader($L,$ud,$size){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 $2=$L;
 $3=$ud;
 $4=$size;
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=$2;
 _luaL_checkstack($6,2,5736);
 /** @type {number} */ var $7=$2;
 _lua_pushvalue($7,1);
 /** @type {number} */ var $8=$2;
 _lua_callk($8,0,1,0,0);
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=_lua_type($9,-1);
 /** @type {number} */ var $11=($10|0)==0;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $13=$2;
 _lua_settop($13,-2);
 /** @type {number} */ var $14=$4;
 HEAP32[(($14)>>2)]=0;
 $1=0;
 label=7;break;
 case 3: 
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=_lua_isstring($16,-1);
 /** @type {number} */ var $18=($17|0)!=0;
 if($18){label=5;break;}else{label=4;break;}
 case 4: 
 /** @type {number} */ var $20=$2;
 /** @type {number} */ var $21=_luaL_error($20,5592,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 /** @type {number} */ var $24=$2;
 _lua_replace($24,5);
 /** @type {number} */ var $25=$2;
 /** @type {number} */ var $26=$4;
 /** @type {number} */ var $27=_lua_tolstring($25,5,$26);
 $1=$27;
 label=7;break;
 case 7: 
 /** @type {number} */ var $29=$1;
 STACKTOP=sp;return $29;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _pcallcont($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $status;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_lua_getctx($2,0);
 $status=$3;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$status;
 /** @type {number} */ var $6=($5|0)==1;
 /** @type {number} */ var $7=($6&1);
 /** @type {number} */ var $8=_finishpcall($4,$7);
 STACKTOP=sp;return $8;
}
/**
 * @param {number} $L
 * @param {number} $status
 * @return {number}
 */
function _finishpcall($L,$status){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $2=$L;
 $3=$status;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_lua_checkstack($4,1);
 /** @type {number} */ var $6=($5|0)!=0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $8=$2;
 _lua_settop($8,0);
 /** @type {number} */ var $9=$2;
 _lua_pushboolean($9,0);
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=_lua_pushstring($10,8048);
 $1=2;
 label=4;break;
 case 3: 
 /** @type {number} */ var $13=$2;
 /** @type {number} */ var $14=$3;
 _lua_pushboolean($13,$14);
 /** @type {number} */ var $15=$2;
 _lua_replace($15,1);
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=_lua_gettop($16);
 $1=$17;
 label=4;break;
 case 4: 
 /** @type {number} */ var $19=$1;
 STACKTOP=sp;return $19;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaopen_bit32($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 _lua_createtable($2,0,12);
 /** @type {number} */ var $3=$1;
 _luaL_setfuncs($3,2280,0);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _b_arshift($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $r;
 /** @type {number} */ var $i;
 $2=$L;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=_luaL_checkunsigned($3,1);
 $r=$4;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=_luaL_checkinteger($5,2);
 $i=$6;
 /** @type {number} */ var $7=$i;
 /** @type {number} */ var $8=($7|0)<0;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $10=$r;
 /** @type {number} */ var $11=$10&-2147483648;
 /** @type {number} */ var $12=($11|0)!=0;
 if($12){label=4;break;}else{label=3;break;}
 case 3: 
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=$r;
 /** @type {number} */ var $16=$i;
 /** @type {number} */ var $17=(((-$16))|0);
 /** @type {number} */ var $18=_b_shift($14,$15,$17);
 $1=$18;
 label=8;break;
 case 4: 
 /** @type {number} */ var $20=$i;
 /** @type {number} */ var $21=($20|0)>=32;
 if($21){label=5;break;}else{label=6;break;}
 case 5: 
 $r=-1;
 label=7;break;
 case 6: 
 /** @type {number} */ var $24=$r;
 /** @type {number} */ var $25=$i;
 /** @type {number} */ var $26=$24>>>($25>>>0);
 /** @type {number} */ var $27=$i;
 /** @type {number} */ var $28=-1>>>($27>>>0);
 /** @type {number} */ var $29=$28^-1;
 /** @type {number} */ var $30=$26|$29;
 $r=$30;
 label=7;break;
 case 7: 
 /** @type {number} */ var $32=$2;
 /** @type {number} */ var $33=$r;
 _lua_pushunsigned($32,$33);
 $1=1;
 label=8;break;
 case 8: 
 /** @type {number} */ var $35=$1;
 STACKTOP=sp;return $35;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _b_and($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $r;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_andaux($2);
 $r=$3;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$r;
 _lua_pushunsigned($4,$5);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _b_not($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $r;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_checkunsigned($2,1);
 /** @type {number} */ var $4=$3^-1;
 $r=$4;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=$r;
 _lua_pushunsigned($5,$6);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _b_or($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $i;
 /** @type {number} */ var $n;
 /** @type {number} */ var $r;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_lua_gettop($2);
 $n=$3;
 $r=0;
 $i=1;
 label=2;break;
 case 2: 
 /** @type {number} */ var $5=$i;
 /** @type {number} */ var $6=$n;
 /** @type {number} */ var $7=($5|0)<=($6|0);
 if($7){label=3;break;}else{label=5;break;}
 case 3: 
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=$i;
 /** @type {number} */ var $11=_luaL_checkunsigned($9,$10);
 /** @type {number} */ var $12=$r;
 /** @type {number} */ var $13=$12|$11;
 $r=$13;
 label=4;break;
 case 4: 
 /** @type {number} */ var $15=$i;
 /** @type {number} */ var $16=((($15)+(1))|0);
 $i=$16;
 label=2;break;
 case 5: 
 /** @type {number} */ var $18=$1;
 /** @type {number} */ var $19=$r;
 _lua_pushunsigned($18,$19);
 STACKTOP=sp;return 1;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _b_xor($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $i;
 /** @type {number} */ var $n;
 /** @type {number} */ var $r;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_lua_gettop($2);
 $n=$3;
 $r=0;
 $i=1;
 label=2;break;
 case 2: 
 /** @type {number} */ var $5=$i;
 /** @type {number} */ var $6=$n;
 /** @type {number} */ var $7=($5|0)<=($6|0);
 if($7){label=3;break;}else{label=5;break;}
 case 3: 
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=$i;
 /** @type {number} */ var $11=_luaL_checkunsigned($9,$10);
 /** @type {number} */ var $12=$r;
 /** @type {number} */ var $13=$12^$11;
 $r=$13;
 label=4;break;
 case 4: 
 /** @type {number} */ var $15=$i;
 /** @type {number} */ var $16=((($15)+(1))|0);
 $i=$16;
 label=2;break;
 case 5: 
 /** @type {number} */ var $18=$1;
 /** @type {number} */ var $19=$r;
 _lua_pushunsigned($18,$19);
 STACKTOP=sp;return 1;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _b_test($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $r;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_andaux($2);
 $r=$3;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$r;
 /** @type {number} */ var $6=($5|0)!=0;
 /** @type {number} */ var $7=($6&1);
 _lua_pushboolean($4,$7);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _b_extract($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 /** @type {number} */ var $1;
 /** @type {number} */ var $w=sp;
 /** @type {number} */ var $r;
 /** @type {number} */ var $f;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_checkunsigned($2,1);
 $r=$3;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=_fieldargs($4,2,$w);
 $f=$5;
 /** @type {number} */ var $6=$r;
 /** @type {number} */ var $7=$f;
 /** @type {number} */ var $8=$6>>>($7>>>0);
 /** @type {number} */ var $9=HEAP32[(($w)>>2)];
 /** @type {number} */ var $10=((($9)-(1))|0);
 /** @type {number} */ var $11=-2<<$10;
 /** @type {number} */ var $12=$11^-1;
 /** @type {number} */ var $13=$8&$12;
 $r=$13;
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=$r;
 _lua_pushunsigned($14,$15);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _b_lrot($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaL_checkinteger($3,2);
 /** @type {number} */ var $5=_b_rot($2,$4);
 STACKTOP=sp;return $5;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _b_lshift($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaL_checkunsigned($3,1);
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=_luaL_checkinteger($5,2);
 /** @type {number} */ var $7=_b_shift($2,$4,$6);
 STACKTOP=sp;return $7;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _b_replace($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 /** @type {number} */ var $1;
 /** @type {number} */ var $w=sp;
 /** @type {number} */ var $r;
 /** @type {number} */ var $v;
 /** @type {number} */ var $f;
 /** @type {number} */ var $m;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_checkunsigned($2,1);
 $r=$3;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=_luaL_checkunsigned($4,2);
 $v=$5;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=_fieldargs($6,3,$w);
 $f=$7;
 /** @type {number} */ var $8=HEAP32[(($w)>>2)];
 /** @type {number} */ var $9=((($8)-(1))|0);
 /** @type {number} */ var $10=-2<<$9;
 /** @type {number} */ var $11=$10^-1;
 $m=$11;
 /** @type {number} */ var $12=$m;
 /** @type {number} */ var $13=$v;
 /** @type {number} */ var $14=$13&$12;
 $v=$14;
 /** @type {number} */ var $15=$r;
 /** @type {number} */ var $16=$m;
 /** @type {number} */ var $17=$f;
 /** @type {number} */ var $18=$16<<$17;
 /** @type {number} */ var $19=$18^-1;
 /** @type {number} */ var $20=$15&$19;
 /** @type {number} */ var $21=$v;
 /** @type {number} */ var $22=$f;
 /** @type {number} */ var $23=$21<<$22;
 /** @type {number} */ var $24=$20|$23;
 $r=$24;
 /** @type {number} */ var $25=$1;
 /** @type {number} */ var $26=$r;
 _lua_pushunsigned($25,$26);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _b_rrot($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaL_checkinteger($3,2);
 /** @type {number} */ var $5=(((-$4))|0);
 /** @type {number} */ var $6=_b_rot($2,$5);
 STACKTOP=sp;return $6;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _b_rshift($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaL_checkunsigned($3,1);
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=_luaL_checkinteger($5,2);
 /** @type {number} */ var $7=(((-$6))|0);
 /** @type {number} */ var $8=_b_shift($2,$4,$7);
 STACKTOP=sp;return $8;
}
/**
 * @param {number} $L
 * @param {number} $r
 * @param {number} $i
 * @return {number}
 */
function _b_shift($L,$r,$i){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$L;
 $2=$r;
 $3=$i;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=($4|0)<0;
 if($5){label=2;break;}else{label=6;break;}
 case 2: 
 /** @type {number} */ var $7=$3;
 /** @type {number} */ var $8=(((-$7))|0);
 $3=$8;
 /** @type {number} */ var $9=$2;
 $2=$9;
 /** @type {number} */ var $10=$3;
 /** @type {number} */ var $11=($10|0)>=32;
 if($11){label=3;break;}else{label=4;break;}
 case 3: 
 $2=0;
 label=5;break;
 case 4: 
 /** @type {number} */ var $14=$3;
 /** @type {number} */ var $15=$2;
 /** @type {number} */ var $16=$15>>>($14>>>0);
 $2=$16;
 label=5;break;
 case 5: 
 label=10;break;
 case 6: 
 /** @type {number} */ var $19=$3;
 /** @type {number} */ var $20=($19|0)>=32;
 if($20){label=7;break;}else{label=8;break;}
 case 7: 
 $2=0;
 label=9;break;
 case 8: 
 /** @type {number} */ var $23=$3;
 /** @type {number} */ var $24=$2;
 /** @type {number} */ var $25=$24<<$23;
 $2=$25;
 label=9;break;
 case 9: 
 /** @type {number} */ var $27=$2;
 $2=$27;
 label=10;break;
 case 10: 
 /** @type {number} */ var $29=$1;
 /** @type {number} */ var $30=$2;
 _lua_pushunsigned($29,$30);
 STACKTOP=sp;return 1;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _andaux($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $i;
 /** @type {number} */ var $n;
 /** @type {number} */ var $r;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_lua_gettop($2);
 $n=$3;
 $r=-1;
 $i=1;
 label=2;break;
 case 2: 
 /** @type {number} */ var $5=$i;
 /** @type {number} */ var $6=$n;
 /** @type {number} */ var $7=($5|0)<=($6|0);
 if($7){label=3;break;}else{label=5;break;}
 case 3: 
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=$i;
 /** @type {number} */ var $11=_luaL_checkunsigned($9,$10);
 /** @type {number} */ var $12=$r;
 /** @type {number} */ var $13=$12&$11;
 $r=$13;
 label=4;break;
 case 4: 
 /** @type {number} */ var $15=$i;
 /** @type {number} */ var $16=((($15)+(1))|0);
 $i=$16;
 label=2;break;
 case 5: 
 /** @type {number} */ var $18=$r;
 STACKTOP=sp;return $18;
 }
}
/**
 * @param {number} $L
 * @param {number} $farg
 * @param {number} $width
 * @return {number}
 */
function _fieldargs($L,$farg,$width){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $f;
 /** @type {number} */ var $w;
 $1=$L;
 $2=$farg;
 $3=$width;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=_luaL_checkinteger($4,$5);
 $f=$6;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=((($8)+(1))|0);
 /** @type {number} */ var $10=_luaL_optinteger($7,$9,1);
 $w=$10;
 /** @type {number} */ var $11=$f;
 /** @type {number} */ var $12=0<=($11|0);
 if($12){var $19=1;label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=$2;
 /** @type {number} */ var $16=_luaL_argerror($14,$15,11192);
 /** @type {number} */ var $17=($16|0)!=0;
 var $19=$17;label=3;break;
 case 3: 
 var $19;
 /** @type {number} */ var $20=($19&1);
 /** @type {number} */ var $21=$w;
 /** @type {number} */ var $22=0<($21|0);
 if($22){var $30=1;label=5;break;}else{label=4;break;}
 case 4: 
 /** @type {number} */ var $24=$1;
 /** @type {number} */ var $25=$2;
 /** @type {number} */ var $26=((($25)+(1))|0);
 /** @type {number} */ var $27=_luaL_argerror($24,$26,10920);
 /** @type {number} */ var $28=($27|0)!=0;
 var $30=$28;label=5;break;
 case 5: 
 var $30;
 /** @type {number} */ var $31=($30&1);
 /** @type {number} */ var $32=$f;
 /** @type {number} */ var $33=$w;
 /** @type {number} */ var $34=((($32)+($33))|0);
 /** @type {number} */ var $35=($34|0)>32;
 if($35){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $37=$1;
 /** @type {number} */ var $38=_luaL_error($37,10720,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=7;break;
 case 7: 
 /** @type {number} */ var $40=$w;
 /** @type {number} */ var $41=$3;
 HEAP32[(($41)>>2)]=$40;
 /** @type {number} */ var $42=$f;
 STACKTOP=sp;return $42;
 }
}
/**
 * @param {number} $L
 * @param {number} $i
 * @return {number}
 */
function _b_rot($L,$i){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $r;
 $1=$L;
 $2=$i;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaL_checkunsigned($3,1);
 $r=$4;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$5&31;
 $2=$6;
 /** @type {number} */ var $7=$r;
 $r=$7;
 /** @type {number} */ var $8=$r;
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=$8<<$9;
 /** @type {number} */ var $11=$r;
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=(((32)-($12))|0);
 /** @type {number} */ var $14=$11>>>($13>>>0);
 /** @type {number} */ var $15=$10|$14;
 $r=$15;
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=$r;
 _lua_pushunsigned($16,$17);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaopen_coroutine($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 _lua_createtable($2,0,6);
 /** @type {number} */ var $3=$1;
 _luaL_setfuncs($3,2216,0);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaB_cocreate($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $NL;
 $1=$L;
 /** @type {number} */ var $2=$1;
 _luaL_checktype($2,1,6);
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_lua_newthread($3);
 $NL=$4;
 /** @type {number} */ var $5=$1;
 _lua_pushvalue($5,1);
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=$NL;
 _lua_xmove($6,$7,1);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaB_coresume($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $co;
 /** @type {number} */ var $r;
 $2=$L;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=_lua_tothread($3,1);
 $co=$4;
 /** @type {number} */ var $5=$co;
 /** @type {number} */ var $6=($5|0)!=0;
 if($6){var $12=1;label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=_luaL_argerror($8,1,2672);
 /** @type {number} */ var $10=($9|0)!=0;
 var $12=$10;label=3;break;
 case 3: 
 var $12;
 /** @type {number} */ var $13=($12&1);
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=$co;
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=_lua_gettop($16);
 /** @type {number} */ var $18=((($17)-(1))|0);
 /** @type {number} */ var $19=_auxresume($14,$15,$18);
 $r=$19;
 /** @type {number} */ var $20=$r;
 /** @type {number} */ var $21=($20|0)<0;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $23=$2;
 _lua_pushboolean($23,0);
 /** @type {number} */ var $24=$2;
 _lua_insert($24,-2);
 $1=2;
 label=6;break;
 case 5: 
 /** @type {number} */ var $26=$2;
 _lua_pushboolean($26,1);
 /** @type {number} */ var $27=$2;
 /** @type {number} */ var $28=$r;
 /** @type {number} */ var $29=((($28)+(1))|0);
 /** @type {number} */ var $30=(((-$29))|0);
 _lua_insert($27,$30);
 /** @type {number} */ var $31=$r;
 /** @type {number} */ var $32=((($31)+(1))|0);
 $1=$32;
 label=6;break;
 case 6: 
 /** @type {number} */ var $34=$1;
 STACKTOP=sp;return $34;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaB_corunning($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $ismain;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_lua_pushthread($2);
 $ismain=$3;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$ismain;
 _lua_pushboolean($4,$5);
 STACKTOP=sp;return 2;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaB_costatus($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $co;
 /** @type {number} */ var $ar=sp;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_lua_tothread($2,1);
 $co=$3;
 /** @type {number} */ var $4=$co;
 /** @type {number} */ var $5=($4|0)!=0;
 if($5){var $11=1;label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=_luaL_argerror($7,1,2672);
 /** @type {number} */ var $9=($8|0)!=0;
 var $11=$9;label=3;break;
 case 3: 
 var $11;
 /** @type {number} */ var $12=($11&1);
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=$co;
 /** @type {number} */ var $15=($13|0)==($14|0);
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=_lua_pushlstring($17,8352,7);
 label=16;break;
 case 5: 
 /** @type {number} */ var $20=$co;
 /** @type {number} */ var $21=_lua_status($20);
 if(($21|0)==1){ label=6;break;}else if(($21|0)==0){ label=7;break;}else{label=14;break;}
 case 6: 
 /** @type {number} */ var $23=$1;
 /** @type {number} */ var $24=_lua_pushlstring($23,11912,9);
 label=15;break;
 case 7: 
 /** @type {number} */ var $26=$co;
 /** @type {number} */ var $27=_lua_getstack($26,0,$ar);
 /** @type {number} */ var $28=($27|0)>0;
 if($28){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $30=$1;
 /** @type {number} */ var $31=_lua_pushlstring($30,11536,6);
 label=13;break;
 case 9: 
 /** @type {number} */ var $33=$co;
 /** @type {number} */ var $34=_lua_gettop($33);
 /** @type {number} */ var $35=($34|0)==0;
 if($35){label=10;break;}else{label=11;break;}
 case 10: 
 /** @type {number} */ var $37=$1;
 /** @type {number} */ var $38=_lua_pushlstring($37,11184,4);
 label=12;break;
 case 11: 
 /** @type {number} */ var $40=$1;
 /** @type {number} */ var $41=_lua_pushlstring($40,11912,9);
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 label=15;break;
 case 14: 
 /** @type {number} */ var $45=$1;
 /** @type {number} */ var $46=_lua_pushlstring($45,11184,4);
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 STACKTOP=sp;return 1;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaB_cowrap($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaB_cocreate($2);
 /** @type {number} */ var $4=$1;
 _lua_pushcclosure($4,76,1);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaB_yield($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_lua_gettop($3);
 /** @type {number} */ var $5=_lua_yieldk($2,$4,0,0);
 STACKTOP=sp;return $5;
}
/**
 * @param {number} $L
 * @param {number} $co
 * @param {number} $narg
 * @return {number}
 */
function _auxresume($L,$co,$narg){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $status;
 /** @type {number} */ var $nres;
 $2=$L;
 $3=$co;
 $4=$narg;
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=$4;
 /** @type {number} */ var $7=_lua_checkstack($5,$6);
 /** @type {number} */ var $8=($7|0)!=0;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=_lua_pushlstring($10,3752,28);
 $1=-1;
 label=12;break;
 case 3: 
 /** @type {number} */ var $13=$3;
 /** @type {number} */ var $14=_lua_status($13);
 /** @type {number} */ var $15=($14|0)==0;
 if($15){label=4;break;}else{label=6;break;}
 case 4: 
 /** @type {number} */ var $17=$3;
 /** @type {number} */ var $18=_lua_gettop($17);
 /** @type {number} */ var $19=($18|0)==0;
 if($19){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $21=$2;
 /** @type {number} */ var $22=_lua_pushlstring($21,3280,28);
 $1=-1;
 label=12;break;
 case 6: 
 /** @type {number} */ var $24=$2;
 /** @type {number} */ var $25=$3;
 /** @type {number} */ var $26=$4;
 _lua_xmove($24,$25,$26);
 /** @type {number} */ var $27=$3;
 /** @type {number} */ var $28=$2;
 /** @type {number} */ var $29=$4;
 /** @type {number} */ var $30=_lua_resume($27,$28,$29);
 $status=$30;
 /** @type {number} */ var $31=$status;
 /** @type {number} */ var $32=($31|0)==0;
 if($32){label=8;break;}else{label=7;break;}
 case 7: 
 /** @type {number} */ var $34=$status;
 /** @type {number} */ var $35=($34|0)==1;
 if($35){label=8;break;}else{label=11;break;}
 case 8: 
 /** @type {number} */ var $37=$3;
 /** @type {number} */ var $38=_lua_gettop($37);
 $nres=$38;
 /** @type {number} */ var $39=$2;
 /** @type {number} */ var $40=$nres;
 /** @type {number} */ var $41=((($40)+(1))|0);
 /** @type {number} */ var $42=_lua_checkstack($39,$41);
 /** @type {number} */ var $43=($42|0)!=0;
 if($43){label=10;break;}else{label=9;break;}
 case 9: 
 /** @type {number} */ var $45=$3;
 /** @type {number} */ var $46=$nres;
 /** @type {number} */ var $47=(((-$46))|0);
 /** @type {number} */ var $48=((($47)-(1))|0);
 _lua_settop($45,$48);
 /** @type {number} */ var $49=$2;
 /** @type {number} */ var $50=_lua_pushlstring($49,2936,26);
 $1=-1;
 label=12;break;
 case 10: 
 /** @type {number} */ var $52=$3;
 /** @type {number} */ var $53=$2;
 /** @type {number} */ var $54=$nres;
 _lua_xmove($52,$53,$54);
 /** @type {number} */ var $55=$nres;
 $1=$55;
 label=12;break;
 case 11: 
 /** @type {number} */ var $57=$3;
 /** @type {number} */ var $58=$2;
 _lua_xmove($57,$58,1);
 $1=-1;
 label=12;break;
 case 12: 
 /** @type {number} */ var $60=$1;
 STACKTOP=sp;return $60;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaB_auxwrap($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $co;
 /** @type {number} */ var $r;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_lua_tothread($2,-1001001);
 $co=$3;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$co;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=_lua_gettop($6);
 /** @type {number} */ var $8=_auxresume($4,$5,$7);
 $r=$8;
 /** @type {number} */ var $9=$r;
 /** @type {number} */ var $10=($9|0)<0;
 if($10){label=2;break;}else{label=5;break;}
 case 2: 
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=_lua_isstring($12,-1);
 /** @type {number} */ var $14=($13|0)!=0;
 if($14){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $16=$1;
 _luaL_where($16,1);
 /** @type {number} */ var $17=$1;
 _lua_insert($17,-2);
 /** @type {number} */ var $18=$1;
 _lua_concat($18,2);
 label=4;break;
 case 4: 
 /** @type {number} */ var $20=$1;
 /** @type {number} */ var $21=_lua_error($20);
 label=5;break;
 case 5: 
 /** @type {number} */ var $23=$r;
 STACKTOP=sp;return $23;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaopen_debug($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 _lua_createtable($2,0,16);
 /** @type {number} */ var $3=$1;
 _luaL_setfuncs($3,2056,0);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _db_debug($L){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $buffer=sp;
 $1=$L;
 label=2;break;
 case 2: 
 /** @type {number} */ var $3=HEAP32[((_stderr)>>2)];
 /** @type {number} */ var $4=_fprintf($3,4600,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=4456,tempVarArgs)); STACKTOP=tempVarArgs;
 /** @type {number} */ var $5=HEAP32[((_stderr)>>2)];
 /** @type {number} */ var $6=_fflush($5);
 /** @type {number} */ var $7=(($buffer)|0);
 /** @type {number} */ var $8=HEAP32[((_stdin)>>2)];
 /** @type {number} */ var $9=_fgets($7,250,$8);
 /** @type {number} */ var $10=($9|0)==0;
 if($10){label=4;break;}else{label=3;break;}
 case 3: 
 /** @type {number} */ var $12=(($buffer)|0);
 /** @type {number} */ var $13=_strcmp($12,4320);
 /** @type {number} */ var $14=($13|0)==0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 STACKTOP=sp;return 0;
 case 5: 
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=(($buffer)|0);
 /** @type {number} */ var $19=(($buffer)|0);
 /** @type {number} */ var $20=_strlen($19);
 /** @type {number} */ var $21=_luaL_loadbufferx($17,$18,$20,4232,0);
 /** @type {number} */ var $22=($21|0)!=0;
 if($22){label=7;break;}else{label=6;break;}
 case 6: 
 /** @type {number} */ var $24=$1;
 /** @type {number} */ var $25=_lua_pcallk($24,0,0,0,0,0);
 /** @type {number} */ var $26=($25|0)!=0;
 if($26){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $28=HEAP32[((_stderr)>>2)];
 /** @type {number} */ var $29=$1;
 /** @type {number} */ var $30=_lua_tolstring($29,-1,0);
 /** @type {number} */ var $31=_fprintf($28,4136,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$30,tempVarArgs)); STACKTOP=tempVarArgs;
 /** @type {number} */ var $32=HEAP32[((_stderr)>>2)];
 /** @type {number} */ var $33=_fflush($32);
 label=8;break;
 case 8: 
 /** @type {number} */ var $35=$1;
 _lua_settop($35,0);
 label=2;break;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _db_getuservalue($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_lua_type($2,1);
 /** @type {number} */ var $4=($3|0)!=7;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $6=$1;
 _lua_pushnil($6);
 label=4;break;
 case 3: 
 /** @type {number} */ var $8=$1;
 _lua_getuservalue($8,1);
 label=4;break;
 case 4: 
 STACKTOP=sp;return 1;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _db_gethook($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $arg=sp;
 /** @type {number} */ var $L1;
 /** @type {number} */ var $buff=(sp)+(8);
 /** @type {number} */ var $mask;
 /** @type {number} */ var $hook;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_getthread($2,$arg);
 $L1=$3;
 /** @type {number} */ var $4=$L1;
 /** @type {number} */ var $5=_lua_gethookmask($4);
 $mask=$5;
 /** @type {number} */ var $6=$L1;
 /** @type {number} */ var $7=_lua_gethook($6);
 $hook=$7;
 /** @type {number} */ var $8=$hook;
 /** @type {number} */ var $9=($8|0)!=0;
 if($9){label=2;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $11=$hook;
 /** @type {number} */ var $12=($11|0)!=((146)|0);
 if($12){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=_lua_pushlstring($14,4688,13);
 label=5;break;
 case 4: 
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=_luaL_getsubtable($17,-1001000,9840);
 /** @type {number} */ var $19=$L1;
 /** @type {number} */ var $20=_lua_pushthread($19);
 /** @type {number} */ var $21=$L1;
 /** @type {number} */ var $22=$1;
 _lua_xmove($21,$22,1);
 /** @type {number} */ var $23=$1;
 _lua_rawget($23,-2);
 /** @type {number} */ var $24=$1;
 _lua_remove($24,-2);
 label=5;break;
 case 5: 
 /** @type {number} */ var $26=$1;
 /** @type {number} */ var $27=$mask;
 /** @type {number} */ var $28=(($buff)|0);
 /** @type {number} */ var $29=_unmakemask($27,$28);
 /** @type {number} */ var $30=_lua_pushstring($26,$29);
 /** @type {number} */ var $31=$1;
 /** @type {number} */ var $32=$L1;
 /** @type {number} */ var $33=_lua_gethookcount($32);
 _lua_pushinteger($31,$33);
 STACKTOP=sp;return 3;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _db_getinfo($L){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $ar=sp;
 /** @type {number} */ var $arg=(sp)+(104);
 /** @type {number} */ var $L1;
 /** @type {number} */ var $options;
 $2=$L;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=_getthread($3,$arg);
 $L1=$4;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=HEAP32[(($arg)>>2)];
 /** @type {number} */ var $7=((($6)+(2))|0);
 /** @type {number} */ var $8=_luaL_optlstring($5,$7,7272,0);
 $options=$8;
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=HEAP32[(($arg)>>2)];
 /** @type {number} */ var $11=((($10)+(1))|0);
 /** @type {number} */ var $12=_lua_isnumber($9,$11);
 /** @type {number} */ var $13=($12|0)!=0;
 if($13){label=2;break;}else{label=5;break;}
 case 2: 
 /** @type {number} */ var $15=$L1;
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=HEAP32[(($arg)>>2)];
 /** @type {number} */ var $18=((($17)+(1))|0);
 /** @type {number} */ var $19=_lua_tointegerx($16,$18,0);
 /** @type {number} */ var $20=_lua_getstack($15,$19,$ar);
 /** @type {number} */ var $21=($20|0)!=0;
 if($21){label=4;break;}else{label=3;break;}
 case 3: 
 /** @type {number} */ var $23=$2;
 _lua_pushnil($23);
 $1=1;
 label=26;break;
 case 4: 
 label=9;break;
 case 5: 
 /** @type {number} */ var $26=$2;
 /** @type {number} */ var $27=HEAP32[(($arg)>>2)];
 /** @type {number} */ var $28=((($27)+(1))|0);
 /** @type {number} */ var $29=_lua_type($26,$28);
 /** @type {number} */ var $30=($29|0)==6;
 if($30){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $32=$2;
 /** @type {number} */ var $33=$options;
 /** @type {number} */ var $34=_lua_pushfstring($32,7112,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$33,tempVarArgs)); STACKTOP=tempVarArgs;
 /** @type {number} */ var $35=$2;
 /** @type {number} */ var $36=_lua_tolstring($35,-1,0);
 $options=$36;
 /** @type {number} */ var $37=$2;
 /** @type {number} */ var $38=HEAP32[(($arg)>>2)];
 /** @type {number} */ var $39=((($38)+(1))|0);
 _lua_pushvalue($37,$39);
 /** @type {number} */ var $40=$2;
 /** @type {number} */ var $41=$L1;
 _lua_xmove($40,$41,1);
 label=8;break;
 case 7: 
 /** @type {number} */ var $43=$2;
 /** @type {number} */ var $44=HEAP32[(($arg)>>2)];
 /** @type {number} */ var $45=((($44)+(1))|0);
 /** @type {number} */ var $46=_luaL_argerror($43,$45,6864);
 $1=$46;
 label=26;break;
 case 8: 
 label=9;break;
 case 9: 
 /** @type {number} */ var $49=$L1;
 /** @type {number} */ var $50=$options;
 /** @type {number} */ var $51=_lua_getinfo($49,$50,$ar);
 /** @type {number} */ var $52=($51|0)!=0;
 if($52){label=11;break;}else{label=10;break;}
 case 10: 
 /** @type {number} */ var $54=$2;
 /** @type {number} */ var $55=HEAP32[(($arg)>>2)];
 /** @type {number} */ var $56=((($55)+(2))|0);
 /** @type {number} */ var $57=_luaL_argerror($54,$56,6616);
 $1=$57;
 label=26;break;
 case 11: 
 /** @type {number} */ var $59=$2;
 _lua_createtable($59,0,2);
 /** @type {number} */ var $60=$options;
 /** @type {number} */ var $61=_strchr($60,83);
 /** @type {number} */ var $62=($61|0)!=0;
 if($62){label=12;break;}else{label=13;break;}
 case 12: 
 /** @type {number} */ var $64=$2;
 /** @type {number} */ var $65=(($ar+16)|0);
 /** @type {number} */ var $66=HEAP32[(($65)>>2)];
 _settabss($64,6448,$66);
 /** @type {number} */ var $67=$2;
 /** @type {number} */ var $68=(($ar+36)|0);
 /** @type {number} */ var $69=(($68)|0);
 _settabss($67,6304,$69);
 /** @type {number} */ var $70=$2;
 /** @type {number} */ var $71=(($ar+24)|0);
 /** @type {number} */ var $72=HEAP32[(($71)>>2)];
 _settabsi($70,6224,$72);
 /** @type {number} */ var $73=$2;
 /** @type {number} */ var $74=(($ar+28)|0);
 /** @type {number} */ var $75=HEAP32[(($74)>>2)];
 _settabsi($73,6120,$75);
 /** @type {number} */ var $76=$2;
 /** @type {number} */ var $77=(($ar+12)|0);
 /** @type {number} */ var $78=HEAP32[(($77)>>2)];
 _settabss($76,6000,$78);
 label=13;break;
 case 13: 
 /** @type {number} */ var $80=$options;
 /** @type {number} */ var $81=_strchr($80,108);
 /** @type {number} */ var $82=($81|0)!=0;
 if($82){label=14;break;}else{label=15;break;}
 case 14: 
 /** @type {number} */ var $84=$2;
 /** @type {number} */ var $85=(($ar+20)|0);
 /** @type {number} */ var $86=HEAP32[(($85)>>2)];
 _settabsi($84,5896,$86);
 label=15;break;
 case 15: 
 /** @type {number} */ var $88=$options;
 /** @type {number} */ var $89=_strchr($88,117);
 /** @type {number} */ var $90=($89|0)!=0;
 if($90){label=16;break;}else{label=17;break;}
 case 16: 
 /** @type {number} */ var $92=$2;
 /** @type {number} */ var $93=(($ar+32)|0);
 /** @type {number} */ var $94=HEAP8[($93)];
 /** @type {number} */ var $95=($94&255);
 _settabsi($92,5728,$95);
 /** @type {number} */ var $96=$2;
 /** @type {number} */ var $97=(($ar+33)|0);
 /** @type {number} */ var $98=HEAP8[($97)];
 /** @type {number} */ var $99=($98&255);
 _settabsi($96,5584,$99);
 /** @type {number} */ var $100=$2;
 /** @type {number} */ var $101=(($ar+34)|0);
 /** @type {number} */ var $102=HEAP8[($101)];
 /** @type {number} */ var $103=(($102<<24)>>24);
 _settabsb($100,5408,$103);
 label=17;break;
 case 17: 
 /** @type {number} */ var $105=$options;
 /** @type {number} */ var $106=_strchr($105,110);
 /** @type {number} */ var $107=($106|0)!=0;
 if($107){label=18;break;}else{label=19;break;}
 case 18: 
 /** @type {number} */ var $109=$2;
 /** @type {number} */ var $110=(($ar+4)|0);
 /** @type {number} */ var $111=HEAP32[(($110)>>2)];
 _settabss($109,5216,$111);
 /** @type {number} */ var $112=$2;
 /** @type {number} */ var $113=(($ar+8)|0);
 /** @type {number} */ var $114=HEAP32[(($113)>>2)];
 _settabss($112,5104,$114);
 label=19;break;
 case 19: 
 /** @type {number} */ var $116=$options;
 /** @type {number} */ var $117=_strchr($116,116);
 /** @type {number} */ var $118=($117|0)!=0;
 if($118){label=20;break;}else{label=21;break;}
 case 20: 
 /** @type {number} */ var $120=$2;
 /** @type {number} */ var $121=(($ar+35)|0);
 /** @type {number} */ var $122=HEAP8[($121)];
 /** @type {number} */ var $123=(($122<<24)>>24);
 _settabsb($120,5008,$123);
 label=21;break;
 case 21: 
 /** @type {number} */ var $125=$options;
 /** @type {number} */ var $126=_strchr($125,76);
 /** @type {number} */ var $127=($126|0)!=0;
 if($127){label=22;break;}else{label=23;break;}
 case 22: 
 /** @type {number} */ var $129=$2;
 /** @type {number} */ var $130=$L1;
 _treatstackoption($129,$130,4912);
 label=23;break;
 case 23: 
 /** @type {number} */ var $132=$options;
 /** @type {number} */ var $133=_strchr($132,102);
 /** @type {number} */ var $134=($133|0)!=0;
 if($134){label=24;break;}else{label=25;break;}
 case 24: 
 /** @type {number} */ var $136=$2;
 /** @type {number} */ var $137=$L1;
 _treatstackoption($136,$137,4808);
 label=25;break;
 case 25: 
 $1=1;
 label=26;break;
 case 26: 
 /** @type {number} */ var $140=$1;
 STACKTOP=sp;return $140;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _db_getlocal($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $arg=sp;
 /** @type {number} */ var $L1;
 /** @type {number} */ var $ar=(sp)+(8);
 /** @type {number} */ var $name;
 /** @type {number} */ var $nvar;
 $2=$L;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=_getthread($3,$arg);
 $L1=$4;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=HEAP32[(($arg)>>2)];
 /** @type {number} */ var $7=((($6)+(2))|0);
 /** @type {number} */ var $8=_luaL_checkinteger($5,$7);
 $nvar=$8;
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=HEAP32[(($arg)>>2)];
 /** @type {number} */ var $11=((($10)+(1))|0);
 /** @type {number} */ var $12=_lua_type($9,$11);
 /** @type {number} */ var $13=($12|0)==6;
 if($13){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $15=$2;
 /** @type {number} */ var $16=HEAP32[(($arg)>>2)];
 /** @type {number} */ var $17=((($16)+(1))|0);
 _lua_pushvalue($15,$17);
 /** @type {number} */ var $18=$2;
 /** @type {number} */ var $19=$2;
 /** @type {number} */ var $20=$nvar;
 /** @type {number} */ var $21=_lua_getlocal($19,0,$20);
 /** @type {number} */ var $22=_lua_pushstring($18,$21);
 $1=1;
 label=8;break;
 case 3: 
 /** @type {number} */ var $24=$L1;
 /** @type {number} */ var $25=$2;
 /** @type {number} */ var $26=HEAP32[(($arg)>>2)];
 /** @type {number} */ var $27=((($26)+(1))|0);
 /** @type {number} */ var $28=_luaL_checkinteger($25,$27);
 /** @type {number} */ var $29=_lua_getstack($24,$28,$ar);
 /** @type {number} */ var $30=($29|0)!=0;
 if($30){label=5;break;}else{label=4;break;}
 case 4: 
 /** @type {number} */ var $32=$2;
 /** @type {number} */ var $33=HEAP32[(($arg)>>2)];
 /** @type {number} */ var $34=((($33)+(1))|0);
 /** @type {number} */ var $35=_luaL_argerror($32,$34,10048);
 $1=$35;
 label=8;break;
 case 5: 
 /** @type {number} */ var $37=$L1;
 /** @type {number} */ var $38=$nvar;
 /** @type {number} */ var $39=_lua_getlocal($37,$ar,$38);
 $name=$39;
 /** @type {number} */ var $40=$name;
 /** @type {number} */ var $41=($40|0)!=0;
 if($41){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $43=$L1;
 /** @type {number} */ var $44=$2;
 _lua_xmove($43,$44,1);
 /** @type {number} */ var $45=$2;
 /** @type {number} */ var $46=$name;
 /** @type {number} */ var $47=_lua_pushstring($45,$46);
 /** @type {number} */ var $48=$2;
 _lua_pushvalue($48,-2);
 $1=2;
 label=8;break;
 case 7: 
 /** @type {number} */ var $50=$2;
 _lua_pushnil($50);
 $1=1;
 label=8;break;
 case 8: 
 /** @type {number} */ var $52=$1;
 STACKTOP=sp;return $52;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _db_getregistry($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 _lua_pushvalue($2,-1001000);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _db_getmetatable($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 _luaL_checkany($2,1);
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_lua_getmetatable($3,1);
 /** @type {number} */ var $5=($4|0)!=0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $7=$1;
 _lua_pushnil($7);
 label=3;break;
 case 3: 
 STACKTOP=sp;return 1;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _db_getupvalue($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_auxupvalue($2,1);
 STACKTOP=sp;return $3;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _db_upvaluejoin($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $n1;
 /** @type {number} */ var $n2;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_checkupval($2,1,2);
 $n1=$3;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=_checkupval($4,3,4);
 $n2=$5;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=_lua_iscfunction($6,1);
 /** @type {number} */ var $8=($7|0)!=0;
 if($8){label=2;break;}else{var $14=1;label=3;break;}
 case 2: 
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=_luaL_argerror($10,1,7440);
 /** @type {number} */ var $12=($11|0)!=0;
 var $14=$12;label=3;break;
 case 3: 
 var $14;
 /** @type {number} */ var $15=($14&1);
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=_lua_iscfunction($16,3);
 /** @type {number} */ var $18=($17|0)!=0;
 if($18){label=4;break;}else{var $24=1;label=5;break;}
 case 4: 
 /** @type {number} */ var $20=$1;
 /** @type {number} */ var $21=_luaL_argerror($20,3,7440);
 /** @type {number} */ var $22=($21|0)!=0;
 var $24=$22;label=5;break;
 case 5: 
 var $24;
 /** @type {number} */ var $25=($24&1);
 /** @type {number} */ var $26=$1;
 /** @type {number} */ var $27=$n1;
 /** @type {number} */ var $28=$n2;
 _lua_upvaluejoin($26,1,$27,3,$28);
 STACKTOP=sp;return 0;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _db_upvalueid($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $n;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_checkupval($2,1,2);
 $n=$3;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=$n;
 /** @type {number} */ var $7=_lua_upvalueid($5,1,$6);
 _lua_pushlightuserdata($4,$7);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _db_setuservalue($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_lua_type($2,1);
 /** @type {number} */ var $4=($3|0)==2;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=_luaL_argerror($6,1,8000);
 label=3;break;
 case 3: 
 /** @type {number} */ var $9=$1;
 _luaL_checktype($9,1,7);
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=_lua_type($10,2);
 /** @type {number} */ var $12=($11|0)<=0;
 if($12){label=5;break;}else{label=4;break;}
 case 4: 
 /** @type {number} */ var $14=$1;
 _luaL_checktype($14,2,5);
 label=5;break;
 case 5: 
 /** @type {number} */ var $16=$1;
 _lua_settop($16,2);
 /** @type {number} */ var $17=$1;
 _lua_setuservalue($17,1);
 STACKTOP=sp;return 1;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _db_sethook($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $arg=sp;
 /** @type {number} */ var $mask;
 /** @type {number} */ var $count;
 /** @type {number} */ var $func;
 /** @type {number} */ var $L1;
 /** @type {number} */ var $smask;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_getthread($2,$arg);
 $L1=$3;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=HEAP32[(($arg)>>2)];
 /** @type {number} */ var $6=((($5)+(1))|0);
 /** @type {number} */ var $7=_lua_type($4,$6);
 /** @type {number} */ var $8=($7|0)<=0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=HEAP32[(($arg)>>2)];
 /** @type {number} */ var $12=((($11)+(1))|0);
 _lua_settop($10,$12);
 $func=0;
 $mask=0;
 $count=0;
 label=4;break;
 case 3: 
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=HEAP32[(($arg)>>2)];
 /** @type {number} */ var $16=((($15)+(2))|0);
 /** @type {number} */ var $17=_luaL_checklstring($14,$16,0);
 $smask=$17;
 /** @type {number} */ var $18=$1;
 /** @type {number} */ var $19=HEAP32[(($arg)>>2)];
 /** @type {number} */ var $20=((($19)+(1))|0);
 _luaL_checktype($18,$20,6);
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=HEAP32[(($arg)>>2)];
 /** @type {number} */ var $23=((($22)+(3))|0);
 /** @type {number} */ var $24=_luaL_optinteger($21,$23,0);
 $count=$24;
 $func=146;
 /** @type {number} */ var $25=$smask;
 /** @type {number} */ var $26=$count;
 /** @type {number} */ var $27=_makemask($25,$26);
 $mask=$27;
 label=4;break;
 case 4: 
 /** @type {number} */ var $29=$1;
 /** @type {number} */ var $30=_luaL_getsubtable($29,-1001000,9840);
 /** @type {number} */ var $31=($30|0)==0;
 if($31){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $33=$1;
 /** @type {number} */ var $34=_lua_pushstring($33,9632);
 /** @type {number} */ var $35=$1;
 _lua_setfield($35,-2,9376);
 /** @type {number} */ var $36=$1;
 _lua_pushvalue($36,-1);
 /** @type {number} */ var $37=$1;
 /** @type {number} */ var $38=_lua_setmetatable($37,-2);
 label=6;break;
 case 6: 
 /** @type {number} */ var $40=$L1;
 /** @type {number} */ var $41=_lua_pushthread($40);
 /** @type {number} */ var $42=$L1;
 /** @type {number} */ var $43=$1;
 _lua_xmove($42,$43,1);
 /** @type {number} */ var $44=$1;
 /** @type {number} */ var $45=HEAP32[(($arg)>>2)];
 /** @type {number} */ var $46=((($45)+(1))|0);
 _lua_pushvalue($44,$46);
 /** @type {number} */ var $47=$1;
 _lua_rawset($47,-3);
 /** @type {number} */ var $48=$L1;
 /** @type {number} */ var $49=$func;
 /** @type {number} */ var $50=$mask;
 /** @type {number} */ var $51=$count;
 /** @type {number} */ var $52=_lua_sethook($48,$49,$50,$51);
 STACKTOP=sp;return 0;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _db_setlocal($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $arg=sp;
 /** @type {number} */ var $L1;
 /** @type {number} */ var $ar=(sp)+(8);
 $2=$L;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=_getthread($3,$arg);
 $L1=$4;
 /** @type {number} */ var $5=$L1;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=HEAP32[(($arg)>>2)];
 /** @type {number} */ var $8=((($7)+(1))|0);
 /** @type {number} */ var $9=_luaL_checkinteger($6,$8);
 /** @type {number} */ var $10=_lua_getstack($5,$9,$ar);
 /** @type {number} */ var $11=($10|0)!=0;
 if($11){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $13=$2;
 /** @type {number} */ var $14=HEAP32[(($arg)>>2)];
 /** @type {number} */ var $15=((($14)+(1))|0);
 /** @type {number} */ var $16=_luaL_argerror($13,$15,10048);
 $1=$16;
 label=4;break;
 case 3: 
 /** @type {number} */ var $18=$2;
 /** @type {number} */ var $19=HEAP32[(($arg)>>2)];
 /** @type {number} */ var $20=((($19)+(3))|0);
 _luaL_checkany($18,$20);
 /** @type {number} */ var $21=$2;
 /** @type {number} */ var $22=HEAP32[(($arg)>>2)];
 /** @type {number} */ var $23=((($22)+(3))|0);
 _lua_settop($21,$23);
 /** @type {number} */ var $24=$2;
 /** @type {number} */ var $25=$L1;
 _lua_xmove($24,$25,1);
 /** @type {number} */ var $26=$2;
 /** @type {number} */ var $27=$L1;
 /** @type {number} */ var $28=$2;
 /** @type {number} */ var $29=HEAP32[(($arg)>>2)];
 /** @type {number} */ var $30=((($29)+(2))|0);
 /** @type {number} */ var $31=_luaL_checkinteger($28,$30);
 /** @type {number} */ var $32=_lua_setlocal($27,$ar,$31);
 /** @type {number} */ var $33=_lua_pushstring($26,$32);
 $1=1;
 label=4;break;
 case 4: 
 /** @type {number} */ var $35=$1;
 STACKTOP=sp;return $35;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _db_setmetatable($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $t;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_lua_type($2,2);
 $t=$3;
 /** @type {number} */ var $4=$t;
 /** @type {number} */ var $5=($4|0)==0;
 if($5){var $14=1;label=4;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $7=$t;
 /** @type {number} */ var $8=($7|0)==5;
 if($8){var $14=1;label=4;break;}else{label=3;break;}
 case 3: 
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=_luaL_argerror($10,2,10272);
 /** @type {number} */ var $12=($11|0)!=0;
 var $14=$12;label=4;break;
 case 4: 
 var $14;
 /** @type {number} */ var $15=($14&1);
 /** @type {number} */ var $16=$1;
 _lua_settop($16,2);
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=_lua_setmetatable($17,1);
 STACKTOP=sp;return 1;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _db_setupvalue($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 _luaL_checkany($2,3);
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_auxupvalue($3,0);
 STACKTOP=sp;return $4;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _db_traceback($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $arg=sp;
 /** @type {number} */ var $L1;
 /** @type {number} */ var $msg;
 /** @type {number} */ var $level;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_getthread($2,$arg);
 $L1=$3;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=HEAP32[(($arg)>>2)];
 /** @type {number} */ var $6=((($5)+(1))|0);
 /** @type {number} */ var $7=_lua_tolstring($4,$6,0);
 $msg=$7;
 /** @type {number} */ var $8=$msg;
 /** @type {number} */ var $9=($8|0)==0;
 if($9){label=2;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=HEAP32[(($arg)>>2)];
 /** @type {number} */ var $13=((($12)+(1))|0);
 /** @type {number} */ var $14=_lua_type($11,$13);
 /** @type {number} */ var $15=($14|0)<=0;
 if($15){label=4;break;}else{label=3;break;}
 case 3: 
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=HEAP32[(($arg)>>2)];
 /** @type {number} */ var $19=((($18)+(1))|0);
 _lua_pushvalue($17,$19);
 label=5;break;
 case 4: 
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=HEAP32[(($arg)>>2)];
 /** @type {number} */ var $23=((($22)+(2))|0);
 /** @type {number} */ var $24=$1;
 /** @type {number} */ var $25=$L1;
 /** @type {number} */ var $26=($24|0)==($25|0);
 /** @type {number} */ var $27=($26?1:0);
 /** @type {number} */ var $28=_luaL_optinteger($21,$23,$27);
 $level=$28;
 /** @type {number} */ var $29=$1;
 /** @type {number} */ var $30=$L1;
 /** @type {number} */ var $31=$msg;
 /** @type {number} */ var $32=$level;
 _luaL_traceback($29,$30,$31,$32);
 label=5;break;
 case 5: 
 STACKTOP=sp;return 1;
 }
}
/**
 * @param {number} $L
 * @param {number} $arg
 * @return {number}
 */
function _getthread($L,$arg){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $2=$L;
 $3=$arg;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_lua_type($4,1);
 /** @type {number} */ var $6=($5|0)==8;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $8=$3;
 HEAP32[(($8)>>2)]=1;
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=_lua_tothread($9,1);
 $1=$10;
 label=4;break;
 case 3: 
 /** @type {number} */ var $12=$3;
 HEAP32[(($12)>>2)]=0;
 /** @type {number} */ var $13=$2;
 $1=$13;
 label=4;break;
 case 4: 
 /** @type {number} */ var $15=$1;
 STACKTOP=sp;return $15;
 }
}
/**
 * @param {number} $L
 * @param {number} $ar
 * @return {number}
 */
function _hookf($L,$ar){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 $1=$L;
 $2=$ar;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaL_getsubtable($3,-1001000,9840);
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=_lua_pushthread($5);
 /** @type {number} */ var $7=$1;
 _lua_rawget($7,-2);
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=_lua_type($8,-1);
 /** @type {number} */ var $10=($9|0)==6;
 if($10){label=2;break;}else{label=6;break;}
 case 2: 
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=$2;
 /** @type {number} */ var $14=(($13)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 /** @type {number} */ var $16=((1856+($15<<2))|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=_lua_pushstring($12,$17);
 /** @type {number} */ var $19=$2;
 /** @type {number} */ var $20=(($19+20)|0);
 /** @type {number} */ var $21=HEAP32[(($20)>>2)];
 /** @type {number} */ var $22=($21|0)>=0;
 if($22){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $24=$1;
 /** @type {number} */ var $25=$2;
 /** @type {number} */ var $26=(($25+20)|0);
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 _lua_pushinteger($24,$27);
 label=5;break;
 case 4: 
 /** @type {number} */ var $29=$1;
 _lua_pushnil($29);
 label=5;break;
 case 5: 
 /** @type {number} */ var $31=$1;
 _lua_callk($31,2,0,0,0);
 label=6;break;
 case 6: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $mask
 * @param {number} $smask
 * @return {number}
 */
function _unmakemask($mask,$smask){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $i;
 $1=$mask;
 $2=$smask;
 $i=0;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$3&1;
 /** @type {number} */ var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $7=$i;
 /** @type {number} */ var $8=((($7)+(1))|0);
 $i=$8;
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=(($9+$7)|0);
 HEAP8[($10)]=99;
 label=3;break;
 case 3: 
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=$12&2;
 /** @type {number} */ var $14=($13|0)!=0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $16=$i;
 /** @type {number} */ var $17=((($16)+(1))|0);
 $i=$17;
 /** @type {number} */ var $18=$2;
 /** @type {number} */ var $19=(($18+$16)|0);
 HEAP8[($19)]=114;
 label=5;break;
 case 5: 
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=$21&4;
 /** @type {number} */ var $23=($22|0)!=0;
 if($23){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $25=$i;
 /** @type {number} */ var $26=((($25)+(1))|0);
 $i=$26;
 /** @type {number} */ var $27=$2;
 /** @type {number} */ var $28=(($27+$25)|0);
 HEAP8[($28)]=108;
 label=7;break;
 case 7: 
 /** @type {number} */ var $30=$i;
 /** @type {number} */ var $31=$2;
 /** @type {number} */ var $32=(($31+$30)|0);
 HEAP8[($32)]=0;
 /** @type {number} */ var $33=$2;
 STACKTOP=sp;return $33;
 }
}
/**
 * @param {number} $L
 * @param {number} $i
 * @param {number} $v
 * @return {number}
 */
function _settabss($L,$i,$v){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$L;
 $2=$i;
 $3=$v;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=_lua_pushstring($4,$5);
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=$2;
 _lua_setfield($7,-2,$8);
 STACKTOP=sp;return;
}
/**
 * @param {number} $L
 * @param {number} $i
 * @param {number} $v
 * @return {number}
 */
function _settabsi($L,$i,$v){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$L;
 $2=$i;
 $3=$v;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$3;
 _lua_pushinteger($4,$5);
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=$2;
 _lua_setfield($6,-2,$7);
 STACKTOP=sp;return;
}
/**
 * @param {number} $L
 * @param {number} $i
 * @param {number} $v
 * @return {number}
 */
function _settabsb($L,$i,$v){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$L;
 $2=$i;
 $3=$v;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$3;
 _lua_pushboolean($4,$5);
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=$2;
 _lua_setfield($6,-2,$7);
 STACKTOP=sp;return;
}
/**
 * @param {number} $L
 * @param {number} $L1
 * @param {number} $fname
 * @return {number}
 */
function _treatstackoption($L,$L1,$fname){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$L;
 $2=$L1;
 $3=$fname;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=($4|0)==($5|0);
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $8=$1;
 _lua_pushvalue($8,-2);
 /** @type {number} */ var $9=$1;
 _lua_remove($9,-3);
 label=4;break;
 case 3: 
 /** @type {number} */ var $11=$2;
 /** @type {number} */ var $12=$1;
 _lua_xmove($11,$12,1);
 label=4;break;
 case 4: 
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=$3;
 _lua_setfield($14,-2,$15);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $get
 * @return {number}
 */
function _auxupvalue($L,$get){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $name;
 /** @type {number} */ var $n;
 $2=$L;
 $3=$get;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_luaL_checkinteger($4,2);
 $n=$5;
 /** @type {number} */ var $6=$2;
 _luaL_checktype($6,1,6);
 /** @type {number} */ var $7=$3;
 /** @type {number} */ var $8=($7|0)!=0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=$n;
 /** @type {number} */ var $12=_lua_getupvalue($10,1,$11);
 var $18=$12;label=4;break;
 case 3: 
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=$n;
 /** @type {number} */ var $16=_lua_setupvalue($14,1,$15);
 var $18=$16;label=4;break;
 case 4: 
 var $18;
 $name=$18;
 /** @type {number} */ var $19=$name;
 /** @type {number} */ var $20=($19|0)==0;
 if($20){label=5;break;}else{label=6;break;}
 case 5: 
 $1=0;
 label=7;break;
 case 6: 
 /** @type {number} */ var $23=$2;
 /** @type {number} */ var $24=$name;
 /** @type {number} */ var $25=_lua_pushstring($23,$24);
 /** @type {number} */ var $26=$2;
 /** @type {number} */ var $27=$3;
 /** @type {number} */ var $28=((($27)+(1))|0);
 /** @type {number} */ var $29=(((-$28))|0);
 _lua_insert($26,$29);
 /** @type {number} */ var $30=$3;
 /** @type {number} */ var $31=((($30)+(1))|0);
 $1=$31;
 label=7;break;
 case 7: 
 /** @type {number} */ var $33=$1;
 STACKTOP=sp;return $33;
 }
}
/**
 * @param {number} $L
 * @param {number} $argf
 * @param {number} $argnup
 * @return {number}
 */
function _checkupval($L,$argf,$argnup){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $ar=sp;
 /** @type {number} */ var $nup;
 $1=$L;
 $2=$argf;
 $3=$argnup;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=_luaL_checkinteger($4,$5);
 $nup=$6;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=$2;
 _luaL_checktype($7,$8,6);
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=$2;
 _lua_pushvalue($9,$10);
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=_lua_getinfo($11,7768,$ar);
 /** @type {number} */ var $13=$nup;
 /** @type {number} */ var $14=1<=($13|0);
 if($14){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $16=$nup;
 /** @type {number} */ var $17=(($ar+32)|0);
 /** @type {number} */ var $18=HEAP8[($17)];
 /** @type {number} */ var $19=($18&255);
 /** @type {number} */ var $20=($16|0)<=($19|0);
 if($20){var $27=1;label=4;break;}else{label=3;break;}
 case 3: 
 /** @type {number} */ var $22=$1;
 /** @type {number} */ var $23=$3;
 /** @type {number} */ var $24=_luaL_argerror($22,$23,7608);
 /** @type {number} */ var $25=($24|0)!=0;
 var $27=$25;label=4;break;
 case 4: 
 var $27;
 /** @type {number} */ var $28=($27&1);
 /** @type {number} */ var $29=$nup;
 STACKTOP=sp;return $29;
 }
}
/**
 * @param {number} $smask
 * @param {number} $count
 * @return {number}
 */
function _makemask($smask,$count){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $mask;
 $1=$smask;
 $2=$count;
 $mask=0;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_strchr($3,99);
 /** @type {number} */ var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $7=$mask;
 /** @type {number} */ var $8=$7|1;
 $mask=$8;
 label=3;break;
 case 3: 
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=_strchr($10,114);
 /** @type {number} */ var $12=($11|0)!=0;
 if($12){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $14=$mask;
 /** @type {number} */ var $15=$14|2;
 $mask=$15;
 label=5;break;
 case 5: 
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=_strchr($17,108);
 /** @type {number} */ var $19=($18|0)!=0;
 if($19){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $21=$mask;
 /** @type {number} */ var $22=$21|4;
 $mask=$22;
 label=7;break;
 case 7: 
 /** @type {number} */ var $24=$2;
 /** @type {number} */ var $25=($24|0)>0;
 if($25){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $27=$mask;
 /** @type {number} */ var $28=$27|8;
 $mask=$28;
 label=9;break;
 case 9: 
 /** @type {number} */ var $30=$mask;
 STACKTOP=sp;return $30;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaopen_io($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 _lua_createtable($2,0,11);
 /** @type {number} */ var $3=$1;
 _luaL_setfuncs($3,1760,0);
 /** @type {number} */ var $4=$1;
 _createmeta($4);
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=HEAP32[((_stdin)>>2)];
 _createstdfile($5,$6,4120,10552);
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=HEAP32[((_stdout)>>2)];
 _createstdfile($7,$8,8256,6328);
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=HEAP32[((_stderr)>>2)];
 _createstdfile($9,$10,0,5040);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _io_close($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_lua_type($2,1);
 /** @type {number} */ var $4=($3|0)==-1;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $6=$1;
 _lua_getfield($6,-1001000,8256);
 label=3;break;
 case 3: 
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=_tofile($8);
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=_aux_close($10);
 STACKTOP=sp;return $11;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _io_flush($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_getiofile($3,8256);
 /** @type {number} */ var $5=_fflush($4);
 /** @type {number} */ var $6=($5|0)==0;
 /** @type {number} */ var $7=($6&1);
 /** @type {number} */ var $8=_luaL_fileresult($2,$7,0);
 STACKTOP=sp;return $8;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _io_input($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_g_iofile($2,4120,5096);
 STACKTOP=sp;return $3;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _io_lines($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $toclose;
 /** @type {number} */ var $filename;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_lua_type($2,1);
 /** @type {number} */ var $4=($3|0)==-1;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $6=$1;
 _lua_pushnil($6);
 label=3;break;
 case 3: 
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=_lua_type($8,1);
 /** @type {number} */ var $10=($9|0)==0;
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $12=$1;
 _lua_getfield($12,-1001000,4120);
 /** @type {number} */ var $13=$1;
 _lua_replace($13,1);
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=_tofile($14);
 $toclose=0;
 label=6;break;
 case 5: 
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=_luaL_checklstring($17,1,0);
 $filename=$18;
 /** @type {number} */ var $19=$1;
 /** @type {number} */ var $20=$filename;
 _opencheck($19,$20,5096);
 /** @type {number} */ var $21=$1;
 _lua_replace($21,1);
 $toclose=1;
 label=6;break;
 case 6: 
 /** @type {number} */ var $23=$1;
 /** @type {number} */ var $24=$toclose;
 _aux_lines($23,$24);
 STACKTOP=sp;return 1;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _io_open($L){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $filename;
 /** @type {number} */ var $mode;
 /** @type {number} */ var $p;
 /** @type {number} */ var $i;
 $2=$L;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=_luaL_checklstring($3,1,0);
 $filename=$4;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=_luaL_optlstring($5,2,5096,0);
 $mode=$6;
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=_newfile($7);
 $p=$8;
 $i=0;
 /** @type {number} */ var $9=$i;
 /** @type {number} */ var $10=$mode;
 /** @type {number} */ var $11=(($10+$9)|0);
 /** @type {number} */ var $12=HEAP8[($11)];
 /** @type {number} */ var $13=(($12<<24)>>24);
 /** @type {number} */ var $14=($13|0)!=0;
 if($14){label=2;break;}else{label=8;break;}
 case 2: 
 /** @type {number} */ var $16=$i;
 /** @type {number} */ var $17=((($16)+(1))|0);
 $i=$17;
 /** @type {number} */ var $18=$mode;
 /** @type {number} */ var $19=(($18+$16)|0);
 /** @type {number} */ var $20=HEAP8[($19)];
 /** @type {number} */ var $21=(($20<<24)>>24);
 /** @type {number} */ var $22=_strchr(4680,$21);
 /** @type {number} */ var $23=($22|0)!=0;
 if($23){label=3;break;}else{label=8;break;}
 case 3: 
 /** @type {number} */ var $25=$i;
 /** @type {number} */ var $26=$mode;
 /** @type {number} */ var $27=(($26+$25)|0);
 /** @type {number} */ var $28=HEAP8[($27)];
 /** @type {number} */ var $29=(($28<<24)>>24);
 /** @type {number} */ var $30=($29|0)!=43;
 if($30){label=5;break;}else{label=4;break;}
 case 4: 
 /** @type {number} */ var $32=$i;
 /** @type {number} */ var $33=((($32)+(1))|0);
 $i=$33;
 /** @type {number} */ var $34=($33|0)!=0;
 if($34){label=5;break;}else{label=8;break;}
 case 5: 
 /** @type {number} */ var $36=$i;
 /** @type {number} */ var $37=$mode;
 /** @type {number} */ var $38=(($37+$36)|0);
 /** @type {number} */ var $39=HEAP8[($38)];
 /** @type {number} */ var $40=(($39<<24)>>24);
 /** @type {number} */ var $41=($40|0)!=98;
 if($41){label=7;break;}else{label=6;break;}
 case 6: 
 /** @type {number} */ var $43=$i;
 /** @type {number} */ var $44=((($43)+(1))|0);
 $i=$44;
 /** @type {number} */ var $45=($44|0)!=0;
 if($45){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $47=$i;
 /** @type {number} */ var $48=$mode;
 /** @type {number} */ var $49=(($48+$47)|0);
 /** @type {number} */ var $50=HEAP8[($49)];
 /** @type {number} */ var $51=(($50<<24)>>24);
 /** @type {number} */ var $52=($51|0)==0;
 if($52){label=9;break;}else{label=8;break;}
 case 8: 
 /** @type {number} */ var $54=$2;
 /** @type {number} */ var $55=$mode;
 /** @type {number} */ var $56=_luaL_error($54,4552,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$55,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=$56;
 label=13;break;
 case 9: 
 /** @type {number} */ var $58=$filename;
 /** @type {number} */ var $59=$mode;
 /** @type {number} */ var $60=_fopen($58,$59);
 /** @type {number} */ var $61=$p;
 /** @type {number} */ var $62=(($61)|0);
 HEAP32[(($62)>>2)]=$60;
 /** @type {number} */ var $63=$p;
 /** @type {number} */ var $64=(($63)|0);
 /** @type {number} */ var $65=HEAP32[(($64)>>2)];
 /** @type {number} */ var $66=($65|0)==0;
 if($66){label=10;break;}else{label=11;break;}
 case 10: 
 /** @type {number} */ var $68=$2;
 /** @type {number} */ var $69=$filename;
 /** @type {number} */ var $70=_luaL_fileresult($68,0,$69);
 var $73=$70;label=12;break;
 case 11: 
 var $73=1;label=12;break;
 case 12: 
 var $73;
 $1=$73;
 label=13;break;
 case 13: 
 /** @type {number} */ var $75=$1;
 STACKTOP=sp;return $75;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _io_output($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_g_iofile($2,8256,4896);
 STACKTOP=sp;return $3;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _io_popen($L){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $filename;
 /** @type {number} */ var $mode;
 /** @type {number} */ var $p;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_checklstring($2,1,0);
 $filename=$3;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=_luaL_optlstring($4,2,5096,0);
 $mode=$5;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=_newprefile($6);
 $p=$7;
 /** @type {number} */ var $8=$filename;
 /** @type {number} */ var $9=$mode;
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=_luaL_error($10,4984,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 /** @type {number} */ var $12=$p;
 /** @type {number} */ var $13=(($12)|0);
 HEAP32[(($13)>>2)]=0;
 /** @type {number} */ var $14=$p;
 /** @type {number} */ var $15=(($14+4)|0);
 HEAP32[(($15)>>2)]=320;
 /** @type {number} */ var $16=$p;
 /** @type {number} */ var $17=(($16)|0);
 /** @type {number} */ var $18=HEAP32[(($17)>>2)];
 /** @type {number} */ var $19=($18|0)==0;
 if($19){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=$filename;
 /** @type {number} */ var $23=_luaL_fileresult($21,0,$22);
 var $26=$23;label=4;break;
 case 3: 
 var $26=1;label=4;break;
 case 4: 
 var $26;
 STACKTOP=sp;return $26;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _io_read($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_getiofile($3,4120);
 /** @type {number} */ var $5=_g_read($2,$4,1);
 STACKTOP=sp;return $5;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _io_tmpfile($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $p;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_newfile($2);
 $p=$3;
 /** @type {number} */ var $4=_tmpfile();
 /** @type {number} */ var $5=$p;
 /** @type {number} */ var $6=(($5)|0);
 HEAP32[(($6)>>2)]=$4;
 /** @type {number} */ var $7=$p;
 /** @type {number} */ var $8=(($7)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=($9|0)==0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=_luaL_fileresult($12,0,0);
 var $16=$13;label=4;break;
 case 3: 
 var $16=1;label=4;break;
 case 4: 
 var $16;
 STACKTOP=sp;return $16;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _io_type($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $p;
 $1=$L;
 /** @type {number} */ var $2=$1;
 _luaL_checkany($2,1);
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaL_testudata($3,1,4040);
 /** @type {number} */ var $5=$4;
 $p=$5;
 /** @type {number} */ var $6=$p;
 /** @type {number} */ var $7=($6|0)==0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $9=$1;
 _lua_pushnil($9);
 label=7;break;
 case 3: 
 /** @type {number} */ var $11=$p;
 /** @type {number} */ var $12=(($11+4)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=($13|0)==0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=_lua_pushlstring($16,5392,11);
 label=6;break;
 case 5: 
 /** @type {number} */ var $19=$1;
 /** @type {number} */ var $20=_lua_pushlstring($19,5208,4);
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 STACKTOP=sp;return 1;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _io_write($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_getiofile($3,8256);
 /** @type {number} */ var $5=_g_write($2,$4,1);
 STACKTOP=sp;return $5;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _f_flush($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_tofile($3);
 /** @type {number} */ var $5=_fflush($4);
 /** @type {number} */ var $6=($5|0)==0;
 /** @type {number} */ var $7=($6&1);
 /** @type {number} */ var $8=_luaL_fileresult($2,$7,0);
 STACKTOP=sp;return $8;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _f_lines($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_tofile($2);
 /** @type {number} */ var $4=$1;
 _aux_lines($4,0);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _f_read($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_tofile($3);
 /** @type {number} */ var $5=_g_read($2,$4,2);
 STACKTOP=sp;return $5;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _f_seek($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $f;
 /** @type {number} */ var $op;
 /** @type {number} */ var $p3;
 /** @type {number} */ var $offset;
 $2=$L;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=_tofile($3);
 $f=$4;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=_luaL_checkoption($5,2,8216,1992);
 $op=$6;
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=_luaL_optnumber($7,3,0);
 $p3=$8;
 /** @type {number} */ var $9=$p3;
 /** @type {number} */ var $10=(($9)&-1);
 $offset=$10;
 /** @type {number} */ var $11=$offset;
 /** @type {number} */ var $12=($11|0);
 /** @type {number} */ var $13=$p3;
 /** @type {number} */ var $14=$12==$13;
 if($14){var $20=1;label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=_luaL_argerror($16,3,7736);
 /** @type {number} */ var $18=($17|0)!=0;
 var $20=$18;label=3;break;
 case 3: 
 var $20;
 /** @type {number} */ var $21=($20&1);
 /** @type {number} */ var $22=$f;
 /** @type {number} */ var $23=$offset;
 /** @type {number} */ var $24=$op;
 /** @type {number} */ var $25=((2008+($24<<2))|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 /** @type {number} */ var $27=_fseek($22,$23,$26);
 $op=$27;
 /** @type {number} */ var $28=$op;
 /** @type {number} */ var $29=($28|0)!=0;
 if($29){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $31=$2;
 /** @type {number} */ var $32=_luaL_fileresult($31,0,0);
 $1=$32;
 label=6;break;
 case 5: 
 /** @type {number} */ var $34=$2;
 /** @type {number} */ var $35=$f;
 /** @type {number} */ var $36=_ftell($35);
 /** @type {number} */ var $37=($36|0);
 _lua_pushnumber($34,$37);
 $1=1;
 label=6;break;
 case 6: 
 /** @type {number} */ var $39=$1;
 STACKTOP=sp;return $39;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _f_setvbuf($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $f;
 /** @type {number} */ var $op;
 /** @type {number} */ var $sz;
 /** @type {number} */ var $res;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_tofile($2);
 $f=$3;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=_luaL_checkoption($4,2,0,1960);
 $op=$5;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=_luaL_optinteger($6,3,1024);
 $sz=$7;
 /** @type {number} */ var $8=$f;
 /** @type {number} */ var $9=$op;
 /** @type {number} */ var $10=((1976+($9<<2))|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=$sz;
 /** @type {number} */ var $13=_setvbuf($8,0,$11,$12);
 $res=$13;
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=$res;
 /** @type {number} */ var $16=($15|0)==0;
 /** @type {number} */ var $17=($16&1);
 /** @type {number} */ var $18=_luaL_fileresult($14,$17,0);
 STACKTOP=sp;return $18;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _f_write($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $f;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_tofile($2);
 $f=$3;
 /** @type {number} */ var $4=$1;
 _lua_pushvalue($4,1);
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=$f;
 /** @type {number} */ var $7=_g_write($5,$6,2);
 STACKTOP=sp;return $7;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _f_gc($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $p;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_checkudata($2,1,4040);
 /** @type {number} */ var $4=$3;
 $p=$4;
 /** @type {number} */ var $5=$p;
 /** @type {number} */ var $6=(($5+4)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=($7|0)==0;
 if($8){label=4;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $10=$p;
 /** @type {number} */ var $11=(($10)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=($12|0)!=0;
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=_aux_close($15);
 label=4;break;
 case 4: 
 STACKTOP=sp;return 0;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _f_tostring($L){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $p;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_checkudata($2,1,4040);
 /** @type {number} */ var $4=$3;
 $p=$4;
 /** @type {number} */ var $5=$p;
 /** @type {number} */ var $6=(($5+4)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=($7|0)==0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=_lua_pushlstring($10,10032,13);
 label=4;break;
 case 3: 
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=$p;
 /** @type {number} */ var $15=(($14)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=_lua_pushfstring($13,9824,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$16,tempVarArgs)); STACKTOP=tempVarArgs;
 label=4;break;
 case 4: 
 STACKTOP=sp;return 1;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _createmeta($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_newmetatable($2,4040);
 /** @type {number} */ var $4=$1;
 _lua_pushvalue($4,-1);
 /** @type {number} */ var $5=$1;
 _lua_setfield($5,-2,3240);
 /** @type {number} */ var $6=$1;
 _luaL_setfuncs($6,1880,0);
 /** @type {number} */ var $7=$1;
 _lua_settop($7,-2);
 STACKTOP=sp;return;
}
/**
 * @param {number} $L
 * @param {number} $f
 * @param {number} $k
 * @param {number} $fname
 * @return {number}
 */
function _createstdfile($L,$f,$k,$fname){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $p;
 $1=$L;
 $2=$f;
 $3=$k;
 $4=$fname;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=_newprefile($5);
 $p=$6;
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=$p;
 /** @type {number} */ var $9=(($8)|0);
 HEAP32[(($9)>>2)]=$7;
 /** @type {number} */ var $10=$p;
 /** @type {number} */ var $11=(($10+4)|0);
 HEAP32[(($11)>>2)]=172;
 /** @type {number} */ var $12=$3;
 /** @type {number} */ var $13=($12|0)!=0;
 if($13){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $15=$1;
 _lua_pushvalue($15,-1);
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=$3;
 _lua_setfield($16,-1001000,$17);
 label=3;break;
 case 3: 
 /** @type {number} */ var $19=$1;
 /** @type {number} */ var $20=$4;
 _lua_setfield($19,-2,$20);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _tofile($L){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $p;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_checkudata($2,1,4040);
 /** @type {number} */ var $4=$3;
 $p=$4;
 /** @type {number} */ var $5=$p;
 /** @type {number} */ var $6=(($5+4)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=($7|0)==0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=_luaL_error($10,9344,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=3;break;
 case 3: 
 /** @type {number} */ var $13=$p;
 /** @type {number} */ var $14=(($13)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 STACKTOP=sp;return $15;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _aux_close($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $p;
 /** @type {number} */ var $cf;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_checkudata($2,1,4040);
 /** @type {number} */ var $4=$3;
 $p=$4;
 /** @type {number} */ var $5=$p;
 /** @type {number} */ var $6=(($5+4)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 $cf=$7;
 /** @type {number} */ var $8=$p;
 /** @type {number} */ var $9=(($8+4)|0);
 HEAP32[(($9)>>2)]=0;
 /** @type {number} */ var $10=$cf;
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=FUNCTION_TABLE[$10]($11);
 STACKTOP=sp;return $12;
}
/**
 * @param {number} $L
 * @param {number} $findex
 * @return {number}
 */
function _getiofile($L,$findex){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $p;
 $1=$L;
 $2=$findex;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 _lua_getfield($3,-1001000,$4);
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=_lua_touserdata($5,-1);
 /** @type {number} */ var $7=$6;
 $p=$7;
 /** @type {number} */ var $8=$p;
 /** @type {number} */ var $9=(($8+4)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=($10|0)==0;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=(($14+4)|0);
 /** @type {number} */ var $16=_luaL_error($13,5552,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$15,tempVarArgs)); STACKTOP=tempVarArgs;
 label=3;break;
 case 3: 
 /** @type {number} */ var $18=$p;
 /** @type {number} */ var $19=(($18)|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 STACKTOP=sp;return $20;
 }
}
/**
 * @param {number} $L
 * @param {number} $f
 * @param {number} $mode
 * @return {number}
 */
function _g_iofile($L,$f,$mode){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $filename;
 $1=$L;
 $2=$f;
 $3=$mode;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=_lua_type($4,1);
 /** @type {number} */ var $6=($5|0)<=0;
 if($6){label=6;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=_lua_tolstring($8,1,0);
 $filename=$9;
 /** @type {number} */ var $10=$filename;
 /** @type {number} */ var $11=($10|0)!=0;
 if($11){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=$filename;
 /** @type {number} */ var $15=$3;
 _opencheck($13,$14,$15);
 label=5;break;
 case 4: 
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=_tofile($17);
 /** @type {number} */ var $19=$1;
 _lua_pushvalue($19,1);
 label=5;break;
 case 5: 
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=$2;
 _lua_setfield($21,-1001000,$22);
 label=6;break;
 case 6: 
 /** @type {number} */ var $24=$1;
 /** @type {number} */ var $25=$2;
 _lua_getfield($24,-1001000,$25);
 STACKTOP=sp;return 1;
 }
}
/**
 * @param {number} $L
 * @param {number} $fname
 * @param {number} $mode
 * @return {number}
 */
function _opencheck($L,$fname,$mode){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $p;
 $1=$L;
 $2=$fname;
 $3=$mode;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=_newfile($4);
 $p=$5;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=$3;
 /** @type {number} */ var $8=_fopen($6,$7);
 /** @type {number} */ var $9=$p;
 /** @type {number} */ var $10=(($9)|0);
 HEAP32[(($10)>>2)]=$8;
 /** @type {number} */ var $11=$p;
 /** @type {number} */ var $12=(($11)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=($13|0)==0;
 if($14){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=$2;
 /** @type {number} */ var $18=___errno_location();
 /** @type {number} */ var $19=HEAP32[(($18)>>2)];
 /** @type {number} */ var $20=_strerror($19);
 /** @type {number} */ var $21=_luaL_error($16,4776,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$17,HEAP32[(((tempVarArgs)+(8))>>2)]=$20,tempVarArgs)); STACKTOP=tempVarArgs;
 label=3;break;
 case 3: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $toclose
 * @return {number}
 */
function _aux_lines($L,$toclose){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $i;
 /** @type {number} */ var $n;
 $1=$L;
 $2=$toclose;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_lua_gettop($3);
 /** @type {number} */ var $5=((($4)-(1))|0);
 $n=$5;
 /** @type {number} */ var $6=$n;
 /** @type {number} */ var $7=($6|0)<=17;
 if($7){var $13=1;label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=_luaL_argerror($9,17,6840);
 /** @type {number} */ var $11=($10|0)!=0;
 var $13=$11;label=3;break;
 case 3: 
 var $13;
 /** @type {number} */ var $14=($13&1);
 /** @type {number} */ var $15=$1;
 _lua_pushvalue($15,1);
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=$n;
 _lua_pushinteger($16,$17);
 /** @type {number} */ var $18=$1;
 /** @type {number} */ var $19=$2;
 _lua_pushboolean($18,$19);
 $i=1;
 label=4;break;
 case 4: 
 /** @type {number} */ var $21=$i;
 /** @type {number} */ var $22=$n;
 /** @type {number} */ var $23=($21|0)<=($22|0);
 if($23){label=5;break;}else{label=7;break;}
 case 5: 
 /** @type {number} */ var $25=$1;
 /** @type {number} */ var $26=$i;
 /** @type {number} */ var $27=((($26)+(1))|0);
 _lua_pushvalue($25,$27);
 label=6;break;
 case 6: 
 /** @type {number} */ var $29=$i;
 /** @type {number} */ var $30=((($29)+(1))|0);
 $i=$30;
 label=4;break;
 case 7: 
 /** @type {number} */ var $32=$1;
 /** @type {number} */ var $33=$n;
 /** @type {number} */ var $34=((($33)+(3))|0);
 _lua_pushcclosure($32,166,$34);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _newfile($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $p;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_newprefile($2);
 $p=$3;
 /** @type {number} */ var $4=$p;
 /** @type {number} */ var $5=(($4)|0);
 HEAP32[(($5)>>2)]=0;
 /** @type {number} */ var $6=$p;
 /** @type {number} */ var $7=(($6+4)|0);
 HEAP32[(($7)>>2)]=284;
 /** @type {number} */ var $8=$p;
 STACKTOP=sp;return $8;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _newprefile($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $p;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_lua_newuserdata($2,8);
 /** @type {number} */ var $4=$3;
 $p=$4;
 /** @type {number} */ var $5=$p;
 /** @type {number} */ var $6=(($5+4)|0);
 HEAP32[(($6)>>2)]=0;
 /** @type {number} */ var $7=$1;
 _luaL_setmetatable($7,4040);
 /** @type {number} */ var $8=$p;
 STACKTOP=sp;return $8;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _io_pclose($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $p;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_checkudata($2,1,4040);
 /** @type {number} */ var $4=$3;
 $p=$4;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=$p;
 /** @type {number} */ var $8=(($7)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=_luaL_execresult($5,-1);
 STACKTOP=sp;return $10;
}
/**
 * @param {number} $L
 * @param {number} $f
 * @param {number} $first
 * @return {number}
 */
function _g_read($L,$f,$first){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $nargs;
 /** @type {number} */ var $success;
 /** @type {number} */ var $n;
 /** @type {number} */ var $l;
 /** @type {number} */ var $p;
 $2=$L;
 $3=$f;
 $4=$first;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=_lua_gettop($5);
 /** @type {number} */ var $7=((($6)-(1))|0);
 $nargs=$7;
 /** @type {number} */ var $8=$3;
 _clearerr($8);
 /** @type {number} */ var $9=$nargs;
 /** @type {number} */ var $10=($9|0)==0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=$3;
 /** @type {number} */ var $14=_read_line($12,$13,1);
 $success=$14;
 /** @type {number} */ var $15=$4;
 /** @type {number} */ var $16=((($15)+(1))|0);
 $n=$16;
 label=24;break;
 case 3: 
 /** @type {number} */ var $18=$2;
 /** @type {number} */ var $19=$nargs;
 /** @type {number} */ var $20=((($19)+(20))|0);
 _luaL_checkstack($18,$20,7584);
 $success=1;
 /** @type {number} */ var $21=$4;
 $n=$21;
 label=4;break;
 case 4: 
 /** @type {number} */ var $23=$nargs;
 /** @type {number} */ var $24=((($23)-(1))|0);
 $nargs=$24;
 /** @type {number} */ var $25=($23|0)!=0;
 if($25){label=5;break;}else{label=23;break;}
 case 5: 
 /** @type {number} */ var $27=$success;
 /** @type {number} */ var $28=($27|0)!=0;
 if($28){label=6;break;}else{label=23;break;}
 case 6: 
 /** @type {number} */ var $30=$2;
 /** @type {number} */ var $31=$n;
 /** @type {number} */ var $32=_lua_type($30,$31);
 /** @type {number} */ var $33=($32|0)==3;
 if($33){label=7;break;}else{label=11;break;}
 case 7: 
 /** @type {number} */ var $35=$2;
 /** @type {number} */ var $36=$n;
 /** @type {number} */ var $37=_lua_tointegerx($35,$36,0);
 $l=$37;
 /** @type {number} */ var $38=$l;
 /** @type {number} */ var $39=($38|0)==0;
 if($39){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $41=$2;
 /** @type {number} */ var $42=$3;
 /** @type {number} */ var $43=_test_eof($41,$42);
 var $50=$43;label=10;break;
 case 9: 
 /** @type {number} */ var $45=$2;
 /** @type {number} */ var $46=$3;
 /** @type {number} */ var $47=$l;
 /** @type {number} */ var $48=_read_chars($45,$46,$47);
 var $50=$48;label=10;break;
 case 10: 
 var $50;
 $success=$50;
 label=21;break;
 case 11: 
 /** @type {number} */ var $52=$2;
 /** @type {number} */ var $53=$n;
 /** @type {number} */ var $54=_lua_tolstring($52,$53,0);
 $p=$54;
 /** @type {number} */ var $55=$p;
 /** @type {number} */ var $56=($55|0)!=0;
 if($56){label=12;break;}else{label=13;break;}
 case 12: 
 /** @type {number} */ var $58=$p;
 /** @type {number} */ var $59=(($58)|0);
 /** @type {number} */ var $60=HEAP8[($59)];
 /** @type {number} */ var $61=(($60<<24)>>24);
 /** @type {number} */ var $62=($61|0)==42;
 if($62){var $69=1;label=14;break;}else{label=13;break;}
 case 13: 
 /** @type {number} */ var $64=$2;
 /** @type {number} */ var $65=$n;
 /** @type {number} */ var $66=_luaL_argerror($64,$65,7424);
 /** @type {number} */ var $67=($66|0)!=0;
 var $69=$67;label=14;break;
 case 14: 
 var $69;
 /** @type {number} */ var $70=($69&1);
 /** @type {number} */ var $71=$p;
 /** @type {number} */ var $72=(($71+1)|0);
 /** @type {number} */ var $73=HEAP8[($72)];
 /** @type {number} */ var $74=(($73<<24)>>24);
 if(($74|0)==110){ label=15;break;}else if(($74|0)==108){ label=16;break;}else if(($74|0)==76){ label=17;break;}else if(($74|0)==97){ label=18;break;}else{label=19;break;}
 case 15: 
 /** @type {number} */ var $76=$2;
 /** @type {number} */ var $77=$3;
 /** @type {number} */ var $78=_read_number($76,$77);
 $success=$78;
 label=20;break;
 case 16: 
 /** @type {number} */ var $80=$2;
 /** @type {number} */ var $81=$3;
 /** @type {number} */ var $82=_read_line($80,$81,1);
 $success=$82;
 label=20;break;
 case 17: 
 /** @type {number} */ var $84=$2;
 /** @type {number} */ var $85=$3;
 /** @type {number} */ var $86=_read_line($84,$85,0);
 $success=$86;
 label=20;break;
 case 18: 
 /** @type {number} */ var $88=$2;
 /** @type {number} */ var $89=$3;
 _read_all($88,$89);
 $success=1;
 label=20;break;
 case 19: 
 /** @type {number} */ var $91=$2;
 /** @type {number} */ var $92=$n;
 /** @type {number} */ var $93=_luaL_argerror($91,$92,7256);
 $1=$93;
 label=29;break;
 case 20: 
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 /** @type {number} */ var $97=$n;
 /** @type {number} */ var $98=((($97)+(1))|0);
 $n=$98;
 label=4;break;
 case 23: 
 label=24;break;
 case 24: 
 /** @type {number} */ var $101=$3;
 /** @type {number} */ var $102=_ferror($101);
 /** @type {number} */ var $103=($102|0)!=0;
 if($103){label=25;break;}else{label=26;break;}
 case 25: 
 /** @type {number} */ var $105=$2;
 /** @type {number} */ var $106=_luaL_fileresult($105,0,0);
 $1=$106;
 label=29;break;
 case 26: 
 /** @type {number} */ var $108=$success;
 /** @type {number} */ var $109=($108|0)!=0;
 if($109){label=28;break;}else{label=27;break;}
 case 27: 
 /** @type {number} */ var $111=$2;
 _lua_settop($111,-2);
 /** @type {number} */ var $112=$2;
 _lua_pushnil($112);
 label=28;break;
 case 28: 
 /** @type {number} */ var $114=$n;
 /** @type {number} */ var $115=$4;
 /** @type {number} */ var $116=((($114)-($115))|0);
 $1=$116;
 label=29;break;
 case 29: 
 /** @type {number} */ var $118=$1;
 STACKTOP=sp;return $118;
 }
}
/**
 * @param {number} $L
 * @param {number} $f
 * @param {number} $arg
 * @return {number}
 */
function _g_write($L,$f,$arg){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $nargs;
 /** @type {number} */ var $status;
 /** @type {number} */ var $l=sp;
 /** @type {number} */ var $s;
 $2=$L;
 $3=$f;
 $4=$arg;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=_lua_gettop($5);
 /** @type {number} */ var $7=$4;
 /** @type {number} */ var $8=((($6)-($7))|0);
 $nargs=$8;
 $status=1;
 label=2;break;
 case 2: 
 /** @type {number} */ var $10=$nargs;
 /** @type {number} */ var $11=((($10)-(1))|0);
 $nargs=$11;
 /** @type {number} */ var $12=($10|0)!=0;
 if($12){label=3;break;}else{label=12;break;}
 case 3: 
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=$4;
 /** @type {number} */ var $16=_lua_type($14,$15);
 /** @type {number} */ var $17=($16|0)==3;
 if($17){label=4;break;}else{label=7;break;}
 case 4: 
 /** @type {number} */ var $19=$status;
 /** @type {number} */ var $20=($19|0)!=0;
 if($20){label=5;break;}else{var $29=0;label=6;break;}
 case 5: 
 /** @type {number} */ var $22=$3;
 /** @type {number} */ var $23=$2;
 /** @type {number} */ var $24=$4;
 /** @type {number} */ var $25=_lua_tonumberx($23,$24,0);
 /** @type {number} */ var $26=_fprintf($22,9624,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAPF64[((tempVarArgs)>>3)]=$25,tempVarArgs)); STACKTOP=tempVarArgs;
 /** @type {number} */ var $27=($26|0)>0;
 var $29=$27;label=6;break;
 case 6: 
 var $29;
 /** @type {number} */ var $30=($29&1);
 $status=$30;
 label=10;break;
 case 7: 
 /** @type {number} */ var $32=$2;
 /** @type {number} */ var $33=$4;
 /** @type {number} */ var $34=_luaL_checklstring($32,$33,$l);
 $s=$34;
 /** @type {number} */ var $35=$status;
 /** @type {number} */ var $36=($35|0)!=0;
 if($36){label=8;break;}else{var $45=0;label=9;break;}
 case 8: 
 /** @type {number} */ var $38=$s;
 /** @type {number} */ var $39=HEAP32[(($l)>>2)];
 /** @type {number} */ var $40=$3;
 /** @type {number} */ var $41=_fwrite($38,1,$39,$40);
 /** @type {number} */ var $42=HEAP32[(($l)>>2)];
 /** @type {number} */ var $43=($41|0)==($42|0);
 var $45=$43;label=9;break;
 case 9: 
 var $45;
 /** @type {number} */ var $46=($45&1);
 $status=$46;
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 /** @type {number} */ var $49=$4;
 /** @type {number} */ var $50=((($49)+(1))|0);
 $4=$50;
 label=2;break;
 case 12: 
 /** @type {number} */ var $52=$status;
 /** @type {number} */ var $53=($52|0)!=0;
 if($53){label=13;break;}else{label=14;break;}
 case 13: 
 $1=1;
 label=15;break;
 case 14: 
 /** @type {number} */ var $56=$2;
 /** @type {number} */ var $57=$status;
 /** @type {number} */ var $58=_luaL_fileresult($56,$57,0);
 $1=$58;
 label=15;break;
 case 15: 
 /** @type {number} */ var $60=$1;
 STACKTOP=sp;return $60;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _io_noclose($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $p;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_checkudata($2,1,4040);
 /** @type {number} */ var $4=$3;
 $p=$4;
 /** @type {number} */ var $5=$p;
 /** @type {number} */ var $6=(($5+4)|0);
 HEAP32[(($6)>>2)]=172;
 /** @type {number} */ var $7=$1;
 _lua_pushnil($7);
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=_lua_pushlstring($8,3704,26);
 STACKTOP=sp;return 2;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _io_readline($L){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $p;
 /** @type {number} */ var $i;
 /** @type {number} */ var $n;
 $2=$L;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=_lua_touserdata($3,-1001001);
 /** @type {number} */ var $5=$4;
 $p=$5;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=_lua_tointegerx($6,-1001002,0);
 $n=$7;
 /** @type {number} */ var $8=$p;
 /** @type {number} */ var $9=(($8+4)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=($10|0)==0;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $13=$2;
 /** @type {number} */ var $14=_luaL_error($13,6592,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=$14;
 label=14;break;
 case 3: 
 /** @type {number} */ var $16=$2;
 _lua_settop($16,1);
 $i=1;
 label=4;break;
 case 4: 
 /** @type {number} */ var $18=$i;
 /** @type {number} */ var $19=$n;
 /** @type {number} */ var $20=($18|0)<=($19|0);
 if($20){label=5;break;}else{label=7;break;}
 case 5: 
 /** @type {number} */ var $22=$2;
 /** @type {number} */ var $23=$i;
 /** @type {number} */ var $24=((($23)+(3))|0);
 /** @type {number} */ var $25=(((-1001000)-($24))|0);
 _lua_pushvalue($22,$25);
 label=6;break;
 case 6: 
 /** @type {number} */ var $27=$i;
 /** @type {number} */ var $28=((($27)+(1))|0);
 $i=$28;
 label=4;break;
 case 7: 
 /** @type {number} */ var $30=$2;
 /** @type {number} */ var $31=$p;
 /** @type {number} */ var $32=(($31)|0);
 /** @type {number} */ var $33=HEAP32[(($32)>>2)];
 /** @type {number} */ var $34=_g_read($30,$33,2);
 $n=$34;
 /** @type {number} */ var $35=$2;
 /** @type {number} */ var $36=$n;
 /** @type {number} */ var $37=(((-$36))|0);
 /** @type {number} */ var $38=_lua_type($35,$37);
 /** @type {number} */ var $39=($38|0)==0;
 if($39){label=9;break;}else{label=8;break;}
 case 8: 
 /** @type {number} */ var $41=$n;
 $1=$41;
 label=14;break;
 case 9: 
 /** @type {number} */ var $43=$n;
 /** @type {number} */ var $44=($43|0)>1;
 if($44){label=10;break;}else{label=11;break;}
 case 10: 
 /** @type {number} */ var $46=$2;
 /** @type {number} */ var $47=$2;
 /** @type {number} */ var $48=$n;
 /** @type {number} */ var $49=(((-$48))|0);
 /** @type {number} */ var $50=((($49)+(1))|0);
 /** @type {number} */ var $51=_lua_tolstring($47,$50,0);
 /** @type {number} */ var $52=_luaL_error($46,6440,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$51,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=$52;
 label=14;break;
 case 11: 
 /** @type {number} */ var $54=$2;
 /** @type {number} */ var $55=_lua_toboolean($54,-1001003);
 /** @type {number} */ var $56=($55|0)!=0;
 if($56){label=12;break;}else{label=13;break;}
 case 12: 
 /** @type {number} */ var $58=$2;
 _lua_settop($58,0);
 /** @type {number} */ var $59=$2;
 _lua_pushvalue($59,-1001001);
 /** @type {number} */ var $60=$2;
 /** @type {number} */ var $61=_aux_close($60);
 label=13;break;
 case 13: 
 $1=0;
 label=14;break;
 case 14: 
 /** @type {number} */ var $64=$1;
 STACKTOP=sp;return $64;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _io_fclose($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $p;
 /** @type {number} */ var $res;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_checkudata($2,1,4040);
 /** @type {number} */ var $4=$3;
 $p=$4;
 /** @type {number} */ var $5=$p;
 /** @type {number} */ var $6=(($5)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=_fclose($7);
 $res=$8;
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=$res;
 /** @type {number} */ var $11=($10|0)==0;
 /** @type {number} */ var $12=($11&1);
 /** @type {number} */ var $13=_luaL_fileresult($9,$12,0);
 STACKTOP=sp;return $13;
}
/**
 * @param {number} $L
 * @param {number} $f
 * @param {number} $chop
 * @return {number}
 */
function _read_line($L,$f,$chop){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1040)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $b=sp;
 /** @type {number} */ var $l;
 /** @type {number} */ var $p;
 $2=$L;
 $3=$f;
 $4=$chop;
 /** @type {number} */ var $5=$2;
 _luaL_buffinit($5,$b);
 label=2;break;
 case 2: 
 /** @type {number} */ var $7=_luaL_prepbuffsize($b,1024);
 $p=$7;
 /** @type {number} */ var $8=$p;
 /** @type {number} */ var $9=$3;
 /** @type {number} */ var $10=_fgets($8,1024,$9);
 /** @type {number} */ var $11=($10|0)==0;
 if($11){label=3;break;}else{label=4;break;}
 case 3: 
 _luaL_pushresult($b);
 /** @type {number} */ var $13=$2;
 /** @type {number} */ var $14=_lua_rawlen($13,-1);
 /** @type {number} */ var $15=($14>>>0)>0;
 /** @type {number} */ var $16=($15&1);
 $1=$16;
 label=9;break;
 case 4: 
 /** @type {number} */ var $18=$p;
 /** @type {number} */ var $19=_strlen($18);
 $l=$19;
 /** @type {number} */ var $20=$l;
 /** @type {number} */ var $21=($20|0)==0;
 if($21){label=6;break;}else{label=5;break;}
 case 5: 
 /** @type {number} */ var $23=$l;
 /** @type {number} */ var $24=((($23)-(1))|0);
 /** @type {number} */ var $25=$p;
 /** @type {number} */ var $26=(($25+$24)|0);
 /** @type {number} */ var $27=HEAP8[($26)];
 /** @type {number} */ var $28=(($27<<24)>>24);
 /** @type {number} */ var $29=($28|0)!=10;
 if($29){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $31=$l;
 /** @type {number} */ var $32=(($b+8)|0);
 /** @type {number} */ var $33=HEAP32[(($32)>>2)];
 /** @type {number} */ var $34=((($33)+($31))|0);
 HEAP32[(($32)>>2)]=$34;
 label=8;break;
 case 7: 
 /** @type {number} */ var $36=$l;
 /** @type {number} */ var $37=$4;
 /** @type {number} */ var $38=((($36)-($37))|0);
 /** @type {number} */ var $39=(($b+8)|0);
 /** @type {number} */ var $40=HEAP32[(($39)>>2)];
 /** @type {number} */ var $41=((($40)+($38))|0);
 HEAP32[(($39)>>2)]=$41;
 _luaL_pushresult($b);
 $1=1;
 label=9;break;
 case 8: 
 label=2;break;
 case 9: 
 /** @type {number} */ var $44=$1;
 STACKTOP=sp;return $44;
 }
}
/**
 * @param {number} $L
 * @param {number} $f
 * @return {number}
 */
function _test_eof($L,$f){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $c;
 $1=$L;
 $2=$f;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=_fgetc($3);
 $c=$4;
 /** @type {number} */ var $5=$c;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=_ungetc($5,$6);
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=_lua_pushlstring($8,0,0);
 /** @type {number} */ var $10=$c;
 /** @type {number} */ var $11=($10|0)!=-1;
 /** @type {number} */ var $12=($11&1);
 STACKTOP=sp;return $12;
}
/**
 * @param {number} $L
 * @param {number} $f
 * @param {number} $n
 * @return {number}
 */
function _read_chars($L,$f,$n){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1040)|0;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $nr;
 /** @type {number} */ var $p;
 /** @type {number} */ var $b=sp;
 $1=$L;
 $2=$f;
 $3=$n;
 /** @type {number} */ var $4=$1;
 _luaL_buffinit($4,$b);
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=_luaL_prepbuffsize($b,$5);
 $p=$6;
 /** @type {number} */ var $7=$p;
 /** @type {number} */ var $8=$3;
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=_fread($7,1,$8,$9);
 $nr=$10;
 /** @type {number} */ var $11=$nr;
 /** @type {number} */ var $12=(($b+8)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=((($13)+($11))|0);
 HEAP32[(($12)>>2)]=$14;
 _luaL_pushresult($b);
 /** @type {number} */ var $15=$nr;
 /** @type {number} */ var $16=($15>>>0)>0;
 /** @type {number} */ var $17=($16&1);
 STACKTOP=sp;return $17;
}
/**
 * @param {number} $L
 * @param {number} $f
 * @return {number}
 */
function _read_number($L,$f){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $d=sp;
 $2=$L;
 $3=$f;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=_fscanf($4,7104,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$d,tempVarArgs)); STACKTOP=tempVarArgs;
 /** @type {number} */ var $6=($5|0)==1;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=HEAPF64[(($d)>>3)];
 _lua_pushnumber($8,$9);
 $1=1;
 label=4;break;
 case 3: 
 /** @type {number} */ var $11=$2;
 _lua_pushnil($11);
 $1=0;
 label=4;break;
 case 4: 
 /** @type {number} */ var $13=$1;
 STACKTOP=sp;return $13;
 }
}
/**
 * @param {number} $L
 * @param {number} $f
 * @return {number}
 */
function _read_all($L,$f){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1040)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $rlen;
 /** @type {number} */ var $b=sp;
 /** @type {number} */ var $p;
 /** @type {number} */ var $nr;
 $1=$L;
 $2=$f;
 $rlen=1024;
 /** @type {number} */ var $3=$1;
 _luaL_buffinit($3,$b);
 label=2;break;
 case 2: 
 /** @type {number} */ var $5=$rlen;
 /** @type {number} */ var $6=_luaL_prepbuffsize($b,$5);
 $p=$6;
 /** @type {number} */ var $7=$p;
 /** @type {number} */ var $8=$rlen;
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=_fread($7,1,$8,$9);
 $nr=$10;
 /** @type {number} */ var $11=$nr;
 /** @type {number} */ var $12=(($b+8)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=((($13)+($11))|0);
 HEAP32[(($12)>>2)]=$14;
 /** @type {number} */ var $15=$nr;
 /** @type {number} */ var $16=$rlen;
 /** @type {number} */ var $17=($15>>>0)<($16>>>0);
 if($17){label=3;break;}else{label=4;break;}
 case 3: 
 label=8;break;
 case 4: 
 /** @type {number} */ var $20=$rlen;
 /** @type {number} */ var $21=($20>>>0)<=1073741823;
 if($21){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $23=$rlen;
 /** @type {number} */ var $24=($23<<1);
 $rlen=$24;
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 label=2;break;
 case 8: 
 _luaL_pushresult($b);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaopen_math($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 _lua_createtable($2,0,27);
 /** @type {number} */ var $3=$1;
 _luaL_setfuncs($3,480,0);
 /** @type {number} */ var $4=$1;
 _lua_pushnumber($4,3.141592653589793);
 /** @type {number} */ var $5=$1;
 _lua_setfield($5,-2,3968);
 /** @type {number} */ var $6=$1;
 _lua_pushnumber($6,Infinity);
 /** @type {number} */ var $7=$1;
 _lua_setfield($7,-2,10464);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _math_abs($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaL_checknumber($3,1);
 /** @type {number} */ var $5=Math_abs($4);
 _lua_pushnumber($2,$5);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _math_acos($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaL_checknumber($3,1);
 /** @type {number} */ var $5=Math_acos($4);
 _lua_pushnumber($2,$5);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _math_asin($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaL_checknumber($3,1);
 /** @type {number} */ var $5=Math_asin($4);
 _lua_pushnumber($2,$5);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _math_atan2($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaL_checknumber($3,1);
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=_luaL_checknumber($5,2);
 /** @type {number} */ var $7=Math_atan2($4,$6);
 _lua_pushnumber($2,$7);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _math_atan($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaL_checknumber($3,1);
 /** @type {number} */ var $5=Math_atan($4);
 _lua_pushnumber($2,$5);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _math_ceil($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaL_checknumber($3,1);
 /** @type {number} */ var $5=Math_ceil($4);
 _lua_pushnumber($2,$5);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _math_cosh($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaL_checknumber($3,1);
 /** @type {number} */ var $5=_cosh($4);
 _lua_pushnumber($2,$5);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _math_cos($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaL_checknumber($3,1);
 /** @type {number} */ var $5=Math_cos($4);
 _lua_pushnumber($2,$5);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _math_deg($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaL_checknumber($3,1);
 /** @type {number} */ var $5=($4)/((0.017453292519943295));
 _lua_pushnumber($2,$5);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _math_exp($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaL_checknumber($3,1);
 /** @type {number} */ var $5=Math_exp($4);
 _lua_pushnumber($2,$5);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _math_floor($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaL_checknumber($3,1);
 /** @type {number} */ var $5=Math_floor($4);
 _lua_pushnumber($2,$5);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _math_fmod($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaL_checknumber($3,1);
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=_luaL_checknumber($5,2);
 /** @type {number} */ var $7=_fmod($4,$6);
 _lua_pushnumber($2,$7);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _math_frexp($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 /** @type {number} */ var $1;
 /** @type {number} */ var $e=sp;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaL_checknumber($3,1);
 /** @type {number} */ var $5=_frexp($4,$e);
 _lua_pushnumber($2,$5);
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=HEAP32[(($e)>>2)];
 _lua_pushinteger($6,$7);
 STACKTOP=sp;return 2;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _math_ldexp($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaL_checknumber($3,1);
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=_luaL_checkinteger($5,2);
 /** @type {number} */ var $7=_ldexp($4,$6);
 _lua_pushnumber($2,$7);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _math_log($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $x;
 /** @type {number} */ var $res;
 /** @type {number} */ var $base;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_checknumber($2,1);
 $x=$3;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=_lua_type($4,2);
 /** @type {number} */ var $6=($5|0)<=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $8=$x;
 /** @type {number} */ var $9=Math_log($8);
 $res=$9;
 label=7;break;
 case 3: 
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=_luaL_checknumber($11,2);
 $base=$12;
 /** @type {number} */ var $13=$base;
 /** @type {number} */ var $14=$13==10;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $16=$x;
 /** @type {number} */ var $17=_log10($16);
 $res=$17;
 label=6;break;
 case 5: 
 /** @type {number} */ var $19=$x;
 /** @type {number} */ var $20=Math_log($19);
 /** @type {number} */ var $21=$base;
 /** @type {number} */ var $22=Math_log($21);
 /** @type {number} */ var $23=($20)/($22);
 $res=$23;
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 /** @type {number} */ var $26=$1;
 /** @type {number} */ var $27=$res;
 _lua_pushnumber($26,$27);
 STACKTOP=sp;return 1;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _math_max($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $n;
 /** @type {number} */ var $dmax;
 /** @type {number} */ var $i;
 /** @type {number} */ var $d;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_lua_gettop($2);
 $n=$3;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=_luaL_checknumber($4,1);
 $dmax=$5;
 $i=2;
 label=2;break;
 case 2: 
 /** @type {number} */ var $7=$i;
 /** @type {number} */ var $8=$n;
 /** @type {number} */ var $9=($7|0)<=($8|0);
 if($9){label=3;break;}else{label=7;break;}
 case 3: 
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=$i;
 /** @type {number} */ var $13=_luaL_checknumber($11,$12);
 $d=$13;
 /** @type {number} */ var $14=$d;
 /** @type {number} */ var $15=$dmax;
 /** @type {number} */ var $16=$14>$15;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $18=$d;
 $dmax=$18;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 /** @type {number} */ var $21=$i;
 /** @type {number} */ var $22=((($21)+(1))|0);
 $i=$22;
 label=2;break;
 case 7: 
 /** @type {number} */ var $24=$1;
 /** @type {number} */ var $25=$dmax;
 _lua_pushnumber($24,$25);
 STACKTOP=sp;return 1;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _math_min($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $n;
 /** @type {number} */ var $dmin;
 /** @type {number} */ var $i;
 /** @type {number} */ var $d;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_lua_gettop($2);
 $n=$3;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=_luaL_checknumber($4,1);
 $dmin=$5;
 $i=2;
 label=2;break;
 case 2: 
 /** @type {number} */ var $7=$i;
 /** @type {number} */ var $8=$n;
 /** @type {number} */ var $9=($7|0)<=($8|0);
 if($9){label=3;break;}else{label=7;break;}
 case 3: 
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=$i;
 /** @type {number} */ var $13=_luaL_checknumber($11,$12);
 $d=$13;
 /** @type {number} */ var $14=$d;
 /** @type {number} */ var $15=$dmin;
 /** @type {number} */ var $16=$14<$15;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $18=$d;
 $dmin=$18;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 /** @type {number} */ var $21=$i;
 /** @type {number} */ var $22=((($21)+(1))|0);
 $i=$22;
 label=2;break;
 case 7: 
 /** @type {number} */ var $24=$1;
 /** @type {number} */ var $25=$dmin;
 _lua_pushnumber($24,$25);
 STACKTOP=sp;return 1;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _math_modf($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 /** @type {number} */ var $1;
 /** @type {number} */ var $ip=sp;
 /** @type {number} */ var $fp;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_checknumber($2,1);
 /** @type {number} */ var $4=_modf($3,$ip);
 $fp=$4;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=HEAPF64[(($ip)>>3)];
 _lua_pushnumber($5,$6);
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=$fp;
 _lua_pushnumber($7,$8);
 STACKTOP=sp;return 2;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _math_pow($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaL_checknumber($3,1);
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=_luaL_checknumber($5,2);
 /** @type {number} */ var $7=Math_pow($4,$6);
 _lua_pushnumber($2,$7);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _math_rad($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaL_checknumber($3,1);
 /** @type {number} */ var $5=($4)*((0.017453292519943295));
 _lua_pushnumber($2,$5);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _math_random($L){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $r;
 /** @type {number} */ var $u;
 /** @type {number} */ var $l;
 /** @type {number} */ var $u1;
 $2=$L;
 /** @type {number} */ var $3=_rand();
 /** @type {number} */ var $4=(((($3|0))%(2147483647))&-1);
 /** @type {number} */ var $5=($4|0);
 /** @type {number} */ var $6=($5)/(2147483647);
 $r=$6;
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=_lua_gettop($7);
 if(($8|0)==0){ label=2;break;}else if(($8|0)==1){ label=3;break;}else if(($8|0)==2){ label=6;break;}else{label=9;break;}
 case 2: 
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=$r;
 _lua_pushnumber($10,$11);
 label=10;break;
 case 3: 
 /** @type {number} */ var $13=$2;
 /** @type {number} */ var $14=_luaL_checknumber($13,1);
 $u=$14;
 /** @type {number} */ var $15=$u;
 /** @type {number} */ var $16=1<=$15;
 if($16){var $22=1;label=5;break;}else{label=4;break;}
 case 4: 
 /** @type {number} */ var $18=$2;
 /** @type {number} */ var $19=_luaL_argerror($18,1,7400);
 /** @type {number} */ var $20=($19|0)!=0;
 var $22=$20;label=5;break;
 case 5: 
 var $22;
 /** @type {number} */ var $23=($22&1);
 /** @type {number} */ var $24=$2;
 /** @type {number} */ var $25=$r;
 /** @type {number} */ var $26=$u;
 /** @type {number} */ var $27=($25)*($26);
 /** @type {number} */ var $28=Math_floor($27);
 /** @type {number} */ var $29=($28)+(1);
 _lua_pushnumber($24,$29);
 label=10;break;
 case 6: 
 /** @type {number} */ var $31=$2;
 /** @type {number} */ var $32=_luaL_checknumber($31,1);
 $l=$32;
 /** @type {number} */ var $33=$2;
 /** @type {number} */ var $34=_luaL_checknumber($33,2);
 $u1=$34;
 /** @type {number} */ var $35=$l;
 /** @type {number} */ var $36=$u1;
 /** @type {number} */ var $37=$35<=$36;
 if($37){var $43=1;label=8;break;}else{label=7;break;}
 case 7: 
 /** @type {number} */ var $39=$2;
 /** @type {number} */ var $40=_luaL_argerror($39,2,7400);
 /** @type {number} */ var $41=($40|0)!=0;
 var $43=$41;label=8;break;
 case 8: 
 var $43;
 /** @type {number} */ var $44=($43&1);
 /** @type {number} */ var $45=$2;
 /** @type {number} */ var $46=$r;
 /** @type {number} */ var $47=$u1;
 /** @type {number} */ var $48=$l;
 /** @type {number} */ var $49=($47)-($48);
 /** @type {number} */ var $50=($49)+(1);
 /** @type {number} */ var $51=($46)*($50);
 /** @type {number} */ var $52=Math_floor($51);
 /** @type {number} */ var $53=$l;
 /** @type {number} */ var $54=($52)+($53);
 _lua_pushnumber($45,$54);
 label=10;break;
 case 9: 
 /** @type {number} */ var $56=$2;
 /** @type {number} */ var $57=_luaL_error($56,7224,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=$57;
 label=11;break;
 case 10: 
 $1=1;
 label=11;break;
 case 11: 
 /** @type {number} */ var $60=$1;
 STACKTOP=sp;return $60;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _math_randomseed($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_checkunsigned($2,1);
 _srand($3);
 /** @type {number} */ var $4=_rand();
 STACKTOP=sp;return 0;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _math_sinh($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaL_checknumber($3,1);
 /** @type {number} */ var $5=_sinh($4);
 _lua_pushnumber($2,$5);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _math_sin($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaL_checknumber($3,1);
 /** @type {number} */ var $5=Math_sin($4);
 _lua_pushnumber($2,$5);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _math_sqrt($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaL_checknumber($3,1);
 /** @type {number} */ var $5=Math_sqrt($4);
 _lua_pushnumber($2,$5);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _math_tanh($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaL_checknumber($3,1);
 /** @type {number} */ var $5=_tanh($4);
 _lua_pushnumber($2,$5);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _math_tan($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaL_checknumber($3,1);
 /** @type {number} */ var $5=Math_tan($4);
 _lua_pushnumber($2,$5);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaopen_os($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 _lua_createtable($2,0,11);
 /** @type {number} */ var $3=$1;
 _luaL_setfuncs($3,80,0);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _os_clock($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_clock();
 /** @type {number} */ var $4=($3|0);
 /** @type {number} */ var $5=($4)/(1000000);
 _lua_pushnumber($2,$5);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _os_date($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1304)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $s;
 /** @type {number} */ var $t=sp;
 /** @type {number} */ var $tmr=(sp)+(8);
 /** @type {number} */ var $stm;
 /** @type {number} */ var $cc=(sp)+(56);
 /** @type {number} */ var $b=(sp)+(64);
 /** @type {number} */ var $reslen;
 /** @type {number} */ var $buff=(sp)+(1104);
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_optlstring($2,1,8200,0);
 $s=$3;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=_lua_type($4,2);
 /** @type {number} */ var $6=($5|0)<=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $8=_time(0);
 var $14=$8;label=4;break;
 case 3: 
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=_luaL_checknumber($10,2);
 /** @type {number} */ var $12=(($11)&-1);
 var $14=$12;label=4;break;
 case 4: 
 var $14;
 HEAP32[(($t)>>2)]=$14;
 /** @type {number} */ var $15=$s;
 /** @type {number} */ var $16=HEAP8[($15)];
 /** @type {number} */ var $17=(($16<<24)>>24);
 /** @type {number} */ var $18=($17|0)==33;
 if($18){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $20=_gmtime($t);
 $stm=$20;
 /** @type {number} */ var $21=$s;
 /** @type {number} */ var $22=(($21+1)|0);
 $s=$22;
 label=7;break;
 case 6: 
 /** @type {number} */ var $24=_localtime($t);
 $stm=$24;
 label=7;break;
 case 7: 
 /** @type {number} */ var $26=$stm;
 /** @type {number} */ var $27=($26|0)==0;
 if($27){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $29=$1;
 _lua_pushnil($29);
 label=21;break;
 case 9: 
 /** @type {number} */ var $31=$s;
 /** @type {number} */ var $32=_strcmp($31,7968);
 /** @type {number} */ var $33=($32|0)==0;
 if($33){label=10;break;}else{label=11;break;}
 case 10: 
 /** @type {number} */ var $35=$1;
 _lua_createtable($35,0,9);
 /** @type {number} */ var $36=$1;
 /** @type {number} */ var $37=$stm;
 /** @type {number} */ var $38=(($37)|0);
 /** @type {number} */ var $39=HEAP32[(($38)>>2)];
 _setfield($36,11112,$39);
 /** @type {number} */ var $40=$1;
 /** @type {number} */ var $41=$stm;
 /** @type {number} */ var $42=(($41+4)|0);
 /** @type {number} */ var $43=HEAP32[(($42)>>2)];
 _setfield($40,10856,$43);
 /** @type {number} */ var $44=$1;
 /** @type {number} */ var $45=$stm;
 /** @type {number} */ var $46=(($45+8)|0);
 /** @type {number} */ var $47=HEAP32[(($46)>>2)];
 _setfield($44,10672,$47);
 /** @type {number} */ var $48=$1;
 /** @type {number} */ var $49=$stm;
 /** @type {number} */ var $50=(($49+12)|0);
 /** @type {number} */ var $51=HEAP32[(($50)>>2)];
 _setfield($48,10496,$51);
 /** @type {number} */ var $52=$1;
 /** @type {number} */ var $53=$stm;
 /** @type {number} */ var $54=(($53+16)|0);
 /** @type {number} */ var $55=HEAP32[(($54)>>2)];
 /** @type {number} */ var $56=((($55)+(1))|0);
 _setfield($52,10232,$56);
 /** @type {number} */ var $57=$1;
 /** @type {number} */ var $58=$stm;
 /** @type {number} */ var $59=(($58+20)|0);
 /** @type {number} */ var $60=HEAP32[(($59)>>2)];
 /** @type {number} */ var $61=((($60)+(1900))|0);
 _setfield($57,10016,$61);
 /** @type {number} */ var $62=$1;
 /** @type {number} */ var $63=$stm;
 /** @type {number} */ var $64=(($63+24)|0);
 /** @type {number} */ var $65=HEAP32[(($64)>>2)];
 /** @type {number} */ var $66=((($65)+(1))|0);
 _setfield($62,7720,$66);
 /** @type {number} */ var $67=$1;
 /** @type {number} */ var $68=$stm;
 /** @type {number} */ var $69=(($68+28)|0);
 /** @type {number} */ var $70=HEAP32[(($69)>>2)];
 /** @type {number} */ var $71=((($70)+(1))|0);
 _setfield($67,7568,$71);
 /** @type {number} */ var $72=$1;
 /** @type {number} */ var $73=$stm;
 /** @type {number} */ var $74=(($73+32)|0);
 /** @type {number} */ var $75=HEAP32[(($74)>>2)];
 _setboolfield($72,9808,$75);
 label=20;break;
 case 11: 
 /** @type {number} */ var $77=(($cc)|0);
 HEAP8[($77)]=37;
 /** @type {number} */ var $78=$1;
 _luaL_buffinit($78,$b);
 label=12;break;
 case 12: 
 /** @type {number} */ var $80=$s;
 /** @type {number} */ var $81=HEAP8[($80)];
 /** @type {number} */ var $82=(($81<<24)>>24)!=0;
 if($82){label=13;break;}else{label=19;break;}
 case 13: 
 /** @type {number} */ var $84=$s;
 /** @type {number} */ var $85=HEAP8[($84)];
 /** @type {number} */ var $86=(($85<<24)>>24);
 /** @type {number} */ var $87=($86|0)!=37;
 if($87){label=14;break;}else{label=17;break;}
 case 14: 
 /** @type {number} */ var $89=(($b+8)|0);
 /** @type {number} */ var $90=HEAP32[(($89)>>2)];
 /** @type {number} */ var $91=(($b+4)|0);
 /** @type {number} */ var $92=HEAP32[(($91)>>2)];
 /** @type {number} */ var $93=($90>>>0)<($92>>>0);
 if($93){var $98=1;label=16;break;}else{label=15;break;}
 case 15: 
 /** @type {number} */ var $95=_luaL_prepbuffsize($b,1);
 /** @type {number} */ var $96=($95|0)!=0;
 var $98=$96;label=16;break;
 case 16: 
 var $98;
 /** @type {number} */ var $99=($98&1);
 /** @type {number} */ var $100=$s;
 /** @type {number} */ var $101=(($100+1)|0);
 $s=$101;
 /** @type {number} */ var $102=HEAP8[($100)];
 /** @type {number} */ var $103=(($b+8)|0);
 /** @type {number} */ var $104=HEAP32[(($103)>>2)];
 /** @type {number} */ var $105=((($104)+(1))|0);
 HEAP32[(($103)>>2)]=$105;
 /** @type {number} */ var $106=(($b)|0);
 /** @type {number} */ var $107=HEAP32[(($106)>>2)];
 /** @type {number} */ var $108=(($107+$104)|0);
 HEAP8[($108)]=$102;
 label=18;break;
 case 17: 
 /** @type {number} */ var $110=$1;
 /** @type {number} */ var $111=$s;
 /** @type {number} */ var $112=(($111+1)|0);
 /** @type {number} */ var $113=(($cc)|0);
 /** @type {number} */ var $114=_checkoption($110,$112,$113);
 $s=$114;
 /** @type {number} */ var $115=(($buff)|0);
 /** @type {number} */ var $116=(($cc)|0);
 /** @type {number} */ var $117=$stm;
 /** @type {number} */ var $118=_strftime($115,200,$116,$117);
 $reslen=$118;
 /** @type {number} */ var $119=(($buff)|0);
 /** @type {number} */ var $120=$reslen;
 _luaL_addlstring($b,$119,$120);
 label=18;break;
 case 18: 
 label=12;break;
 case 19: 
 _luaL_pushresult($b);
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 STACKTOP=sp;return 1;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _os_difftime($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaL_checknumber($3,1);
 /** @type {number} */ var $5=(($4)&-1);
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=_luaL_optnumber($6,2,0);
 /** @type {number} */ var $8=(($7)&-1);
 /** @type {number} */ var $9=_difftime($5,$8);
 _lua_pushnumber($2,$9);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _os_execute($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $cmd;
 /** @type {number} */ var $stat;
 $2=$L;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=_luaL_optlstring($3,1,0,0);
 $cmd=$4;
 /** @type {number} */ var $5=$cmd;
 /** @type {number} */ var $6=_system($5);
 $stat=$6;
 /** @type {number} */ var $7=$cmd;
 /** @type {number} */ var $8=($7|0)!=0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=$stat;
 /** @type {number} */ var $12=_luaL_execresult($10,$11);
 $1=$12;
 label=4;break;
 case 3: 
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=$stat;
 _lua_pushboolean($14,$15);
 $1=1;
 label=4;break;
 case 4: 
 /** @type {number} */ var $17=$1;
 STACKTOP=sp;return $17;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _os_exit($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $status;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_lua_type($2,1);
 /** @type {number} */ var $4=($3|0)==1;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=_lua_toboolean($6,1);
 /** @type {number} */ var $8=($7|0)!=0;
 /** @type {number} */ var $9=($8?0:1);
 $status=$9;
 label=4;break;
 case 3: 
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=_luaL_optinteger($11,1,0);
 $status=$12;
 label=4;break;
 case 4: 
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=_lua_toboolean($14,2);
 /** @type {number} */ var $16=($15|0)!=0;
 if($16){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $18=$1;
 _lua_close($18);
 label=6;break;
 case 6: 
 /** @type {number} */ var $20=$1;
 /** @type {number} */ var $21=($20|0)!=0;
 if($21){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $23=$status;
 _exit($23);
 case 8: 
 STACKTOP=sp;return 0;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _os_getenv($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaL_checklstring($3,1,0);
 /** @type {number} */ var $5=_getenv($4);
 /** @type {number} */ var $6=_lua_pushstring($2,$5);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _os_remove($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $filename;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_checklstring($2,1,0);
 $filename=$3;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$filename;
 /** @type {number} */ var $6=_remove($5);
 /** @type {number} */ var $7=($6|0)==0;
 /** @type {number} */ var $8=($7&1);
 /** @type {number} */ var $9=$filename;
 /** @type {number} */ var $10=_luaL_fileresult($4,$8,$9);
 STACKTOP=sp;return $10;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _os_rename($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $fromname;
 /** @type {number} */ var $toname;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_checklstring($2,1,0);
 $fromname=$3;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=_luaL_checklstring($4,2,0);
 $toname=$5;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=$fromname;
 /** @type {number} */ var $8=$toname;
 /** @type {number} */ var $9=_rename($7,$8);
 /** @type {number} */ var $10=($9|0)==0;
 /** @type {number} */ var $11=($10&1);
 /** @type {number} */ var $12=$fromname;
 /** @type {number} */ var $13=_luaL_fileresult($6,$11,$12);
 STACKTOP=sp;return $13;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _os_setlocale($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $l;
 /** @type {number} */ var $op;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_optlstring($2,1,0,0);
 $l=$3;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=_luaL_checkoption($4,2,9328,424);
 $op=$5;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=$op;
 /** @type {number} */ var $8=((456+($7<<2))|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=$l;
 /** @type {number} */ var $11=_setlocale($9,$10);
 /** @type {number} */ var $12=_lua_pushstring($6,$11);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _os_time($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $t;
 /** @type {number} */ var $ts=sp;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_lua_type($2,1);
 /** @type {number} */ var $4=($3|0)<=0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $6=_time(0);
 $t=$6;
 label=4;break;
 case 3: 
 /** @type {number} */ var $8=$1;
 _luaL_checktype($8,1,5);
 /** @type {number} */ var $9=$1;
 _lua_settop($9,1);
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=_getfield($10,11112,0);
 /** @type {number} */ var $12=(($ts)|0);
 HEAP32[(($12)>>2)]=$11;
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=_getfield($13,10856,0);
 /** @type {number} */ var $15=(($ts+4)|0);
 HEAP32[(($15)>>2)]=$14;
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=_getfield($16,10672,12);
 /** @type {number} */ var $18=(($ts+8)|0);
 HEAP32[(($18)>>2)]=$17;
 /** @type {number} */ var $19=$1;
 /** @type {number} */ var $20=_getfield($19,10496,-1);
 /** @type {number} */ var $21=(($ts+12)|0);
 HEAP32[(($21)>>2)]=$20;
 /** @type {number} */ var $22=$1;
 /** @type {number} */ var $23=_getfield($22,10232,-1);
 /** @type {number} */ var $24=((($23)-(1))|0);
 /** @type {number} */ var $25=(($ts+16)|0);
 HEAP32[(($25)>>2)]=$24;
 /** @type {number} */ var $26=$1;
 /** @type {number} */ var $27=_getfield($26,10016,-1);
 /** @type {number} */ var $28=((($27)-(1900))|0);
 /** @type {number} */ var $29=(($ts+20)|0);
 HEAP32[(($29)>>2)]=$28;
 /** @type {number} */ var $30=$1;
 /** @type {number} */ var $31=_getboolfield($30,9808);
 /** @type {number} */ var $32=(($ts+32)|0);
 HEAP32[(($32)>>2)]=$31;
 /** @type {number} */ var $33=_mktime($ts);
 $t=$33;
 label=4;break;
 case 4: 
 /** @type {number} */ var $35=$t;
 /** @type {number} */ var $36=($35|0)==-1;
 if($36){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $38=$1;
 _lua_pushnil($38);
 label=7;break;
 case 6: 
 /** @type {number} */ var $40=$1;
 /** @type {number} */ var $41=$t;
 /** @type {number} */ var $42=($41|0);
 _lua_pushnumber($40,$42);
 label=7;break;
 case 7: 
 STACKTOP=sp;return 1;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _os_tmpname($L){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $buff=sp;
 /** @type {number} */ var $err;
 $2=$L;
 /** @type {number} */ var $3=(($buff)|0);
 /** @type {number} */ var $4=_tmpnam($3);
 /** @type {number} */ var $5=($4|0)==0;
 /** @type {number} */ var $6=($5&1);
 $err=$6;
 /** @type {number} */ var $7=$err;
 /** @type {number} */ var $8=($7|0)!=0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=_luaL_error($10,11472,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=$11;
 label=4;break;
 case 3: 
 /** @type {number} */ var $13=$2;
 /** @type {number} */ var $14=(($buff)|0);
 /** @type {number} */ var $15=_lua_pushstring($13,$14);
 $1=1;
 label=4;break;
 case 4: 
 /** @type {number} */ var $17=$1;
 STACKTOP=sp;return $17;
 }
}
/**
 * @param {number} $L
 * @param {number} $key
 * @param {number} $value
 * @return {number}
 */
function _setfield($L,$key,$value){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$L;
 $2=$key;
 $3=$value;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$3;
 _lua_pushinteger($4,$5);
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=$2;
 _lua_setfield($6,-2,$7);
 STACKTOP=sp;return;
}
/**
 * @param {number} $L
 * @param {number} $key
 * @param {number} $value
 * @return {number}
 */
function _setboolfield($L,$key,$value){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$L;
 $2=$key;
 $3=$value;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=($4|0)<0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 label=4;break;
 case 3: 
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=$3;
 _lua_pushboolean($8,$9);
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=$2;
 _lua_setfield($10,-2,$11);
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $conv
 * @param {number} $buff
 * @return {number}
 */
function _checkoption($L,$conv,$buff){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $i;
 $2=$L;
 $3=$conv;
 $4=$buff;
 $i=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $6=$i;
 /** @type {number} */ var $7=($6>>>0)<2;
 if($7){label=3;break;}else{label=14;break;}
 case 3: 
 /** @type {number} */ var $9=$3;
 /** @type {number} */ var $10=HEAP8[($9)];
 /** @type {number} */ var $11=(($10<<24)>>24);
 /** @type {number} */ var $12=($11|0)!=0;
 if($12){label=4;break;}else{label=12;break;}
 case 4: 
 /** @type {number} */ var $14=$i;
 /** @type {number} */ var $15=((2272+($14<<2))|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=$3;
 /** @type {number} */ var $18=HEAP8[($17)];
 /** @type {number} */ var $19=(($18<<24)>>24);
 /** @type {number} */ var $20=_strchr($16,$19);
 /** @type {number} */ var $21=($20|0)!=0;
 if($21){label=5;break;}else{label=12;break;}
 case 5: 
 /** @type {number} */ var $23=$3;
 /** @type {number} */ var $24=HEAP8[($23)];
 /** @type {number} */ var $25=$4;
 /** @type {number} */ var $26=(($25+1)|0);
 HEAP8[($26)]=$24;
 /** @type {number} */ var $27=$i;
 /** @type {number} */ var $28=((($27)+(1))|0);
 /** @type {number} */ var $29=((2272+($28<<2))|0);
 /** @type {number} */ var $30=HEAP32[(($29)>>2)];
 /** @type {number} */ var $31=HEAP8[($30)];
 /** @type {number} */ var $32=(($31<<24)>>24);
 /** @type {number} */ var $33=($32|0)==0;
 if($33){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $35=$4;
 /** @type {number} */ var $36=(($35+2)|0);
 HEAP8[($36)]=0;
 /** @type {number} */ var $37=$3;
 /** @type {number} */ var $38=(($37+1)|0);
 $1=$38;
 label=15;break;
 case 7: 
 /** @type {number} */ var $40=$3;
 /** @type {number} */ var $41=(($40+1)|0);
 /** @type {number} */ var $42=HEAP8[($41)];
 /** @type {number} */ var $43=(($42<<24)>>24);
 /** @type {number} */ var $44=($43|0)!=0;
 if($44){label=8;break;}else{label=10;break;}
 case 8: 
 /** @type {number} */ var $46=$i;
 /** @type {number} */ var $47=((($46)+(1))|0);
 /** @type {number} */ var $48=((2272+($47<<2))|0);
 /** @type {number} */ var $49=HEAP32[(($48)>>2)];
 /** @type {number} */ var $50=$3;
 /** @type {number} */ var $51=(($50+1)|0);
 /** @type {number} */ var $52=HEAP8[($51)];
 /** @type {number} */ var $53=(($52<<24)>>24);
 /** @type {number} */ var $54=_strchr($49,$53);
 /** @type {number} */ var $55=($54|0)!=0;
 if($55){label=9;break;}else{label=10;break;}
 case 9: 
 /** @type {number} */ var $57=$3;
 /** @type {number} */ var $58=(($57+1)|0);
 /** @type {number} */ var $59=HEAP8[($58)];
 /** @type {number} */ var $60=$4;
 /** @type {number} */ var $61=(($60+2)|0);
 HEAP8[($61)]=$59;
 /** @type {number} */ var $62=$4;
 /** @type {number} */ var $63=(($62+3)|0);
 HEAP8[($63)]=0;
 /** @type {number} */ var $64=$3;
 /** @type {number} */ var $65=(($64+2)|0);
 $1=$65;
 label=15;break;
 case 10: 
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 /** @type {number} */ var $70=$i;
 /** @type {number} */ var $71=((($70)+(2))|0);
 $i=$71;
 label=2;break;
 case 14: 
 /** @type {number} */ var $73=$2;
 /** @type {number} */ var $74=$2;
 /** @type {number} */ var $75=$3;
 /** @type {number} */ var $76=_lua_pushfstring($74,7064,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$75,tempVarArgs)); STACKTOP=tempVarArgs;
 /** @type {number} */ var $77=_luaL_argerror($73,1,$76);
 /** @type {number} */ var $78=$3;
 $1=$78;
 label=15;break;
 case 15: 
 /** @type {number} */ var $80=$1;
 STACKTOP=sp;return $80;
 }
}
/**
 * @param {number} $L
 * @param {number} $key
 * @param {number} $d
 * @return {number}
 */
function _getfield($L,$key,$d){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $res;
 /** @type {number} */ var $isnum=sp;
 $2=$L;
 $3=$key;
 $4=$d;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$3;
 _lua_getfield($5,-1,$6);
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=_lua_tointegerx($7,-1,$isnum);
 $res=$8;
 /** @type {number} */ var $9=HEAP32[(($isnum)>>2)];
 /** @type {number} */ var $10=($9|0)!=0;
 if($10){label=5;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $12=$4;
 /** @type {number} */ var $13=($12|0)<0;
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $15=$2;
 /** @type {number} */ var $16=$3;
 /** @type {number} */ var $17=_luaL_error($15,9576,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$16,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=$17;
 label=6;break;
 case 4: 
 /** @type {number} */ var $19=$4;
 $res=$19;
 label=5;break;
 case 5: 
 /** @type {number} */ var $21=$2;
 _lua_settop($21,-2);
 /** @type {number} */ var $22=$res;
 $1=$22;
 label=6;break;
 case 6: 
 /** @type {number} */ var $24=$1;
 STACKTOP=sp;return $24;
 }
}
/**
 * @param {number} $L
 * @param {number} $key
 * @return {number}
 */
function _getboolfield($L,$key){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $res;
 $1=$L;
 $2=$key;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=$2;
 _lua_getfield($3,-1,$4);
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=_lua_type($5,-1);
 /** @type {number} */ var $7=($6|0)==0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $13=-1;label=4;break;
 case 3: 
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=_lua_toboolean($10,-1);
 var $13=$11;label=4;break;
 case 4: 
 var $13;
 $res=$13;
 /** @type {number} */ var $14=$1;
 _lua_settop($14,-2);
 /** @type {number} */ var $15=$res;
 STACKTOP=sp;return $15;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaopen_string($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 _lua_createtable($2,0,14);
 /** @type {number} */ var $3=$1;
 _luaL_setfuncs($3,176,0);
 /** @type {number} */ var $4=$1;
 _createmetatable($4);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _str_byte($L){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $l=sp;
 /** @type {number} */ var $s;
 /** @type {number} */ var $posi;
 /** @type {number} */ var $pose;
 /** @type {number} */ var $n;
 /** @type {number} */ var $i;
 $2=$L;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=_luaL_checklstring($3,1,$l);
 $s=$4;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=_luaL_optinteger($5,2,1);
 /** @type {number} */ var $7=HEAP32[(($l)>>2)];
 /** @type {number} */ var $8=_posrelat($6,$7);
 $posi=$8;
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=$posi;
 /** @type {number} */ var $11=_luaL_optinteger($9,3,$10);
 /** @type {number} */ var $12=HEAP32[(($l)>>2)];
 /** @type {number} */ var $13=_posrelat($11,$12);
 $pose=$13;
 /** @type {number} */ var $14=$posi;
 /** @type {number} */ var $15=($14>>>0)<1;
 if($15){label=2;break;}else{label=3;break;}
 case 2: 
 $posi=1;
 label=3;break;
 case 3: 
 /** @type {number} */ var $18=$pose;
 /** @type {number} */ var $19=HEAP32[(($l)>>2)];
 /** @type {number} */ var $20=($18>>>0)>($19>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $22=HEAP32[(($l)>>2)];
 $pose=$22;
 label=5;break;
 case 5: 
 /** @type {number} */ var $24=$posi;
 /** @type {number} */ var $25=$pose;
 /** @type {number} */ var $26=($24>>>0)>($25>>>0);
 if($26){label=6;break;}else{label=7;break;}
 case 6: 
 $1=0;
 label=14;break;
 case 7: 
 /** @type {number} */ var $29=$pose;
 /** @type {number} */ var $30=$posi;
 /** @type {number} */ var $31=((($29)-($30))|0);
 /** @type {number} */ var $32=((($31)+(1))|0);
 $n=$32;
 /** @type {number} */ var $33=$posi;
 /** @type {number} */ var $34=$n;
 /** @type {number} */ var $35=((($33)+($34))|0);
 /** @type {number} */ var $36=$pose;
 /** @type {number} */ var $37=($35>>>0)<=($36>>>0);
 if($37){label=8;break;}else{label=9;break;}
 case 8: 
 /** @type {number} */ var $39=$2;
 /** @type {number} */ var $40=_luaL_error($39,5360,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=$40;
 label=14;break;
 case 9: 
 /** @type {number} */ var $42=$2;
 /** @type {number} */ var $43=$n;
 _luaL_checkstack($42,$43,5360);
 $i=0;
 label=10;break;
 case 10: 
 /** @type {number} */ var $45=$i;
 /** @type {number} */ var $46=$n;
 /** @type {number} */ var $47=($45|0)<($46|0);
 if($47){label=11;break;}else{label=13;break;}
 case 11: 
 /** @type {number} */ var $49=$2;
 /** @type {number} */ var $50=$posi;
 /** @type {number} */ var $51=$i;
 /** @type {number} */ var $52=((($50)+($51))|0);
 /** @type {number} */ var $53=((($52)-(1))|0);
 /** @type {number} */ var $54=$s;
 /** @type {number} */ var $55=(($54+$53)|0);
 /** @type {number} */ var $56=HEAP8[($55)];
 /** @type {number} */ var $57=($56&255);
 _lua_pushinteger($49,$57);
 label=12;break;
 case 12: 
 /** @type {number} */ var $59=$i;
 /** @type {number} */ var $60=((($59)+(1))|0);
 $i=$60;
 label=10;break;
 case 13: 
 /** @type {number} */ var $62=$n;
 $1=$62;
 label=14;break;
 case 14: 
 /** @type {number} */ var $64=$1;
 STACKTOP=sp;return $64;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _str_char($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1040)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $n;
 /** @type {number} */ var $i;
 /** @type {number} */ var $b=sp;
 /** @type {number} */ var $p;
 /** @type {number} */ var $c;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_lua_gettop($2);
 $n=$3;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$n;
 /** @type {number} */ var $6=_luaL_buffinitsize($4,$b,$5);
 $p=$6;
 $i=1;
 label=2;break;
 case 2: 
 /** @type {number} */ var $8=$i;
 /** @type {number} */ var $9=$n;
 /** @type {number} */ var $10=($8|0)<=($9|0);
 if($10){label=3;break;}else{label=7;break;}
 case 3: 
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=$i;
 /** @type {number} */ var $14=_luaL_checkinteger($12,$13);
 $c=$14;
 /** @type {number} */ var $15=$c;
 /** @type {number} */ var $16=(($15)&255);
 /** @type {number} */ var $17=($16&255);
 /** @type {number} */ var $18=$c;
 /** @type {number} */ var $19=($17|0)==($18|0);
 if($19){var $26=1;label=5;break;}else{label=4;break;}
 case 4: 
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=$i;
 /** @type {number} */ var $23=_luaL_argerror($21,$22,5528);
 /** @type {number} */ var $24=($23|0)!=0;
 var $26=$24;label=5;break;
 case 5: 
 var $26;
 /** @type {number} */ var $27=($26&1);
 /** @type {number} */ var $28=$c;
 /** @type {number} */ var $29=(($28)&255);
 /** @type {number} */ var $30=$i;
 /** @type {number} */ var $31=((($30)-(1))|0);
 /** @type {number} */ var $32=$p;
 /** @type {number} */ var $33=(($32+$31)|0);
 HEAP8[($33)]=$29;
 label=6;break;
 case 6: 
 /** @type {number} */ var $35=$i;
 /** @type {number} */ var $36=((($35)+(1))|0);
 $i=$36;
 label=2;break;
 case 7: 
 /** @type {number} */ var $38=$n;
 _luaL_pushresultsize($b,$38);
 STACKTOP=sp;return 1;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _str_dump($L){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1040)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $b=sp;
 $2=$L;
 /** @type {number} */ var $3=$2;
 _luaL_checktype($3,1,6);
 /** @type {number} */ var $4=$2;
 _lua_settop($4,1);
 /** @type {number} */ var $5=$2;
 _luaL_buffinit($5,$b);
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=$b;
 /** @type {number} */ var $8=_lua_dump($6,78,$7);
 /** @type {number} */ var $9=($8|0)!=0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $11=$2;
 /** @type {number} */ var $12=_luaL_error($11,5688,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=$12;
 label=4;break;
 case 3: 
 _luaL_pushresult($b);
 $1=1;
 label=4;break;
 case 4: 
 /** @type {number} */ var $15=$1;
 STACKTOP=sp;return $15;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _str_find($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_str_find_aux($2,1);
 STACKTOP=sp;return $3;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _str_format($L){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1080)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $top;
 /** @type {number} */ var $arg;
 /** @type {number} */ var $sfl=sp;
 /** @type {number} */ var $strfrmt;
 /** @type {number} */ var $strfrmt_end;
 /** @type {number} */ var $b=(sp)+(8);
 /** @type {number} */ var $form=(sp)+(1048);
 /** @type {number} */ var $buff;
 /** @type {number} */ var $nb;
 /** @type {number} */ var $n;
 /** @type {number} */ var $ni;
 /** @type {number} */ var $diff;
 /** @type {number} */ var $n1;
 /** @type {number} */ var $ni2;
 /** @type {number} */ var $diff3;
 /** @type {number} */ var $l=(sp)+(1072);
 /** @type {number} */ var $s;
 $2=$L;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=_lua_gettop($3);
 $top=$4;
 $arg=1;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$arg;
 /** @type {number} */ var $7=_luaL_checklstring($5,$6,$sfl);
 $strfrmt=$7;
 /** @type {number} */ var $8=$strfrmt;
 /** @type {number} */ var $9=HEAP32[(($sfl)>>2)];
 /** @type {number} */ var $10=(($8+$9)|0);
 $strfrmt_end=$10;
 /** @type {number} */ var $11=$2;
 _luaL_buffinit($11,$b);
 label=2;break;
 case 2: 
 /** @type {number} */ var $13=$strfrmt;
 /** @type {number} */ var $14=$strfrmt_end;
 /** @type {number} */ var $15=($13>>>0)<($14>>>0);
 if($15){label=3;break;}else{label=33;break;}
 case 3: 
 /** @type {number} */ var $17=$strfrmt;
 /** @type {number} */ var $18=HEAP8[($17)];
 /** @type {number} */ var $19=(($18<<24)>>24);
 /** @type {number} */ var $20=($19|0)!=37;
 if($20){label=4;break;}else{label=7;break;}
 case 4: 
 /** @type {number} */ var $22=(($b+8)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 /** @type {number} */ var $24=(($b+4)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=($23>>>0)<($25>>>0);
 if($26){var $31=1;label=6;break;}else{label=5;break;}
 case 5: 
 /** @type {number} */ var $28=_luaL_prepbuffsize($b,1);
 /** @type {number} */ var $29=($28|0)!=0;
 var $31=$29;label=6;break;
 case 6: 
 var $31;
 /** @type {number} */ var $32=($31&1);
 /** @type {number} */ var $33=$strfrmt;
 /** @type {number} */ var $34=(($33+1)|0);
 $strfrmt=$34;
 /** @type {number} */ var $35=HEAP8[($33)];
 /** @type {number} */ var $36=(($b+8)|0);
 /** @type {number} */ var $37=HEAP32[(($36)>>2)];
 /** @type {number} */ var $38=((($37)+(1))|0);
 HEAP32[(($36)>>2)]=$38;
 /** @type {number} */ var $39=(($b)|0);
 /** @type {number} */ var $40=HEAP32[(($39)>>2)];
 /** @type {number} */ var $41=(($40+$37)|0);
 HEAP8[($41)]=$35;
 label=32;break;
 case 7: 
 /** @type {number} */ var $43=$strfrmt;
 /** @type {number} */ var $44=(($43+1)|0);
 $strfrmt=$44;
 /** @type {number} */ var $45=HEAP8[($44)];
 /** @type {number} */ var $46=(($45<<24)>>24);
 /** @type {number} */ var $47=($46|0)==37;
 if($47){label=8;break;}else{label=11;break;}
 case 8: 
 /** @type {number} */ var $49=(($b+8)|0);
 /** @type {number} */ var $50=HEAP32[(($49)>>2)];
 /** @type {number} */ var $51=(($b+4)|0);
 /** @type {number} */ var $52=HEAP32[(($51)>>2)];
 /** @type {number} */ var $53=($50>>>0)<($52>>>0);
 if($53){var $58=1;label=10;break;}else{label=9;break;}
 case 9: 
 /** @type {number} */ var $55=_luaL_prepbuffsize($b,1);
 /** @type {number} */ var $56=($55|0)!=0;
 var $58=$56;label=10;break;
 case 10: 
 var $58;
 /** @type {number} */ var $59=($58&1);
 /** @type {number} */ var $60=$strfrmt;
 /** @type {number} */ var $61=(($60+1)|0);
 $strfrmt=$61;
 /** @type {number} */ var $62=HEAP8[($60)];
 /** @type {number} */ var $63=(($b+8)|0);
 /** @type {number} */ var $64=HEAP32[(($63)>>2)];
 /** @type {number} */ var $65=((($64)+(1))|0);
 HEAP32[(($63)>>2)]=$65;
 /** @type {number} */ var $66=(($b)|0);
 /** @type {number} */ var $67=HEAP32[(($66)>>2)];
 /** @type {number} */ var $68=(($67+$64)|0);
 HEAP8[($68)]=$62;
 label=31;break;
 case 11: 
 /** @type {number} */ var $70=_luaL_prepbuffsize($b,512);
 $buff=$70;
 $nb=0;
 /** @type {number} */ var $71=$arg;
 /** @type {number} */ var $72=((($71)+(1))|0);
 $arg=$72;
 /** @type {number} */ var $73=$top;
 /** @type {number} */ var $74=($72|0)>($73|0);
 if($74){label=12;break;}else{label=13;break;}
 case 12: 
 /** @type {number} */ var $76=$2;
 /** @type {number} */ var $77=$arg;
 /** @type {number} */ var $78=_luaL_argerror($76,$77,7208);
 label=13;break;
 case 13: 
 /** @type {number} */ var $80=$2;
 /** @type {number} */ var $81=$strfrmt;
 /** @type {number} */ var $82=(($form)|0);
 /** @type {number} */ var $83=_scanformat($80,$81,$82);
 $strfrmt=$83;
 /** @type {number} */ var $84=$strfrmt;
 /** @type {number} */ var $85=(($84+1)|0);
 $strfrmt=$85;
 /** @type {number} */ var $86=HEAP8[($84)];
 /** @type {number} */ var $87=(($86<<24)>>24);
 switch(($87|0)){case 99:{ label=14;break;}case 100:case 105:{ label=15;break;}case 111:case 117:case 120:case 88:{ label=19;break;}case 101:case 69:case 102:case 103:case 71:{ label=23;break;}case 113:{ label=24;break;}case 115:{ label=25;break;}default:{label=29;break;}}break;
 case 14: 
 /** @type {number} */ var $89=$buff;
 /** @type {number} */ var $90=(($form)|0);
 /** @type {number} */ var $91=$2;
 /** @type {number} */ var $92=$arg;
 /** @type {number} */ var $93=_luaL_checkinteger($91,$92);
 /** @type {number} */ var $94=_sprintf($89,$90,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$93,tempVarArgs)); STACKTOP=tempVarArgs;
 $nb=$94;
 label=30;break;
 case 15: 
 /** @type {number} */ var $96=$2;
 /** @type {number} */ var $97=$arg;
 /** @type {number} */ var $98=_luaL_checknumber($96,$97);
 $n=$98;
 /** @type {number} */ var $99=$n;
 /** @type {number} */ var $100=(($99)&-1);
 $ni=$100;
 /** @type {number} */ var $101=$n;
 /** @type {number} */ var $102=$ni;
 /** @type {number} */ var $103=($102|0);
 /** @type {number} */ var $104=($101)-($103);
 $diff=$104;
 /** @type {number} */ var $105=$diff;
 /** @type {number} */ var $106=-1<$105;
 if($106){label=16;break;}else{label=17;break;}
 case 16: 
 /** @type {number} */ var $108=$diff;
 /** @type {number} */ var $109=$108<1;
 if($109){var $116=1;label=18;break;}else{label=17;break;}
 case 17: 
 /** @type {number} */ var $111=$2;
 /** @type {number} */ var $112=$arg;
 /** @type {number} */ var $113=_luaL_argerror($111,$112,7032);
 /** @type {number} */ var $114=($113|0)!=0;
 var $116=$114;label=18;break;
 case 18: 
 var $116;
 /** @type {number} */ var $117=($116&1);
 /** @type {number} */ var $118=(($form)|0);
 _addlenmod($118,6824);
 /** @type {number} */ var $119=$buff;
 /** @type {number} */ var $120=(($form)|0);
 /** @type {number} */ var $121=$ni;
 /** @type {number} */ var $122=_sprintf($119,$120,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$121,tempVarArgs)); STACKTOP=tempVarArgs;
 $nb=$122;
 label=30;break;
 case 19: 
 /** @type {number} */ var $124=$2;
 /** @type {number} */ var $125=$arg;
 /** @type {number} */ var $126=_luaL_checknumber($124,$125);
 $n1=$126;
 /** @type {number} */ var $127=$n1;
 /** @type {number} */ var $128=($127>=0 ? Math_floor($127) : Math_ceil($127));
 $ni2=$128;
 /** @type {number} */ var $129=$n1;
 /** @type {number} */ var $130=$ni2;
 /** @type {number} */ var $131=($130>>>0);
 /** @type {number} */ var $132=($129)-($131);
 $diff3=$132;
 /** @type {number} */ var $133=$diff3;
 /** @type {number} */ var $134=-1<$133;
 if($134){label=20;break;}else{label=21;break;}
 case 20: 
 /** @type {number} */ var $136=$diff3;
 /** @type {number} */ var $137=$136<1;
 if($137){var $144=1;label=22;break;}else{label=21;break;}
 case 21: 
 /** @type {number} */ var $139=$2;
 /** @type {number} */ var $140=$arg;
 /** @type {number} */ var $141=_luaL_argerror($139,$140,6544);
 /** @type {number} */ var $142=($141|0)!=0;
 var $144=$142;label=22;break;
 case 22: 
 var $144;
 /** @type {number} */ var $145=($144&1);
 /** @type {number} */ var $146=(($form)|0);
 _addlenmod($146,6824);
 /** @type {number} */ var $147=$buff;
 /** @type {number} */ var $148=(($form)|0);
 /** @type {number} */ var $149=$ni2;
 /** @type {number} */ var $150=_sprintf($147,$148,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$149,tempVarArgs)); STACKTOP=tempVarArgs;
 $nb=$150;
 label=30;break;
 case 23: 
 /** @type {number} */ var $152=(($form)|0);
 _addlenmod($152,12096);
 /** @type {number} */ var $153=$buff;
 /** @type {number} */ var $154=(($form)|0);
 /** @type {number} */ var $155=$2;
 /** @type {number} */ var $156=$arg;
 /** @type {number} */ var $157=_luaL_checknumber($155,$156);
 /** @type {number} */ var $158=_sprintf($153,$154,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAPF64[((tempVarArgs)>>3)]=$157,tempVarArgs)); STACKTOP=tempVarArgs;
 $nb=$158;
 label=30;break;
 case 24: 
 /** @type {number} */ var $160=$2;
 /** @type {number} */ var $161=$arg;
 _addquoted($160,$b,$161);
 label=30;break;
 case 25: 
 /** @type {number} */ var $163=$2;
 /** @type {number} */ var $164=$arg;
 /** @type {number} */ var $165=_luaL_tolstring($163,$164,$l);
 $s=$165;
 /** @type {number} */ var $166=(($form)|0);
 /** @type {number} */ var $167=_strchr($166,46);
 /** @type {number} */ var $168=($167|0)!=0;
 if($168){label=28;break;}else{label=26;break;}
 case 26: 
 /** @type {number} */ var $170=HEAP32[(($l)>>2)];
 /** @type {number} */ var $171=($170>>>0)>=100;
 if($171){label=27;break;}else{label=28;break;}
 case 27: 
 _luaL_addvalue($b);
 label=30;break;
 case 28: 
 /** @type {number} */ var $174=$buff;
 /** @type {number} */ var $175=(($form)|0);
 /** @type {number} */ var $176=$s;
 /** @type {number} */ var $177=_sprintf($174,$175,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$176,tempVarArgs)); STACKTOP=tempVarArgs;
 $nb=$177;
 /** @type {number} */ var $178=$2;
 _lua_settop($178,-2);
 label=30;break;
 case 29: 
 /** @type {number} */ var $180=$2;
 /** @type {number} */ var $181=$strfrmt;
 /** @type {number} */ var $182=((($181)-(1))|0);
 /** @type {number} */ var $183=HEAP8[($182)];
 /** @type {number} */ var $184=(($183<<24)>>24);
 /** @type {number} */ var $185=_luaL_error($180,6392,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$184,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=$185;
 label=34;break;
 case 30: 
 /** @type {number} */ var $187=$nb;
 /** @type {number} */ var $188=(($b+8)|0);
 /** @type {number} */ var $189=HEAP32[(($188)>>2)];
 /** @type {number} */ var $190=((($189)+($187))|0);
 HEAP32[(($188)>>2)]=$190;
 label=31;break;
 case 31: 
 label=32;break;
 case 32: 
 label=2;break;
 case 33: 
 _luaL_pushresult($b);
 $1=1;
 label=34;break;
 case 34: 
 /** @type {number} */ var $195=$1;
 STACKTOP=sp;return $195;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _gmatch($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_checklstring($2,1,0);
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=_luaL_checklstring($4,2,0);
 /** @type {number} */ var $6=$1;
 _lua_settop($6,2);
 /** @type {number} */ var $7=$1;
 _lua_pushinteger($7,0);
 /** @type {number} */ var $8=$1;
 _lua_pushcclosure($8,182,3);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _str_gsub($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1336)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $srcl=sp;
 /** @type {number} */ var $lp=(sp)+(8);
 /** @type {number} */ var $src;
 /** @type {number} */ var $p;
 /** @type {number} */ var $tr;
 /** @type {number} */ var $max_s;
 /** @type {number} */ var $anchor;
 /** @type {number} */ var $n;
 /** @type {number} */ var $ms=(sp)+(16);
 /** @type {number} */ var $b=(sp)+(296);
 /** @type {number} */ var $e;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_checklstring($2,1,$srcl);
 $src=$3;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=_luaL_checklstring($4,2,$lp);
 $p=$5;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=_lua_type($6,3);
 $tr=$7;
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=HEAP32[(($srcl)>>2)];
 /** @type {number} */ var $10=((($9)+(1))|0);
 /** @type {number} */ var $11=_luaL_optinteger($8,4,$10);
 $max_s=$11;
 /** @type {number} */ var $12=$p;
 /** @type {number} */ var $13=HEAP8[($12)];
 /** @type {number} */ var $14=(($13<<24)>>24);
 /** @type {number} */ var $15=($14|0)==94;
 /** @type {number} */ var $16=($15&1);
 $anchor=$16;
 $n=0;
 /** @type {number} */ var $17=$tr;
 /** @type {number} */ var $18=($17|0)==3;
 if($18){var $33=1;label=6;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $20=$tr;
 /** @type {number} */ var $21=($20|0)==4;
 if($21){var $33=1;label=6;break;}else{label=3;break;}
 case 3: 
 /** @type {number} */ var $23=$tr;
 /** @type {number} */ var $24=($23|0)==6;
 if($24){var $33=1;label=6;break;}else{label=4;break;}
 case 4: 
 /** @type {number} */ var $26=$tr;
 /** @type {number} */ var $27=($26|0)==5;
 if($27){var $33=1;label=6;break;}else{label=5;break;}
 case 5: 
 /** @type {number} */ var $29=$1;
 /** @type {number} */ var $30=_luaL_argerror($29,3,7688);
 /** @type {number} */ var $31=($30|0)!=0;
 var $33=$31;label=6;break;
 case 6: 
 var $33;
 /** @type {number} */ var $34=($33&1);
 /** @type {number} */ var $35=$1;
 _luaL_buffinit($35,$b);
 /** @type {number} */ var $36=$anchor;
 /** @type {number} */ var $37=($36|0)!=0;
 if($37){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $39=$p;
 /** @type {number} */ var $40=(($39+1)|0);
 $p=$40;
 /** @type {number} */ var $41=HEAP32[(($lp)>>2)];
 /** @type {number} */ var $42=((($41)-(1))|0);
 HEAP32[(($lp)>>2)]=$42;
 label=8;break;
 case 8: 
 /** @type {number} */ var $44=$1;
 /** @type {number} */ var $45=(($ms+12)|0);
 HEAP32[(($45)>>2)]=$44;
 /** @type {number} */ var $46=$src;
 /** @type {number} */ var $47=(($ms)|0);
 HEAP32[(($47)>>2)]=$46;
 /** @type {number} */ var $48=$src;
 /** @type {number} */ var $49=HEAP32[(($srcl)>>2)];
 /** @type {number} */ var $50=(($48+$49)|0);
 /** @type {number} */ var $51=(($ms+4)|0);
 HEAP32[(($51)>>2)]=$50;
 /** @type {number} */ var $52=$p;
 /** @type {number} */ var $53=HEAP32[(($lp)>>2)];
 /** @type {number} */ var $54=(($52+$53)|0);
 /** @type {number} */ var $55=(($ms+8)|0);
 HEAP32[(($55)>>2)]=$54;
 label=9;break;
 case 9: 
 /** @type {number} */ var $57=$n;
 /** @type {number} */ var $58=$max_s;
 /** @type {number} */ var $59=($57>>>0)<($58>>>0);
 if($59){label=10;break;}else{label=24;break;}
 case 10: 
 /** @type {number} */ var $61=(($ms+16)|0);
 HEAP32[(($61)>>2)]=0;
 /** @type {number} */ var $62=$src;
 /** @type {number} */ var $63=$p;
 /** @type {number} */ var $64=_match($ms,$62,$63);
 $e=$64;
 /** @type {number} */ var $65=$e;
 /** @type {number} */ var $66=($65|0)!=0;
 if($66){label=11;break;}else{label=12;break;}
 case 11: 
 /** @type {number} */ var $68=$n;
 /** @type {number} */ var $69=((($68)+(1))|0);
 $n=$69;
 /** @type {number} */ var $70=$src;
 /** @type {number} */ var $71=$e;
 /** @type {number} */ var $72=$tr;
 _add_value($ms,$b,$70,$71,$72);
 label=12;break;
 case 12: 
 /** @type {number} */ var $74=$e;
 /** @type {number} */ var $75=($74|0)!=0;
 if($75){label=13;break;}else{label=15;break;}
 case 13: 
 /** @type {number} */ var $77=$e;
 /** @type {number} */ var $78=$src;
 /** @type {number} */ var $79=($77>>>0)>($78>>>0);
 if($79){label=14;break;}else{label=15;break;}
 case 14: 
 /** @type {number} */ var $81=$e;
 $src=$81;
 label=21;break;
 case 15: 
 /** @type {number} */ var $83=$src;
 /** @type {number} */ var $84=(($ms+4)|0);
 /** @type {number} */ var $85=HEAP32[(($84)>>2)];
 /** @type {number} */ var $86=($83>>>0)<($85>>>0);
 if($86){label=16;break;}else{label=19;break;}
 case 16: 
 /** @type {number} */ var $88=(($b+8)|0);
 /** @type {number} */ var $89=HEAP32[(($88)>>2)];
 /** @type {number} */ var $90=(($b+4)|0);
 /** @type {number} */ var $91=HEAP32[(($90)>>2)];
 /** @type {number} */ var $92=($89>>>0)<($91>>>0);
 if($92){var $97=1;label=18;break;}else{label=17;break;}
 case 17: 
 /** @type {number} */ var $94=_luaL_prepbuffsize($b,1);
 /** @type {number} */ var $95=($94|0)!=0;
 var $97=$95;label=18;break;
 case 18: 
 var $97;
 /** @type {number} */ var $98=($97&1);
 /** @type {number} */ var $99=$src;
 /** @type {number} */ var $100=(($99+1)|0);
 $src=$100;
 /** @type {number} */ var $101=HEAP8[($99)];
 /** @type {number} */ var $102=(($b+8)|0);
 /** @type {number} */ var $103=HEAP32[(($102)>>2)];
 /** @type {number} */ var $104=((($103)+(1))|0);
 HEAP32[(($102)>>2)]=$104;
 /** @type {number} */ var $105=(($b)|0);
 /** @type {number} */ var $106=HEAP32[(($105)>>2)];
 /** @type {number} */ var $107=(($106+$103)|0);
 HEAP8[($107)]=$101;
 label=20;break;
 case 19: 
 label=24;break;
 case 20: 
 label=21;break;
 case 21: 
 /** @type {number} */ var $111=$anchor;
 /** @type {number} */ var $112=($111|0)!=0;
 if($112){label=22;break;}else{label=23;break;}
 case 22: 
 label=24;break;
 case 23: 
 label=9;break;
 case 24: 
 /** @type {number} */ var $116=$src;
 /** @type {number} */ var $117=(($ms+4)|0);
 /** @type {number} */ var $118=HEAP32[(($117)>>2)];
 /** @type {number} */ var $119=$src;
 /** @type {number} */ var $120=$118;
 /** @type {number} */ var $121=$119;
 /** @type {number} */ var $122=((($120)-($121))|0);
 _luaL_addlstring($b,$116,$122);
 _luaL_pushresult($b);
 /** @type {number} */ var $123=$1;
 /** @type {number} */ var $124=$n;
 _lua_pushinteger($123,$124);
 STACKTOP=sp;return 2;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _str_len($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 /** @type {number} */ var $1;
 /** @type {number} */ var $l=sp;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_checklstring($2,1,$l);
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=HEAP32[(($l)>>2)];
 _lua_pushinteger($4,$5);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _str_lower($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1048)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $l=sp;
 /** @type {number} */ var $i;
 /** @type {number} */ var $b=(sp)+(8);
 /** @type {number} */ var $s;
 /** @type {number} */ var $p;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_checklstring($2,1,$l);
 $s=$3;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=HEAP32[(($l)>>2)];
 /** @type {number} */ var $6=_luaL_buffinitsize($4,$b,$5);
 $p=$6;
 $i=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $8=$i;
 /** @type {number} */ var $9=HEAP32[(($l)>>2)];
 /** @type {number} */ var $10=($8>>>0)<($9>>>0);
 if($10){label=3;break;}else{label=5;break;}
 case 3: 
 /** @type {number} */ var $12=$i;
 /** @type {number} */ var $13=$s;
 /** @type {number} */ var $14=(($13+$12)|0);
 /** @type {number} */ var $15=HEAP8[($14)];
 /** @type {number} */ var $16=($15&255);
 /** @type {number} */ var $17=_tolower($16);
 /** @type {number} */ var $18=(($17)&255);
 /** @type {number} */ var $19=$i;
 /** @type {number} */ var $20=$p;
 /** @type {number} */ var $21=(($20+$19)|0);
 HEAP8[($21)]=$18;
 label=4;break;
 case 4: 
 /** @type {number} */ var $23=$i;
 /** @type {number} */ var $24=((($23)+(1))|0);
 $i=$24;
 label=2;break;
 case 5: 
 /** @type {number} */ var $26=HEAP32[(($l)>>2)];
 _luaL_pushresultsize($b,$26);
 STACKTOP=sp;return 1;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _str_match($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_str_find_aux($2,0);
 STACKTOP=sp;return $3;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _str_rep($L){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1056)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $l=sp;
 /** @type {number} */ var $lsep=(sp)+(8);
 /** @type {number} */ var $s;
 /** @type {number} */ var $n;
 /** @type {number} */ var $sep;
 /** @type {number} */ var $totallen;
 /** @type {number} */ var $b=(sp)+(16);
 /** @type {number} */ var $p;
 $2=$L;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=_luaL_checklstring($3,1,$l);
 $s=$4;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=_luaL_checkinteger($5,2);
 $n=$6;
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=_luaL_optlstring($7,3,12096,$lsep);
 $sep=$8;
 /** @type {number} */ var $9=$n;
 /** @type {number} */ var $10=($9|0)<=0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=_lua_pushlstring($12,12096,0);
 label=13;break;
 case 3: 
 /** @type {number} */ var $15=HEAP32[(($l)>>2)];
 /** @type {number} */ var $16=HEAP32[(($lsep)>>2)];
 /** @type {number} */ var $17=((($15)+($16))|0);
 /** @type {number} */ var $18=HEAP32[(($l)>>2)];
 /** @type {number} */ var $19=($17>>>0)<($18>>>0);
 if($19){label=5;break;}else{label=4;break;}
 case 4: 
 /** @type {number} */ var $21=HEAP32[(($l)>>2)];
 /** @type {number} */ var $22=HEAP32[(($lsep)>>2)];
 /** @type {number} */ var $23=((($21)+($22))|0);
 /** @type {number} */ var $24=$n;
 /** @type {number} */ var $25=(((2147483647)/(($24>>>0)))&-1);
 /** @type {number} */ var $26=($23>>>0)>=($25>>>0);
 if($26){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $28=$2;
 /** @type {number} */ var $29=_luaL_error($28,10200,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=$29;
 label=14;break;
 case 6: 
 /** @type {number} */ var $31=$n;
 /** @type {number} */ var $32=HEAP32[(($l)>>2)];
 /** @type {number} */ var $33=(Math_imul($31,$32)|0);
 /** @type {number} */ var $34=$n;
 /** @type {number} */ var $35=((($34)-(1))|0);
 /** @type {number} */ var $36=HEAP32[(($lsep)>>2)];
 /** @type {number} */ var $37=(Math_imul($35,$36)|0);
 /** @type {number} */ var $38=((($33)+($37))|0);
 $totallen=$38;
 /** @type {number} */ var $39=$2;
 /** @type {number} */ var $40=$totallen;
 /** @type {number} */ var $41=_luaL_buffinitsize($39,$b,$40);
 $p=$41;
 label=7;break;
 case 7: 
 /** @type {number} */ var $43=$n;
 /** @type {number} */ var $44=((($43)-(1))|0);
 $n=$44;
 /** @type {number} */ var $45=($43|0)>1;
 if($45){label=8;break;}else{label=11;break;}
 case 8: 
 /** @type {number} */ var $47=$p;
 /** @type {number} */ var $48=$s;
 /** @type {number} */ var $49=HEAP32[(($l)>>2)];
 /** @type {number} */ var $50=$49;
 (_memcpy($47, $48, $50)|0);
 /** @type {number} */ var $51=HEAP32[(($l)>>2)];
 /** @type {number} */ var $52=$p;
 /** @type {number} */ var $53=(($52+$51)|0);
 $p=$53;
 /** @type {number} */ var $54=HEAP32[(($lsep)>>2)];
 /** @type {number} */ var $55=($54>>>0)>0;
 if($55){label=9;break;}else{label=10;break;}
 case 9: 
 /** @type {number} */ var $57=$p;
 /** @type {number} */ var $58=$sep;
 /** @type {number} */ var $59=HEAP32[(($lsep)>>2)];
 /** @type {number} */ var $60=$59;
 (_memcpy($57, $58, $60)|0);
 /** @type {number} */ var $61=HEAP32[(($lsep)>>2)];
 /** @type {number} */ var $62=$p;
 /** @type {number} */ var $63=(($62+$61)|0);
 $p=$63;
 label=10;break;
 case 10: 
 label=7;break;
 case 11: 
 /** @type {number} */ var $66=$p;
 /** @type {number} */ var $67=$s;
 /** @type {number} */ var $68=HEAP32[(($l)>>2)];
 /** @type {number} */ var $69=$68;
 (_memcpy($66, $67, $69)|0);
 /** @type {number} */ var $70=$totallen;
 _luaL_pushresultsize($b,$70);
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 $1=1;
 label=14;break;
 case 14: 
 /** @type {number} */ var $74=$1;
 STACKTOP=sp;return $74;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _str_reverse($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1048)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $l=sp;
 /** @type {number} */ var $i;
 /** @type {number} */ var $b=(sp)+(8);
 /** @type {number} */ var $s;
 /** @type {number} */ var $p;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_checklstring($2,1,$l);
 $s=$3;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=HEAP32[(($l)>>2)];
 /** @type {number} */ var $6=_luaL_buffinitsize($4,$b,$5);
 $p=$6;
 $i=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $8=$i;
 /** @type {number} */ var $9=HEAP32[(($l)>>2)];
 /** @type {number} */ var $10=($8>>>0)<($9>>>0);
 if($10){label=3;break;}else{label=5;break;}
 case 3: 
 /** @type {number} */ var $12=HEAP32[(($l)>>2)];
 /** @type {number} */ var $13=$i;
 /** @type {number} */ var $14=((($12)-($13))|0);
 /** @type {number} */ var $15=((($14)-(1))|0);
 /** @type {number} */ var $16=$s;
 /** @type {number} */ var $17=(($16+$15)|0);
 /** @type {number} */ var $18=HEAP8[($17)];
 /** @type {number} */ var $19=$i;
 /** @type {number} */ var $20=$p;
 /** @type {number} */ var $21=(($20+$19)|0);
 HEAP8[($21)]=$18;
 label=4;break;
 case 4: 
 /** @type {number} */ var $23=$i;
 /** @type {number} */ var $24=((($23)+(1))|0);
 $i=$24;
 label=2;break;
 case 5: 
 /** @type {number} */ var $26=HEAP32[(($l)>>2)];
 _luaL_pushresultsize($b,$26);
 STACKTOP=sp;return 1;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _str_sub($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $l=sp;
 /** @type {number} */ var $s;
 /** @type {number} */ var $start;
 /** @type {number} */ var $end;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_checklstring($2,1,$l);
 $s=$3;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=_luaL_checkinteger($4,2);
 /** @type {number} */ var $6=HEAP32[(($l)>>2)];
 /** @type {number} */ var $7=_posrelat($5,$6);
 $start=$7;
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=_luaL_optinteger($8,3,-1);
 /** @type {number} */ var $10=HEAP32[(($l)>>2)];
 /** @type {number} */ var $11=_posrelat($9,$10);
 $end=$11;
 /** @type {number} */ var $12=$start;
 /** @type {number} */ var $13=($12>>>0)<1;
 if($13){label=2;break;}else{label=3;break;}
 case 2: 
 $start=1;
 label=3;break;
 case 3: 
 /** @type {number} */ var $16=$end;
 /** @type {number} */ var $17=HEAP32[(($l)>>2)];
 /** @type {number} */ var $18=($16>>>0)>($17>>>0);
 if($18){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $20=HEAP32[(($l)>>2)];
 $end=$20;
 label=5;break;
 case 5: 
 /** @type {number} */ var $22=$start;
 /** @type {number} */ var $23=$end;
 /** @type {number} */ var $24=($22>>>0)<=($23>>>0);
 if($24){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $26=$1;
 /** @type {number} */ var $27=$s;
 /** @type {number} */ var $28=$start;
 /** @type {number} */ var $29=(($27+$28)|0);
 /** @type {number} */ var $30=((($29)-(1))|0);
 /** @type {number} */ var $31=$end;
 /** @type {number} */ var $32=$start;
 /** @type {number} */ var $33=((($31)-($32))|0);
 /** @type {number} */ var $34=((($33)+(1))|0);
 /** @type {number} */ var $35=_lua_pushlstring($26,$30,$34);
 label=8;break;
 case 7: 
 /** @type {number} */ var $37=$1;
 /** @type {number} */ var $38=_lua_pushlstring($37,12096,0);
 label=8;break;
 case 8: 
 STACKTOP=sp;return 1;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _str_upper($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1048)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $l=sp;
 /** @type {number} */ var $i;
 /** @type {number} */ var $b=(sp)+(8);
 /** @type {number} */ var $s;
 /** @type {number} */ var $p;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_checklstring($2,1,$l);
 $s=$3;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=HEAP32[(($l)>>2)];
 /** @type {number} */ var $6=_luaL_buffinitsize($4,$b,$5);
 $p=$6;
 $i=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $8=$i;
 /** @type {number} */ var $9=HEAP32[(($l)>>2)];
 /** @type {number} */ var $10=($8>>>0)<($9>>>0);
 if($10){label=3;break;}else{label=5;break;}
 case 3: 
 /** @type {number} */ var $12=$i;
 /** @type {number} */ var $13=$s;
 /** @type {number} */ var $14=(($13+$12)|0);
 /** @type {number} */ var $15=HEAP8[($14)];
 /** @type {number} */ var $16=($15&255);
 /** @type {number} */ var $17=_toupper($16);
 /** @type {number} */ var $18=(($17)&255);
 /** @type {number} */ var $19=$i;
 /** @type {number} */ var $20=$p;
 /** @type {number} */ var $21=(($20+$19)|0);
 HEAP8[($21)]=$18;
 label=4;break;
 case 4: 
 /** @type {number} */ var $23=$i;
 /** @type {number} */ var $24=((($23)+(1))|0);
 $i=$24;
 label=2;break;
 case 5: 
 /** @type {number} */ var $26=HEAP32[(($l)>>2)];
 _luaL_pushresultsize($b,$26);
 STACKTOP=sp;return 1;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _createmetatable($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 _lua_createtable($2,0,1);
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_lua_pushlstring($3,12096,0);
 /** @type {number} */ var $5=$1;
 _lua_pushvalue($5,-2);
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=_lua_setmetatable($6,-2);
 /** @type {number} */ var $8=$1;
 _lua_settop($8,-2);
 /** @type {number} */ var $9=$1;
 _lua_pushvalue($9,-2);
 /** @type {number} */ var $10=$1;
 _lua_setfield($10,-2,10264);
 /** @type {number} */ var $11=$1;
 _lua_settop($11,-2);
 STACKTOP=sp;return;
}
/**
 * @param {number} $pos
 * @param {number} $len
 * @return {number}
 */
function _posrelat($pos,$len){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $2=$pos;
 $3=$len;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=($4|0)>=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $7=$2;
 $1=$7;
 label=6;break;
 case 3: 
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=(((-$9))|0);
 /** @type {number} */ var $11=$3;
 /** @type {number} */ var $12=($10>>>0)>($11>>>0);
 if($12){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=6;break;
 case 5: 
 /** @type {number} */ var $15=$3;
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=(((-$16))|0);
 /** @type {number} */ var $18=((($15)-($17))|0);
 /** @type {number} */ var $19=((($18)+(1))|0);
 $1=$19;
 label=6;break;
 case 6: 
 /** @type {number} */ var $21=$1;
 STACKTOP=sp;return $21;
 }
}
/**
 * @param {number} $L
 * @param {number} $b
 * @param {number} $size
 * @param {number} $B
 * @return {number}
 */
function _writer($L,$b,$size,$B){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 $1=$L;
 $2=$b;
 $3=$size;
 $4=$B;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=$4;
 /** @type {number} */ var $7=$6;
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=$3;
 _luaL_addlstring($7,$8,$9);
 STACKTOP=sp;return 0;
}
/**
 * @param {number} $L
 * @param {number} $find
 * @return {number}
 */
function _str_find_aux($L,$find){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+296)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $ls=sp;
 /** @type {number} */ var $lp=(sp)+(8);
 /** @type {number} */ var $s;
 /** @type {number} */ var $p;
 /** @type {number} */ var $init;
 /** @type {number} */ var $s2;
 /** @type {number} */ var $ms=(sp)+(16);
 /** @type {number} */ var $s1;
 /** @type {number} */ var $anchor;
 /** @type {number} */ var $res;
 $2=$L;
 $3=$find;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_luaL_checklstring($4,1,$ls);
 $s=$5;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=_luaL_checklstring($6,2,$lp);
 $p=$7;
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=_luaL_optinteger($8,3,1);
 /** @type {number} */ var $10=HEAP32[(($ls)>>2)];
 /** @type {number} */ var $11=_posrelat($9,$10);
 $init=$11;
 /** @type {number} */ var $12=$init;
 /** @type {number} */ var $13=($12>>>0)<1;
 if($13){label=2;break;}else{label=3;break;}
 case 2: 
 $init=1;
 label=6;break;
 case 3: 
 /** @type {number} */ var $16=$init;
 /** @type {number} */ var $17=HEAP32[(($ls)>>2)];
 /** @type {number} */ var $18=((($17)+(1))|0);
 /** @type {number} */ var $19=($16>>>0)>($18>>>0);
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $21=$2;
 _lua_pushnil($21);
 $1=1;
 label=25;break;
 case 5: 
 label=6;break;
 case 6: 
 /** @type {number} */ var $24=$3;
 /** @type {number} */ var $25=($24|0)!=0;
 if($25){label=7;break;}else{label=12;break;}
 case 7: 
 /** @type {number} */ var $27=$2;
 /** @type {number} */ var $28=_lua_toboolean($27,4);
 /** @type {number} */ var $29=($28|0)!=0;
 if($29){label=9;break;}else{label=8;break;}
 case 8: 
 /** @type {number} */ var $31=$p;
 /** @type {number} */ var $32=HEAP32[(($lp)>>2)];
 /** @type {number} */ var $33=_nospecials($31,$32);
 /** @type {number} */ var $34=($33|0)!=0;
 if($34){label=9;break;}else{label=12;break;}
 case 9: 
 /** @type {number} */ var $36=$s;
 /** @type {number} */ var $37=$init;
 /** @type {number} */ var $38=(($36+$37)|0);
 /** @type {number} */ var $39=((($38)-(1))|0);
 /** @type {number} */ var $40=HEAP32[(($ls)>>2)];
 /** @type {number} */ var $41=$init;
 /** @type {number} */ var $42=((($40)-($41))|0);
 /** @type {number} */ var $43=((($42)+(1))|0);
 /** @type {number} */ var $44=$p;
 /** @type {number} */ var $45=HEAP32[(($lp)>>2)];
 /** @type {number} */ var $46=_lmemfind($39,$43,$44,$45);
 $s2=$46;
 /** @type {number} */ var $47=$s2;
 /** @type {number} */ var $48=($47|0)!=0;
 if($48){label=10;break;}else{label=11;break;}
 case 10: 
 /** @type {number} */ var $50=$2;
 /** @type {number} */ var $51=$s2;
 /** @type {number} */ var $52=$s;
 /** @type {number} */ var $53=$51;
 /** @type {number} */ var $54=$52;
 /** @type {number} */ var $55=((($53)-($54))|0);
 /** @type {number} */ var $56=((($55)+(1))|0);
 _lua_pushinteger($50,$56);
 /** @type {number} */ var $57=$2;
 /** @type {number} */ var $58=$s2;
 /** @type {number} */ var $59=$s;
 /** @type {number} */ var $60=$58;
 /** @type {number} */ var $61=$59;
 /** @type {number} */ var $62=((($60)-($61))|0);
 /** @type {number} */ var $63=HEAP32[(($lp)>>2)];
 /** @type {number} */ var $64=((($62)+($63))|0);
 _lua_pushinteger($57,$64);
 $1=2;
 label=25;break;
 case 11: 
 label=24;break;
 case 12: 
 /** @type {number} */ var $67=$s;
 /** @type {number} */ var $68=$init;
 /** @type {number} */ var $69=(($67+$68)|0);
 /** @type {number} */ var $70=((($69)-(1))|0);
 $s1=$70;
 /** @type {number} */ var $71=$p;
 /** @type {number} */ var $72=HEAP8[($71)];
 /** @type {number} */ var $73=(($72<<24)>>24);
 /** @type {number} */ var $74=($73|0)==94;
 /** @type {number} */ var $75=($74&1);
 $anchor=$75;
 /** @type {number} */ var $76=$anchor;
 /** @type {number} */ var $77=($76|0)!=0;
 if($77){label=13;break;}else{label=14;break;}
 case 13: 
 /** @type {number} */ var $79=$p;
 /** @type {number} */ var $80=(($79+1)|0);
 $p=$80;
 /** @type {number} */ var $81=HEAP32[(($lp)>>2)];
 /** @type {number} */ var $82=((($81)-(1))|0);
 HEAP32[(($lp)>>2)]=$82;
 label=14;break;
 case 14: 
 /** @type {number} */ var $84=$2;
 /** @type {number} */ var $85=(($ms+12)|0);
 HEAP32[(($85)>>2)]=$84;
 /** @type {number} */ var $86=$s;
 /** @type {number} */ var $87=(($ms)|0);
 HEAP32[(($87)>>2)]=$86;
 /** @type {number} */ var $88=$s;
 /** @type {number} */ var $89=HEAP32[(($ls)>>2)];
 /** @type {number} */ var $90=(($88+$89)|0);
 /** @type {number} */ var $91=(($ms+4)|0);
 HEAP32[(($91)>>2)]=$90;
 /** @type {number} */ var $92=$p;
 /** @type {number} */ var $93=HEAP32[(($lp)>>2)];
 /** @type {number} */ var $94=(($92+$93)|0);
 /** @type {number} */ var $95=(($ms+8)|0);
 HEAP32[(($95)>>2)]=$94;
 label=15;break;
 case 15: 
 /** @type {number} */ var $97=(($ms+16)|0);
 HEAP32[(($97)>>2)]=0;
 /** @type {number} */ var $98=$s1;
 /** @type {number} */ var $99=$p;
 /** @type {number} */ var $100=_match($ms,$98,$99);
 $res=$100;
 /** @type {number} */ var $101=($100|0)!=0;
 if($101){label=16;break;}else{label=19;break;}
 case 16: 
 /** @type {number} */ var $103=$3;
 /** @type {number} */ var $104=($103|0)!=0;
 if($104){label=17;break;}else{label=18;break;}
 case 17: 
 /** @type {number} */ var $106=$2;
 /** @type {number} */ var $107=$s1;
 /** @type {number} */ var $108=$s;
 /** @type {number} */ var $109=$107;
 /** @type {number} */ var $110=$108;
 /** @type {number} */ var $111=((($109)-($110))|0);
 /** @type {number} */ var $112=((($111)+(1))|0);
 _lua_pushinteger($106,$112);
 /** @type {number} */ var $113=$2;
 /** @type {number} */ var $114=$res;
 /** @type {number} */ var $115=$s;
 /** @type {number} */ var $116=$114;
 /** @type {number} */ var $117=$115;
 /** @type {number} */ var $118=((($116)-($117))|0);
 _lua_pushinteger($113,$118);
 /** @type {number} */ var $119=_push_captures($ms,0,0);
 /** @type {number} */ var $120=((($119)+(2))|0);
 $1=$120;
 label=25;break;
 case 18: 
 /** @type {number} */ var $122=$s1;
 /** @type {number} */ var $123=$res;
 /** @type {number} */ var $124=_push_captures($ms,$122,$123);
 $1=$124;
 label=25;break;
 case 19: 
 label=20;break;
 case 20: 
 /** @type {number} */ var $127=$s1;
 /** @type {number} */ var $128=(($127+1)|0);
 $s1=$128;
 /** @type {number} */ var $129=(($ms+4)|0);
 /** @type {number} */ var $130=HEAP32[(($129)>>2)];
 /** @type {number} */ var $131=($127>>>0)<($130>>>0);
 if($131){label=21;break;}else{var $137=0;label=22;break;}
 case 21: 
 /** @type {number} */ var $133=$anchor;
 /** @type {number} */ var $134=($133|0)!=0;
 /** @type {number} */ var $135=$134^1;
 var $137=$135;label=22;break;
 case 22: 
 var $137;
 if($137){label=15;break;}else{label=23;break;}
 case 23: 
 label=24;break;
 case 24: 
 /** @type {number} */ var $140=$2;
 _lua_pushnil($140);
 $1=1;
 label=25;break;
 case 25: 
 /** @type {number} */ var $142=$1;
 STACKTOP=sp;return $142;
 }
}
/**
 * @param {number} $L
 * @param {number} $strfrmt
 * @param {number} $form
 * @return {number}
 */
function _scanformat($L,$strfrmt,$form){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $p;
 $1=$L;
 $2=$strfrmt;
 $3=$form;
 /** @type {number} */ var $4=$2;
 $p=$4;
 label=2;break;
 case 2: 
 /** @type {number} */ var $6=$p;
 /** @type {number} */ var $7=HEAP8[($6)];
 /** @type {number} */ var $8=(($7<<24)>>24);
 /** @type {number} */ var $9=($8|0)!=0;
 if($9){label=3;break;}else{var $17=0;label=4;break;}
 case 3: 
 /** @type {number} */ var $11=$p;
 /** @type {number} */ var $12=HEAP8[($11)];
 /** @type {number} */ var $13=(($12<<24)>>24);
 /** @type {number} */ var $14=_strchr(6104,$13);
 /** @type {number} */ var $15=($14|0)!=0;
 var $17=$15;label=4;break;
 case 4: 
 var $17;
 if($17){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $19=$p;
 /** @type {number} */ var $20=(($19+1)|0);
 $p=$20;
 label=2;break;
 case 6: 
 /** @type {number} */ var $22=$p;
 /** @type {number} */ var $23=$2;
 /** @type {number} */ var $24=$22;
 /** @type {number} */ var $25=$23;
 /** @type {number} */ var $26=((($24)-($25))|0);
 /** @type {number} */ var $27=($26>>>0)>=6;
 if($27){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $29=$1;
 /** @type {number} */ var $30=_luaL_error($29,5960,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=8;break;
 case 8: 
 /** @type {number} */ var $32=$p;
 /** @type {number} */ var $33=HEAP8[($32)];
 /** @type {number} */ var $34=($33&255);
 /** @type {number} */ var $35=_isdigit($34);
 /** @type {number} */ var $36=($35|0)!=0;
 if($36){label=9;break;}else{label=10;break;}
 case 9: 
 /** @type {number} */ var $38=$p;
 /** @type {number} */ var $39=(($38+1)|0);
 $p=$39;
 label=10;break;
 case 10: 
 /** @type {number} */ var $41=$p;
 /** @type {number} */ var $42=HEAP8[($41)];
 /** @type {number} */ var $43=($42&255);
 /** @type {number} */ var $44=_isdigit($43);
 /** @type {number} */ var $45=($44|0)!=0;
 if($45){label=11;break;}else{label=12;break;}
 case 11: 
 /** @type {number} */ var $47=$p;
 /** @type {number} */ var $48=(($47+1)|0);
 $p=$48;
 label=12;break;
 case 12: 
 /** @type {number} */ var $50=$p;
 /** @type {number} */ var $51=HEAP8[($50)];
 /** @type {number} */ var $52=(($51<<24)>>24);
 /** @type {number} */ var $53=($52|0)==46;
 if($53){label=13;break;}else{label=18;break;}
 case 13: 
 /** @type {number} */ var $55=$p;
 /** @type {number} */ var $56=(($55+1)|0);
 $p=$56;
 /** @type {number} */ var $57=$p;
 /** @type {number} */ var $58=HEAP8[($57)];
 /** @type {number} */ var $59=($58&255);
 /** @type {number} */ var $60=_isdigit($59);
 /** @type {number} */ var $61=($60|0)!=0;
 if($61){label=14;break;}else{label=15;break;}
 case 14: 
 /** @type {number} */ var $63=$p;
 /** @type {number} */ var $64=(($63+1)|0);
 $p=$64;
 label=15;break;
 case 15: 
 /** @type {number} */ var $66=$p;
 /** @type {number} */ var $67=HEAP8[($66)];
 /** @type {number} */ var $68=($67&255);
 /** @type {number} */ var $69=_isdigit($68);
 /** @type {number} */ var $70=($69|0)!=0;
 if($70){label=16;break;}else{label=17;break;}
 case 16: 
 /** @type {number} */ var $72=$p;
 /** @type {number} */ var $73=(($72+1)|0);
 $p=$73;
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 /** @type {number} */ var $76=$p;
 /** @type {number} */ var $77=HEAP8[($76)];
 /** @type {number} */ var $78=($77&255);
 /** @type {number} */ var $79=_isdigit($78);
 /** @type {number} */ var $80=($79|0)!=0;
 if($80){label=19;break;}else{label=20;break;}
 case 19: 
 /** @type {number} */ var $82=$1;
 /** @type {number} */ var $83=_luaL_error($82,5840,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=20;break;
 case 20: 
 /** @type {number} */ var $85=$3;
 /** @type {number} */ var $86=(($85+1)|0);
 $3=$86;
 HEAP8[($85)]=37;
 /** @type {number} */ var $87=$3;
 /** @type {number} */ var $88=$2;
 /** @type {number} */ var $89=$p;
 /** @type {number} */ var $90=$2;
 /** @type {number} */ var $91=$89;
 /** @type {number} */ var $92=$90;
 /** @type {number} */ var $93=((($91)-($92))|0);
 /** @type {number} */ var $94=((($93)+(1))|0);
 /** @type {number} */ var $95=$94;
 (_memcpy($87, $88, $95)|0);
 /** @type {number} */ var $96=$p;
 /** @type {number} */ var $97=$2;
 /** @type {number} */ var $98=$96;
 /** @type {number} */ var $99=$97;
 /** @type {number} */ var $100=((($98)-($99))|0);
 /** @type {number} */ var $101=((($100)+(1))|0);
 /** @type {number} */ var $102=$3;
 /** @type {number} */ var $103=(($102+$101)|0);
 $3=$103;
 /** @type {number} */ var $104=$3;
 HEAP8[($104)]=0;
 /** @type {number} */ var $105=$p;
 STACKTOP=sp;return $105;
 }
}
/**
 * @param {number} $form
 * @param {number} $lenmod
 * @return {number}
 */
function _addlenmod($form,$lenmod){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $l;
 /** @type {number} */ var $lm;
 /** @type {number} */ var $spec;
 $1=$form;
 $2=$lenmod;
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_strlen($3);
 $l=$4;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=_strlen($5);
 $lm=$6;
 /** @type {number} */ var $7=$l;
 /** @type {number} */ var $8=((($7)-(1))|0);
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=(($9+$8)|0);
 /** @type {number} */ var $11=HEAP8[($10)];
 $spec=$11;
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=$l;
 /** @type {number} */ var $14=(($12+$13)|0);
 /** @type {number} */ var $15=((($14)-(1))|0);
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=_strcpy($15,$16);
 /** @type {number} */ var $18=$spec;
 /** @type {number} */ var $19=$l;
 /** @type {number} */ var $20=$lm;
 /** @type {number} */ var $21=((($19)+($20))|0);
 /** @type {number} */ var $22=((($21)-(1))|0);
 /** @type {number} */ var $23=$1;
 /** @type {number} */ var $24=(($23+$22)|0);
 HEAP8[($24)]=$18;
 /** @type {number} */ var $25=$l;
 /** @type {number} */ var $26=$lm;
 /** @type {number} */ var $27=((($25)+($26))|0);
 /** @type {number} */ var $28=$1;
 /** @type {number} */ var $29=(($28+$27)|0);
 HEAP8[($29)]=0;
 STACKTOP=sp;return;
}
/**
 * @param {number} $L
 * @param {number} $b
 * @param {number} $arg
 * @return {number}
 */
function _addquoted($L,$b,$arg){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $l=sp;
 /** @type {number} */ var $s;
 /** @type {number} */ var $buff=(sp)+(8);
 $1=$L;
 $2=$b;
 $3=$arg;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=_luaL_checklstring($4,$5,$l);
 $s=$6;
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=(($7+8)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=(($10+4)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=($9>>>0)<($12>>>0);
 if($13){var $19=1;label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $15=$2;
 /** @type {number} */ var $16=_luaL_prepbuffsize($15,1);
 /** @type {number} */ var $17=($16|0)!=0;
 var $19=$17;label=3;break;
 case 3: 
 var $19;
 /** @type {number} */ var $20=($19&1);
 /** @type {number} */ var $21=$2;
 /** @type {number} */ var $22=(($21+8)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 /** @type {number} */ var $24=((($23)+(1))|0);
 HEAP32[(($22)>>2)]=$24;
 /** @type {number} */ var $25=$2;
 /** @type {number} */ var $26=(($25)|0);
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=(($27+$23)|0);
 HEAP8[($28)]=34;
 label=4;break;
 case 4: 
 /** @type {number} */ var $30=HEAP32[(($l)>>2)];
 /** @type {number} */ var $31=((($30)-(1))|0);
 HEAP32[(($l)>>2)]=$31;
 /** @type {number} */ var $32=($30|0)!=0;
 if($32){label=5;break;}else{label=24;break;}
 case 5: 
 /** @type {number} */ var $34=$s;
 /** @type {number} */ var $35=HEAP8[($34)];
 /** @type {number} */ var $36=(($35<<24)>>24);
 /** @type {number} */ var $37=($36|0)==34;
 if($37){label=8;break;}else{label=6;break;}
 case 6: 
 /** @type {number} */ var $39=$s;
 /** @type {number} */ var $40=HEAP8[($39)];
 /** @type {number} */ var $41=(($40<<24)>>24);
 /** @type {number} */ var $42=($41|0)==92;
 if($42){label=8;break;}else{label=7;break;}
 case 7: 
 /** @type {number} */ var $44=$s;
 /** @type {number} */ var $45=HEAP8[($44)];
 /** @type {number} */ var $46=(($45<<24)>>24);
 /** @type {number} */ var $47=($46|0)==10;
 if($47){label=8;break;}else{label=13;break;}
 case 8: 
 /** @type {number} */ var $49=$2;
 /** @type {number} */ var $50=(($49+8)|0);
 /** @type {number} */ var $51=HEAP32[(($50)>>2)];
 /** @type {number} */ var $52=$2;
 /** @type {number} */ var $53=(($52+4)|0);
 /** @type {number} */ var $54=HEAP32[(($53)>>2)];
 /** @type {number} */ var $55=($51>>>0)<($54>>>0);
 if($55){var $61=1;label=10;break;}else{label=9;break;}
 case 9: 
 /** @type {number} */ var $57=$2;
 /** @type {number} */ var $58=_luaL_prepbuffsize($57,1);
 /** @type {number} */ var $59=($58|0)!=0;
 var $61=$59;label=10;break;
 case 10: 
 var $61;
 /** @type {number} */ var $62=($61&1);
 /** @type {number} */ var $63=$2;
 /** @type {number} */ var $64=(($63+8)|0);
 /** @type {number} */ var $65=HEAP32[(($64)>>2)];
 /** @type {number} */ var $66=((($65)+(1))|0);
 HEAP32[(($64)>>2)]=$66;
 /** @type {number} */ var $67=$2;
 /** @type {number} */ var $68=(($67)|0);
 /** @type {number} */ var $69=HEAP32[(($68)>>2)];
 /** @type {number} */ var $70=(($69+$65)|0);
 HEAP8[($70)]=92;
 /** @type {number} */ var $71=$2;
 /** @type {number} */ var $72=(($71+8)|0);
 /** @type {number} */ var $73=HEAP32[(($72)>>2)];
 /** @type {number} */ var $74=$2;
 /** @type {number} */ var $75=(($74+4)|0);
 /** @type {number} */ var $76=HEAP32[(($75)>>2)];
 /** @type {number} */ var $77=($73>>>0)<($76>>>0);
 if($77){var $83=1;label=12;break;}else{label=11;break;}
 case 11: 
 /** @type {number} */ var $79=$2;
 /** @type {number} */ var $80=_luaL_prepbuffsize($79,1);
 /** @type {number} */ var $81=($80|0)!=0;
 var $83=$81;label=12;break;
 case 12: 
 var $83;
 /** @type {number} */ var $84=($83&1);
 /** @type {number} */ var $85=$s;
 /** @type {number} */ var $86=HEAP8[($85)];
 /** @type {number} */ var $87=$2;
 /** @type {number} */ var $88=(($87+8)|0);
 /** @type {number} */ var $89=HEAP32[(($88)>>2)];
 /** @type {number} */ var $90=((($89)+(1))|0);
 HEAP32[(($88)>>2)]=$90;
 /** @type {number} */ var $91=$2;
 /** @type {number} */ var $92=(($91)|0);
 /** @type {number} */ var $93=HEAP32[(($92)>>2)];
 /** @type {number} */ var $94=(($93+$89)|0);
 HEAP8[($94)]=$86;
 label=23;break;
 case 13: 
 /** @type {number} */ var $96=$s;
 /** @type {number} */ var $97=HEAP8[($96)];
 /** @type {number} */ var $98=(($97<<24)>>24);
 /** @type {number} */ var $99=($98|0)==0;
 if($99){label=15;break;}else{label=14;break;}
 case 14: 
 /** @type {number} */ var $101=$s;
 /** @type {number} */ var $102=HEAP8[($101)];
 /** @type {number} */ var $103=($102&255);
 /** @type {number} */ var $104=_iscntrl($103);
 /** @type {number} */ var $105=($104|0)!=0;
 if($105){label=15;break;}else{label=19;break;}
 case 15: 
 /** @type {number} */ var $107=$s;
 /** @type {number} */ var $108=(($107+1)|0);
 /** @type {number} */ var $109=HEAP8[($108)];
 /** @type {number} */ var $110=($109&255);
 /** @type {number} */ var $111=_isdigit($110);
 /** @type {number} */ var $112=($111|0)!=0;
 if($112){label=17;break;}else{label=16;break;}
 case 16: 
 /** @type {number} */ var $114=(($buff)|0);
 /** @type {number} */ var $115=$s;
 /** @type {number} */ var $116=HEAP8[($115)];
 /** @type {number} */ var $117=($116&255);
 /** @type {number} */ var $118=_sprintf($114,6288,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$117,tempVarArgs)); STACKTOP=tempVarArgs;
 label=18;break;
 case 17: 
 /** @type {number} */ var $120=(($buff)|0);
 /** @type {number} */ var $121=$s;
 /** @type {number} */ var $122=HEAP8[($121)];
 /** @type {number} */ var $123=($122&255);
 /** @type {number} */ var $124=_sprintf($120,6200,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$123,tempVarArgs)); STACKTOP=tempVarArgs;
 label=18;break;
 case 18: 
 /** @type {number} */ var $126=$2;
 /** @type {number} */ var $127=(($buff)|0);
 _luaL_addstring($126,$127);
 label=22;break;
 case 19: 
 /** @type {number} */ var $129=$2;
 /** @type {number} */ var $130=(($129+8)|0);
 /** @type {number} */ var $131=HEAP32[(($130)>>2)];
 /** @type {number} */ var $132=$2;
 /** @type {number} */ var $133=(($132+4)|0);
 /** @type {number} */ var $134=HEAP32[(($133)>>2)];
 /** @type {number} */ var $135=($131>>>0)<($134>>>0);
 if($135){var $141=1;label=21;break;}else{label=20;break;}
 case 20: 
 /** @type {number} */ var $137=$2;
 /** @type {number} */ var $138=_luaL_prepbuffsize($137,1);
 /** @type {number} */ var $139=($138|0)!=0;
 var $141=$139;label=21;break;
 case 21: 
 var $141;
 /** @type {number} */ var $142=($141&1);
 /** @type {number} */ var $143=$s;
 /** @type {number} */ var $144=HEAP8[($143)];
 /** @type {number} */ var $145=$2;
 /** @type {number} */ var $146=(($145+8)|0);
 /** @type {number} */ var $147=HEAP32[(($146)>>2)];
 /** @type {number} */ var $148=((($147)+(1))|0);
 HEAP32[(($146)>>2)]=$148;
 /** @type {number} */ var $149=$2;
 /** @type {number} */ var $150=(($149)|0);
 /** @type {number} */ var $151=HEAP32[(($150)>>2)];
 /** @type {number} */ var $152=(($151+$147)|0);
 HEAP8[($152)]=$144;
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 /** @type {number} */ var $155=$s;
 /** @type {number} */ var $156=(($155+1)|0);
 $s=$156;
 label=4;break;
 case 24: 
 /** @type {number} */ var $158=$2;
 /** @type {number} */ var $159=(($158+8)|0);
 /** @type {number} */ var $160=HEAP32[(($159)>>2)];
 /** @type {number} */ var $161=$2;
 /** @type {number} */ var $162=(($161+4)|0);
 /** @type {number} */ var $163=HEAP32[(($162)>>2)];
 /** @type {number} */ var $164=($160>>>0)<($163>>>0);
 if($164){var $170=1;label=26;break;}else{label=25;break;}
 case 25: 
 /** @type {number} */ var $166=$2;
 /** @type {number} */ var $167=_luaL_prepbuffsize($166,1);
 /** @type {number} */ var $168=($167|0)!=0;
 var $170=$168;label=26;break;
 case 26: 
 var $170;
 /** @type {number} */ var $171=($170&1);
 /** @type {number} */ var $172=$2;
 /** @type {number} */ var $173=(($172+8)|0);
 /** @type {number} */ var $174=HEAP32[(($173)>>2)];
 /** @type {number} */ var $175=((($174)+(1))|0);
 HEAP32[(($173)>>2)]=$175;
 /** @type {number} */ var $176=$2;
 /** @type {number} */ var $177=(($176)|0);
 /** @type {number} */ var $178=HEAP32[(($177)>>2)];
 /** @type {number} */ var $179=(($178+$174)|0);
 HEAP8[($179)]=34;
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _gmatch_aux($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+296)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $ms=sp;
 /** @type {number} */ var $ls=(sp)+(280);
 /** @type {number} */ var $lp=(sp)+(288);
 /** @type {number} */ var $s;
 /** @type {number} */ var $p;
 /** @type {number} */ var $src;
 /** @type {number} */ var $e;
 /** @type {number} */ var $newstart;
 $2=$L;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=_lua_tolstring($3,-1001001,$ls);
 $s=$4;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=_lua_tolstring($5,-1001002,$lp);
 $p=$6;
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=(($ms+12)|0);
 HEAP32[(($8)>>2)]=$7;
 /** @type {number} */ var $9=$s;
 /** @type {number} */ var $10=(($ms)|0);
 HEAP32[(($10)>>2)]=$9;
 /** @type {number} */ var $11=$s;
 /** @type {number} */ var $12=HEAP32[(($ls)>>2)];
 /** @type {number} */ var $13=(($11+$12)|0);
 /** @type {number} */ var $14=(($ms+4)|0);
 HEAP32[(($14)>>2)]=$13;
 /** @type {number} */ var $15=$p;
 /** @type {number} */ var $16=HEAP32[(($lp)>>2)];
 /** @type {number} */ var $17=(($15+$16)|0);
 /** @type {number} */ var $18=(($ms+8)|0);
 HEAP32[(($18)>>2)]=$17;
 /** @type {number} */ var $19=$s;
 /** @type {number} */ var $20=$2;
 /** @type {number} */ var $21=_lua_tointegerx($20,-1001003,0);
 /** @type {number} */ var $22=(($19+$21)|0);
 $src=$22;
 label=2;break;
 case 2: 
 /** @type {number} */ var $24=$src;
 /** @type {number} */ var $25=(($ms+4)|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 /** @type {number} */ var $27=($24>>>0)<=($26>>>0);
 if($27){label=3;break;}else{label=9;break;}
 case 3: 
 /** @type {number} */ var $29=(($ms+16)|0);
 HEAP32[(($29)>>2)]=0;
 /** @type {number} */ var $30=$src;
 /** @type {number} */ var $31=$p;
 /** @type {number} */ var $32=_match($ms,$30,$31);
 $e=$32;
 /** @type {number} */ var $33=($32|0)!=0;
 if($33){label=4;break;}else{label=7;break;}
 case 4: 
 /** @type {number} */ var $35=$e;
 /** @type {number} */ var $36=$s;
 /** @type {number} */ var $37=$35;
 /** @type {number} */ var $38=$36;
 /** @type {number} */ var $39=((($37)-($38))|0);
 $newstart=$39;
 /** @type {number} */ var $40=$e;
 /** @type {number} */ var $41=$src;
 /** @type {number} */ var $42=($40|0)==($41|0);
 if($42){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $44=$newstart;
 /** @type {number} */ var $45=((($44)+(1))|0);
 $newstart=$45;
 label=6;break;
 case 6: 
 /** @type {number} */ var $47=$2;
 /** @type {number} */ var $48=$newstart;
 _lua_pushinteger($47,$48);
 /** @type {number} */ var $49=$2;
 _lua_replace($49,-1001003);
 /** @type {number} */ var $50=$src;
 /** @type {number} */ var $51=$e;
 /** @type {number} */ var $52=_push_captures($ms,$50,$51);
 $1=$52;
 label=10;break;
 case 7: 
 label=8;break;
 case 8: 
 /** @type {number} */ var $55=$src;
 /** @type {number} */ var $56=(($55+1)|0);
 $src=$56;
 label=2;break;
 case 9: 
 $1=0;
 label=10;break;
 case 10: 
 /** @type {number} */ var $59=$1;
 STACKTOP=sp;return $59;
 }
}
/**
 * @param {number} $ms
 * @param {number} $s
 * @param {number} $p
 * @return {number}
 */
function _match($ms,$s,$p){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $ep;
 /** @type {number} */ var $previous;
 /** @type {number} */ var $ep1;
 /** @type {number} */ var $m;
 /** @type {number} */ var $res;
 $2=$ms;
 $3=$s;
 $4=$p;
 label=2;break;
 case 2: 
 /** @type {number} */ var $6=$4;
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=(($7+8)|0);
 /** @type {number} */ var $9=HEAP32[(($8)>>2)];
 /** @type {number} */ var $10=($6|0)==($9|0);
 if($10){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $12=$3;
 $1=$12;
 label=49;break;
 case 4: 
 /** @type {number} */ var $14=$4;
 /** @type {number} */ var $15=HEAP8[($14)];
 /** @type {number} */ var $16=(($15<<24)>>24);
 if(($16|0)==37){ label=15;break;}else if(($16|0)==40){ label=5;break;}else if(($16|0)==41){ label=8;break;}else if(($16|0)==36){ label=9;break;}else{label=32;break;}
 case 5: 
 /** @type {number} */ var $18=$4;
 /** @type {number} */ var $19=(($18+1)|0);
 /** @type {number} */ var $20=HEAP8[($19)];
 /** @type {number} */ var $21=(($20<<24)>>24);
 /** @type {number} */ var $22=($21|0)==41;
 if($22){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $24=$2;
 /** @type {number} */ var $25=$3;
 /** @type {number} */ var $26=$4;
 /** @type {number} */ var $27=(($26+2)|0);
 /** @type {number} */ var $28=_start_capture($24,$25,$27,-2);
 $1=$28;
 label=49;break;
 case 7: 
 /** @type {number} */ var $30=$2;
 /** @type {number} */ var $31=$3;
 /** @type {number} */ var $32=$4;
 /** @type {number} */ var $33=(($32+1)|0);
 /** @type {number} */ var $34=_start_capture($30,$31,$33,-1);
 $1=$34;
 label=49;break;
 case 8: 
 /** @type {number} */ var $36=$2;
 /** @type {number} */ var $37=$3;
 /** @type {number} */ var $38=$4;
 /** @type {number} */ var $39=(($38+1)|0);
 /** @type {number} */ var $40=_end_capture($36,$37,$39);
 $1=$40;
 label=49;break;
 case 9: 
 /** @type {number} */ var $42=$4;
 /** @type {number} */ var $43=(($42+1)|0);
 /** @type {number} */ var $44=$2;
 /** @type {number} */ var $45=(($44+8)|0);
 /** @type {number} */ var $46=HEAP32[(($45)>>2)];
 /** @type {number} */ var $47=($43|0)==($46|0);
 if($47){label=10;break;}else{label=14;break;}
 case 10: 
 /** @type {number} */ var $49=$3;
 /** @type {number} */ var $50=$2;
 /** @type {number} */ var $51=(($50+4)|0);
 /** @type {number} */ var $52=HEAP32[(($51)>>2)];
 /** @type {number} */ var $53=($49|0)==($52|0);
 if($53){label=11;break;}else{label=12;break;}
 case 11: 
 /** @type {number} */ var $55=$3;
 var $58=$55;label=13;break;
 case 12: 
 var $58=0;label=13;break;
 case 13: 
 var $58;
 $1=$58;
 label=49;break;
 case 14: 
 label=33;break;
 case 15: 
 /** @type {number} */ var $61=$4;
 /** @type {number} */ var $62=(($61+1)|0);
 /** @type {number} */ var $63=HEAP8[($62)];
 /** @type {number} */ var $64=(($63<<24)>>24);
 switch(($64|0)){case 98:{ label=16;break;}case 102:{ label=19;break;}case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:{ label=28;break;}default:{label=31;break;}}break;
 case 16: 
 /** @type {number} */ var $66=$2;
 /** @type {number} */ var $67=$3;
 /** @type {number} */ var $68=$4;
 /** @type {number} */ var $69=(($68+2)|0);
 /** @type {number} */ var $70=_matchbalance($66,$67,$69);
 $3=$70;
 /** @type {number} */ var $71=$3;
 /** @type {number} */ var $72=($71|0)==0;
 if($72){label=17;break;}else{label=18;break;}
 case 17: 
 $1=0;
 label=49;break;
 case 18: 
 /** @type {number} */ var $75=$4;
 /** @type {number} */ var $76=(($75+4)|0);
 $4=$76;
 label=2;break;
 case 19: 
 /** @type {number} */ var $78=$4;
 /** @type {number} */ var $79=(($78+2)|0);
 $4=$79;
 /** @type {number} */ var $80=$4;
 /** @type {number} */ var $81=HEAP8[($80)];
 /** @type {number} */ var $82=(($81<<24)>>24);
 /** @type {number} */ var $83=($82|0)!=91;
 if($83){label=20;break;}else{label=21;break;}
 case 20: 
 /** @type {number} */ var $85=$2;
 /** @type {number} */ var $86=(($85+12)|0);
 /** @type {number} */ var $87=HEAP32[(($86)>>2)];
 /** @type {number} */ var $88=_luaL_error($87,9288,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=21;break;
 case 21: 
 /** @type {number} */ var $90=$2;
 /** @type {number} */ var $91=$4;
 /** @type {number} */ var $92=_classend($90,$91);
 $ep=$92;
 /** @type {number} */ var $93=$3;
 /** @type {number} */ var $94=$2;
 /** @type {number} */ var $95=(($94)|0);
 /** @type {number} */ var $96=HEAP32[(($95)>>2)];
 /** @type {number} */ var $97=($93|0)==($96|0);
 if($97){label=22;break;}else{label=23;break;}
 case 22: 
 var $105=0;label=24;break;
 case 23: 
 /** @type {number} */ var $100=$3;
 /** @type {number} */ var $101=((($100)-(1))|0);
 /** @type {number} */ var $102=HEAP8[($101)];
 /** @type {number} */ var $103=(($102<<24)>>24);
 var $105=$103;label=24;break;
 case 24: 
 var $105;
 /** @type {number} */ var $106=(($105)&255);
 $previous=$106;
 /** @type {number} */ var $107=$previous;
 /** @type {number} */ var $108=($107&255);
 /** @type {number} */ var $109=$4;
 /** @type {number} */ var $110=$ep;
 /** @type {number} */ var $111=((($110)-(1))|0);
 /** @type {number} */ var $112=_matchbracketclass($108,$109,$111);
 /** @type {number} */ var $113=($112|0)!=0;
 if($113){label=26;break;}else{label=25;break;}
 case 25: 
 /** @type {number} */ var $115=$3;
 /** @type {number} */ var $116=HEAP8[($115)];
 /** @type {number} */ var $117=($116&255);
 /** @type {number} */ var $118=$4;
 /** @type {number} */ var $119=$ep;
 /** @type {number} */ var $120=((($119)-(1))|0);
 /** @type {number} */ var $121=_matchbracketclass($117,$118,$120);
 /** @type {number} */ var $122=($121|0)!=0;
 if($122){label=27;break;}else{label=26;break;}
 case 26: 
 $1=0;
 label=49;break;
 case 27: 
 /** @type {number} */ var $125=$ep;
 $4=$125;
 label=2;break;
 case 28: 
 /** @type {number} */ var $127=$2;
 /** @type {number} */ var $128=$3;
 /** @type {number} */ var $129=$4;
 /** @type {number} */ var $130=(($129+1)|0);
 /** @type {number} */ var $131=HEAP8[($130)];
 /** @type {number} */ var $132=($131&255);
 /** @type {number} */ var $133=_match_capture($127,$128,$132);
 $3=$133;
 /** @type {number} */ var $134=$3;
 /** @type {number} */ var $135=($134|0)==0;
 if($135){label=29;break;}else{label=30;break;}
 case 29: 
 $1=0;
 label=49;break;
 case 30: 
 /** @type {number} */ var $138=$4;
 /** @type {number} */ var $139=(($138+2)|0);
 $4=$139;
 label=2;break;
 case 31: 
 label=33;break;
 case 32: 
 label=33;break;
 case 33: 
 /** @type {number} */ var $143=$2;
 /** @type {number} */ var $144=$4;
 /** @type {number} */ var $145=_classend($143,$144);
 $ep1=$145;
 /** @type {number} */ var $146=$3;
 /** @type {number} */ var $147=$2;
 /** @type {number} */ var $148=(($147+4)|0);
 /** @type {number} */ var $149=HEAP32[(($148)>>2)];
 /** @type {number} */ var $150=($146>>>0)<($149>>>0);
 if($150){label=34;break;}else{var $160=0;label=35;break;}
 case 34: 
 /** @type {number} */ var $152=$3;
 /** @type {number} */ var $153=HEAP8[($152)];
 /** @type {number} */ var $154=($153&255);
 /** @type {number} */ var $155=$4;
 /** @type {number} */ var $156=$ep1;
 /** @type {number} */ var $157=_singlematch($154,$155,$156);
 /** @type {number} */ var $158=($157|0)!=0;
 var $160=$158;label=35;break;
 case 35: 
 var $160;
 /** @type {number} */ var $161=($160&1);
 $m=$161;
 /** @type {number} */ var $162=$ep1;
 /** @type {number} */ var $163=HEAP8[($162)];
 /** @type {number} */ var $164=(($163<<24)>>24);
 if(($164|0)==63){ label=36;break;}else if(($164|0)==42){ label=40;break;}else if(($164|0)==43){ label=41;break;}else if(($164|0)==45){ label=45;break;}else{label=46;break;}
 case 36: 
 /** @type {number} */ var $166=$m;
 /** @type {number} */ var $167=($166|0)!=0;
 if($167){label=37;break;}else{label=39;break;}
 case 37: 
 /** @type {number} */ var $169=$2;
 /** @type {number} */ var $170=$3;
 /** @type {number} */ var $171=(($170+1)|0);
 /** @type {number} */ var $172=$ep1;
 /** @type {number} */ var $173=(($172+1)|0);
 /** @type {number} */ var $174=_match($169,$171,$173);
 $res=$174;
 /** @type {number} */ var $175=($174|0)!=0;
 if($175){label=38;break;}else{label=39;break;}
 case 38: 
 /** @type {number} */ var $177=$res;
 $1=$177;
 label=49;break;
 case 39: 
 /** @type {number} */ var $179=$ep1;
 /** @type {number} */ var $180=(($179+1)|0);
 $4=$180;
 label=2;break;
 case 40: 
 /** @type {number} */ var $182=$2;
 /** @type {number} */ var $183=$3;
 /** @type {number} */ var $184=$4;
 /** @type {number} */ var $185=$ep1;
 /** @type {number} */ var $186=_max_expand($182,$183,$184,$185);
 $1=$186;
 label=49;break;
 case 41: 
 /** @type {number} */ var $188=$m;
 /** @type {number} */ var $189=($188|0)!=0;
 if($189){label=42;break;}else{label=43;break;}
 case 42: 
 /** @type {number} */ var $191=$2;
 /** @type {number} */ var $192=$3;
 /** @type {number} */ var $193=(($192+1)|0);
 /** @type {number} */ var $194=$4;
 /** @type {number} */ var $195=$ep1;
 /** @type {number} */ var $196=_max_expand($191,$193,$194,$195);
 var $199=$196;label=44;break;
 case 43: 
 var $199=0;label=44;break;
 case 44: 
 var $199;
 $1=$199;
 label=49;break;
 case 45: 
 /** @type {number} */ var $201=$2;
 /** @type {number} */ var $202=$3;
 /** @type {number} */ var $203=$4;
 /** @type {number} */ var $204=$ep1;
 /** @type {number} */ var $205=_min_expand($201,$202,$203,$204);
 $1=$205;
 label=49;break;
 case 46: 
 /** @type {number} */ var $207=$m;
 /** @type {number} */ var $208=($207|0)!=0;
 if($208){label=48;break;}else{label=47;break;}
 case 47: 
 $1=0;
 label=49;break;
 case 48: 
 /** @type {number} */ var $211=$3;
 /** @type {number} */ var $212=(($211+1)|0);
 $3=$212;
 /** @type {number} */ var $213=$ep1;
 $4=$213;
 label=2;break;
 case 49: 
 /** @type {number} */ var $215=$1;
 STACKTOP=sp;return $215;
 }
}
/**
 * @param {number} $ms
 * @param {number} $b
 * @param {number} $s
 * @param {number} $e
 * @param {number} $tr
 * @return {number}
 */
function _add_value($ms,$b,$s,$e,$tr){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 /** @type {number} */ var $L;
 /** @type {number} */ var $n;
 $1=$ms;
 $2=$b;
 $3=$s;
 $4=$e;
 $5=$tr;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+12)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 $L=$8;
 /** @type {number} */ var $9=$5;
 if(($9|0)==6){ label=2;break;}else if(($9|0)==5){ label=3;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $11=$L;
 _lua_pushvalue($11,3);
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=$3;
 /** @type {number} */ var $14=$4;
 /** @type {number} */ var $15=_push_captures($12,$13,$14);
 $n=$15;
 /** @type {number} */ var $16=$L;
 /** @type {number} */ var $17=$n;
 _lua_callk($16,$17,1,0,0);
 label=5;break;
 case 3: 
 /** @type {number} */ var $19=$1;
 /** @type {number} */ var $20=$3;
 /** @type {number} */ var $21=$4;
 _push_onecapture($19,0,$20,$21);
 /** @type {number} */ var $22=$L;
 _lua_gettable($22,3);
 label=5;break;
 case 4: 
 /** @type {number} */ var $24=$1;
 /** @type {number} */ var $25=$2;
 /** @type {number} */ var $26=$3;
 /** @type {number} */ var $27=$4;
 _add_s($24,$25,$26,$27);
 label=11;break;
 case 5: 
 /** @type {number} */ var $29=$L;
 /** @type {number} */ var $30=_lua_toboolean($29,-1);
 /** @type {number} */ var $31=($30|0)!=0;
 if($31){label=7;break;}else{label=6;break;}
 case 6: 
 /** @type {number} */ var $33=$L;
 _lua_settop($33,-2);
 /** @type {number} */ var $34=$L;
 /** @type {number} */ var $35=$3;
 /** @type {number} */ var $36=$4;
 /** @type {number} */ var $37=$3;
 /** @type {number} */ var $38=$36;
 /** @type {number} */ var $39=$37;
 /** @type {number} */ var $40=((($38)-($39))|0);
 /** @type {number} */ var $41=_lua_pushlstring($34,$35,$40);
 label=10;break;
 case 7: 
 /** @type {number} */ var $43=$L;
 /** @type {number} */ var $44=_lua_isstring($43,-1);
 /** @type {number} */ var $45=($44|0)!=0;
 if($45){label=9;break;}else{label=8;break;}
 case 8: 
 /** @type {number} */ var $47=$L;
 /** @type {number} */ var $48=$L;
 /** @type {number} */ var $49=$L;
 /** @type {number} */ var $50=_lua_type($49,-1);
 /** @type {number} */ var $51=_lua_typename($48,$50);
 /** @type {number} */ var $52=_luaL_error($47,7528,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$51,tempVarArgs)); STACKTOP=tempVarArgs;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 /** @type {number} */ var $55=$2;
 _luaL_addvalue($55);
 label=11;break;
 case 11: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $p
 * @param {number} $l
 * @return {number}
 */
function _nospecials($p,$l){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $upto;
 $2=$p;
 $3=$l;
 $upto=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$upto;
 /** @type {number} */ var $7=(($5+$6)|0);
 /** @type {number} */ var $8=_strpbrk($7,7952);
 /** @type {number} */ var $9=($8|0)!=0;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 $1=0;
 label=7;break;
 case 4: 
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=$upto;
 /** @type {number} */ var $14=(($12+$13)|0);
 /** @type {number} */ var $15=_strlen($14);
 /** @type {number} */ var $16=((($15)+(1))|0);
 /** @type {number} */ var $17=$upto;
 /** @type {number} */ var $18=((($17)+($16))|0);
 $upto=$18;
 label=5;break;
 case 5: 
 /** @type {number} */ var $20=$upto;
 /** @type {number} */ var $21=$3;
 /** @type {number} */ var $22=($20>>>0)<=($21>>>0);
 if($22){label=2;break;}else{label=6;break;}
 case 6: 
 $1=1;
 label=7;break;
 case 7: 
 /** @type {number} */ var $25=$1;
 STACKTOP=sp;return $25;
 }
}
/**
 * @param {number} $s1
 * @param {number} $l1
 * @param {number} $s2
 * @param {number} $l2
 * @return {number}
 */
function _lmemfind($s1,$l1,$s2,$l2){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 /** @type {number} */ var $init;
 $2=$s1;
 $3=$l1;
 $4=$s2;
 $5=$l2;
 /** @type {number} */ var $6=$5;
 /** @type {number} */ var $7=($6|0)==0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $9=$2;
 $1=$9;
 label=14;break;
 case 3: 
 /** @type {number} */ var $11=$5;
 /** @type {number} */ var $12=$3;
 /** @type {number} */ var $13=($11>>>0)>($12>>>0);
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=14;break;
 case 5: 
 /** @type {number} */ var $16=$5;
 /** @type {number} */ var $17=((($16)-(1))|0);
 $5=$17;
 /** @type {number} */ var $18=$3;
 /** @type {number} */ var $19=$5;
 /** @type {number} */ var $20=((($18)-($19))|0);
 $3=$20;
 label=6;break;
 case 6: 
 /** @type {number} */ var $22=$3;
 /** @type {number} */ var $23=($22>>>0)>0;
 if($23){label=7;break;}else{var $33=0;label=8;break;}
 case 7: 
 /** @type {number} */ var $25=$2;
 /** @type {number} */ var $26=$4;
 /** @type {number} */ var $27=HEAP8[($26)];
 /** @type {number} */ var $28=(($27<<24)>>24);
 /** @type {number} */ var $29=$3;
 /** @type {number} */ var $30=_memchr($25,$28,$29);
 $init=$30;
 /** @type {number} */ var $31=($30|0)!=0;
 var $33=$31;label=8;break;
 case 8: 
 var $33;
 if($33){label=9;break;}else{label=13;break;}
 case 9: 
 /** @type {number} */ var $35=$init;
 /** @type {number} */ var $36=(($35+1)|0);
 $init=$36;
 /** @type {number} */ var $37=$init;
 /** @type {number} */ var $38=$4;
 /** @type {number} */ var $39=(($38+1)|0);
 /** @type {number} */ var $40=$5;
 /** @type {number} */ var $41=_memcmp($37,$39,$40);
 /** @type {number} */ var $42=($41|0)==0;
 if($42){label=10;break;}else{label=11;break;}
 case 10: 
 /** @type {number} */ var $44=$init;
 /** @type {number} */ var $45=((($44)-(1))|0);
 $1=$45;
 label=14;break;
 case 11: 
 /** @type {number} */ var $47=$init;
 /** @type {number} */ var $48=$2;
 /** @type {number} */ var $49=$47;
 /** @type {number} */ var $50=$48;
 /** @type {number} */ var $51=((($49)-($50))|0);
 /** @type {number} */ var $52=$3;
 /** @type {number} */ var $53=((($52)-($51))|0);
 $3=$53;
 /** @type {number} */ var $54=$init;
 $2=$54;
 label=12;break;
 case 12: 
 label=6;break;
 case 13: 
 $1=0;
 label=14;break;
 case 14: 
 /** @type {number} */ var $58=$1;
 STACKTOP=sp;return $58;
 }
}
/**
 * @param {number} $ms
 * @param {number} $s
 * @param {number} $e
 * @return {number}
 */
function _push_captures($ms,$s,$e){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $i;
 /** @type {number} */ var $nlevels;
 $1=$ms;
 $2=$s;
 $3=$e;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=(($4+16)|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=($6|0)==0;
 if($7){label=2;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=($9|0)!=0;
 if($10){label=3;break;}else{label=4;break;}
 case 3: 
 var $17=1;label=5;break;
 case 4: 
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=(($13+16)|0);
 /** @type {number} */ var $15=HEAP32[(($14)>>2)];
 var $17=$15;label=5;break;
 case 5: 
 var $17;
 $nlevels=$17;
 /** @type {number} */ var $18=$1;
 /** @type {number} */ var $19=(($18+12)|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=$nlevels;
 _luaL_checkstack($20,$21,9992);
 $i=0;
 label=6;break;
 case 6: 
 /** @type {number} */ var $23=$i;
 /** @type {number} */ var $24=$nlevels;
 /** @type {number} */ var $25=($23|0)<($24|0);
 if($25){label=7;break;}else{label=9;break;}
 case 7: 
 /** @type {number} */ var $27=$1;
 /** @type {number} */ var $28=$i;
 /** @type {number} */ var $29=$2;
 /** @type {number} */ var $30=$3;
 _push_onecapture($27,$28,$29,$30);
 label=8;break;
 case 8: 
 /** @type {number} */ var $32=$i;
 /** @type {number} */ var $33=((($32)+(1))|0);
 $i=$33;
 label=6;break;
 case 9: 
 /** @type {number} */ var $35=$nlevels;
 STACKTOP=sp;return $35;
 }
}
/**
 * @param {number} $ms
 * @param {number} $s
 * @param {number} $p
 * @param {number} $what
 * @return {number}
 */
function _start_capture($ms,$s,$p,$what){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $res;
 /** @type {number} */ var $level;
 $1=$ms;
 $2=$s;
 $3=$p;
 $4=$what;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($5+16)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 $level=$7;
 /** @type {number} */ var $8=$level;
 /** @type {number} */ var $9=($8|0)>=32;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=(($11+12)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=_luaL_error($13,9992,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=3;break;
 case 3: 
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=$level;
 /** @type {number} */ var $18=$1;
 /** @type {number} */ var $19=(($18+20)|0);
 /** @type {number} */ var $20=(($19+($17<<3))|0);
 /** @type {number} */ var $21=(($20)|0);
 HEAP32[(($21)>>2)]=$16;
 /** @type {number} */ var $22=$4;
 /** @type {number} */ var $23=$level;
 /** @type {number} */ var $24=$1;
 /** @type {number} */ var $25=(($24+20)|0);
 /** @type {number} */ var $26=(($25+($23<<3))|0);
 /** @type {number} */ var $27=(($26+4)|0);
 HEAP32[(($27)>>2)]=$22;
 /** @type {number} */ var $28=$level;
 /** @type {number} */ var $29=((($28)+(1))|0);
 /** @type {number} */ var $30=$1;
 /** @type {number} */ var $31=(($30+16)|0);
 HEAP32[(($31)>>2)]=$29;
 /** @type {number} */ var $32=$1;
 /** @type {number} */ var $33=$2;
 /** @type {number} */ var $34=$3;
 /** @type {number} */ var $35=_match($32,$33,$34);
 $res=$35;
 /** @type {number} */ var $36=($35|0)==0;
 if($36){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $38=$1;
 /** @type {number} */ var $39=(($38+16)|0);
 /** @type {number} */ var $40=HEAP32[(($39)>>2)];
 /** @type {number} */ var $41=((($40)-(1))|0);
 HEAP32[(($39)>>2)]=$41;
 label=5;break;
 case 5: 
 /** @type {number} */ var $43=$res;
 STACKTOP=sp;return $43;
 }
}
/**
 * @param {number} $ms
 * @param {number} $s
 * @param {number} $p
 * @return {number}
 */
function _end_capture($ms,$s,$p){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $l;
 /** @type {number} */ var $res;
 $1=$ms;
 $2=$s;
 $3=$p;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=_capture_to_close($4);
 $l=$5;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=$l;
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=(($8+20)|0);
 /** @type {number} */ var $10=(($9+($7<<3))|0);
 /** @type {number} */ var $11=(($10)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=$6;
 /** @type {number} */ var $14=$12;
 /** @type {number} */ var $15=((($13)-($14))|0);
 /** @type {number} */ var $16=$l;
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=(($17+20)|0);
 /** @type {number} */ var $19=(($18+($16<<3))|0);
 /** @type {number} */ var $20=(($19+4)|0);
 HEAP32[(($20)>>2)]=$15;
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=$2;
 /** @type {number} */ var $23=$3;
 /** @type {number} */ var $24=_match($21,$22,$23);
 $res=$24;
 /** @type {number} */ var $25=($24|0)==0;
 if($25){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $27=$l;
 /** @type {number} */ var $28=$1;
 /** @type {number} */ var $29=(($28+20)|0);
 /** @type {number} */ var $30=(($29+($27<<3))|0);
 /** @type {number} */ var $31=(($30+4)|0);
 HEAP32[(($31)>>2)]=-1;
 label=3;break;
 case 3: 
 /** @type {number} */ var $33=$res;
 STACKTOP=sp;return $33;
 }
}
/**
 * @param {number} $ms
 * @param {number} $s
 * @param {number} $p
 * @return {number}
 */
function _matchbalance($ms,$s,$p){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $b;
 /** @type {number} */ var $e;
 /** @type {number} */ var $cont;
 $2=$ms;
 $3=$s;
 $4=$p;
 /** @type {number} */ var $5=$4;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=(($6+8)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=((($8)-(1))|0);
 /** @type {number} */ var $10=($5>>>0)>=($9>>>0);
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=(($12+12)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 /** @type {number} */ var $15=_luaL_error($14,8360,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=3;break;
 case 3: 
 /** @type {number} */ var $17=$3;
 /** @type {number} */ var $18=HEAP8[($17)];
 /** @type {number} */ var $19=(($18<<24)>>24);
 /** @type {number} */ var $20=$4;
 /** @type {number} */ var $21=HEAP8[($20)];
 /** @type {number} */ var $22=(($21<<24)>>24);
 /** @type {number} */ var $23=($19|0)!=($22|0);
 if($23){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=17;break;
 case 5: 
 /** @type {number} */ var $26=$4;
 /** @type {number} */ var $27=HEAP8[($26)];
 /** @type {number} */ var $28=(($27<<24)>>24);
 $b=$28;
 /** @type {number} */ var $29=$4;
 /** @type {number} */ var $30=(($29+1)|0);
 /** @type {number} */ var $31=HEAP8[($30)];
 /** @type {number} */ var $32=(($31<<24)>>24);
 $e=$32;
 $cont=1;
 label=6;break;
 case 6: 
 /** @type {number} */ var $34=$3;
 /** @type {number} */ var $35=(($34+1)|0);
 $3=$35;
 /** @type {number} */ var $36=$2;
 /** @type {number} */ var $37=(($36+4)|0);
 /** @type {number} */ var $38=HEAP32[(($37)>>2)];
 /** @type {number} */ var $39=($35>>>0)<($38>>>0);
 if($39){label=7;break;}else{label=15;break;}
 case 7: 
 /** @type {number} */ var $41=$3;
 /** @type {number} */ var $42=HEAP8[($41)];
 /** @type {number} */ var $43=(($42<<24)>>24);
 /** @type {number} */ var $44=$e;
 /** @type {number} */ var $45=($43|0)==($44|0);
 if($45){label=8;break;}else{label=11;break;}
 case 8: 
 /** @type {number} */ var $47=$cont;
 /** @type {number} */ var $48=((($47)-(1))|0);
 $cont=$48;
 /** @type {number} */ var $49=($48|0)==0;
 if($49){label=9;break;}else{label=10;break;}
 case 9: 
 /** @type {number} */ var $51=$3;
 /** @type {number} */ var $52=(($51+1)|0);
 $1=$52;
 label=17;break;
 case 10: 
 label=14;break;
 case 11: 
 /** @type {number} */ var $55=$3;
 /** @type {number} */ var $56=HEAP8[($55)];
 /** @type {number} */ var $57=(($56<<24)>>24);
 /** @type {number} */ var $58=$b;
 /** @type {number} */ var $59=($57|0)==($58|0);
 if($59){label=12;break;}else{label=13;break;}
 case 12: 
 /** @type {number} */ var $61=$cont;
 /** @type {number} */ var $62=((($61)+(1))|0);
 $cont=$62;
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 label=6;break;
 case 15: 
 label=16;break;
 case 16: 
 $1=0;
 label=17;break;
 case 17: 
 /** @type {number} */ var $68=$1;
 STACKTOP=sp;return $68;
 }
}
/**
 * @param {number} $ms
 * @param {number} $p
 * @return {number}
 */
function _classend($ms,$p){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $2=$ms;
 $3=$p;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=(($4+1)|0);
 $3=$5;
 /** @type {number} */ var $6=HEAP8[($4)];
 /** @type {number} */ var $7=(($6<<24)>>24);
 if(($7|0)==37){ label=2;break;}else if(($7|0)==91){ label=5;break;}else{label=16;break;}
 case 2: 
 /** @type {number} */ var $9=$3;
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=(($10+8)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=($9|0)==($12|0);
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $15=$2;
 /** @type {number} */ var $16=(($15+12)|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=_luaL_error($17,8856,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=4;break;
 case 4: 
 /** @type {number} */ var $20=$3;
 /** @type {number} */ var $21=(($20+1)|0);
 $1=$21;
 label=17;break;
 case 5: 
 /** @type {number} */ var $23=$3;
 /** @type {number} */ var $24=HEAP8[($23)];
 /** @type {number} */ var $25=(($24<<24)>>24);
 /** @type {number} */ var $26=($25|0)==94;
 if($26){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $28=$3;
 /** @type {number} */ var $29=(($28+1)|0);
 $3=$29;
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 /** @type {number} */ var $32=$3;
 /** @type {number} */ var $33=$2;
 /** @type {number} */ var $34=(($33+8)|0);
 /** @type {number} */ var $35=HEAP32[(($34)>>2)];
 /** @type {number} */ var $36=($32|0)==($35|0);
 if($36){label=9;break;}else{label=10;break;}
 case 9: 
 /** @type {number} */ var $38=$2;
 /** @type {number} */ var $39=(($38+12)|0);
 /** @type {number} */ var $40=HEAP32[(($39)>>2)];
 /** @type {number} */ var $41=_luaL_error($40,8576,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=10;break;
 case 10: 
 /** @type {number} */ var $43=$3;
 /** @type {number} */ var $44=(($43+1)|0);
 $3=$44;
 /** @type {number} */ var $45=HEAP8[($43)];
 /** @type {number} */ var $46=(($45<<24)>>24);
 /** @type {number} */ var $47=($46|0)==37;
 if($47){label=11;break;}else{label=13;break;}
 case 11: 
 /** @type {number} */ var $49=$3;
 /** @type {number} */ var $50=$2;
 /** @type {number} */ var $51=(($50+8)|0);
 /** @type {number} */ var $52=HEAP32[(($51)>>2)];
 /** @type {number} */ var $53=($49>>>0)<($52>>>0);
 if($53){label=12;break;}else{label=13;break;}
 case 12: 
 /** @type {number} */ var $55=$3;
 /** @type {number} */ var $56=(($55+1)|0);
 $3=$56;
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 /** @type {number} */ var $59=$3;
 /** @type {number} */ var $60=HEAP8[($59)];
 /** @type {number} */ var $61=(($60<<24)>>24);
 /** @type {number} */ var $62=($61|0)!=93;
 if($62){label=8;break;}else{label=15;break;}
 case 15: 
 /** @type {number} */ var $64=$3;
 /** @type {number} */ var $65=(($64+1)|0);
 $1=$65;
 label=17;break;
 case 16: 
 /** @type {number} */ var $67=$3;
 $1=$67;
 label=17;break;
 case 17: 
 /** @type {number} */ var $69=$1;
 STACKTOP=sp;return $69;
 }
}
/**
 * @param {number} $c
 * @param {number} $p
 * @param {number} $ec
 * @return {number}
 */
function _matchbracketclass($c,$p,$ec){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $sig;
 $2=$c;
 $3=$p;
 $4=$ec;
 $sig=1;
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=(($5+1)|0);
 /** @type {number} */ var $7=HEAP8[($6)];
 /** @type {number} */ var $8=(($7<<24)>>24);
 /** @type {number} */ var $9=($8|0)==94;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 $sig=0;
 /** @type {number} */ var $11=$3;
 /** @type {number} */ var $12=(($11+1)|0);
 $3=$12;
 label=3;break;
 case 3: 
 label=4;break;
 case 4: 
 /** @type {number} */ var $15=$3;
 /** @type {number} */ var $16=(($15+1)|0);
 $3=$16;
 /** @type {number} */ var $17=$4;
 /** @type {number} */ var $18=($16>>>0)<($17>>>0);
 if($18){label=5;break;}else{label=20;break;}
 case 5: 
 /** @type {number} */ var $20=$3;
 /** @type {number} */ var $21=HEAP8[($20)];
 /** @type {number} */ var $22=(($21<<24)>>24);
 /** @type {number} */ var $23=($22|0)==37;
 if($23){label=6;break;}else{label=9;break;}
 case 6: 
 /** @type {number} */ var $25=$3;
 /** @type {number} */ var $26=(($25+1)|0);
 $3=$26;
 /** @type {number} */ var $27=$2;
 /** @type {number} */ var $28=$3;
 /** @type {number} */ var $29=HEAP8[($28)];
 /** @type {number} */ var $30=($29&255);
 /** @type {number} */ var $31=_match_class($27,$30);
 /** @type {number} */ var $32=($31|0)!=0;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $34=$sig;
 $1=$34;
 label=21;break;
 case 8: 
 label=19;break;
 case 9: 
 /** @type {number} */ var $37=$3;
 /** @type {number} */ var $38=(($37+1)|0);
 /** @type {number} */ var $39=HEAP8[($38)];
 /** @type {number} */ var $40=(($39<<24)>>24);
 /** @type {number} */ var $41=($40|0)==45;
 if($41){label=10;break;}else{label=15;break;}
 case 10: 
 /** @type {number} */ var $43=$3;
 /** @type {number} */ var $44=(($43+2)|0);
 /** @type {number} */ var $45=$4;
 /** @type {number} */ var $46=($44>>>0)<($45>>>0);
 if($46){label=11;break;}else{label=15;break;}
 case 11: 
 /** @type {number} */ var $48=$3;
 /** @type {number} */ var $49=(($48+2)|0);
 $3=$49;
 /** @type {number} */ var $50=$3;
 /** @type {number} */ var $51=((($50)-(2))|0);
 /** @type {number} */ var $52=HEAP8[($51)];
 /** @type {number} */ var $53=($52&255);
 /** @type {number} */ var $54=$2;
 /** @type {number} */ var $55=($53|0)<=($54|0);
 if($55){label=12;break;}else{label=14;break;}
 case 12: 
 /** @type {number} */ var $57=$2;
 /** @type {number} */ var $58=$3;
 /** @type {number} */ var $59=HEAP8[($58)];
 /** @type {number} */ var $60=($59&255);
 /** @type {number} */ var $61=($57|0)<=($60|0);
 if($61){label=13;break;}else{label=14;break;}
 case 13: 
 /** @type {number} */ var $63=$sig;
 $1=$63;
 label=21;break;
 case 14: 
 label=18;break;
 case 15: 
 /** @type {number} */ var $66=$3;
 /** @type {number} */ var $67=HEAP8[($66)];
 /** @type {number} */ var $68=($67&255);
 /** @type {number} */ var $69=$2;
 /** @type {number} */ var $70=($68|0)==($69|0);
 if($70){label=16;break;}else{label=17;break;}
 case 16: 
 /** @type {number} */ var $72=$sig;
 $1=$72;
 label=21;break;
 case 17: 
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 label=4;break;
 case 20: 
 /** @type {number} */ var $77=$sig;
 /** @type {number} */ var $78=($77|0)!=0;
 /** @type {number} */ var $79=$78^1;
 /** @type {number} */ var $80=($79&1);
 $1=$80;
 label=21;break;
 case 21: 
 /** @type {number} */ var $82=$1;
 STACKTOP=sp;return $82;
 }
}
/**
 * @param {number} $ms
 * @param {number} $s
 * @param {number} $l
 * @return {number}
 */
function _match_capture($ms,$s,$l){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $len;
 $2=$ms;
 $3=$s;
 $4=$l;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$4;
 /** @type {number} */ var $7=_check_capture($5,$6);
 $4=$7;
 /** @type {number} */ var $8=$4;
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=(($9+20)|0);
 /** @type {number} */ var $11=(($10+($8<<3))|0);
 /** @type {number} */ var $12=(($11+4)|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 $len=$13;
 /** @type {number} */ var $14=$2;
 /** @type {number} */ var $15=(($14+4)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=$3;
 /** @type {number} */ var $18=$16;
 /** @type {number} */ var $19=$17;
 /** @type {number} */ var $20=((($18)-($19))|0);
 /** @type {number} */ var $21=$len;
 /** @type {number} */ var $22=($20>>>0)>=($21>>>0);
 if($22){label=2;break;}else{label=4;break;}
 case 2: 
 /** @type {number} */ var $24=$4;
 /** @type {number} */ var $25=$2;
 /** @type {number} */ var $26=(($25+20)|0);
 /** @type {number} */ var $27=(($26+($24<<3))|0);
 /** @type {number} */ var $28=(($27)|0);
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 /** @type {number} */ var $30=$3;
 /** @type {number} */ var $31=$len;
 /** @type {number} */ var $32=_memcmp($29,$30,$31);
 /** @type {number} */ var $33=($32|0)==0;
 if($33){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $35=$3;
 /** @type {number} */ var $36=$len;
 /** @type {number} */ var $37=(($35+$36)|0);
 $1=$37;
 label=5;break;
 case 4: 
 $1=0;
 label=5;break;
 case 5: 
 /** @type {number} */ var $40=$1;
 STACKTOP=sp;return $40;
 }
}
/**
 * @param {number} $c
 * @param {number} $p
 * @param {number} $ep
 * @return {number}
 */
function _singlematch($c,$p,$ep){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 $2=$c;
 $3=$p;
 $4=$ep;
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=HEAP8[($5)];
 /** @type {number} */ var $7=(($6<<24)>>24);
 if(($7|0)==46){ label=2;break;}else if(($7|0)==37){ label=3;break;}else if(($7|0)==91){ label=4;break;}else{label=5;break;}
 case 2: 
 $1=1;
 label=6;break;
 case 3: 
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=$3;
 /** @type {number} */ var $12=(($11+1)|0);
 /** @type {number} */ var $13=HEAP8[($12)];
 /** @type {number} */ var $14=($13&255);
 /** @type {number} */ var $15=_match_class($10,$14);
 $1=$15;
 label=6;break;
 case 4: 
 /** @type {number} */ var $17=$2;
 /** @type {number} */ var $18=$3;
 /** @type {number} */ var $19=$4;
 /** @type {number} */ var $20=((($19)-(1))|0);
 /** @type {number} */ var $21=_matchbracketclass($17,$18,$20);
 $1=$21;
 label=6;break;
 case 5: 
 /** @type {number} */ var $23=$3;
 /** @type {number} */ var $24=HEAP8[($23)];
 /** @type {number} */ var $25=($24&255);
 /** @type {number} */ var $26=$2;
 /** @type {number} */ var $27=($25|0)==($26|0);
 /** @type {number} */ var $28=($27&1);
 $1=$28;
 label=6;break;
 case 6: 
 /** @type {number} */ var $30=$1;
 STACKTOP=sp;return $30;
 }
}
/**
 * @param {number} $ms
 * @param {number} $s
 * @param {number} $p
 * @param {number} $ep
 * @return {number}
 */
function _max_expand($ms,$s,$p,$ep){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 /** @type {number} */ var $i;
 /** @type {number} */ var $res;
 $2=$ms;
 $3=$s;
 $4=$p;
 $5=$ep;
 $i=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $7=$3;
 /** @type {number} */ var $8=$i;
 /** @type {number} */ var $9=(($7+$8)|0);
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=(($10+4)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=($9>>>0)<($12>>>0);
 if($13){label=3;break;}else{var $25=0;label=4;break;}
 case 3: 
 /** @type {number} */ var $15=$3;
 /** @type {number} */ var $16=$i;
 /** @type {number} */ var $17=(($15+$16)|0);
 /** @type {number} */ var $18=HEAP8[($17)];
 /** @type {number} */ var $19=($18&255);
 /** @type {number} */ var $20=$4;
 /** @type {number} */ var $21=$5;
 /** @type {number} */ var $22=_singlematch($19,$20,$21);
 /** @type {number} */ var $23=($22|0)!=0;
 var $25=$23;label=4;break;
 case 4: 
 var $25;
 if($25){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $27=$i;
 /** @type {number} */ var $28=((($27)+(1))|0);
 $i=$28;
 label=2;break;
 case 6: 
 label=7;break;
 case 7: 
 /** @type {number} */ var $31=$i;
 /** @type {number} */ var $32=($31|0)>=0;
 if($32){label=8;break;}else{label=11;break;}
 case 8: 
 /** @type {number} */ var $34=$2;
 /** @type {number} */ var $35=$3;
 /** @type {number} */ var $36=$i;
 /** @type {number} */ var $37=(($35+$36)|0);
 /** @type {number} */ var $38=$5;
 /** @type {number} */ var $39=(($38+1)|0);
 /** @type {number} */ var $40=_match($34,$37,$39);
 $res=$40;
 /** @type {number} */ var $41=$res;
 /** @type {number} */ var $42=($41|0)!=0;
 if($42){label=9;break;}else{label=10;break;}
 case 9: 
 /** @type {number} */ var $44=$res;
 $1=$44;
 label=12;break;
 case 10: 
 /** @type {number} */ var $46=$i;
 /** @type {number} */ var $47=((($46)-(1))|0);
 $i=$47;
 label=7;break;
 case 11: 
 $1=0;
 label=12;break;
 case 12: 
 /** @type {number} */ var $50=$1;
 STACKTOP=sp;return $50;
 }
}
/**
 * @param {number} $ms
 * @param {number} $s
 * @param {number} $p
 * @param {number} $ep
 * @return {number}
 */
function _min_expand($ms,$s,$p,$ep){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 /** @type {number} */ var $res;
 $2=$ms;
 $3=$s;
 $4=$p;
 $5=$ep;
 label=2;break;
 case 2: 
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=$3;
 /** @type {number} */ var $9=$5;
 /** @type {number} */ var $10=(($9+1)|0);
 /** @type {number} */ var $11=_match($7,$8,$10);
 $res=$11;
 /** @type {number} */ var $12=$res;
 /** @type {number} */ var $13=($12|0)!=0;
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $15=$res;
 $1=$15;
 label=10;break;
 case 4: 
 /** @type {number} */ var $17=$3;
 /** @type {number} */ var $18=$2;
 /** @type {number} */ var $19=(($18+4)|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=($17>>>0)<($20>>>0);
 if($21){label=5;break;}else{label=7;break;}
 case 5: 
 /** @type {number} */ var $23=$3;
 /** @type {number} */ var $24=HEAP8[($23)];
 /** @type {number} */ var $25=($24&255);
 /** @type {number} */ var $26=$4;
 /** @type {number} */ var $27=$5;
 /** @type {number} */ var $28=_singlematch($25,$26,$27);
 /** @type {number} */ var $29=($28|0)!=0;
 if($29){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $31=$3;
 /** @type {number} */ var $32=(($31+1)|0);
 $3=$32;
 label=8;break;
 case 7: 
 $1=0;
 label=10;break;
 case 8: 
 label=9;break;
 case 9: 
 label=2;break;
 case 10: 
 /** @type {number} */ var $37=$1;
 STACKTOP=sp;return $37;
 }
}
/**
 * @param {number} $ms
 * @param {number} $i
 * @param {number} $s
 * @param {number} $e
 * @return {number}
 */
function _push_onecapture($ms,$i,$s,$e){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $l;
 $1=$ms;
 $2=$i;
 $3=$s;
 $4=$e;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=(($6+16)|0);
 /** @type {number} */ var $8=HEAP32[(($7)>>2)];
 /** @type {number} */ var $9=($5|0)>=($8|0);
 if($9){label=2;break;}else{label=6;break;}
 case 2: 
 /** @type {number} */ var $11=$2;
 /** @type {number} */ var $12=($11|0)==0;
 if($12){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=(($14+12)|0);
 /** @type {number} */ var $16=HEAP32[(($15)>>2)];
 /** @type {number} */ var $17=$3;
 /** @type {number} */ var $18=$4;
 /** @type {number} */ var $19=$3;
 /** @type {number} */ var $20=$18;
 /** @type {number} */ var $21=$19;
 /** @type {number} */ var $22=((($20)-($21))|0);
 /** @type {number} */ var $23=_lua_pushlstring($16,$17,$22);
 label=5;break;
 case 4: 
 /** @type {number} */ var $25=$1;
 /** @type {number} */ var $26=(($25+12)|0);
 /** @type {number} */ var $27=HEAP32[(($26)>>2)];
 /** @type {number} */ var $28=_luaL_error($27,9784,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=5;break;
 case 5: 
 label=12;break;
 case 6: 
 /** @type {number} */ var $31=$2;
 /** @type {number} */ var $32=$1;
 /** @type {number} */ var $33=(($32+20)|0);
 /** @type {number} */ var $34=(($33+($31<<3))|0);
 /** @type {number} */ var $35=(($34+4)|0);
 /** @type {number} */ var $36=HEAP32[(($35)>>2)];
 $l=$36;
 /** @type {number} */ var $37=$l;
 /** @type {number} */ var $38=($37|0)==-1;
 if($38){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $40=$1;
 /** @type {number} */ var $41=(($40+12)|0);
 /** @type {number} */ var $42=HEAP32[(($41)>>2)];
 /** @type {number} */ var $43=_luaL_error($42,9552,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=8;break;
 case 8: 
 /** @type {number} */ var $45=$l;
 /** @type {number} */ var $46=($45|0)==-2;
 if($46){label=9;break;}else{label=10;break;}
 case 9: 
 /** @type {number} */ var $48=$1;
 /** @type {number} */ var $49=(($48+12)|0);
 /** @type {number} */ var $50=HEAP32[(($49)>>2)];
 /** @type {number} */ var $51=$2;
 /** @type {number} */ var $52=$1;
 /** @type {number} */ var $53=(($52+20)|0);
 /** @type {number} */ var $54=(($53+($51<<3))|0);
 /** @type {number} */ var $55=(($54)|0);
 /** @type {number} */ var $56=HEAP32[(($55)>>2)];
 /** @type {number} */ var $57=$1;
 /** @type {number} */ var $58=(($57)|0);
 /** @type {number} */ var $59=HEAP32[(($58)>>2)];
 /** @type {number} */ var $60=$56;
 /** @type {number} */ var $61=$59;
 /** @type {number} */ var $62=((($60)-($61))|0);
 /** @type {number} */ var $63=((($62)+(1))|0);
 _lua_pushinteger($50,$63);
 label=11;break;
 case 10: 
 /** @type {number} */ var $65=$1;
 /** @type {number} */ var $66=(($65+12)|0);
 /** @type {number} */ var $67=HEAP32[(($66)>>2)];
 /** @type {number} */ var $68=$2;
 /** @type {number} */ var $69=$1;
 /** @type {number} */ var $70=(($69+20)|0);
 /** @type {number} */ var $71=(($70+($68<<3))|0);
 /** @type {number} */ var $72=(($71)|0);
 /** @type {number} */ var $73=HEAP32[(($72)>>2)];
 /** @type {number} */ var $74=$l;
 /** @type {number} */ var $75=_lua_pushlstring($67,$73,$74);
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ms
 * @param {number} $b
 * @param {number} $s
 * @param {number} $e
 * @return {number}
 */
function _add_s($ms,$b,$s,$e){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $l=sp;
 /** @type {number} */ var $i;
 /** @type {number} */ var $news;
 $1=$ms;
 $2=$b;
 $3=$s;
 $4=$e;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=(($5+12)|0);
 /** @type {number} */ var $7=HEAP32[(($6)>>2)];
 /** @type {number} */ var $8=_lua_tolstring($7,3,$l);
 $news=$8;
 $i=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $10=$i;
 /** @type {number} */ var $11=HEAP32[(($l)>>2)];
 /** @type {number} */ var $12=($10>>>0)<($11>>>0);
 if($12){label=3;break;}else{label=20;break;}
 case 3: 
 /** @type {number} */ var $14=$i;
 /** @type {number} */ var $15=$news;
 /** @type {number} */ var $16=(($15+$14)|0);
 /** @type {number} */ var $17=HEAP8[($16)];
 /** @type {number} */ var $18=(($17<<24)>>24);
 /** @type {number} */ var $19=($18|0)!=37;
 if($19){label=4;break;}else{label=7;break;}
 case 4: 
 /** @type {number} */ var $21=$2;
 /** @type {number} */ var $22=(($21+8)|0);
 /** @type {number} */ var $23=HEAP32[(($22)>>2)];
 /** @type {number} */ var $24=$2;
 /** @type {number} */ var $25=(($24+4)|0);
 /** @type {number} */ var $26=HEAP32[(($25)>>2)];
 /** @type {number} */ var $27=($23>>>0)<($26>>>0);
 if($27){var $33=1;label=6;break;}else{label=5;break;}
 case 5: 
 /** @type {number} */ var $29=$2;
 /** @type {number} */ var $30=_luaL_prepbuffsize($29,1);
 /** @type {number} */ var $31=($30|0)!=0;
 var $33=$31;label=6;break;
 case 6: 
 var $33;
 /** @type {number} */ var $34=($33&1);
 /** @type {number} */ var $35=$i;
 /** @type {number} */ var $36=$news;
 /** @type {number} */ var $37=(($36+$35)|0);
 /** @type {number} */ var $38=HEAP8[($37)];
 /** @type {number} */ var $39=$2;
 /** @type {number} */ var $40=(($39+8)|0);
 /** @type {number} */ var $41=HEAP32[(($40)>>2)];
 /** @type {number} */ var $42=((($41)+(1))|0);
 HEAP32[(($40)>>2)]=$42;
 /** @type {number} */ var $43=$2;
 /** @type {number} */ var $44=(($43)|0);
 /** @type {number} */ var $45=HEAP32[(($44)>>2)];
 /** @type {number} */ var $46=(($45+$41)|0);
 HEAP8[($46)]=$38;
 label=18;break;
 case 7: 
 /** @type {number} */ var $48=$i;
 /** @type {number} */ var $49=((($48)+(1))|0);
 $i=$49;
 /** @type {number} */ var $50=$i;
 /** @type {number} */ var $51=$news;
 /** @type {number} */ var $52=(($51+$50)|0);
 /** @type {number} */ var $53=HEAP8[($52)];
 /** @type {number} */ var $54=($53&255);
 /** @type {number} */ var $55=_isdigit($54);
 /** @type {number} */ var $56=($55|0)!=0;
 if($56){label=13;break;}else{label=8;break;}
 case 8: 
 /** @type {number} */ var $58=$i;
 /** @type {number} */ var $59=$news;
 /** @type {number} */ var $60=(($59+$58)|0);
 /** @type {number} */ var $61=HEAP8[($60)];
 /** @type {number} */ var $62=(($61<<24)>>24);
 /** @type {number} */ var $63=($62|0)!=37;
 if($63){label=9;break;}else{label=10;break;}
 case 9: 
 /** @type {number} */ var $65=$1;
 /** @type {number} */ var $66=(($65+12)|0);
 /** @type {number} */ var $67=HEAP32[(($66)>>2)];
 /** @type {number} */ var $68=_luaL_error($67,7328,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=37,tempVarArgs)); STACKTOP=tempVarArgs;
 label=10;break;
 case 10: 
 /** @type {number} */ var $70=$2;
 /** @type {number} */ var $71=(($70+8)|0);
 /** @type {number} */ var $72=HEAP32[(($71)>>2)];
 /** @type {number} */ var $73=$2;
 /** @type {number} */ var $74=(($73+4)|0);
 /** @type {number} */ var $75=HEAP32[(($74)>>2)];
 /** @type {number} */ var $76=($72>>>0)<($75>>>0);
 if($76){var $82=1;label=12;break;}else{label=11;break;}
 case 11: 
 /** @type {number} */ var $78=$2;
 /** @type {number} */ var $79=_luaL_prepbuffsize($78,1);
 /** @type {number} */ var $80=($79|0)!=0;
 var $82=$80;label=12;break;
 case 12: 
 var $82;
 /** @type {number} */ var $83=($82&1);
 /** @type {number} */ var $84=$i;
 /** @type {number} */ var $85=$news;
 /** @type {number} */ var $86=(($85+$84)|0);
 /** @type {number} */ var $87=HEAP8[($86)];
 /** @type {number} */ var $88=$2;
 /** @type {number} */ var $89=(($88+8)|0);
 /** @type {number} */ var $90=HEAP32[(($89)>>2)];
 /** @type {number} */ var $91=((($90)+(1))|0);
 HEAP32[(($89)>>2)]=$91;
 /** @type {number} */ var $92=$2;
 /** @type {number} */ var $93=(($92)|0);
 /** @type {number} */ var $94=HEAP32[(($93)>>2)];
 /** @type {number} */ var $95=(($94+$90)|0);
 HEAP8[($95)]=$87;
 label=17;break;
 case 13: 
 /** @type {number} */ var $97=$i;
 /** @type {number} */ var $98=$news;
 /** @type {number} */ var $99=(($98+$97)|0);
 /** @type {number} */ var $100=HEAP8[($99)];
 /** @type {number} */ var $101=(($100<<24)>>24);
 /** @type {number} */ var $102=($101|0)==48;
 if($102){label=14;break;}else{label=15;break;}
 case 14: 
 /** @type {number} */ var $104=$2;
 /** @type {number} */ var $105=$3;
 /** @type {number} */ var $106=$4;
 /** @type {number} */ var $107=$3;
 /** @type {number} */ var $108=$106;
 /** @type {number} */ var $109=$107;
 /** @type {number} */ var $110=((($108)-($109))|0);
 _luaL_addlstring($104,$105,$110);
 label=16;break;
 case 15: 
 /** @type {number} */ var $112=$1;
 /** @type {number} */ var $113=$i;
 /** @type {number} */ var $114=$news;
 /** @type {number} */ var $115=(($114+$113)|0);
 /** @type {number} */ var $116=HEAP8[($115)];
 /** @type {number} */ var $117=(($116<<24)>>24);
 /** @type {number} */ var $118=((($117)-(49))|0);
 /** @type {number} */ var $119=$3;
 /** @type {number} */ var $120=$4;
 _push_onecapture($112,$118,$119,$120);
 /** @type {number} */ var $121=$2;
 _luaL_addvalue($121);
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 /** @type {number} */ var $126=$i;
 /** @type {number} */ var $127=((($126)+(1))|0);
 $i=$127;
 label=2;break;
 case 20: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $ms
 * @return {number}
 */
function _capture_to_close($ms){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $level;
 $2=$ms;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=(($3+16)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 $level=$5;
 /** @type {number} */ var $6=$level;
 /** @type {number} */ var $7=((($6)-(1))|0);
 $level=$7;
 label=2;break;
 case 2: 
 /** @type {number} */ var $9=$level;
 /** @type {number} */ var $10=($9|0)>=0;
 if($10){label=3;break;}else{label=7;break;}
 case 3: 
 /** @type {number} */ var $12=$level;
 /** @type {number} */ var $13=$2;
 /** @type {number} */ var $14=(($13+20)|0);
 /** @type {number} */ var $15=(($14+($12<<3))|0);
 /** @type {number} */ var $16=(($15+4)|0);
 /** @type {number} */ var $17=HEAP32[(($16)>>2)];
 /** @type {number} */ var $18=($17|0)==-1;
 if($18){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $20=$level;
 $1=$20;
 label=8;break;
 case 5: 
 label=6;break;
 case 6: 
 /** @type {number} */ var $23=$level;
 /** @type {number} */ var $24=((($23)-(1))|0);
 $level=$24;
 label=2;break;
 case 7: 
 /** @type {number} */ var $26=$2;
 /** @type {number} */ var $27=(($26+12)|0);
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=_luaL_error($28,8176,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=$29;
 label=8;break;
 case 8: 
 /** @type {number} */ var $31=$1;
 STACKTOP=sp;return $31;
 }
}
/**
 * @param {number} $c
 * @param {number} $cl
 * @return {number}
 */
function _match_class($c,$cl){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $res;
 $2=$c;
 $3=$cl;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=_tolower($4);
 switch(($5|0)){case 119:{ label=10;break;}case 120:{ label=11;break;}case 122:{ label=12;break;}case 97:{ label=2;break;}case 99:{ label=3;break;}case 100:{ label=4;break;}case 103:{ label=5;break;}case 108:{ label=6;break;}case 112:{ label=7;break;}case 115:{ label=8;break;}case 117:{ label=9;break;}default:{label=13;break;}}break;
 case 2: 
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=_isalpha($7);
 $res=$8;
 label=14;break;
 case 3: 
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=_iscntrl($10);
 $res=$11;
 label=14;break;
 case 4: 
 /** @type {number} */ var $13=$2;
 /** @type {number} */ var $14=_isdigit($13);
 $res=$14;
 label=14;break;
 case 5: 
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=_isgraph($16);
 $res=$17;
 label=14;break;
 case 6: 
 /** @type {number} */ var $19=$2;
 /** @type {number} */ var $20=_islower($19);
 $res=$20;
 label=14;break;
 case 7: 
 /** @type {number} */ var $22=$2;
 /** @type {number} */ var $23=_ispunct($22);
 $res=$23;
 label=14;break;
 case 8: 
 /** @type {number} */ var $25=$2;
 /** @type {number} */ var $26=_isspace($25);
 $res=$26;
 label=14;break;
 case 9: 
 /** @type {number} */ var $28=$2;
 /** @type {number} */ var $29=_isupper($28);
 $res=$29;
 label=14;break;
 case 10: 
 /** @type {number} */ var $31=$2;
 /** @type {number} */ var $32=_isalnum($31);
 $res=$32;
 label=14;break;
 case 11: 
 /** @type {number} */ var $34=$2;
 /** @type {number} */ var $35=_isxdigit($34);
 $res=$35;
 label=14;break;
 case 12: 
 /** @type {number} */ var $37=$2;
 /** @type {number} */ var $38=($37|0)==0;
 /** @type {number} */ var $39=($38&1);
 $res=$39;
 label=14;break;
 case 13: 
 /** @type {number} */ var $41=$3;
 /** @type {number} */ var $42=$2;
 /** @type {number} */ var $43=($41|0)==($42|0);
 /** @type {number} */ var $44=($43&1);
 $1=$44;
 label=18;break;
 case 14: 
 /** @type {number} */ var $46=$3;
 /** @type {number} */ var $47=_islower($46);
 /** @type {number} */ var $48=($47|0)!=0;
 if($48){label=15;break;}else{label=16;break;}
 case 15: 
 /** @type {number} */ var $50=$res;
 var $57=$50;label=17;break;
 case 16: 
 /** @type {number} */ var $52=$res;
 /** @type {number} */ var $53=($52|0)!=0;
 /** @type {number} */ var $54=$53^1;
 /** @type {number} */ var $55=($54&1);
 var $57=$55;label=17;break;
 case 17: 
 var $57;
 $1=$57;
 label=18;break;
 case 18: 
 /** @type {number} */ var $59=$1;
 STACKTOP=sp;return $59;
 }
}
/**
 * @param {number} $ms
 * @param {number} $l
 * @return {number}
 */
function _check_capture($ms,$l){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $2=$ms;
 $3=$l;
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=((($4)-(49))|0);
 $3=$5;
 /** @type {number} */ var $6=$3;
 /** @type {number} */ var $7=($6|0)<0;
 if($7){label=4;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $9=$3;
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=(($10+16)|0);
 /** @type {number} */ var $12=HEAP32[(($11)>>2)];
 /** @type {number} */ var $13=($9|0)>=($12|0);
 if($13){label=4;break;}else{label=3;break;}
 case 3: 
 /** @type {number} */ var $15=$3;
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=(($16+20)|0);
 /** @type {number} */ var $18=(($17+($15<<3))|0);
 /** @type {number} */ var $19=(($18+4)|0);
 /** @type {number} */ var $20=HEAP32[(($19)>>2)];
 /** @type {number} */ var $21=($20|0)==-1;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $23=$2;
 /** @type {number} */ var $24=(($23+12)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=$3;
 /** @type {number} */ var $27=((($26)+(1))|0);
 /** @type {number} */ var $28=_luaL_error($25,9088,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$27,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=$28;
 label=6;break;
 case 5: 
 /** @type {number} */ var $30=$3;
 $1=$30;
 label=6;break;
 case 6: 
 /** @type {number} */ var $32=$1;
 STACKTOP=sp;return $32;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaopen_table($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 _lua_createtable($2,0,6);
 /** @type {number} */ var $3=$1;
 _luaL_setfuncs($3,24,0);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _tconcat($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1048)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $b=sp;
 /** @type {number} */ var $lsep=(sp)+(1040);
 /** @type {number} */ var $i;
 /** @type {number} */ var $last;
 /** @type {number} */ var $sep;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_optlstring($2,2,12088,$lsep);
 $sep=$3;
 /** @type {number} */ var $4=$1;
 _luaL_checktype($4,1,5);
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=_luaL_optinteger($5,3,1);
 $i=$6;
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=_lua_type($7,4);
 /** @type {number} */ var $9=($8|0)<=0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=_luaL_len($11,1);
 var $17=$12;label=4;break;
 case 3: 
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=_luaL_checkinteger($14,4);
 var $17=$15;label=4;break;
 case 4: 
 var $17;
 $last=$17;
 /** @type {number} */ var $18=$1;
 _luaL_buffinit($18,$b);
 label=5;break;
 case 5: 
 /** @type {number} */ var $20=$i;
 /** @type {number} */ var $21=$last;
 /** @type {number} */ var $22=($20|0)<($21|0);
 if($22){label=6;break;}else{label=8;break;}
 case 6: 
 /** @type {number} */ var $24=$1;
 /** @type {number} */ var $25=$i;
 _addfield($24,$b,$25);
 /** @type {number} */ var $26=$sep;
 /** @type {number} */ var $27=HEAP32[(($lsep)>>2)];
 _luaL_addlstring($b,$26,$27);
 label=7;break;
 case 7: 
 /** @type {number} */ var $29=$i;
 /** @type {number} */ var $30=((($29)+(1))|0);
 $i=$30;
 label=5;break;
 case 8: 
 /** @type {number} */ var $32=$i;
 /** @type {number} */ var $33=$last;
 /** @type {number} */ var $34=($32|0)==($33|0);
 if($34){label=9;break;}else{label=10;break;}
 case 9: 
 /** @type {number} */ var $36=$1;
 /** @type {number} */ var $37=$i;
 _addfield($36,$b,$37);
 label=10;break;
 case 10: 
 _luaL_pushresult($b);
 STACKTOP=sp;return 1;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _tinsert($L){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $e;
 /** @type {number} */ var $pos;
 /** @type {number} */ var $i;
 $2=$L;
 /** @type {number} */ var $3=$2;
 _luaL_checktype($3,1,5);
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_luaL_len($4,1);
 /** @type {number} */ var $6=((($5)+(1))|0);
 $e=$6;
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=_lua_gettop($7);
 if(($8|0)==2){ label=2;break;}else if(($8|0)==3){ label=3;break;}else{label=10;break;}
 case 2: 
 /** @type {number} */ var $10=$e;
 $pos=$10;
 label=11;break;
 case 3: 
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=_luaL_checkinteger($12,2);
 $pos=$13;
 /** @type {number} */ var $14=$pos;
 /** @type {number} */ var $15=$e;
 /** @type {number} */ var $16=($14|0)>($15|0);
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $18=$pos;
 $e=$18;
 label=5;break;
 case 5: 
 /** @type {number} */ var $20=$e;
 $i=$20;
 label=6;break;
 case 6: 
 /** @type {number} */ var $22=$i;
 /** @type {number} */ var $23=$pos;
 /** @type {number} */ var $24=($22|0)>($23|0);
 if($24){label=7;break;}else{label=9;break;}
 case 7: 
 /** @type {number} */ var $26=$2;
 /** @type {number} */ var $27=$i;
 /** @type {number} */ var $28=((($27)-(1))|0);
 _lua_rawgeti($26,1,$28);
 /** @type {number} */ var $29=$2;
 /** @type {number} */ var $30=$i;
 _lua_rawseti($29,1,$30);
 label=8;break;
 case 8: 
 /** @type {number} */ var $32=$i;
 /** @type {number} */ var $33=((($32)-(1))|0);
 $i=$33;
 label=6;break;
 case 9: 
 label=11;break;
 case 10: 
 /** @type {number} */ var $36=$2;
 /** @type {number} */ var $37=_luaL_error($36,11824,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=$37;
 label=12;break;
 case 11: 
 /** @type {number} */ var $39=$2;
 /** @type {number} */ var $40=$pos;
 _lua_rawseti($39,1,$40);
 $1=0;
 label=12;break;
 case 12: 
 /** @type {number} */ var $42=$1;
 STACKTOP=sp;return $42;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _pack($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $n;
 /** @type {number} */ var $i;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_lua_gettop($2);
 $n=$3;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$n;
 _lua_createtable($4,$5,1);
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=$n;
 _lua_pushinteger($6,$7);
 /** @type {number} */ var $8=$1;
 _lua_setfield($8,-2,2616);
 /** @type {number} */ var $9=$n;
 /** @type {number} */ var $10=($9|0)>0;
 if($10){label=2;break;}else{label=7;break;}
 case 2: 
 /** @type {number} */ var $12=$1;
 _lua_pushvalue($12,1);
 /** @type {number} */ var $13=$1;
 _lua_rawseti($13,-2,1);
 /** @type {number} */ var $14=$1;
 _lua_replace($14,1);
 /** @type {number} */ var $15=$n;
 $i=$15;
 label=3;break;
 case 3: 
 /** @type {number} */ var $17=$i;
 /** @type {number} */ var $18=($17|0)>=2;
 if($18){label=4;break;}else{label=6;break;}
 case 4: 
 /** @type {number} */ var $20=$1;
 /** @type {number} */ var $21=$i;
 _lua_rawseti($20,1,$21);
 label=5;break;
 case 5: 
 /** @type {number} */ var $23=$i;
 /** @type {number} */ var $24=((($23)-(1))|0);
 $i=$24;
 label=3;break;
 case 6: 
 label=7;break;
 case 7: 
 STACKTOP=sp;return 1;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _unpack($L){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $i;
 /** @type {number} */ var $e;
 /** @type {number} */ var $n;
 $2=$L;
 /** @type {number} */ var $3=$2;
 _luaL_checktype($3,1,5);
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_luaL_optinteger($4,2,1);
 $i=$5;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=_lua_type($6,3);
 /** @type {number} */ var $8=($7|0)<=0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=_luaL_len($10,1);
 var $16=$11;label=4;break;
 case 3: 
 /** @type {number} */ var $13=$2;
 /** @type {number} */ var $14=_luaL_checkinteger($13,3);
 var $16=$14;label=4;break;
 case 4: 
 var $16;
 $e=$16;
 /** @type {number} */ var $17=$i;
 /** @type {number} */ var $18=$e;
 /** @type {number} */ var $19=($17|0)>($18|0);
 if($19){label=5;break;}else{label=6;break;}
 case 5: 
 $1=0;
 label=13;break;
 case 6: 
 /** @type {number} */ var $22=$e;
 /** @type {number} */ var $23=$i;
 /** @type {number} */ var $24=((($22)-($23))|0);
 /** @type {number} */ var $25=((($24)+(1))|0);
 $n=$25;
 /** @type {number} */ var $26=$n;
 /** @type {number} */ var $27=($26|0)<=0;
 if($27){label=8;break;}else{label=7;break;}
 case 7: 
 /** @type {number} */ var $29=$2;
 /** @type {number} */ var $30=$n;
 /** @type {number} */ var $31=_lua_checkstack($29,$30);
 /** @type {number} */ var $32=($31|0)!=0;
 if($32){label=9;break;}else{label=8;break;}
 case 8: 
 /** @type {number} */ var $34=$2;
 /** @type {number} */ var $35=_luaL_error($34,2848,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=$35;
 label=13;break;
 case 9: 
 /** @type {number} */ var $37=$2;
 /** @type {number} */ var $38=$i;
 _lua_rawgeti($37,1,$38);
 label=10;break;
 case 10: 
 /** @type {number} */ var $40=$i;
 /** @type {number} */ var $41=((($40)+(1))|0);
 $i=$41;
 /** @type {number} */ var $42=$e;
 /** @type {number} */ var $43=($40|0)<($42|0);
 if($43){label=11;break;}else{label=12;break;}
 case 11: 
 /** @type {number} */ var $45=$2;
 /** @type {number} */ var $46=$i;
 _lua_rawgeti($45,1,$46);
 label=10;break;
 case 12: 
 /** @type {number} */ var $48=$n;
 $1=$48;
 label=13;break;
 case 13: 
 /** @type {number} */ var $50=$1;
 STACKTOP=sp;return $50;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _tremove($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $e;
 /** @type {number} */ var $pos;
 $2=$L;
 /** @type {number} */ var $3=$2;
 _luaL_checktype($3,1,5);
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_luaL_len($4,1);
 $e=$5;
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=$e;
 /** @type {number} */ var $8=_luaL_optinteger($6,2,$7);
 $pos=$8;
 /** @type {number} */ var $9=$pos;
 /** @type {number} */ var $10=1<=($9|0);
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $12=$pos;
 /** @type {number} */ var $13=$e;
 /** @type {number} */ var $14=($12|0)<=($13|0);
 if($14){label=4;break;}else{label=3;break;}
 case 3: 
 $1=0;
 label=9;break;
 case 4: 
 /** @type {number} */ var $17=$2;
 /** @type {number} */ var $18=$pos;
 _lua_rawgeti($17,1,$18);
 label=5;break;
 case 5: 
 /** @type {number} */ var $20=$pos;
 /** @type {number} */ var $21=$e;
 /** @type {number} */ var $22=($20|0)<($21|0);
 if($22){label=6;break;}else{label=8;break;}
 case 6: 
 /** @type {number} */ var $24=$2;
 /** @type {number} */ var $25=$pos;
 /** @type {number} */ var $26=((($25)+(1))|0);
 _lua_rawgeti($24,1,$26);
 /** @type {number} */ var $27=$2;
 /** @type {number} */ var $28=$pos;
 _lua_rawseti($27,1,$28);
 label=7;break;
 case 7: 
 /** @type {number} */ var $30=$pos;
 /** @type {number} */ var $31=((($30)+(1))|0);
 $pos=$31;
 label=5;break;
 case 8: 
 /** @type {number} */ var $33=$2;
 _lua_pushnil($33);
 /** @type {number} */ var $34=$2;
 /** @type {number} */ var $35=$e;
 _lua_rawseti($34,1,$35);
 $1=1;
 label=9;break;
 case 9: 
 /** @type {number} */ var $37=$1;
 STACKTOP=sp;return $37;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _sort($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $n;
 $1=$L;
 /** @type {number} */ var $2=$1;
 _luaL_checktype($2,1,5);
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_luaL_len($3,1);
 $n=$4;
 /** @type {number} */ var $5=$1;
 _luaL_checkstack($5,40,12088);
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=_lua_type($6,2);
 /** @type {number} */ var $8=($7|0)<=0;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $10=$1;
 _luaL_checktype($10,2,6);
 label=3;break;
 case 3: 
 /** @type {number} */ var $12=$1;
 _lua_settop($12,2);
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=$n;
 _auxsort($13,1,$14);
 STACKTOP=sp;return 0;
 }
}
/**
 * @param {number} $L
 * @param {number} $b
 * @param {number} $i
 * @return {number}
 */
function _addfield($L,$b,$i){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$L;
 $2=$b;
 $3=$i;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$3;
 _lua_rawgeti($4,1,$5);
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=_lua_isstring($6,-1);
 /** @type {number} */ var $8=($7|0)!=0;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=_lua_type($12,-1);
 /** @type {number} */ var $14=_lua_typename($11,$13);
 /** @type {number} */ var $15=$3;
 /** @type {number} */ var $16=_luaL_error($10,11408,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$14,HEAP32[(((tempVarArgs)+(8))>>2)]=$15,tempVarArgs)); STACKTOP=tempVarArgs;
 label=3;break;
 case 3: 
 /** @type {number} */ var $18=$2;
 _luaL_addvalue($18);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $l
 * @param {number} $u
 * @return {number}
 */
function _auxsort($L,$l,$u){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $i;
 /** @type {number} */ var $j;
 $1=$L;
 $2=$l;
 $3=$u;
 label=2;break;
 case 2: 
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$3;
 /** @type {number} */ var $7=($5|0)<($6|0);
 if($7){label=3;break;}else{label=34;break;}
 case 3: 
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=$2;
 _lua_rawgeti($9,1,$10);
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=$3;
 _lua_rawgeti($11,1,$12);
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=_sort_comp($13,-1,-2);
 /** @type {number} */ var $15=($14|0)!=0;
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=$2;
 /** @type {number} */ var $19=$3;
 _set2($17,$18,$19);
 label=6;break;
 case 5: 
 /** @type {number} */ var $21=$1;
 _lua_settop($21,-3);
 label=6;break;
 case 6: 
 /** @type {number} */ var $23=$3;
 /** @type {number} */ var $24=$2;
 /** @type {number} */ var $25=((($23)-($24))|0);
 /** @type {number} */ var $26=($25|0)==1;
 if($26){label=7;break;}else{label=8;break;}
 case 7: 
 label=34;break;
 case 8: 
 /** @type {number} */ var $29=$2;
 /** @type {number} */ var $30=$3;
 /** @type {number} */ var $31=((($29)+($30))|0);
 /** @type {number} */ var $32=(((($31|0))/(2))&-1);
 $i=$32;
 /** @type {number} */ var $33=$1;
 /** @type {number} */ var $34=$i;
 _lua_rawgeti($33,1,$34);
 /** @type {number} */ var $35=$1;
 /** @type {number} */ var $36=$2;
 _lua_rawgeti($35,1,$36);
 /** @type {number} */ var $37=$1;
 /** @type {number} */ var $38=_sort_comp($37,-2,-1);
 /** @type {number} */ var $39=($38|0)!=0;
 if($39){label=9;break;}else{label=10;break;}
 case 9: 
 /** @type {number} */ var $41=$1;
 /** @type {number} */ var $42=$i;
 /** @type {number} */ var $43=$2;
 _set2($41,$42,$43);
 label=14;break;
 case 10: 
 /** @type {number} */ var $45=$1;
 _lua_settop($45,-2);
 /** @type {number} */ var $46=$1;
 /** @type {number} */ var $47=$3;
 _lua_rawgeti($46,1,$47);
 /** @type {number} */ var $48=$1;
 /** @type {number} */ var $49=_sort_comp($48,-1,-2);
 /** @type {number} */ var $50=($49|0)!=0;
 if($50){label=11;break;}else{label=12;break;}
 case 11: 
 /** @type {number} */ var $52=$1;
 /** @type {number} */ var $53=$i;
 /** @type {number} */ var $54=$3;
 _set2($52,$53,$54);
 label=13;break;
 case 12: 
 /** @type {number} */ var $56=$1;
 _lua_settop($56,-3);
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 /** @type {number} */ var $59=$3;
 /** @type {number} */ var $60=$2;
 /** @type {number} */ var $61=((($59)-($60))|0);
 /** @type {number} */ var $62=($61|0)==2;
 if($62){label=15;break;}else{label=16;break;}
 case 15: 
 label=34;break;
 case 16: 
 /** @type {number} */ var $65=$1;
 /** @type {number} */ var $66=$i;
 _lua_rawgeti($65,1,$66);
 /** @type {number} */ var $67=$1;
 _lua_pushvalue($67,-1);
 /** @type {number} */ var $68=$1;
 /** @type {number} */ var $69=$3;
 /** @type {number} */ var $70=((($69)-(1))|0);
 _lua_rawgeti($68,1,$70);
 /** @type {number} */ var $71=$1;
 /** @type {number} */ var $72=$i;
 /** @type {number} */ var $73=$3;
 /** @type {number} */ var $74=((($73)-(1))|0);
 _set2($71,$72,$74);
 /** @type {number} */ var $75=$2;
 $i=$75;
 /** @type {number} */ var $76=$3;
 /** @type {number} */ var $77=((($76)-(1))|0);
 $j=$77;
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 /** @type {number} */ var $80=$1;
 /** @type {number} */ var $81=$i;
 /** @type {number} */ var $82=((($81)+(1))|0);
 $i=$82;
 _lua_rawgeti($80,1,$82);
 /** @type {number} */ var $83=$1;
 /** @type {number} */ var $84=_sort_comp($83,-1,-2);
 /** @type {number} */ var $85=($84|0)!=0;
 if($85){label=19;break;}else{label=22;break;}
 case 19: 
 /** @type {number} */ var $87=$i;
 /** @type {number} */ var $88=$3;
 /** @type {number} */ var $89=($87|0)>=($88|0);
 if($89){label=20;break;}else{label=21;break;}
 case 20: 
 /** @type {number} */ var $91=$1;
 /** @type {number} */ var $92=_luaL_error($91,3176,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=21;break;
 case 21: 
 /** @type {number} */ var $94=$1;
 _lua_settop($94,-2);
 label=18;break;
 case 22: 
 label=23;break;
 case 23: 
 /** @type {number} */ var $97=$1;
 /** @type {number} */ var $98=$j;
 /** @type {number} */ var $99=((($98)-(1))|0);
 $j=$99;
 _lua_rawgeti($97,1,$99);
 /** @type {number} */ var $100=$1;
 /** @type {number} */ var $101=_sort_comp($100,-3,-1);
 /** @type {number} */ var $102=($101|0)!=0;
 if($102){label=24;break;}else{label=27;break;}
 case 24: 
 /** @type {number} */ var $104=$j;
 /** @type {number} */ var $105=$2;
 /** @type {number} */ var $106=($104|0)<=($105|0);
 if($106){label=25;break;}else{label=26;break;}
 case 25: 
 /** @type {number} */ var $108=$1;
 /** @type {number} */ var $109=_luaL_error($108,3176,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=26;break;
 case 26: 
 /** @type {number} */ var $111=$1;
 _lua_settop($111,-2);
 label=23;break;
 case 27: 
 /** @type {number} */ var $113=$j;
 /** @type {number} */ var $114=$i;
 /** @type {number} */ var $115=($113|0)<($114|0);
 if($115){label=28;break;}else{label=29;break;}
 case 28: 
 /** @type {number} */ var $117=$1;
 _lua_settop($117,-4);
 label=30;break;
 case 29: 
 /** @type {number} */ var $119=$1;
 /** @type {number} */ var $120=$i;
 /** @type {number} */ var $121=$j;
 _set2($119,$120,$121);
 label=17;break;
 case 30: 
 /** @type {number} */ var $123=$1;
 /** @type {number} */ var $124=$3;
 /** @type {number} */ var $125=((($124)-(1))|0);
 _lua_rawgeti($123,1,$125);
 /** @type {number} */ var $126=$1;
 /** @type {number} */ var $127=$i;
 _lua_rawgeti($126,1,$127);
 /** @type {number} */ var $128=$1;
 /** @type {number} */ var $129=$3;
 /** @type {number} */ var $130=((($129)-(1))|0);
 /** @type {number} */ var $131=$i;
 _set2($128,$130,$131);
 /** @type {number} */ var $132=$i;
 /** @type {number} */ var $133=$2;
 /** @type {number} */ var $134=((($132)-($133))|0);
 /** @type {number} */ var $135=$3;
 /** @type {number} */ var $136=$i;
 /** @type {number} */ var $137=((($135)-($136))|0);
 /** @type {number} */ var $138=($134|0)<($137|0);
 if($138){label=31;break;}else{label=32;break;}
 case 31: 
 /** @type {number} */ var $140=$2;
 $j=$140;
 /** @type {number} */ var $141=$i;
 /** @type {number} */ var $142=((($141)-(1))|0);
 $i=$142;
 /** @type {number} */ var $143=$i;
 /** @type {number} */ var $144=((($143)+(2))|0);
 $2=$144;
 label=33;break;
 case 32: 
 /** @type {number} */ var $146=$i;
 /** @type {number} */ var $147=((($146)+(1))|0);
 $j=$147;
 /** @type {number} */ var $148=$3;
 $i=$148;
 /** @type {number} */ var $149=$j;
 /** @type {number} */ var $150=((($149)-(2))|0);
 $3=$150;
 label=33;break;
 case 33: 
 /** @type {number} */ var $152=$1;
 /** @type {number} */ var $153=$j;
 /** @type {number} */ var $154=$i;
 _auxsort($152,$153,$154);
 label=2;break;
 case 34: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $a
 * @param {number} $b
 * @return {number}
 */
function _sort_comp($L,$a,$b){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $res;
 $2=$L;
 $3=$a;
 $4=$b;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=_lua_type($5,2);
 /** @type {number} */ var $7=($6|0)==0;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $9=$2;
 _lua_pushvalue($9,2);
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=$3;
 /** @type {number} */ var $12=((($11)-(1))|0);
 _lua_pushvalue($10,$12);
 /** @type {number} */ var $13=$2;
 /** @type {number} */ var $14=$4;
 /** @type {number} */ var $15=((($14)-(2))|0);
 _lua_pushvalue($13,$15);
 /** @type {number} */ var $16=$2;
 _lua_callk($16,2,1,0,0);
 /** @type {number} */ var $17=$2;
 /** @type {number} */ var $18=_lua_toboolean($17,-1);
 $res=$18;
 /** @type {number} */ var $19=$2;
 _lua_settop($19,-2);
 /** @type {number} */ var $20=$res;
 $1=$20;
 label=4;break;
 case 3: 
 /** @type {number} */ var $22=$2;
 /** @type {number} */ var $23=$3;
 /** @type {number} */ var $24=$4;
 /** @type {number} */ var $25=_lua_compare($22,$23,$24,1);
 $1=$25;
 label=4;break;
 case 4: 
 /** @type {number} */ var $27=$1;
 STACKTOP=sp;return $27;
 }
}
/**
 * @param {number} $L
 * @param {number} $i
 * @param {number} $j
 * @return {number}
 */
function _set2($L,$i,$j){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$L;
 $2=$i;
 $3=$j;
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$2;
 _lua_rawseti($4,1,$5);
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=$3;
 _lua_rawseti($6,1,$7);
 STACKTOP=sp;return;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaopen_package($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_getsubtable($2,-1001000,3496);
 /** @type {number} */ var $4=$1;
 _lua_createtable($4,0,1);
 /** @type {number} */ var $5=$1;
 _lua_pushcclosure($5,14,0);
 /** @type {number} */ var $6=$1;
 _lua_setfield($6,-2,10136);
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=_lua_setmetatable($7,-2);
 /** @type {number} */ var $9=$1;
 _lua_createtable($9,0,2);
 /** @type {number} */ var $10=$1;
 _luaL_setfuncs($10,400,0);
 /** @type {number} */ var $11=$1;
 _createsearcherstable($11);
 /** @type {number} */ var $12=$1;
 _lua_setfield($12,-2,7864);
 /** @type {number} */ var $13=$1;
 _setpath($13,6168,4856,3992,3536);
 /** @type {number} */ var $14=$1;
 _setpath($14,3168,2832,2600,11752);
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=_lua_pushlstring($15,11392,10);
 /** @type {number} */ var $17=$1;
 _lua_setfield($17,-2,11096);
 /** @type {number} */ var $18=$1;
 /** @type {number} */ var $19=_luaL_getsubtable($18,-1001000,10840);
 /** @type {number} */ var $20=$1;
 _lua_setfield($20,-2,10648);
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=_luaL_getsubtable($21,-1001000,10472);
 /** @type {number} */ var $23=$1;
 _lua_setfield($23,-2,10192);
 /** @type {number} */ var $24=$1;
 _lua_rawgeti($24,-1001000,2);
 /** @type {number} */ var $25=$1;
 _lua_pushvalue($25,-2);
 /** @type {number} */ var $26=$1;
 _luaL_setfuncs($26,1744,1);
 /** @type {number} */ var $27=$1;
 _lua_settop($27,-2);
 STACKTOP=sp;return 1;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _ll_loadlib($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $path;
 /** @type {number} */ var $init;
 /** @type {number} */ var $stat;
 $2=$L;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=_luaL_checklstring($3,1,0);
 $path=$4;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=_luaL_checklstring($5,2,0);
 $init=$6;
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=$path;
 /** @type {number} */ var $9=$init;
 /** @type {number} */ var $10=_ll_loadfunc($7,$8,$9);
 $stat=$10;
 /** @type {number} */ var $11=$stat;
 /** @type {number} */ var $12=($11|0)==0;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 $1=1;
 label=4;break;
 case 3: 
 /** @type {number} */ var $15=$2;
 _lua_pushnil($15);
 /** @type {number} */ var $16=$2;
 _lua_insert($16,-2);
 /** @type {number} */ var $17=$2;
 /** @type {number} */ var $18=$stat;
 /** @type {number} */ var $19=($18|0)==1;
 /** @type {number} */ var $20=($19?5680:5520);
 /** @type {number} */ var $21=_lua_pushstring($17,$20);
 $1=3;
 label=4;break;
 case 4: 
 /** @type {number} */ var $23=$1;
 STACKTOP=sp;return $23;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _ll_searchpath($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $f;
 $2=$L;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=_luaL_checklstring($4,1,0);
 /** @type {number} */ var $6=$2;
 /** @type {number} */ var $7=_luaL_checklstring($6,2,0);
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=_luaL_optlstring($8,3,7680,0);
 /** @type {number} */ var $10=$2;
 /** @type {number} */ var $11=_luaL_optlstring($10,4,8344,0);
 /** @type {number} */ var $12=_searchpath($3,$5,$7,$9,$11);
 $f=$12;
 /** @type {number} */ var $13=$f;
 /** @type {number} */ var $14=($13|0)!=0;
 if($14){label=2;break;}else{label=3;break;}
 case 2: 
 $1=1;
 label=4;break;
 case 3: 
 /** @type {number} */ var $17=$2;
 _lua_pushnil($17);
 /** @type {number} */ var $18=$2;
 _lua_insert($18,-2);
 $1=2;
 label=4;break;
 case 4: 
 /** @type {number} */ var $20=$1;
 STACKTOP=sp;return $20;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _ll_require($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $name;
 $2=$L;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=_luaL_checklstring($3,1,0);
 $name=$4;
 /** @type {number} */ var $5=$2;
 _lua_settop($5,1);
 /** @type {number} */ var $6=$2;
 _lua_getfield($6,-1001000,10840);
 /** @type {number} */ var $7=$2;
 /** @type {number} */ var $8=$name;
 _lua_getfield($7,2,$8);
 /** @type {number} */ var $9=$2;
 /** @type {number} */ var $10=_lua_toboolean($9,-1);
 /** @type {number} */ var $11=($10|0)!=0;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 $1=1;
 label=8;break;
 case 3: 
 /** @type {number} */ var $14=$2;
 _lua_settop($14,-2);
 /** @type {number} */ var $15=$2;
 /** @type {number} */ var $16=$name;
 _findloader($15,$16);
 /** @type {number} */ var $17=$2;
 /** @type {number} */ var $18=$name;
 /** @type {number} */ var $19=_lua_pushstring($17,$18);
 /** @type {number} */ var $20=$2;
 _lua_insert($20,-2);
 /** @type {number} */ var $21=$2;
 _lua_callk($21,2,1,0,0);
 /** @type {number} */ var $22=$2;
 /** @type {number} */ var $23=_lua_type($22,-1);
 /** @type {number} */ var $24=($23|0)==0;
 if($24){label=5;break;}else{label=4;break;}
 case 4: 
 /** @type {number} */ var $26=$2;
 /** @type {number} */ var $27=$name;
 _lua_setfield($26,2,$27);
 label=5;break;
 case 5: 
 /** @type {number} */ var $29=$2;
 /** @type {number} */ var $30=$name;
 _lua_getfield($29,2,$30);
 /** @type {number} */ var $31=$2;
 /** @type {number} */ var $32=_lua_type($31,-1);
 /** @type {number} */ var $33=($32|0)==0;
 if($33){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $35=$2;
 _lua_pushboolean($35,1);
 /** @type {number} */ var $36=$2;
 _lua_pushvalue($36,-1);
 /** @type {number} */ var $37=$2;
 /** @type {number} */ var $38=$name;
 _lua_setfield($37,2,$38);
 label=7;break;
 case 7: 
 $1=1;
 label=8;break;
 case 8: 
 /** @type {number} */ var $41=$1;
 STACKTOP=sp;return $41;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _searcher_preload($L){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $name;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_checklstring($2,1,0);
 $name=$3;
 /** @type {number} */ var $4=$1;
 _lua_getfield($4,-1001000,10472);
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=$name;
 _lua_getfield($5,-1,$6);
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=_lua_type($7,-1);
 /** @type {number} */ var $9=($8|0)==0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=$name;
 /** @type {number} */ var $13=_lua_pushfstring($11,6064,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$12,tempVarArgs)); STACKTOP=tempVarArgs;
 label=3;break;
 case 3: 
 STACKTOP=sp;return 1;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _searcher_Lua($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $filename;
 /** @type {number} */ var $name;
 $2=$L;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=_luaL_checklstring($3,1,0);
 $name=$4;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$name;
 /** @type {number} */ var $7=_findfile($5,$6,6168,8344);
 $filename=$7;
 /** @type {number} */ var $8=$filename;
 /** @type {number} */ var $9=($8|0)==0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 $1=1;
 label=4;break;
 case 3: 
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=$2;
 /** @type {number} */ var $14=$filename;
 /** @type {number} */ var $15=_luaL_loadfilex($13,$14,0);
 /** @type {number} */ var $16=($15|0)==0;
 /** @type {number} */ var $17=($16&1);
 /** @type {number} */ var $18=$filename;
 /** @type {number} */ var $19=_checkload($12,$17,$18);
 $1=$19;
 label=4;break;
 case 4: 
 /** @type {number} */ var $21=$1;
 STACKTOP=sp;return $21;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _searcher_C($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $name;
 /** @type {number} */ var $filename;
 $2=$L;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=_luaL_checklstring($3,1,0);
 $name=$4;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$name;
 /** @type {number} */ var $7=_findfile($5,$6,3168,8344);
 $filename=$7;
 /** @type {number} */ var $8=$filename;
 /** @type {number} */ var $9=($8|0)==0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 $1=1;
 label=4;break;
 case 3: 
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=$2;
 /** @type {number} */ var $14=$filename;
 /** @type {number} */ var $15=$name;
 /** @type {number} */ var $16=_loadfunc($13,$14,$15);
 /** @type {number} */ var $17=($16|0)==0;
 /** @type {number} */ var $18=($17&1);
 /** @type {number} */ var $19=$filename;
 /** @type {number} */ var $20=_checkload($12,$18,$19);
 $1=$20;
 label=4;break;
 case 4: 
 /** @type {number} */ var $22=$1;
 STACKTOP=sp;return $22;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _searcher_Croot($L){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $filename;
 /** @type {number} */ var $name;
 /** @type {number} */ var $p;
 /** @type {number} */ var $stat;
 $2=$L;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=_luaL_checklstring($3,1,0);
 $name=$4;
 /** @type {number} */ var $5=$name;
 /** @type {number} */ var $6=_strchr($5,46);
 $p=$6;
 /** @type {number} */ var $7=$p;
 /** @type {number} */ var $8=($7|0)==0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=10;break;
 case 3: 
 /** @type {number} */ var $11=$2;
 /** @type {number} */ var $12=$name;
 /** @type {number} */ var $13=$p;
 /** @type {number} */ var $14=$name;
 /** @type {number} */ var $15=$13;
 /** @type {number} */ var $16=$14;
 /** @type {number} */ var $17=((($15)-($16))|0);
 /** @type {number} */ var $18=_lua_pushlstring($11,$12,$17);
 /** @type {number} */ var $19=$2;
 /** @type {number} */ var $20=$2;
 /** @type {number} */ var $21=_lua_tolstring($20,-1,0);
 /** @type {number} */ var $22=_findfile($19,$21,3168,8344);
 $filename=$22;
 /** @type {number} */ var $23=$filename;
 /** @type {number} */ var $24=($23|0)==0;
 if($24){label=4;break;}else{label=5;break;}
 case 4: 
 $1=1;
 label=10;break;
 case 5: 
 /** @type {number} */ var $27=$2;
 /** @type {number} */ var $28=$filename;
 /** @type {number} */ var $29=$name;
 /** @type {number} */ var $30=_loadfunc($27,$28,$29);
 $stat=$30;
 /** @type {number} */ var $31=($30|0)!=0;
 if($31){label=6;break;}else{label=9;break;}
 case 6: 
 /** @type {number} */ var $33=$stat;
 /** @type {number} */ var $34=($33|0)!=2;
 if($34){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $36=$2;
 /** @type {number} */ var $37=$filename;
 /** @type {number} */ var $38=_checkload($36,0,$37);
 $1=$38;
 label=10;break;
 case 8: 
 /** @type {number} */ var $40=$2;
 /** @type {number} */ var $41=$name;
 /** @type {number} */ var $42=$filename;
 /** @type {number} */ var $43=_lua_pushfstring($40,8128,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$41,HEAP32[(((tempVarArgs)+(8))>>2)]=$42,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=1;
 label=10;break;
 case 9: 
 /** @type {number} */ var $45=$2;
 /** @type {number} */ var $46=$filename;
 /** @type {number} */ var $47=_lua_pushstring($45,$46);
 $1=2;
 label=10;break;
 case 10: 
 /** @type {number} */ var $49=$1;
 STACKTOP=sp;return $49;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _gctm($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $n;
 $1=$L;
 /** @type {number} */ var $2=$1;
 /** @type {number} */ var $3=_luaL_len($2,1);
 $n=$3;
 label=2;break;
 case 2: 
 /** @type {number} */ var $5=$n;
 /** @type {number} */ var $6=($5|0)>=1;
 if($6){label=3;break;}else{label=5;break;}
 case 3: 
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=$n;
 _lua_rawgeti($8,1,$9);
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=_lua_touserdata($10,-1);
 _ll_unloadlib($11);
 /** @type {number} */ var $12=$1;
 _lua_settop($12,-2);
 label=4;break;
 case 4: 
 /** @type {number} */ var $14=$n;
 /** @type {number} */ var $15=((($14)-(1))|0);
 $n=$15;
 label=2;break;
 case 5: 
 STACKTOP=sp;return 0;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _createsearcherstable($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $i;
 $1=$L;
 /** @type {number} */ var $2=$1;
 _lua_createtable($2,4,0);
 $i=0;
 label=2;break;
 case 2: 
 /** @type {number} */ var $4=$i;
 /** @type {number} */ var $5=((2192+($4<<2))|0);
 /** @type {number} */ var $6=HEAP32[(($5)>>2)];
 /** @type {number} */ var $7=($6|0)!=0;
 if($7){label=3;break;}else{label=5;break;}
 case 3: 
 /** @type {number} */ var $9=$1;
 _lua_pushvalue($9,-2);
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=$i;
 /** @type {number} */ var $12=((2192+($11<<2))|0);
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 _lua_pushcclosure($10,$13,1);
 /** @type {number} */ var $14=$1;
 /** @type {number} */ var $15=$i;
 /** @type {number} */ var $16=((($15)+(1))|0);
 _lua_rawseti($14,-2,$16);
 label=4;break;
 case 4: 
 /** @type {number} */ var $18=$i;
 /** @type {number} */ var $19=((($18)+(1))|0);
 $i=$19;
 label=2;break;
 case 5: 
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $fieldname
 * @param {number} $envname1
 * @param {number} $envname2
 * @param {number} $def
 * @return {number}
 */
function _setpath($L,$fieldname,$envname1,$envname2,$def){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 /** @type {number} */ var $path;
 $1=$L;
 $2=$fieldname;
 $3=$envname1;
 $4=$envname2;
 $5=$def;
 /** @type {number} */ var $6=$3;
 /** @type {number} */ var $7=_getenv($6);
 $path=$7;
 /** @type {number} */ var $8=$path;
 /** @type {number} */ var $9=($8|0)==0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $11=$4;
 /** @type {number} */ var $12=_getenv($11);
 $path=$12;
 label=3;break;
 case 3: 
 /** @type {number} */ var $14=$path;
 /** @type {number} */ var $15=($14|0)==0;
 if($15){label=5;break;}else{label=4;break;}
 case 4: 
 /** @type {number} */ var $17=$1;
 /** @type {number} */ var $18=_noenv($17);
 /** @type {number} */ var $19=($18|0)!=0;
 if($19){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $21=$1;
 /** @type {number} */ var $22=$5;
 /** @type {number} */ var $23=_lua_pushstring($21,$22);
 label=7;break;
 case 6: 
 /** @type {number} */ var $25=$1;
 /** @type {number} */ var $26=$path;
 /** @type {number} */ var $27=_luaL_gsub($25,$26,9280,9080);
 $path=$27;
 /** @type {number} */ var $28=$1;
 /** @type {number} */ var $29=$path;
 /** @type {number} */ var $30=$5;
 /** @type {number} */ var $31=_luaL_gsub($28,$29,8792,$30);
 /** @type {number} */ var $32=$1;
 _lua_remove($32,-2);
 label=7;break;
 case 7: 
 /** @type {number} */ var $34=$1;
 /** @type {number} */ var $35=$2;
 _lua_setfield($34,-2,$35);
 STACKTOP=sp;return;
 }
}
/**
 * @param {number} $L
 * @param {number} $path
 * @param {number} $sym
 * @return {number}
 */
function _ll_loadfunc($L,$path,$sym){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $reg;
 /** @type {number} */ var $f;
 $2=$L;
 $3=$path;
 $4=$sym;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$3;
 /** @type {number} */ var $7=_ll_checkclib($5,$6);
 $reg=$7;
 /** @type {number} */ var $8=$reg;
 /** @type {number} */ var $9=($8|0)==0;
 if($9){label=2;break;}else{label=5;break;}
 case 2: 
 /** @type {number} */ var $11=$2;
 /** @type {number} */ var $12=$3;
 /** @type {number} */ var $13=$4;
 /** @type {number} */ var $14=HEAP8[($13)];
 /** @type {number} */ var $15=(($14<<24)>>24);
 /** @type {number} */ var $16=($15|0)==42;
 /** @type {number} */ var $17=($16&1);
 /** @type {number} */ var $18=_ll_load($11,$12,$17);
 $reg=$18;
 /** @type {number} */ var $19=$reg;
 /** @type {number} */ var $20=($19|0)==0;
 if($20){label=3;break;}else{label=4;break;}
 case 3: 
 $1=1;
 label=10;break;
 case 4: 
 /** @type {number} */ var $23=$2;
 /** @type {number} */ var $24=$3;
 /** @type {number} */ var $25=$reg;
 _ll_addtoclib($23,$24,$25);
 label=5;break;
 case 5: 
 /** @type {number} */ var $27=$4;
 /** @type {number} */ var $28=HEAP8[($27)];
 /** @type {number} */ var $29=(($28<<24)>>24);
 /** @type {number} */ var $30=($29|0)==42;
 if($30){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $32=$2;
 _lua_pushboolean($32,1);
 $1=0;
 label=10;break;
 case 7: 
 /** @type {number} */ var $34=$2;
 /** @type {number} */ var $35=$reg;
 /** @type {number} */ var $36=$4;
 /** @type {number} */ var $37=_ll_sym($34,$35,$36);
 $f=$37;
 /** @type {number} */ var $38=$f;
 /** @type {number} */ var $39=($38|0)==0;
 if($39){label=8;break;}else{label=9;break;}
 case 8: 
 $1=2;
 label=10;break;
 case 9: 
 /** @type {number} */ var $42=$2;
 /** @type {number} */ var $43=$f;
 _lua_pushcclosure($42,$43,0);
 $1=0;
 label=10;break;
 case 10: 
 /** @type {number} */ var $45=$1;
 STACKTOP=sp;return $45;
 }
}
/**
 * @param {number} $L
 * @param {number} $name
 * @param {number} $path
 * @param {number} $sep
 * @param {number} $dirsep
 * @return {number}
 */
function _searchpath($L,$name,$path,$sep,$dirsep){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1040)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $5;
 /** @type {number} */ var $6;
 /** @type {number} */ var $msg=sp;
 /** @type {number} */ var $filename;
 $2=$L;
 $3=$name;
 $4=$path;
 $5=$sep;
 $6=$dirsep;
 /** @type {number} */ var $7=$2;
 _luaL_buffinit($7,$msg);
 /** @type {number} */ var $8=$5;
 /** @type {number} */ var $9=HEAP8[($8)];
 /** @type {number} */ var $10=(($9<<24)>>24);
 /** @type {number} */ var $11=($10|0)!=0;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $13=$2;
 /** @type {number} */ var $14=$3;
 /** @type {number} */ var $15=$5;
 /** @type {number} */ var $16=$6;
 /** @type {number} */ var $17=_luaL_gsub($13,$14,$15,$16);
 $3=$17;
 label=3;break;
 case 3: 
 label=4;break;
 case 4: 
 /** @type {number} */ var $20=$2;
 /** @type {number} */ var $21=$4;
 /** @type {number} */ var $22=_pushnexttemplate($20,$21);
 $4=$22;
 /** @type {number} */ var $23=($22|0)!=0;
 if($23){label=5;break;}else{label=8;break;}
 case 5: 
 /** @type {number} */ var $25=$2;
 /** @type {number} */ var $26=$2;
 /** @type {number} */ var $27=_lua_tolstring($26,-1,0);
 /** @type {number} */ var $28=$3;
 /** @type {number} */ var $29=_luaL_gsub($25,$27,6536,$28);
 $filename=$29;
 /** @type {number} */ var $30=$2;
 _lua_remove($30,-2);
 /** @type {number} */ var $31=$filename;
 /** @type {number} */ var $32=_readable($31);
 /** @type {number} */ var $33=($32|0)!=0;
 if($33){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $35=$filename;
 $1=$35;
 label=9;break;
 case 7: 
 /** @type {number} */ var $37=$2;
 /** @type {number} */ var $38=$filename;
 /** @type {number} */ var $39=_lua_pushfstring($37,6368,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$38,tempVarArgs)); STACKTOP=tempVarArgs;
 /** @type {number} */ var $40=$2;
 _lua_remove($40,-2);
 _luaL_addvalue($msg);
 label=4;break;
 case 8: 
 _luaL_pushresult($msg);
 $1=0;
 label=9;break;
 case 9: 
 /** @type {number} */ var $43=$1;
 STACKTOP=sp;return $43;
 }
}
/**
 * @param {number} $L
 * @param {number} $name
 * @return {number}
 */
function _findloader($L,$name){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1040)|0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $i;
 /** @type {number} */ var $msg=sp;
 $1=$L;
 $2=$name;
 /** @type {number} */ var $3=$1;
 _luaL_buffinit($3,$msg);
 /** @type {number} */ var $4=$1;
 _lua_getfield($4,-1001001,7864);
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=_lua_type($5,3);
 /** @type {number} */ var $7=($6|0)==5;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $9=$1;
 /** @type {number} */ var $10=_luaL_error($9,9744,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=3;break;
 case 3: 
 $i=1;
 label=4;break;
 case 4: 
 /** @type {number} */ var $13=$1;
 /** @type {number} */ var $14=$i;
 _lua_rawgeti($13,3,$14);
 /** @type {number} */ var $15=$1;
 /** @type {number} */ var $16=_lua_type($15,-1);
 /** @type {number} */ var $17=($16|0)==0;
 if($17){label=5;break;}else{label=6;break;}
 case 5: 
 /** @type {number} */ var $19=$1;
 _lua_settop($19,-2);
 _luaL_pushresult($msg);
 /** @type {number} */ var $20=$1;
 /** @type {number} */ var $21=$2;
 /** @type {number} */ var $22=$1;
 /** @type {number} */ var $23=_lua_tolstring($22,-1,0);
 /** @type {number} */ var $24=_luaL_error($20,9520,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$21,HEAP32[(((tempVarArgs)+(8))>>2)]=$23,tempVarArgs)); STACKTOP=tempVarArgs;
 label=6;break;
 case 6: 
 /** @type {number} */ var $26=$1;
 /** @type {number} */ var $27=$2;
 /** @type {number} */ var $28=_lua_pushstring($26,$27);
 /** @type {number} */ var $29=$1;
 _lua_callk($29,1,2,0,0);
 /** @type {number} */ var $30=$1;
 /** @type {number} */ var $31=_lua_type($30,-2);
 /** @type {number} */ var $32=($31|0)==6;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 STACKTOP=sp;return;
 case 8: 
 /** @type {number} */ var $35=$1;
 /** @type {number} */ var $36=_lua_isstring($35,-2);
 /** @type {number} */ var $37=($36|0)!=0;
 if($37){label=9;break;}else{label=10;break;}
 case 9: 
 /** @type {number} */ var $39=$1;
 _lua_settop($39,-2);
 _luaL_addvalue($msg);
 label=11;break;
 case 10: 
 /** @type {number} */ var $41=$1;
 _lua_settop($41,-3);
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 /** @type {number} */ var $45=$i;
 /** @type {number} */ var $46=((($45)+(1))|0);
 $i=$46;
 label=4;break;
 }
}
/**
 * @param {number} $L
 * @param {number} $name
 * @param {number} $pname
 * @param {number} $dirsep
 * @return {number}
 */
function _findfile($L,$name,$pname,$dirsep){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $path;
 $1=$L;
 $2=$name;
 $3=$pname;
 $4=$dirsep;
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=$3;
 _lua_getfield($5,-1001001,$6);
 /** @type {number} */ var $7=$1;
 /** @type {number} */ var $8=_lua_tolstring($7,-1,0);
 $path=$8;
 /** @type {number} */ var $9=$path;
 /** @type {number} */ var $10=($9|0)==0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $12=$1;
 /** @type {number} */ var $13=$3;
 /** @type {number} */ var $14=_luaL_error($12,6792,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$13,tempVarArgs)); STACKTOP=tempVarArgs;
 label=3;break;
 case 3: 
 /** @type {number} */ var $16=$1;
 /** @type {number} */ var $17=$2;
 /** @type {number} */ var $18=$path;
 /** @type {number} */ var $19=$4;
 /** @type {number} */ var $20=_searchpath($16,$17,$18,7680,$19);
 STACKTOP=sp;return $20;
 }
}
/**
 * @param {number} $L
 * @param {number} $stat
 * @param {number} $filename
 * @return {number}
 */
function _checkload($L,$stat,$filename){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 $2=$L;
 $3=$stat;
 $4=$filename;
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $8=$2;
 /** @type {number} */ var $9=$4;
 /** @type {number} */ var $10=_lua_pushstring($8,$9);
 $1=2;
 label=4;break;
 case 3: 
 /** @type {number} */ var $12=$2;
 /** @type {number} */ var $13=$2;
 /** @type {number} */ var $14=_lua_tolstring($13,1,0);
 /** @type {number} */ var $15=$4;
 /** @type {number} */ var $16=$2;
 /** @type {number} */ var $17=_lua_tolstring($16,-1,0);
 /** @type {number} */ var $18=_luaL_error($12,7904,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,HEAP32[((tempVarArgs)>>2)]=$14,HEAP32[(((tempVarArgs)+(8))>>2)]=$15,HEAP32[(((tempVarArgs)+(16))>>2)]=$17,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=$18;
 label=4;break;
 case 4: 
 /** @type {number} */ var $20=$1;
 STACKTOP=sp;return $20;
 }
}
/**
 * @param {number} $L
 * @param {number} $filename
 * @param {number} $modname
 * @return {number}
 */
function _loadfunc($L,$filename,$modname){
/** @type {number} */ var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $4;
 /** @type {number} */ var $funcname;
 /** @type {number} */ var $mark;
 /** @type {number} */ var $stat;
 $2=$L;
 $3=$filename;
 $4=$modname;
 /** @type {number} */ var $5=$2;
 /** @type {number} */ var $6=$4;
 /** @type {number} */ var $7=_luaL_gsub($5,$6,7680,7520);
 $4=$7;
 /** @type {number} */ var $8=$4;
 /** @type {number} */ var $9=HEAP8[(7320)];
 /** @type {number} */ var $10=(($9<<24)>>24);
 /** @type {number} */ var $11=_strchr($8,$10);
 $mark=$11;
 /** @type {number} */ var $12=$mark;
 /** @type {number} */ var $13=($12|0)!=0;
 if($13){label=2;break;}else{label=5;break;}
 case 2: 
 /** @type {number} */ var $15=$2;
 /** @type {number} */ var $16=$4;
 /** @type {number} */ var $17=$mark;
 /** @type {number} */ var $18=$4;
 /** @type {number} */ var $19=$17;
 /** @type {number} */ var $20=$18;
 /** @type {number} */ var $21=((($19)-($20))|0);
 /** @type {number} */ var $22=_lua_pushlstring($15,$16,$21);
 $funcname=$22;
 /** @type {number} */ var $23=$2;
 /** @type {number} */ var $24=$funcname;
 /** @type {number} */ var $25=_lua_pushfstring($23,7184,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$24,tempVarArgs)); STACKTOP=tempVarArgs;
 $funcname=$25;
 /** @type {number} */ var $26=$2;
 /** @type {number} */ var $27=$3;
 /** @type {number} */ var $28=$funcname;
 /** @type {number} */ var $29=_ll_loadfunc($26,$27,$28);
 $stat=$29;
 /** @type {number} */ var $30=$stat;
 /** @type {number} */ var $31=($30|0)!=2;
 if($31){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $33=$stat;
 $1=$33;
 label=6;break;
 case 4: 
 /** @type {number} */ var $35=$mark;
 /** @type {number} */ var $36=(($35+1)|0);
 $4=$36;
 label=5;break;
 case 5: 
 /** @type {number} */ var $38=$2;
 /** @type {number} */ var $39=$4;
 /** @type {number} */ var $40=_lua_pushfstring($38,7184,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$39,tempVarArgs)); STACKTOP=tempVarArgs;
 $funcname=$40;
 /** @type {number} */ var $41=$2;
 /** @type {number} */ var $42=$3;
 /** @type {number} */ var $43=$funcname;
 /** @type {number} */ var $44=_ll_loadfunc($41,$42,$43);
 $1=$44;
 label=6;break;
 case 6: 
 /** @type {number} */ var $46=$1;
 STACKTOP=sp;return $46;
 }
}
/**
 * @param {number} $lib
 * @return {number}
 */
function _ll_unloadlib($lib){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 $1=$lib;
 /** @type {number} */ var $2=$1;
 STACKTOP=sp;return;
}
/**
 * @param {number} $L
 * @return {number}
 */
function _noenv($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $b;
 $1=$L;
 /** @type {number} */ var $2=$1;
 _lua_getfield($2,-1001000,8560);
 /** @type {number} */ var $3=$1;
 /** @type {number} */ var $4=_lua_toboolean($3,-1);
 $b=$4;
 /** @type {number} */ var $5=$1;
 _lua_settop($5,-2);
 /** @type {number} */ var $6=$b;
 STACKTOP=sp;return $6;
}
/**
 * @param {number} $L
 * @param {number} $path
 * @return {number}
 */
function _ll_checkclib($L,$path){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $plib;
 $1=$L;
 $2=$path;
 /** @type {number} */ var $3=$1;
 _lua_getfield($3,-1001000,3496);
 /** @type {number} */ var $4=$1;
 /** @type {number} */ var $5=$2;
 _lua_getfield($4,-1,$5);
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=_lua_touserdata($6,-1);
 $plib=$7;
 /** @type {number} */ var $8=$1;
 _lua_settop($8,-3);
 /** @type {number} */ var $9=$plib;
 STACKTOP=sp;return $9;
}
/**
 * @param {number} $L
 * @param {number} $path
 * @param {number} $seeglb
 * @return {number}
 */
function _ll_load($L,$path,$seeglb){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$L;
 $2=$path;
 $3=$seeglb;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=_lua_pushlstring($6,6968,58);
 STACKTOP=sp;return 0;
}
/**
 * @param {number} $L
 * @param {number} $path
 * @param {number} $plib
 * @return {number}
 */
function _ll_addtoclib($L,$path,$plib){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$L;
 $2=$path;
 $3=$plib;
 /** @type {number} */ var $4=$1;
 _lua_getfield($4,-1001000,3496);
 /** @type {number} */ var $5=$1;
 /** @type {number} */ var $6=$3;
 _lua_pushlightuserdata($5,$6);
 /** @type {number} */ var $7=$1;
 _lua_pushvalue($7,-1);
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=$2;
 _lua_setfield($8,-3,$9);
 /** @type {number} */ var $10=$1;
 /** @type {number} */ var $11=$1;
 /** @type {number} */ var $12=_luaL_len($11,-2);
 /** @type {number} */ var $13=((($12)+(1))|0);
 _lua_rawseti($10,-2,$13);
 /** @type {number} */ var $14=$1;
 _lua_settop($14,-2);
 STACKTOP=sp;return;
}
/**
 * @param {number} $L
 * @param {number} $lib
 * @param {number} $sym
 * @return {number}
 */
function _ll_sym($L,$lib,$sym){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 $1=$L;
 $2=$lib;
 $3=$sym;
 /** @type {number} */ var $4=$2;
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=$1;
 /** @type {number} */ var $7=_lua_pushlstring($6,6968,58);
 STACKTOP=sp;return 0;
}
/**
 * @param {number} $L
 * @param {number} $path
 * @return {number}
 */
function _pushnexttemplate($L,$path){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $3;
 /** @type {number} */ var $l;
 $2=$L;
 $3=$path;
 label=2;break;
 case 2: 
 /** @type {number} */ var $5=$3;
 /** @type {number} */ var $6=HEAP8[($5)];
 /** @type {number} */ var $7=(($6<<24)>>24);
 /** @type {number} */ var $8=HEAP8[(6192)];
 /** @type {number} */ var $9=(($8<<24)>>24);
 /** @type {number} */ var $10=($7|0)==($9|0);
 if($10){label=3;break;}else{label=4;break;}
 case 3: 
 /** @type {number} */ var $12=$3;
 /** @type {number} */ var $13=(($12+1)|0);
 $3=$13;
 label=2;break;
 case 4: 
 /** @type {number} */ var $15=$3;
 /** @type {number} */ var $16=HEAP8[($15)];
 /** @type {number} */ var $17=(($16<<24)>>24);
 /** @type {number} */ var $18=($17|0)==0;
 if($18){label=5;break;}else{label=6;break;}
 case 5: 
 $1=0;
 label=9;break;
 case 6: 
 /** @type {number} */ var $21=$3;
 /** @type {number} */ var $22=HEAP8[(6192)];
 /** @type {number} */ var $23=(($22<<24)>>24);
 /** @type {number} */ var $24=_strchr($21,$23);
 $l=$24;
 /** @type {number} */ var $25=$l;
 /** @type {number} */ var $26=($25|0)==0;
 if($26){label=7;break;}else{label=8;break;}
 case 7: 
 /** @type {number} */ var $28=$3;
 /** @type {number} */ var $29=$3;
 /** @type {number} */ var $30=_strlen($29);
 /** @type {number} */ var $31=(($28+$30)|0);
 $l=$31;
 label=8;break;
 case 8: 
 /** @type {number} */ var $33=$2;
 /** @type {number} */ var $34=$3;
 /** @type {number} */ var $35=$l;
 /** @type {number} */ var $36=$3;
 /** @type {number} */ var $37=$35;
 /** @type {number} */ var $38=$36;
 /** @type {number} */ var $39=((($37)-($38))|0);
 /** @type {number} */ var $40=_lua_pushlstring($33,$34,$39);
 /** @type {number} */ var $41=$l;
 $1=$41;
 label=9;break;
 case 9: 
 /** @type {number} */ var $43=$1;
 STACKTOP=sp;return $43;
 }
}
/**
 * @param {number} $filename
 * @return {number}
 */
function _readable($filename){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $2;
 /** @type {number} */ var $f;
 $2=$filename;
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=_fopen($3,6280);
 $f=$4;
 /** @type {number} */ var $5=$f;
 /** @type {number} */ var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=4;break;
 case 3: 
 /** @type {number} */ var $9=$f;
 /** @type {number} */ var $10=_fclose($9);
 $1=1;
 label=4;break;
 case 4: 
 /** @type {number} */ var $12=$1;
 STACKTOP=sp;return $12;
 }
}
/**
 * @param {number} $L
 * @return {number}
 */
function _luaL_openlibs($L){
/** @type {number} */ var label=0;
 var sp=STACKTOP;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1;
 /** @type {number} */ var $lib;
 $1=$L;
 $lib=1656;
 label=2;break;
 case 2: 
 /** @type {number} */ var $3=$lib;
 /** @type {number} */ var $4=(($3+4)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=($5|0)!=0;
 if($6){label=3;break;}else{label=5;break;}
 case 3: 
 /** @type {number} */ var $8=$1;
 /** @type {number} */ var $9=$lib;
 /** @type {number} */ var $10=(($9)|0);
 /** @type {number} */ var $11=HEAP32[(($10)>>2)];
 /** @type {number} */ var $12=$lib;
 /** @type {number} */ var $13=(($12+4)|0);
 /** @type {number} */ var $14=HEAP32[(($13)>>2)];
 _luaL_requiref($8,$11,$14,1);
 /** @type {number} */ var $15=$1;
 _lua_settop($15,-2);
 label=4;break;
 case 4: 
 /** @type {number} */ var $17=$lib;
 /** @type {number} */ var $18=(($17+8)|0);
 $lib=$18;
 label=2;break;
 case 5: 
 /** @type {number} */ var $20=$1;
 /** @type {number} */ var $21=_luaL_getsubtable($20,-1001000,3264);
 $lib=12056;
 label=6;break;
 case 6: 
 /** @type {number} */ var $23=$lib;
 /** @type {number} */ var $24=(($23+4)|0);
 /** @type {number} */ var $25=HEAP32[(($24)>>2)];
 /** @type {number} */ var $26=($25|0)!=0;
 if($26){label=7;break;}else{label=9;break;}
 case 7: 
 /** @type {number} */ var $28=$1;
 /** @type {number} */ var $29=$lib;
 /** @type {number} */ var $30=(($29+4)|0);
 /** @type {number} */ var $31=HEAP32[(($30)>>2)];
 _lua_pushcclosure($28,$31,0);
 /** @type {number} */ var $32=$1;
 /** @type {number} */ var $33=$lib;
 /** @type {number} */ var $34=(($33)|0);
 /** @type {number} */ var $35=HEAP32[(($34)>>2)];
 _lua_setfield($32,-2,$35);
 label=8;break;
 case 8: 
 /** @type {number} */ var $37=$lib;
 /** @type {number} */ var $38=(($37+8)|0);
 $lib=$38;
 label=6;break;
 case 9: 
 /** @type {number} */ var $40=$1;
 _lua_settop($40,-2);
 STACKTOP=sp;return;
 }
}
Module["_luaL_openlibs"] = _luaL_openlibs;
/**
 * @param {number} $bytes
 * @return {number}
 */
function _malloc($bytes){
/** @type {number} */ var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1=($bytes>>>0)<245;
 if($1){label=2;break;}else{label=78;break;}
 case 2: 
 /** @type {number} */ var $3=($bytes>>>0)<11;
 if($3){var $8=16;label=4;break;}else{label=3;break;}
 case 3: 
 /** @type {number} */ var $5=((($bytes)+(11))|0);
 /** @type {number} */ var $6=$5&-8;
 var $8=$6;label=4;break;
 case 4: 
 var $8;
 /** @type {number} */ var $9=$8>>>3;
 /** @type {number} */ var $10=HEAP32[((12136)>>2)];
 /** @type {number} */ var $11=$10>>>($9>>>0);
 /** @type {number} */ var $12=$11&3;
 /** @type {number} */ var $13=($12|0)==0;
 if($13){label=12;break;}else{label=5;break;}
 case 5: 
 /** @type {number} */ var $15=$11&1;
 /** @type {number} */ var $16=$15^1;
 /** @type {number} */ var $17=((($16)+($9))|0);
 /** @type {number} */ var $18=$17<<1;
 /** @type {number} */ var $19=((12176+($18<<2))|0);
 /** @type {number} */ var $20=$19;
 /** @type {number} */ var $_sum11=((($18)+(2))|0);
 /** @type {number} */ var $21=((12176+($_sum11<<2))|0);
 /** @type {number} */ var $22=HEAP32[(($21)>>2)];
 /** @type {number} */ var $23=(($22+8)|0);
 /** @type {number} */ var $24=HEAP32[(($23)>>2)];
 /** @type {number} */ var $25=($20|0)==($24|0);
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 /** @type {number} */ var $27=1<<$17;
 /** @type {number} */ var $28=$27^-1;
 /** @type {number} */ var $29=$10&$28;
 HEAP32[((12136)>>2)]=$29;
 label=11;break;
 case 7: 
 /** @type {number} */ var $31=$24;
 /** @type {number} */ var $32=HEAP32[((12152)>>2)];
 /** @type {number} */ var $33=($31>>>0)<($32>>>0);
 if($33){label=10;break;}else{label=8;break;}
 case 8: 
 /** @type {number} */ var $35=(($24+12)|0);
 /** @type {number} */ var $36=HEAP32[(($35)>>2)];
 /** @type {number} */ var $37=($36|0)==($22|0);
 if($37){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($35)>>2)]=$20;
 HEAP32[(($21)>>2)]=$24;
 label=11;break;
 case 10: 
 _abort();
 case 11: 
 /** @type {number} */ var $40=$17<<3;
 /** @type {number} */ var $41=$40|3;
 /** @type {number} */ var $42=(($22+4)|0);
 HEAP32[(($42)>>2)]=$41;
 /** @type {number} */ var $43=$22;
 /** @type {number} */ var $_sum1314=$40|4;
 /** @type {number} */ var $44=(($43+$_sum1314)|0);
 /** @type {number} */ var $45=$44;
 /** @type {number} */ var $46=HEAP32[(($45)>>2)];
 /** @type {number} */ var $47=$46|1;
 HEAP32[(($45)>>2)]=$47;
 /** @type {number} */ var $48=$23;
 var $mem_0=$48;label=341;break;
 case 12: 
 /** @type {number} */ var $50=HEAP32[((12144)>>2)];
 /** @type {number} */ var $51=($8>>>0)>($50>>>0);
 if($51){label=13;break;}else{var $nb_0=$8;label=160;break;}
 case 13: 
 /** @type {number} */ var $53=($11|0)==0;
 if($53){label=27;break;}else{label=14;break;}
 case 14: 
 /** @type {number} */ var $55=$11<<$9;
 /** @type {number} */ var $56=2<<$9;
 /** @type {number} */ var $57=(((-$56))|0);
 /** @type {number} */ var $58=$56|$57;
 /** @type {number} */ var $59=$55&$58;
 /** @type {number} */ var $60=(((-$59))|0);
 /** @type {number} */ var $61=$59&$60;
 /** @type {number} */ var $62=((($61)-(1))|0);
 /** @type {number} */ var $63=$62>>>12;
 /** @type {number} */ var $64=$63&16;
 /** @type {number} */ var $65=$62>>>($64>>>0);
 /** @type {number} */ var $66=$65>>>5;
 /** @type {number} */ var $67=$66&8;
 /** @type {number} */ var $68=$67|$64;
 /** @type {number} */ var $69=$65>>>($67>>>0);
 /** @type {number} */ var $70=$69>>>2;
 /** @type {number} */ var $71=$70&4;
 /** @type {number} */ var $72=$68|$71;
 /** @type {number} */ var $73=$69>>>($71>>>0);
 /** @type {number} */ var $74=$73>>>1;
 /** @type {number} */ var $75=$74&2;
 /** @type {number} */ var $76=$72|$75;
 /** @type {number} */ var $77=$73>>>($75>>>0);
 /** @type {number} */ var $78=$77>>>1;
 /** @type {number} */ var $79=$78&1;
 /** @type {number} */ var $80=$76|$79;
 /** @type {number} */ var $81=$77>>>($79>>>0);
 /** @type {number} */ var $82=((($80)+($81))|0);
 /** @type {number} */ var $83=$82<<1;
 /** @type {number} */ var $84=((12176+($83<<2))|0);
 /** @type {number} */ var $85=$84;
 /** @type {number} */ var $_sum4=((($83)+(2))|0);
 /** @type {number} */ var $86=((12176+($_sum4<<2))|0);
 /** @type {number} */ var $87=HEAP32[(($86)>>2)];
 /** @type {number} */ var $88=(($87+8)|0);
 /** @type {number} */ var $89=HEAP32[(($88)>>2)];
 /** @type {number} */ var $90=($85|0)==($89|0);
 if($90){label=15;break;}else{label=16;break;}
 case 15: 
 /** @type {number} */ var $92=1<<$82;
 /** @type {number} */ var $93=$92^-1;
 /** @type {number} */ var $94=$10&$93;
 HEAP32[((12136)>>2)]=$94;
 label=20;break;
 case 16: 
 /** @type {number} */ var $96=$89;
 /** @type {number} */ var $97=HEAP32[((12152)>>2)];
 /** @type {number} */ var $98=($96>>>0)<($97>>>0);
 if($98){label=19;break;}else{label=17;break;}
 case 17: 
 /** @type {number} */ var $100=(($89+12)|0);
 /** @type {number} */ var $101=HEAP32[(($100)>>2)];
 /** @type {number} */ var $102=($101|0)==($87|0);
 if($102){label=18;break;}else{label=19;break;}
 case 18: 
 HEAP32[(($100)>>2)]=$85;
 HEAP32[(($86)>>2)]=$89;
 label=20;break;
 case 19: 
 _abort();
 case 20: 
 /** @type {number} */ var $105=$82<<3;
 /** @type {number} */ var $106=((($105)-($8))|0);
 /** @type {number} */ var $107=$8|3;
 /** @type {number} */ var $108=(($87+4)|0);
 HEAP32[(($108)>>2)]=$107;
 /** @type {number} */ var $109=$87;
 /** @type {number} */ var $110=(($109+$8)|0);
 /** @type {number} */ var $111=$110;
 /** @type {number} */ var $112=$106|1;
 /** @type {number} */ var $_sum67=$8|4;
 /** @type {number} */ var $113=(($109+$_sum67)|0);
 /** @type {number} */ var $114=$113;
 HEAP32[(($114)>>2)]=$112;
 /** @type {number} */ var $115=(($109+$105)|0);
 /** @type {number} */ var $116=$115;
 HEAP32[(($116)>>2)]=$106;
 /** @type {number} */ var $117=HEAP32[((12144)>>2)];
 /** @type {number} */ var $118=($117|0)==0;
 if($118){label=26;break;}else{label=21;break;}
 case 21: 
 /** @type {number} */ var $120=HEAP32[((12156)>>2)];
 /** @type {number} */ var $121=$117>>>3;
 /** @type {number} */ var $122=$121<<1;
 /** @type {number} */ var $123=((12176+($122<<2))|0);
 /** @type {number} */ var $124=$123;
 /** @type {number} */ var $125=HEAP32[((12136)>>2)];
 /** @type {number} */ var $126=1<<$121;
 /** @type {number} */ var $127=$125&$126;
 /** @type {number} */ var $128=($127|0)==0;
 if($128){label=22;break;}else{label=23;break;}
 case 22: 
 /** @type {number} */ var $130=$125|$126;
 HEAP32[((12136)>>2)]=$130;
 /** @type {number} */ var $_sum9_pre=((($122)+(2))|0);
 /** @type {number} */ var $_pre=((12176+($_sum9_pre<<2))|0);
 var $F4_0=$124;var $_pre_phi=$_pre;label=25;break;
 case 23: 
 /** @type {number} */ var $_sum10=((($122)+(2))|0);
 /** @type {number} */ var $132=((12176+($_sum10<<2))|0);
 /** @type {number} */ var $133=HEAP32[(($132)>>2)];
 /** @type {number} */ var $134=$133;
 /** @type {number} */ var $135=HEAP32[((12152)>>2)];
 /** @type {number} */ var $136=($134>>>0)<($135>>>0);
 if($136){label=24;break;}else{var $F4_0=$133;var $_pre_phi=$132;label=25;break;}
 case 24: 
 _abort();
 case 25: 
 var $_pre_phi;
 var $F4_0;
 HEAP32[(($_pre_phi)>>2)]=$120;
 /** @type {number} */ var $139=(($F4_0+12)|0);
 HEAP32[(($139)>>2)]=$120;
 /** @type {number} */ var $140=(($120+8)|0);
 HEAP32[(($140)>>2)]=$F4_0;
 /** @type {number} */ var $141=(($120+12)|0);
 HEAP32[(($141)>>2)]=$124;
 label=26;break;
 case 26: 
 HEAP32[((12144)>>2)]=$106;
 HEAP32[((12156)>>2)]=$111;
 /** @type {number} */ var $143=$88;
 var $mem_0=$143;label=341;break;
 case 27: 
 /** @type {number} */ var $145=HEAP32[((12140)>>2)];
 /** @type {number} */ var $146=($145|0)==0;
 if($146){var $nb_0=$8;label=160;break;}else{label=28;break;}
 case 28: 
 /** @type {number} */ var $148=(((-$145))|0);
 /** @type {number} */ var $149=$145&$148;
 /** @type {number} */ var $150=((($149)-(1))|0);
 /** @type {number} */ var $151=$150>>>12;
 /** @type {number} */ var $152=$151&16;
 /** @type {number} */ var $153=$150>>>($152>>>0);
 /** @type {number} */ var $154=$153>>>5;
 /** @type {number} */ var $155=$154&8;
 /** @type {number} */ var $156=$155|$152;
 /** @type {number} */ var $157=$153>>>($155>>>0);
 /** @type {number} */ var $158=$157>>>2;
 /** @type {number} */ var $159=$158&4;
 /** @type {number} */ var $160=$156|$159;
 /** @type {number} */ var $161=$157>>>($159>>>0);
 /** @type {number} */ var $162=$161>>>1;
 /** @type {number} */ var $163=$162&2;
 /** @type {number} */ var $164=$160|$163;
 /** @type {number} */ var $165=$161>>>($163>>>0);
 /** @type {number} */ var $166=$165>>>1;
 /** @type {number} */ var $167=$166&1;
 /** @type {number} */ var $168=$164|$167;
 /** @type {number} */ var $169=$165>>>($167>>>0);
 /** @type {number} */ var $170=((($168)+($169))|0);
 /** @type {number} */ var $171=((12440+($170<<2))|0);
 /** @type {number} */ var $172=HEAP32[(($171)>>2)];
 /** @type {number} */ var $173=(($172+4)|0);
 /** @type {number} */ var $174=HEAP32[(($173)>>2)];
 /** @type {number} */ var $175=$174&-8;
 /** @type {number} */ var $176=((($175)-($8))|0);
 var $t_0_i=$172;var $v_0_i=$172;var $rsize_0_i=$176;label=29;break;
 case 29: 
 var $rsize_0_i;
 var $v_0_i;
 var $t_0_i;
 /** @type {number} */ var $178=(($t_0_i+16)|0);
 /** @type {number} */ var $179=HEAP32[(($178)>>2)];
 /** @type {number} */ var $180=($179|0)==0;
 if($180){label=30;break;}else{var $185=$179;label=31;break;}
 case 30: 
 /** @type {number} */ var $182=(($t_0_i+20)|0);
 /** @type {number} */ var $183=HEAP32[(($182)>>2)];
 /** @type {number} */ var $184=($183|0)==0;
 if($184){label=32;break;}else{var $185=$183;label=31;break;}
 case 31: 
 var $185;
 /** @type {number} */ var $186=(($185+4)|0);
 /** @type {number} */ var $187=HEAP32[(($186)>>2)];
 /** @type {number} */ var $188=$187&-8;
 /** @type {number} */ var $189=((($188)-($8))|0);
 /** @type {number} */ var $190=($189>>>0)<($rsize_0_i>>>0);
 /** @type {number} */ var $_rsize_0_i=($190?$189:$rsize_0_i);
 /** @type {number} */ var $_v_0_i=($190?$185:$v_0_i);
 var $t_0_i=$185;var $v_0_i=$_v_0_i;var $rsize_0_i=$_rsize_0_i;label=29;break;
 case 32: 
 /** @type {number} */ var $192=$v_0_i;
 /** @type {number} */ var $193=HEAP32[((12152)>>2)];
 /** @type {number} */ var $194=($192>>>0)<($193>>>0);
 if($194){label=76;break;}else{label=33;break;}
 case 33: 
 /** @type {number} */ var $196=(($192+$8)|0);
 /** @type {number} */ var $197=$196;
 /** @type {number} */ var $198=($192>>>0)<($196>>>0);
 if($198){label=34;break;}else{label=76;break;}
 case 34: 
 /** @type {number} */ var $200=(($v_0_i+24)|0);
 /** @type {number} */ var $201=HEAP32[(($200)>>2)];
 /** @type {number} */ var $202=(($v_0_i+12)|0);
 /** @type {number} */ var $203=HEAP32[(($202)>>2)];
 /** @type {number} */ var $204=($203|0)==($v_0_i|0);
 if($204){label=40;break;}else{label=35;break;}
 case 35: 
 /** @type {number} */ var $206=(($v_0_i+8)|0);
 /** @type {number} */ var $207=HEAP32[(($206)>>2)];
 /** @type {number} */ var $208=$207;
 /** @type {number} */ var $209=($208>>>0)<($193>>>0);
 if($209){label=39;break;}else{label=36;break;}
 case 36: 
 /** @type {number} */ var $211=(($207+12)|0);
 /** @type {number} */ var $212=HEAP32[(($211)>>2)];
 /** @type {number} */ var $213=($212|0)==($v_0_i|0);
 if($213){label=37;break;}else{label=39;break;}
 case 37: 
 /** @type {number} */ var $215=(($203+8)|0);
 /** @type {number} */ var $216=HEAP32[(($215)>>2)];
 /** @type {number} */ var $217=($216|0)==($v_0_i|0);
 if($217){label=38;break;}else{label=39;break;}
 case 38: 
 HEAP32[(($211)>>2)]=$203;
 HEAP32[(($215)>>2)]=$207;
 var $R_1_i=$203;label=47;break;
 case 39: 
 _abort();
 case 40: 
 /** @type {number} */ var $220=(($v_0_i+20)|0);
 /** @type {number} */ var $221=HEAP32[(($220)>>2)];
 /** @type {number} */ var $222=($221|0)==0;
 if($222){label=41;break;}else{var $R_0_i=$221;var $RP_0_i=$220;label=42;break;}
 case 41: 
 /** @type {number} */ var $224=(($v_0_i+16)|0);
 /** @type {number} */ var $225=HEAP32[(($224)>>2)];
 /** @type {number} */ var $226=($225|0)==0;
 if($226){var $R_1_i=0;label=47;break;}else{var $R_0_i=$225;var $RP_0_i=$224;label=42;break;}
 case 42: 
 var $RP_0_i;
 var $R_0_i;
 /** @type {number} */ var $227=(($R_0_i+20)|0);
 /** @type {number} */ var $228=HEAP32[(($227)>>2)];
 /** @type {number} */ var $229=($228|0)==0;
 if($229){label=43;break;}else{var $R_0_i=$228;var $RP_0_i=$227;label=42;break;}
 case 43: 
 /** @type {number} */ var $231=(($R_0_i+16)|0);
 /** @type {number} */ var $232=HEAP32[(($231)>>2)];
 /** @type {number} */ var $233=($232|0)==0;
 if($233){label=44;break;}else{var $R_0_i=$232;var $RP_0_i=$231;label=42;break;}
 case 44: 
 /** @type {number} */ var $235=$RP_0_i;
 /** @type {number} */ var $236=($235>>>0)<($193>>>0);
 if($236){label=46;break;}else{label=45;break;}
 case 45: 
 HEAP32[(($RP_0_i)>>2)]=0;
 var $R_1_i=$R_0_i;label=47;break;
 case 46: 
 _abort();
 case 47: 
 var $R_1_i;
 /** @type {number} */ var $240=($201|0)==0;
 if($240){label=67;break;}else{label=48;break;}
 case 48: 
 /** @type {number} */ var $242=(($v_0_i+28)|0);
 /** @type {number} */ var $243=HEAP32[(($242)>>2)];
 /** @type {number} */ var $244=((12440+($243<<2))|0);
 /** @type {number} */ var $245=HEAP32[(($244)>>2)];
 /** @type {number} */ var $246=($v_0_i|0)==($245|0);
 if($246){label=49;break;}else{label=51;break;}
 case 49: 
 HEAP32[(($244)>>2)]=$R_1_i;
 /** @type {number} */ var $cond_i=($R_1_i|0)==0;
 if($cond_i){label=50;break;}else{label=57;break;}
 case 50: 
 /** @type {number} */ var $248=HEAP32[(($242)>>2)];
 /** @type {number} */ var $249=1<<$248;
 /** @type {number} */ var $250=$249^-1;
 /** @type {number} */ var $251=HEAP32[((12140)>>2)];
 /** @type {number} */ var $252=$251&$250;
 HEAP32[((12140)>>2)]=$252;
 label=67;break;
 case 51: 
 /** @type {number} */ var $254=$201;
 /** @type {number} */ var $255=HEAP32[((12152)>>2)];
 /** @type {number} */ var $256=($254>>>0)<($255>>>0);
 if($256){label=55;break;}else{label=52;break;}
 case 52: 
 /** @type {number} */ var $258=(($201+16)|0);
 /** @type {number} */ var $259=HEAP32[(($258)>>2)];
 /** @type {number} */ var $260=($259|0)==($v_0_i|0);
 if($260){label=53;break;}else{label=54;break;}
 case 53: 
 HEAP32[(($258)>>2)]=$R_1_i;
 label=56;break;
 case 54: 
 /** @type {number} */ var $263=(($201+20)|0);
 HEAP32[(($263)>>2)]=$R_1_i;
 label=56;break;
 case 55: 
 _abort();
 case 56: 
 /** @type {number} */ var $266=($R_1_i|0)==0;
 if($266){label=67;break;}else{label=57;break;}
 case 57: 
 /** @type {number} */ var $268=$R_1_i;
 /** @type {number} */ var $269=HEAP32[((12152)>>2)];
 /** @type {number} */ var $270=($268>>>0)<($269>>>0);
 if($270){label=66;break;}else{label=58;break;}
 case 58: 
 /** @type {number} */ var $272=(($R_1_i+24)|0);
 HEAP32[(($272)>>2)]=$201;
 /** @type {number} */ var $273=(($v_0_i+16)|0);
 /** @type {number} */ var $274=HEAP32[(($273)>>2)];
 /** @type {number} */ var $275=($274|0)==0;
 if($275){label=62;break;}else{label=59;break;}
 case 59: 
 /** @type {number} */ var $277=$274;
 /** @type {number} */ var $278=HEAP32[((12152)>>2)];
 /** @type {number} */ var $279=($277>>>0)<($278>>>0);
 if($279){label=61;break;}else{label=60;break;}
 case 60: 
 /** @type {number} */ var $281=(($R_1_i+16)|0);
 HEAP32[(($281)>>2)]=$274;
 /** @type {number} */ var $282=(($274+24)|0);
 HEAP32[(($282)>>2)]=$R_1_i;
 label=62;break;
 case 61: 
 _abort();
 case 62: 
 /** @type {number} */ var $285=(($v_0_i+20)|0);
 /** @type {number} */ var $286=HEAP32[(($285)>>2)];
 /** @type {number} */ var $287=($286|0)==0;
 if($287){label=67;break;}else{label=63;break;}
 case 63: 
 /** @type {number} */ var $289=$286;
 /** @type {number} */ var $290=HEAP32[((12152)>>2)];
 /** @type {number} */ var $291=($289>>>0)<($290>>>0);
 if($291){label=65;break;}else{label=64;break;}
 case 64: 
 /** @type {number} */ var $293=(($R_1_i+20)|0);
 HEAP32[(($293)>>2)]=$286;
 /** @type {number} */ var $294=(($286+24)|0);
 HEAP32[(($294)>>2)]=$R_1_i;
 label=67;break;
 case 65: 
 _abort();
 case 66: 
 _abort();
 case 67: 
 /** @type {number} */ var $298=($rsize_0_i>>>0)<16;
 if($298){label=68;break;}else{label=69;break;}
 case 68: 
 /** @type {number} */ var $300=((($rsize_0_i)+($8))|0);
 /** @type {number} */ var $301=$300|3;
 /** @type {number} */ var $302=(($v_0_i+4)|0);
 HEAP32[(($302)>>2)]=$301;
 /** @type {number} */ var $_sum4_i=((($300)+(4))|0);
 /** @type {number} */ var $303=(($192+$_sum4_i)|0);
 /** @type {number} */ var $304=$303;
 /** @type {number} */ var $305=HEAP32[(($304)>>2)];
 /** @type {number} */ var $306=$305|1;
 HEAP32[(($304)>>2)]=$306;
 label=77;break;
 case 69: 
 /** @type {number} */ var $308=$8|3;
 /** @type {number} */ var $309=(($v_0_i+4)|0);
 HEAP32[(($309)>>2)]=$308;
 /** @type {number} */ var $310=$rsize_0_i|1;
 /** @type {number} */ var $_sum_i41=$8|4;
 /** @type {number} */ var $311=(($192+$_sum_i41)|0);
 /** @type {number} */ var $312=$311;
 HEAP32[(($312)>>2)]=$310;
 /** @type {number} */ var $_sum1_i=((($rsize_0_i)+($8))|0);
 /** @type {number} */ var $313=(($192+$_sum1_i)|0);
 /** @type {number} */ var $314=$313;
 HEAP32[(($314)>>2)]=$rsize_0_i;
 /** @type {number} */ var $315=HEAP32[((12144)>>2)];
 /** @type {number} */ var $316=($315|0)==0;
 if($316){label=75;break;}else{label=70;break;}
 case 70: 
 /** @type {number} */ var $318=HEAP32[((12156)>>2)];
 /** @type {number} */ var $319=$315>>>3;
 /** @type {number} */ var $320=$319<<1;
 /** @type {number} */ var $321=((12176+($320<<2))|0);
 /** @type {number} */ var $322=$321;
 /** @type {number} */ var $323=HEAP32[((12136)>>2)];
 /** @type {number} */ var $324=1<<$319;
 /** @type {number} */ var $325=$323&$324;
 /** @type {number} */ var $326=($325|0)==0;
 if($326){label=71;break;}else{label=72;break;}
 case 71: 
 /** @type {number} */ var $328=$323|$324;
 HEAP32[((12136)>>2)]=$328;
 /** @type {number} */ var $_sum2_pre_i=((($320)+(2))|0);
 /** @type {number} */ var $_pre_i=((12176+($_sum2_pre_i<<2))|0);
 var $F1_0_i=$322;var $_pre_phi_i=$_pre_i;label=74;break;
 case 72: 
 /** @type {number} */ var $_sum3_i=((($320)+(2))|0);
 /** @type {number} */ var $330=((12176+($_sum3_i<<2))|0);
 /** @type {number} */ var $331=HEAP32[(($330)>>2)];
 /** @type {number} */ var $332=$331;
 /** @type {number} */ var $333=HEAP32[((12152)>>2)];
 /** @type {number} */ var $334=($332>>>0)<($333>>>0);
 if($334){label=73;break;}else{var $F1_0_i=$331;var $_pre_phi_i=$330;label=74;break;}
 case 73: 
 _abort();
 case 74: 
 var $_pre_phi_i;
 var $F1_0_i;
 HEAP32[(($_pre_phi_i)>>2)]=$318;
 /** @type {number} */ var $337=(($F1_0_i+12)|0);
 HEAP32[(($337)>>2)]=$318;
 /** @type {number} */ var $338=(($318+8)|0);
 HEAP32[(($338)>>2)]=$F1_0_i;
 /** @type {number} */ var $339=(($318+12)|0);
 HEAP32[(($339)>>2)]=$322;
 label=75;break;
 case 75: 
 HEAP32[((12144)>>2)]=$rsize_0_i;
 HEAP32[((12156)>>2)]=$197;
 label=77;break;
 case 76: 
 _abort();
 case 77: 
 /** @type {number} */ var $342=(($v_0_i+8)|0);
 /** @type {number} */ var $343=$342;
 var $mem_0=$343;label=341;break;
 case 78: 
 /** @type {number} */ var $345=($bytes>>>0)>4294967231;
 if($345){var $nb_0=-1;label=160;break;}else{label=79;break;}
 case 79: 
 /** @type {number} */ var $347=((($bytes)+(11))|0);
 /** @type {number} */ var $348=$347&-8;
 /** @type {number} */ var $349=HEAP32[((12140)>>2)];
 /** @type {number} */ var $350=($349|0)==0;
 if($350){var $nb_0=$348;label=160;break;}else{label=80;break;}
 case 80: 
 /** @type {number} */ var $352=(((-$348))|0);
 /** @type {number} */ var $353=$347>>>8;
 /** @type {number} */ var $354=($353|0)==0;
 if($354){var $idx_0_i=0;label=83;break;}else{label=81;break;}
 case 81: 
 /** @type {number} */ var $356=($348>>>0)>16777215;
 if($356){var $idx_0_i=31;label=83;break;}else{label=82;break;}
 case 82: 
 /** @type {number} */ var $358=((($353)+(1048320))|0);
 /** @type {number} */ var $359=$358>>>16;
 /** @type {number} */ var $360=$359&8;
 /** @type {number} */ var $361=$353<<$360;
 /** @type {number} */ var $362=((($361)+(520192))|0);
 /** @type {number} */ var $363=$362>>>16;
 /** @type {number} */ var $364=$363&4;
 /** @type {number} */ var $365=$364|$360;
 /** @type {number} */ var $366=$361<<$364;
 /** @type {number} */ var $367=((($366)+(245760))|0);
 /** @type {number} */ var $368=$367>>>16;
 /** @type {number} */ var $369=$368&2;
 /** @type {number} */ var $370=$365|$369;
 /** @type {number} */ var $371=(((14)-($370))|0);
 /** @type {number} */ var $372=$366<<$369;
 /** @type {number} */ var $373=$372>>>15;
 /** @type {number} */ var $374=((($371)+($373))|0);
 /** @type {number} */ var $375=$374<<1;
 /** @type {number} */ var $376=((($374)+(7))|0);
 /** @type {number} */ var $377=$348>>>($376>>>0);
 /** @type {number} */ var $378=$377&1;
 /** @type {number} */ var $379=$378|$375;
 var $idx_0_i=$379;label=83;break;
 case 83: 
 var $idx_0_i;
 /** @type {number} */ var $381=((12440+($idx_0_i<<2))|0);
 /** @type {number} */ var $382=HEAP32[(($381)>>2)];
 /** @type {number} */ var $383=($382|0)==0;
 if($383){var $v_2_i=0;var $rsize_2_i=$352;var $t_1_i=0;label=90;break;}else{label=84;break;}
 case 84: 
 /** @type {number} */ var $385=($idx_0_i|0)==31;
 if($385){var $390=0;label=86;break;}else{label=85;break;}
 case 85: 
 /** @type {number} */ var $387=$idx_0_i>>>1;
 /** @type {number} */ var $388=(((25)-($387))|0);
 var $390=$388;label=86;break;
 case 86: 
 var $390;
 /** @type {number} */ var $391=$348<<$390;
 var $v_0_i18=0;var $rsize_0_i17=$352;var $t_0_i16=$382;var $sizebits_0_i=$391;var $rst_0_i=0;label=87;break;
 case 87: 
 var $rst_0_i;
 var $sizebits_0_i;
 var $t_0_i16;
 var $rsize_0_i17;
 var $v_0_i18;
 /** @type {number} */ var $393=(($t_0_i16+4)|0);
 /** @type {number} */ var $394=HEAP32[(($393)>>2)];
 /** @type {number} */ var $395=$394&-8;
 /** @type {number} */ var $396=((($395)-($348))|0);
 /** @type {number} */ var $397=($396>>>0)<($rsize_0_i17>>>0);
 if($397){label=88;break;}else{var $v_1_i=$v_0_i18;var $rsize_1_i=$rsize_0_i17;label=89;break;}
 case 88: 
 /** @type {number} */ var $399=($395|0)==($348|0);
 if($399){var $v_2_i=$t_0_i16;var $rsize_2_i=$396;var $t_1_i=$t_0_i16;label=90;break;}else{var $v_1_i=$t_0_i16;var $rsize_1_i=$396;label=89;break;}
 case 89: 
 var $rsize_1_i;
 var $v_1_i;
 /** @type {number} */ var $401=(($t_0_i16+20)|0);
 /** @type {number} */ var $402=HEAP32[(($401)>>2)];
 /** @type {number} */ var $403=$sizebits_0_i>>>31;
 /** @type {number} */ var $404=(($t_0_i16+16+($403<<2))|0);
 /** @type {number} */ var $405=HEAP32[(($404)>>2)];
 /** @type {number} */ var $406=($402|0)==0;
 /** @type {number} */ var $407=($402|0)==($405|0);
 /** @type {number} */ var $or_cond21_i=$406|$407;
 /** @type {number} */ var $rst_1_i=($or_cond21_i?$rst_0_i:$402);
 /** @type {number} */ var $408=($405|0)==0;
 /** @type {number} */ var $409=$sizebits_0_i<<1;
 if($408){var $v_2_i=$v_1_i;var $rsize_2_i=$rsize_1_i;var $t_1_i=$rst_1_i;label=90;break;}else{var $v_0_i18=$v_1_i;var $rsize_0_i17=$rsize_1_i;var $t_0_i16=$405;var $sizebits_0_i=$409;var $rst_0_i=$rst_1_i;label=87;break;}
 case 90: 
 var $t_1_i;
 var $rsize_2_i;
 var $v_2_i;
 /** @type {number} */ var $410=($t_1_i|0)==0;
 /** @type {number} */ var $411=($v_2_i|0)==0;
 /** @type {number} */ var $or_cond_i=$410&$411;
 if($or_cond_i){label=91;break;}else{var $t_2_ph_i=$t_1_i;label=93;break;}
 case 91: 
 /** @type {number} */ var $413=2<<$idx_0_i;
 /** @type {number} */ var $414=(((-$413))|0);
 /** @type {number} */ var $415=$413|$414;
 /** @type {number} */ var $416=$349&$415;
 /** @type {number} */ var $417=($416|0)==0;
 if($417){var $nb_0=$348;label=160;break;}else{label=92;break;}
 case 92: 
 /** @type {number} */ var $419=(((-$416))|0);
 /** @type {number} */ var $420=$416&$419;
 /** @type {number} */ var $421=((($420)-(1))|0);
 /** @type {number} */ var $422=$421>>>12;
 /** @type {number} */ var $423=$422&16;
 /** @type {number} */ var $424=$421>>>($423>>>0);
 /** @type {number} */ var $425=$424>>>5;
 /** @type {number} */ var $426=$425&8;
 /** @type {number} */ var $427=$426|$423;
 /** @type {number} */ var $428=$424>>>($426>>>0);
 /** @type {number} */ var $429=$428>>>2;
 /** @type {number} */ var $430=$429&4;
 /** @type {number} */ var $431=$427|$430;
 /** @type {number} */ var $432=$428>>>($430>>>0);
 /** @type {number} */ var $433=$432>>>1;
 /** @type {number} */ var $434=$433&2;
 /** @type {number} */ var $435=$431|$434;
 /** @type {number} */ var $436=$432>>>($434>>>0);
 /** @type {number} */ var $437=$436>>>1;
 /** @type {number} */ var $438=$437&1;
 /** @type {number} */ var $439=$435|$438;
 /** @type {number} */ var $440=$436>>>($438>>>0);
 /** @type {number} */ var $441=((($439)+($440))|0);
 /** @type {number} */ var $442=((12440+($441<<2))|0);
 /** @type {number} */ var $443=HEAP32[(($442)>>2)];
 var $t_2_ph_i=$443;label=93;break;
 case 93: 
 var $t_2_ph_i;
 /** @type {number} */ var $444=($t_2_ph_i|0)==0;
 if($444){var $rsize_3_lcssa_i=$rsize_2_i;var $v_3_lcssa_i=$v_2_i;label=96;break;}else{var $t_232_i=$t_2_ph_i;var $rsize_333_i=$rsize_2_i;var $v_334_i=$v_2_i;label=94;break;}
 case 94: 
 var $v_334_i;
 var $rsize_333_i;
 var $t_232_i;
 /** @type {number} */ var $445=(($t_232_i+4)|0);
 /** @type {number} */ var $446=HEAP32[(($445)>>2)];
 /** @type {number} */ var $447=$446&-8;
 /** @type {number} */ var $448=((($447)-($348))|0);
 /** @type {number} */ var $449=($448>>>0)<($rsize_333_i>>>0);
 /** @type {number} */ var $_rsize_3_i=($449?$448:$rsize_333_i);
 /** @type {number} */ var $t_2_v_3_i=($449?$t_232_i:$v_334_i);
 /** @type {number} */ var $450=(($t_232_i+16)|0);
 /** @type {number} */ var $451=HEAP32[(($450)>>2)];
 /** @type {number} */ var $452=($451|0)==0;
 if($452){label=95;break;}else{var $t_232_i=$451;var $rsize_333_i=$_rsize_3_i;var $v_334_i=$t_2_v_3_i;label=94;break;}
 case 95: 
 /** @type {number} */ var $453=(($t_232_i+20)|0);
 /** @type {number} */ var $454=HEAP32[(($453)>>2)];
 /** @type {number} */ var $455=($454|0)==0;
 if($455){var $rsize_3_lcssa_i=$_rsize_3_i;var $v_3_lcssa_i=$t_2_v_3_i;label=96;break;}else{var $t_232_i=$454;var $rsize_333_i=$_rsize_3_i;var $v_334_i=$t_2_v_3_i;label=94;break;}
 case 96: 
 var $v_3_lcssa_i;
 var $rsize_3_lcssa_i;
 /** @type {number} */ var $456=($v_3_lcssa_i|0)==0;
 if($456){var $nb_0=$348;label=160;break;}else{label=97;break;}
 case 97: 
 /** @type {number} */ var $458=HEAP32[((12144)>>2)];
 /** @type {number} */ var $459=((($458)-($348))|0);
 /** @type {number} */ var $460=($rsize_3_lcssa_i>>>0)<($459>>>0);
 if($460){label=98;break;}else{var $nb_0=$348;label=160;break;}
 case 98: 
 /** @type {number} */ var $462=$v_3_lcssa_i;
 /** @type {number} */ var $463=HEAP32[((12152)>>2)];
 /** @type {number} */ var $464=($462>>>0)<($463>>>0);
 if($464){label=158;break;}else{label=99;break;}
 case 99: 
 /** @type {number} */ var $466=(($462+$348)|0);
 /** @type {number} */ var $467=$466;
 /** @type {number} */ var $468=($462>>>0)<($466>>>0);
 if($468){label=100;break;}else{label=158;break;}
 case 100: 
 /** @type {number} */ var $470=(($v_3_lcssa_i+24)|0);
 /** @type {number} */ var $471=HEAP32[(($470)>>2)];
 /** @type {number} */ var $472=(($v_3_lcssa_i+12)|0);
 /** @type {number} */ var $473=HEAP32[(($472)>>2)];
 /** @type {number} */ var $474=($473|0)==($v_3_lcssa_i|0);
 if($474){label=106;break;}else{label=101;break;}
 case 101: 
 /** @type {number} */ var $476=(($v_3_lcssa_i+8)|0);
 /** @type {number} */ var $477=HEAP32[(($476)>>2)];
 /** @type {number} */ var $478=$477;
 /** @type {number} */ var $479=($478>>>0)<($463>>>0);
 if($479){label=105;break;}else{label=102;break;}
 case 102: 
 /** @type {number} */ var $481=(($477+12)|0);
 /** @type {number} */ var $482=HEAP32[(($481)>>2)];
 /** @type {number} */ var $483=($482|0)==($v_3_lcssa_i|0);
 if($483){label=103;break;}else{label=105;break;}
 case 103: 
 /** @type {number} */ var $485=(($473+8)|0);
 /** @type {number} */ var $486=HEAP32[(($485)>>2)];
 /** @type {number} */ var $487=($486|0)==($v_3_lcssa_i|0);
 if($487){label=104;break;}else{label=105;break;}
 case 104: 
 HEAP32[(($481)>>2)]=$473;
 HEAP32[(($485)>>2)]=$477;
 var $R_1_i22=$473;label=113;break;
 case 105: 
 _abort();
 case 106: 
 /** @type {number} */ var $490=(($v_3_lcssa_i+20)|0);
 /** @type {number} */ var $491=HEAP32[(($490)>>2)];
 /** @type {number} */ var $492=($491|0)==0;
 if($492){label=107;break;}else{var $R_0_i20=$491;var $RP_0_i19=$490;label=108;break;}
 case 107: 
 /** @type {number} */ var $494=(($v_3_lcssa_i+16)|0);
 /** @type {number} */ var $495=HEAP32[(($494)>>2)];
 /** @type {number} */ var $496=($495|0)==0;
 if($496){var $R_1_i22=0;label=113;break;}else{var $R_0_i20=$495;var $RP_0_i19=$494;label=108;break;}
 case 108: 
 var $RP_0_i19;
 var $R_0_i20;
 /** @type {number} */ var $497=(($R_0_i20+20)|0);
 /** @type {number} */ var $498=HEAP32[(($497)>>2)];
 /** @type {number} */ var $499=($498|0)==0;
 if($499){label=109;break;}else{var $R_0_i20=$498;var $RP_0_i19=$497;label=108;break;}
 case 109: 
 /** @type {number} */ var $501=(($R_0_i20+16)|0);
 /** @type {number} */ var $502=HEAP32[(($501)>>2)];
 /** @type {number} */ var $503=($502|0)==0;
 if($503){label=110;break;}else{var $R_0_i20=$502;var $RP_0_i19=$501;label=108;break;}
 case 110: 
 /** @type {number} */ var $505=$RP_0_i19;
 /** @type {number} */ var $506=($505>>>0)<($463>>>0);
 if($506){label=112;break;}else{label=111;break;}
 case 111: 
 HEAP32[(($RP_0_i19)>>2)]=0;
 var $R_1_i22=$R_0_i20;label=113;break;
 case 112: 
 _abort();
 case 113: 
 var $R_1_i22;
 /** @type {number} */ var $510=($471|0)==0;
 if($510){label=133;break;}else{label=114;break;}
 case 114: 
 /** @type {number} */ var $512=(($v_3_lcssa_i+28)|0);
 /** @type {number} */ var $513=HEAP32[(($512)>>2)];
 /** @type {number} */ var $514=((12440+($513<<2))|0);
 /** @type {number} */ var $515=HEAP32[(($514)>>2)];
 /** @type {number} */ var $516=($v_3_lcssa_i|0)==($515|0);
 if($516){label=115;break;}else{label=117;break;}
 case 115: 
 HEAP32[(($514)>>2)]=$R_1_i22;
 /** @type {number} */ var $cond_i23=($R_1_i22|0)==0;
 if($cond_i23){label=116;break;}else{label=123;break;}
 case 116: 
 /** @type {number} */ var $518=HEAP32[(($512)>>2)];
 /** @type {number} */ var $519=1<<$518;
 /** @type {number} */ var $520=$519^-1;
 /** @type {number} */ var $521=HEAP32[((12140)>>2)];
 /** @type {number} */ var $522=$521&$520;
 HEAP32[((12140)>>2)]=$522;
 label=133;break;
 case 117: 
 /** @type {number} */ var $524=$471;
 /** @type {number} */ var $525=HEAP32[((12152)>>2)];
 /** @type {number} */ var $526=($524>>>0)<($525>>>0);
 if($526){label=121;break;}else{label=118;break;}
 case 118: 
 /** @type {number} */ var $528=(($471+16)|0);
 /** @type {number} */ var $529=HEAP32[(($528)>>2)];
 /** @type {number} */ var $530=($529|0)==($v_3_lcssa_i|0);
 if($530){label=119;break;}else{label=120;break;}
 case 119: 
 HEAP32[(($528)>>2)]=$R_1_i22;
 label=122;break;
 case 120: 
 /** @type {number} */ var $533=(($471+20)|0);
 HEAP32[(($533)>>2)]=$R_1_i22;
 label=122;break;
 case 121: 
 _abort();
 case 122: 
 /** @type {number} */ var $536=($R_1_i22|0)==0;
 if($536){label=133;break;}else{label=123;break;}
 case 123: 
 /** @type {number} */ var $538=$R_1_i22;
 /** @type {number} */ var $539=HEAP32[((12152)>>2)];
 /** @type {number} */ var $540=($538>>>0)<($539>>>0);
 if($540){label=132;break;}else{label=124;break;}
 case 124: 
 /** @type {number} */ var $542=(($R_1_i22+24)|0);
 HEAP32[(($542)>>2)]=$471;
 /** @type {number} */ var $543=(($v_3_lcssa_i+16)|0);
 /** @type {number} */ var $544=HEAP32[(($543)>>2)];
 /** @type {number} */ var $545=($544|0)==0;
 if($545){label=128;break;}else{label=125;break;}
 case 125: 
 /** @type {number} */ var $547=$544;
 /** @type {number} */ var $548=HEAP32[((12152)>>2)];
 /** @type {number} */ var $549=($547>>>0)<($548>>>0);
 if($549){label=127;break;}else{label=126;break;}
 case 126: 
 /** @type {number} */ var $551=(($R_1_i22+16)|0);
 HEAP32[(($551)>>2)]=$544;
 /** @type {number} */ var $552=(($544+24)|0);
 HEAP32[(($552)>>2)]=$R_1_i22;
 label=128;break;
 case 127: 
 _abort();
 case 128: 
 /** @type {number} */ var $555=(($v_3_lcssa_i+20)|0);
 /** @type {number} */ var $556=HEAP32[(($555)>>2)];
 /** @type {number} */ var $557=($556|0)==0;
 if($557){label=133;break;}else{label=129;break;}
 case 129: 
 /** @type {number} */ var $559=$556;
 /** @type {number} */ var $560=HEAP32[((12152)>>2)];
 /** @type {number} */ var $561=($559>>>0)<($560>>>0);
 if($561){label=131;break;}else{label=130;break;}
 case 130: 
 /** @type {number} */ var $563=(($R_1_i22+20)|0);
 HEAP32[(($563)>>2)]=$556;
 /** @type {number} */ var $564=(($556+24)|0);
 HEAP32[(($564)>>2)]=$R_1_i22;
 label=133;break;
 case 131: 
 _abort();
 case 132: 
 _abort();
 case 133: 
 /** @type {number} */ var $568=($rsize_3_lcssa_i>>>0)<16;
 if($568){label=134;break;}else{label=135;break;}
 case 134: 
 /** @type {number} */ var $570=((($rsize_3_lcssa_i)+($348))|0);
 /** @type {number} */ var $571=$570|3;
 /** @type {number} */ var $572=(($v_3_lcssa_i+4)|0);
 HEAP32[(($572)>>2)]=$571;
 /** @type {number} */ var $_sum19_i=((($570)+(4))|0);
 /** @type {number} */ var $573=(($462+$_sum19_i)|0);
 /** @type {number} */ var $574=$573;
 /** @type {number} */ var $575=HEAP32[(($574)>>2)];
 /** @type {number} */ var $576=$575|1;
 HEAP32[(($574)>>2)]=$576;
 label=159;break;
 case 135: 
 /** @type {number} */ var $578=$348|3;
 /** @type {number} */ var $579=(($v_3_lcssa_i+4)|0);
 HEAP32[(($579)>>2)]=$578;
 /** @type {number} */ var $580=$rsize_3_lcssa_i|1;
 /** @type {number} */ var $_sum_i2540=$348|4;
 /** @type {number} */ var $581=(($462+$_sum_i2540)|0);
 /** @type {number} */ var $582=$581;
 HEAP32[(($582)>>2)]=$580;
 /** @type {number} */ var $_sum1_i26=((($rsize_3_lcssa_i)+($348))|0);
 /** @type {number} */ var $583=(($462+$_sum1_i26)|0);
 /** @type {number} */ var $584=$583;
 HEAP32[(($584)>>2)]=$rsize_3_lcssa_i;
 /** @type {number} */ var $585=$rsize_3_lcssa_i>>>3;
 /** @type {number} */ var $586=($rsize_3_lcssa_i>>>0)<256;
 if($586){label=136;break;}else{label=141;break;}
 case 136: 
 /** @type {number} */ var $588=$585<<1;
 /** @type {number} */ var $589=((12176+($588<<2))|0);
 /** @type {number} */ var $590=$589;
 /** @type {number} */ var $591=HEAP32[((12136)>>2)];
 /** @type {number} */ var $592=1<<$585;
 /** @type {number} */ var $593=$591&$592;
 /** @type {number} */ var $594=($593|0)==0;
 if($594){label=137;break;}else{label=138;break;}
 case 137: 
 /** @type {number} */ var $596=$591|$592;
 HEAP32[((12136)>>2)]=$596;
 /** @type {number} */ var $_sum15_pre_i=((($588)+(2))|0);
 /** @type {number} */ var $_pre_i27=((12176+($_sum15_pre_i<<2))|0);
 var $F5_0_i=$590;var $_pre_phi_i28=$_pre_i27;label=140;break;
 case 138: 
 /** @type {number} */ var $_sum18_i=((($588)+(2))|0);
 /** @type {number} */ var $598=((12176+($_sum18_i<<2))|0);
 /** @type {number} */ var $599=HEAP32[(($598)>>2)];
 /** @type {number} */ var $600=$599;
 /** @type {number} */ var $601=HEAP32[((12152)>>2)];
 /** @type {number} */ var $602=($600>>>0)<($601>>>0);
 if($602){label=139;break;}else{var $F5_0_i=$599;var $_pre_phi_i28=$598;label=140;break;}
 case 139: 
 _abort();
 case 140: 
 var $_pre_phi_i28;
 var $F5_0_i;
 HEAP32[(($_pre_phi_i28)>>2)]=$467;
 /** @type {number} */ var $605=(($F5_0_i+12)|0);
 HEAP32[(($605)>>2)]=$467;
 /** @type {number} */ var $_sum16_i=((($348)+(8))|0);
 /** @type {number} */ var $606=(($462+$_sum16_i)|0);
 /** @type {number} */ var $607=$606;
 HEAP32[(($607)>>2)]=$F5_0_i;
 /** @type {number} */ var $_sum17_i=((($348)+(12))|0);
 /** @type {number} */ var $608=(($462+$_sum17_i)|0);
 /** @type {number} */ var $609=$608;
 HEAP32[(($609)>>2)]=$590;
 label=159;break;
 case 141: 
 /** @type {number} */ var $611=$466;
 /** @type {number} */ var $612=$rsize_3_lcssa_i>>>8;
 /** @type {number} */ var $613=($612|0)==0;
 if($613){var $I7_0_i=0;label=144;break;}else{label=142;break;}
 case 142: 
 /** @type {number} */ var $615=($rsize_3_lcssa_i>>>0)>16777215;
 if($615){var $I7_0_i=31;label=144;break;}else{label=143;break;}
 case 143: 
 /** @type {number} */ var $617=((($612)+(1048320))|0);
 /** @type {number} */ var $618=$617>>>16;
 /** @type {number} */ var $619=$618&8;
 /** @type {number} */ var $620=$612<<$619;
 /** @type {number} */ var $621=((($620)+(520192))|0);
 /** @type {number} */ var $622=$621>>>16;
 /** @type {number} */ var $623=$622&4;
 /** @type {number} */ var $624=$623|$619;
 /** @type {number} */ var $625=$620<<$623;
 /** @type {number} */ var $626=((($625)+(245760))|0);
 /** @type {number} */ var $627=$626>>>16;
 /** @type {number} */ var $628=$627&2;
 /** @type {number} */ var $629=$624|$628;
 /** @type {number} */ var $630=(((14)-($629))|0);
 /** @type {number} */ var $631=$625<<$628;
 /** @type {number} */ var $632=$631>>>15;
 /** @type {number} */ var $633=((($630)+($632))|0);
 /** @type {number} */ var $634=$633<<1;
 /** @type {number} */ var $635=((($633)+(7))|0);
 /** @type {number} */ var $636=$rsize_3_lcssa_i>>>($635>>>0);
 /** @type {number} */ var $637=$636&1;
 /** @type {number} */ var $638=$637|$634;
 var $I7_0_i=$638;label=144;break;
 case 144: 
 var $I7_0_i;
 /** @type {number} */ var $640=((12440+($I7_0_i<<2))|0);
 /** @type {number} */ var $_sum2_i=((($348)+(28))|0);
 /** @type {number} */ var $641=(($462+$_sum2_i)|0);
 /** @type {number} */ var $642=$641;
 HEAP32[(($642)>>2)]=$I7_0_i;
 /** @type {number} */ var $_sum3_i29=((($348)+(16))|0);
 /** @type {number} */ var $643=(($462+$_sum3_i29)|0);
 /** @type {number} */ var $_sum4_i30=((($348)+(20))|0);
 /** @type {number} */ var $644=(($462+$_sum4_i30)|0);
 /** @type {number} */ var $645=$644;
 HEAP32[(($645)>>2)]=0;
 /** @type {number} */ var $646=$643;
 HEAP32[(($646)>>2)]=0;
 /** @type {number} */ var $647=HEAP32[((12140)>>2)];
 /** @type {number} */ var $648=1<<$I7_0_i;
 /** @type {number} */ var $649=$647&$648;
 /** @type {number} */ var $650=($649|0)==0;
 if($650){label=145;break;}else{label=146;break;}
 case 145: 
 /** @type {number} */ var $652=$647|$648;
 HEAP32[((12140)>>2)]=$652;
 HEAP32[(($640)>>2)]=$611;
 /** @type {number} */ var $653=$640;
 /** @type {number} */ var $_sum5_i=((($348)+(24))|0);
 /** @type {number} */ var $654=(($462+$_sum5_i)|0);
 /** @type {number} */ var $655=$654;
 HEAP32[(($655)>>2)]=$653;
 /** @type {number} */ var $_sum6_i=((($348)+(12))|0);
 /** @type {number} */ var $656=(($462+$_sum6_i)|0);
 /** @type {number} */ var $657=$656;
 HEAP32[(($657)>>2)]=$611;
 /** @type {number} */ var $_sum7_i=((($348)+(8))|0);
 /** @type {number} */ var $658=(($462+$_sum7_i)|0);
 /** @type {number} */ var $659=$658;
 HEAP32[(($659)>>2)]=$611;
 label=159;break;
 case 146: 
 /** @type {number} */ var $661=HEAP32[(($640)>>2)];
 /** @type {number} */ var $662=($I7_0_i|0)==31;
 if($662){var $667=0;label=148;break;}else{label=147;break;}
 case 147: 
 /** @type {number} */ var $664=$I7_0_i>>>1;
 /** @type {number} */ var $665=(((25)-($664))|0);
 var $667=$665;label=148;break;
 case 148: 
 var $667;
 /** @type {number} */ var $668=(($661+4)|0);
 /** @type {number} */ var $669=HEAP32[(($668)>>2)];
 /** @type {number} */ var $670=$669&-8;
 /** @type {number} */ var $671=($670|0)==($rsize_3_lcssa_i|0);
 if($671){var $T_0_lcssa_i=$661;label=155;break;}else{label=149;break;}
 case 149: 
 /** @type {number} */ var $672=$rsize_3_lcssa_i<<$667;
 var $T_028_i=$661;var $K12_029_i=$672;label=151;break;
 case 150: 
 /** @type {number} */ var $674=$K12_029_i<<1;
 /** @type {number} */ var $675=(($682+4)|0);
 /** @type {number} */ var $676=HEAP32[(($675)>>2)];
 /** @type {number} */ var $677=$676&-8;
 /** @type {number} */ var $678=($677|0)==($rsize_3_lcssa_i|0);
 if($678){var $T_0_lcssa_i=$682;label=155;break;}else{var $T_028_i=$682;var $K12_029_i=$674;label=151;break;}
 case 151: 
 var $K12_029_i;
 var $T_028_i;
 /** @type {number} */ var $680=$K12_029_i>>>31;
 /** @type {number} */ var $681=(($T_028_i+16+($680<<2))|0);
 /** @type {number} */ var $682=HEAP32[(($681)>>2)];
 /** @type {number} */ var $683=($682|0)==0;
 if($683){label=152;break;}else{label=150;break;}
 case 152: 
 /** @type {number} */ var $685=$681;
 /** @type {number} */ var $686=HEAP32[((12152)>>2)];
 /** @type {number} */ var $687=($685>>>0)<($686>>>0);
 if($687){label=154;break;}else{label=153;break;}
 case 153: 
 HEAP32[(($681)>>2)]=$611;
 /** @type {number} */ var $_sum12_i=((($348)+(24))|0);
 /** @type {number} */ var $689=(($462+$_sum12_i)|0);
 /** @type {number} */ var $690=$689;
 HEAP32[(($690)>>2)]=$T_028_i;
 /** @type {number} */ var $_sum13_i=((($348)+(12))|0);
 /** @type {number} */ var $691=(($462+$_sum13_i)|0);
 /** @type {number} */ var $692=$691;
 HEAP32[(($692)>>2)]=$611;
 /** @type {number} */ var $_sum14_i=((($348)+(8))|0);
 /** @type {number} */ var $693=(($462+$_sum14_i)|0);
 /** @type {number} */ var $694=$693;
 HEAP32[(($694)>>2)]=$611;
 label=159;break;
 case 154: 
 _abort();
 case 155: 
 var $T_0_lcssa_i;
 /** @type {number} */ var $696=(($T_0_lcssa_i+8)|0);
 /** @type {number} */ var $697=HEAP32[(($696)>>2)];
 /** @type {number} */ var $698=$T_0_lcssa_i;
 /** @type {number} */ var $699=HEAP32[((12152)>>2)];
 /** @type {number} */ var $700=($698>>>0)>=($699>>>0);
 /** @type {number} */ var $701=$697;
 /** @type {number} */ var $702=($701>>>0)>=($699>>>0);
 /** @type {number} */ var $or_cond26_i=$700&$702;
 if($or_cond26_i){label=156;break;}else{label=157;break;}
 case 156: 
 /** @type {number} */ var $704=(($697+12)|0);
 HEAP32[(($704)>>2)]=$611;
 HEAP32[(($696)>>2)]=$611;
 /** @type {number} */ var $_sum9_i=((($348)+(8))|0);
 /** @type {number} */ var $705=(($462+$_sum9_i)|0);
 /** @type {number} */ var $706=$705;
 HEAP32[(($706)>>2)]=$697;
 /** @type {number} */ var $_sum10_i=((($348)+(12))|0);
 /** @type {number} */ var $707=(($462+$_sum10_i)|0);
 /** @type {number} */ var $708=$707;
 HEAP32[(($708)>>2)]=$T_0_lcssa_i;
 /** @type {number} */ var $_sum11_i=((($348)+(24))|0);
 /** @type {number} */ var $709=(($462+$_sum11_i)|0);
 /** @type {number} */ var $710=$709;
 HEAP32[(($710)>>2)]=0;
 label=159;break;
 case 157: 
 _abort();
 case 158: 
 _abort();
 case 159: 
 /** @type {number} */ var $712=(($v_3_lcssa_i+8)|0);
 /** @type {number} */ var $713=$712;
 var $mem_0=$713;label=341;break;
 case 160: 
 var $nb_0;
 /** @type {number} */ var $714=HEAP32[((12144)>>2)];
 /** @type {number} */ var $715=($714>>>0)<($nb_0>>>0);
 if($715){label=165;break;}else{label=161;break;}
 case 161: 
 /** @type {number} */ var $717=((($714)-($nb_0))|0);
 /** @type {number} */ var $718=HEAP32[((12156)>>2)];
 /** @type {number} */ var $719=($717>>>0)>15;
 if($719){label=162;break;}else{label=163;break;}
 case 162: 
 /** @type {number} */ var $721=$718;
 /** @type {number} */ var $722=(($721+$nb_0)|0);
 /** @type {number} */ var $723=$722;
 HEAP32[((12156)>>2)]=$723;
 HEAP32[((12144)>>2)]=$717;
 /** @type {number} */ var $724=$717|1;
 /** @type {number} */ var $_sum2=((($nb_0)+(4))|0);
 /** @type {number} */ var $725=(($721+$_sum2)|0);
 /** @type {number} */ var $726=$725;
 HEAP32[(($726)>>2)]=$724;
 /** @type {number} */ var $727=(($721+$714)|0);
 /** @type {number} */ var $728=$727;
 HEAP32[(($728)>>2)]=$717;
 /** @type {number} */ var $729=$nb_0|3;
 /** @type {number} */ var $730=(($718+4)|0);
 HEAP32[(($730)>>2)]=$729;
 label=164;break;
 case 163: 
 HEAP32[((12144)>>2)]=0;
 HEAP32[((12156)>>2)]=0;
 /** @type {number} */ var $732=$714|3;
 /** @type {number} */ var $733=(($718+4)|0);
 HEAP32[(($733)>>2)]=$732;
 /** @type {number} */ var $734=$718;
 /** @type {number} */ var $_sum1=((($714)+(4))|0);
 /** @type {number} */ var $735=(($734+$_sum1)|0);
 /** @type {number} */ var $736=$735;
 /** @type {number} */ var $737=HEAP32[(($736)>>2)];
 /** @type {number} */ var $738=$737|1;
 HEAP32[(($736)>>2)]=$738;
 label=164;break;
 case 164: 
 /** @type {number} */ var $740=(($718+8)|0);
 /** @type {number} */ var $741=$740;
 var $mem_0=$741;label=341;break;
 case 165: 
 /** @type {number} */ var $743=HEAP32[((12148)>>2)];
 /** @type {number} */ var $744=($743>>>0)>($nb_0>>>0);
 if($744){label=166;break;}else{label=167;break;}
 case 166: 
 /** @type {number} */ var $746=((($743)-($nb_0))|0);
 HEAP32[((12148)>>2)]=$746;
 /** @type {number} */ var $747=HEAP32[((12160)>>2)];
 /** @type {number} */ var $748=$747;
 /** @type {number} */ var $749=(($748+$nb_0)|0);
 /** @type {number} */ var $750=$749;
 HEAP32[((12160)>>2)]=$750;
 /** @type {number} */ var $751=$746|1;
 /** @type {number} */ var $_sum=((($nb_0)+(4))|0);
 /** @type {number} */ var $752=(($748+$_sum)|0);
 /** @type {number} */ var $753=$752;
 HEAP32[(($753)>>2)]=$751;
 /** @type {number} */ var $754=$nb_0|3;
 /** @type {number} */ var $755=(($747+4)|0);
 HEAP32[(($755)>>2)]=$754;
 /** @type {number} */ var $756=(($747+8)|0);
 /** @type {number} */ var $757=$756;
 var $mem_0=$757;label=341;break;
 case 167: 
 /** @type {number} */ var $759=HEAP32[((12064)>>2)];
 /** @type {number} */ var $760=($759|0)==0;
 if($760){label=168;break;}else{label=171;break;}
 case 168: 
 /** @type {number} */ var $762=_sysconf(30);
 /** @type {number} */ var $763=((($762)-(1))|0);
 /** @type {number} */ var $764=$763&$762;
 /** @type {number} */ var $765=($764|0)==0;
 if($765){label=170;break;}else{label=169;break;}
 case 169: 
 _abort();
 case 170: 
 HEAP32[((12072)>>2)]=$762;
 HEAP32[((12068)>>2)]=$762;
 HEAP32[((12076)>>2)]=-1;
 HEAP32[((12080)>>2)]=-1;
 HEAP32[((12084)>>2)]=0;
 HEAP32[((12580)>>2)]=0;
 /** @type {number} */ var $767=_time(0);
 /** @type {number} */ var $768=$767&-16;
 /** @type {number} */ var $769=$768^1431655768;
 HEAP32[((12064)>>2)]=$769;
 label=171;break;
 case 171: 
 /** @type {number} */ var $771=((($nb_0)+(48))|0);
 /** @type {number} */ var $772=HEAP32[((12072)>>2)];
 /** @type {number} */ var $773=((($nb_0)+(47))|0);
 /** @type {number} */ var $774=((($772)+($773))|0);
 /** @type {number} */ var $775=(((-$772))|0);
 /** @type {number} */ var $776=$774&$775;
 /** @type {number} */ var $777=($776>>>0)>($nb_0>>>0);
 if($777){label=172;break;}else{var $mem_0=0;label=341;break;}
 case 172: 
 /** @type {number} */ var $779=HEAP32[((12576)>>2)];
 /** @type {number} */ var $780=($779|0)==0;
 if($780){label=174;break;}else{label=173;break;}
 case 173: 
 /** @type {number} */ var $782=HEAP32[((12568)>>2)];
 /** @type {number} */ var $783=((($782)+($776))|0);
 /** @type {number} */ var $784=($783>>>0)<=($782>>>0);
 /** @type {number} */ var $785=($783>>>0)>($779>>>0);
 /** @type {number} */ var $or_cond1_i=$784|$785;
 if($or_cond1_i){var $mem_0=0;label=341;break;}else{label=174;break;}
 case 174: 
 /** @type {number} */ var $787=HEAP32[((12580)>>2)];
 /** @type {number} */ var $788=$787&4;
 /** @type {number} */ var $789=($788|0)==0;
 if($789){label=175;break;}else{var $tsize_1_i=0;label=198;break;}
 case 175: 
 /** @type {number} */ var $791=HEAP32[((12160)>>2)];
 /** @type {number} */ var $792=($791|0)==0;
 if($792){label=181;break;}else{label=176;break;}
 case 176: 
 /** @type {number} */ var $794=$791;
 var $sp_0_i_i=12584;label=177;break;
 case 177: 
 var $sp_0_i_i;
 /** @type {number} */ var $796=(($sp_0_i_i)|0);
 /** @type {number} */ var $797=HEAP32[(($796)>>2)];
 /** @type {number} */ var $798=($797>>>0)>($794>>>0);
 if($798){label=179;break;}else{label=178;break;}
 case 178: 
 /** @type {number} */ var $800=(($sp_0_i_i+4)|0);
 /** @type {number} */ var $801=HEAP32[(($800)>>2)];
 /** @type {number} */ var $802=(($797+$801)|0);
 /** @type {number} */ var $803=($802>>>0)>($794>>>0);
 if($803){label=180;break;}else{label=179;break;}
 case 179: 
 /** @type {number} */ var $805=(($sp_0_i_i+8)|0);
 /** @type {number} */ var $806=HEAP32[(($805)>>2)];
 /** @type {number} */ var $807=($806|0)==0;
 if($807){label=181;break;}else{var $sp_0_i_i=$806;label=177;break;}
 case 180: 
 /** @type {number} */ var $808=($sp_0_i_i|0)==0;
 if($808){label=181;break;}else{label=188;break;}
 case 181: 
 /** @type {number} */ var $809=_sbrk(0);
 /** @type {number} */ var $810=($809|0)==-1;
 if($810){var $tsize_03141_i=0;label=197;break;}else{label=182;break;}
 case 182: 
 /** @type {number} */ var $812=$809;
 /** @type {number} */ var $813=HEAP32[((12068)>>2)];
 /** @type {number} */ var $814=((($813)-(1))|0);
 /** @type {number} */ var $815=$814&$812;
 /** @type {number} */ var $816=($815|0)==0;
 if($816){var $ssize_0_i=$776;label=184;break;}else{label=183;break;}
 case 183: 
 /** @type {number} */ var $818=((($814)+($812))|0);
 /** @type {number} */ var $819=(((-$813))|0);
 /** @type {number} */ var $820=$818&$819;
 /** @type {number} */ var $821=((($776)-($812))|0);
 /** @type {number} */ var $822=((($821)+($820))|0);
 var $ssize_0_i=$822;label=184;break;
 case 184: 
 var $ssize_0_i;
 /** @type {number} */ var $824=HEAP32[((12568)>>2)];
 /** @type {number} */ var $825=((($824)+($ssize_0_i))|0);
 /** @type {number} */ var $826=($ssize_0_i>>>0)>($nb_0>>>0);
 /** @type {number} */ var $827=($ssize_0_i>>>0)<2147483647;
 /** @type {number} */ var $or_cond_i31=$826&$827;
 if($or_cond_i31){label=185;break;}else{var $tsize_03141_i=0;label=197;break;}
 case 185: 
 /** @type {number} */ var $829=HEAP32[((12576)>>2)];
 /** @type {number} */ var $830=($829|0)==0;
 if($830){label=187;break;}else{label=186;break;}
 case 186: 
 /** @type {number} */ var $832=($825>>>0)<=($824>>>0);
 /** @type {number} */ var $833=($825>>>0)>($829>>>0);
 /** @type {number} */ var $or_cond2_i=$832|$833;
 if($or_cond2_i){var $tsize_03141_i=0;label=197;break;}else{label=187;break;}
 case 187: 
 /** @type {number} */ var $835=_sbrk($ssize_0_i);
 /** @type {number} */ var $836=($835|0)==($809|0);
 if($836){var $br_0_i=$809;var $ssize_1_i=$ssize_0_i;label=190;break;}else{var $ssize_129_i=$ssize_0_i;var $br_030_i=$835;label=191;break;}
 case 188: 
 /** @type {number} */ var $838=HEAP32[((12148)>>2)];
 /** @type {number} */ var $839=((($774)-($838))|0);
 /** @type {number} */ var $840=$839&$775;
 /** @type {number} */ var $841=($840>>>0)<2147483647;
 if($841){label=189;break;}else{var $tsize_03141_i=0;label=197;break;}
 case 189: 
 /** @type {number} */ var $843=_sbrk($840);
 /** @type {number} */ var $844=HEAP32[(($796)>>2)];
 /** @type {number} */ var $845=HEAP32[(($800)>>2)];
 /** @type {number} */ var $846=(($844+$845)|0);
 /** @type {number} */ var $847=($843|0)==($846|0);
 if($847){var $br_0_i=$843;var $ssize_1_i=$840;label=190;break;}else{var $ssize_129_i=$840;var $br_030_i=$843;label=191;break;}
 case 190: 
 var $ssize_1_i;
 var $br_0_i;
 /** @type {number} */ var $849=($br_0_i|0)==-1;
 if($849){var $tsize_03141_i=$ssize_1_i;label=197;break;}else{var $tsize_244_i=$ssize_1_i;var $tbase_245_i=$br_0_i;label=201;break;}
 case 191: 
 var $br_030_i;
 var $ssize_129_i;
 /** @type {number} */ var $850=(((-$ssize_129_i))|0);
 /** @type {number} */ var $851=($br_030_i|0)!=-1;
 /** @type {number} */ var $852=($ssize_129_i>>>0)<2147483647;
 /** @type {number} */ var $or_cond5_i=$851&$852;
 /** @type {number} */ var $853=($771>>>0)>($ssize_129_i>>>0);
 /** @type {number} */ var $or_cond4_i=$or_cond5_i&$853;
 if($or_cond4_i){label=192;break;}else{var $ssize_2_i=$ssize_129_i;label=196;break;}
 case 192: 
 /** @type {number} */ var $855=HEAP32[((12072)>>2)];
 /** @type {number} */ var $856=((($773)-($ssize_129_i))|0);
 /** @type {number} */ var $857=((($856)+($855))|0);
 /** @type {number} */ var $858=(((-$855))|0);
 /** @type {number} */ var $859=$857&$858;
 /** @type {number} */ var $860=($859>>>0)<2147483647;
 if($860){label=193;break;}else{var $ssize_2_i=$ssize_129_i;label=196;break;}
 case 193: 
 /** @type {number} */ var $862=_sbrk($859);
 /** @type {number} */ var $863=($862|0)==-1;
 if($863){label=195;break;}else{label=194;break;}
 case 194: 
 /** @type {number} */ var $865=((($859)+($ssize_129_i))|0);
 var $ssize_2_i=$865;label=196;break;
 case 195: 
 /** @type {number} */ var $866=_sbrk($850);
 var $tsize_03141_i=0;label=197;break;
 case 196: 
 var $ssize_2_i;
 /** @type {number} */ var $868=($br_030_i|0)==-1;
 if($868){var $tsize_03141_i=0;label=197;break;}else{var $tsize_244_i=$ssize_2_i;var $tbase_245_i=$br_030_i;label=201;break;}
 case 197: 
 var $tsize_03141_i;
 /** @type {number} */ var $869=HEAP32[((12580)>>2)];
 /** @type {number} */ var $870=$869|4;
 HEAP32[((12580)>>2)]=$870;
 var $tsize_1_i=$tsize_03141_i;label=198;break;
 case 198: 
 var $tsize_1_i;
 /** @type {number} */ var $872=($776>>>0)<2147483647;
 if($872){label=199;break;}else{label=340;break;}
 case 199: 
 /** @type {number} */ var $874=_sbrk($776);
 /** @type {number} */ var $875=_sbrk(0);
 /** @type {number} */ var $876=($874|0)!=-1;
 /** @type {number} */ var $877=($875|0)!=-1;
 /** @type {number} */ var $or_cond3_i=$876&$877;
 /** @type {number} */ var $878=($874>>>0)<($875>>>0);
 /** @type {number} */ var $or_cond6_i=$or_cond3_i&$878;
 if($or_cond6_i){label=200;break;}else{label=340;break;}
 case 200: 
 /** @type {number} */ var $880=$875;
 /** @type {number} */ var $881=$874;
 /** @type {number} */ var $882=((($880)-($881))|0);
 /** @type {number} */ var $883=((($nb_0)+(40))|0);
 /** @type {number} */ var $884=($882>>>0)>($883>>>0);
 /** @type {number} */ var $_tsize_1_i=($884?$882:$tsize_1_i);
 if($884){var $tsize_244_i=$_tsize_1_i;var $tbase_245_i=$874;label=201;break;}else{label=340;break;}
 case 201: 
 var $tbase_245_i;
 var $tsize_244_i;
 /** @type {number} */ var $885=HEAP32[((12568)>>2)];
 /** @type {number} */ var $886=((($885)+($tsize_244_i))|0);
 HEAP32[((12568)>>2)]=$886;
 /** @type {number} */ var $887=HEAP32[((12572)>>2)];
 /** @type {number} */ var $888=($886>>>0)>($887>>>0);
 if($888){label=202;break;}else{label=203;break;}
 case 202: 
 HEAP32[((12572)>>2)]=$886;
 label=203;break;
 case 203: 
 /** @type {number} */ var $891=HEAP32[((12160)>>2)];
 /** @type {number} */ var $892=($891|0)==0;
 if($892){label=204;break;}else{var $sp_073_i=12584;label=211;break;}
 case 204: 
 /** @type {number} */ var $894=HEAP32[((12152)>>2)];
 /** @type {number} */ var $895=($894|0)==0;
 /** @type {number} */ var $896=($tbase_245_i>>>0)<($894>>>0);
 /** @type {number} */ var $or_cond8_i=$895|$896;
 if($or_cond8_i){label=205;break;}else{label=206;break;}
 case 205: 
 HEAP32[((12152)>>2)]=$tbase_245_i;
 label=206;break;
 case 206: 
 HEAP32[((12584)>>2)]=$tbase_245_i;
 HEAP32[((12588)>>2)]=$tsize_244_i;
 HEAP32[((12596)>>2)]=0;
 /** @type {number} */ var $899=HEAP32[((12064)>>2)];
 HEAP32[((12172)>>2)]=$899;
 HEAP32[((12168)>>2)]=-1;
 var $i_02_i_i=0;label=207;break;
 case 207: 
 var $i_02_i_i;
 /** @type {number} */ var $901=$i_02_i_i<<1;
 /** @type {number} */ var $902=((12176+($901<<2))|0);
 /** @type {number} */ var $903=$902;
 /** @type {number} */ var $_sum_i_i=((($901)+(3))|0);
 /** @type {number} */ var $904=((12176+($_sum_i_i<<2))|0);
 HEAP32[(($904)>>2)]=$903;
 /** @type {number} */ var $_sum1_i_i=((($901)+(2))|0);
 /** @type {number} */ var $905=((12176+($_sum1_i_i<<2))|0);
 HEAP32[(($905)>>2)]=$903;
 /** @type {number} */ var $906=((($i_02_i_i)+(1))|0);
 /** @type {number} */ var $907=($906>>>0)<32;
 if($907){var $i_02_i_i=$906;label=207;break;}else{label=208;break;}
 case 208: 
 /** @type {number} */ var $908=((($tsize_244_i)-(40))|0);
 /** @type {number} */ var $909=(($tbase_245_i+8)|0);
 /** @type {number} */ var $910=$909;
 /** @type {number} */ var $911=$910&7;
 /** @type {number} */ var $912=($911|0)==0;
 if($912){var $916=0;label=210;break;}else{label=209;break;}
 case 209: 
 /** @type {number} */ var $914=(((-$910))|0);
 /** @type {number} */ var $915=$914&7;
 var $916=$915;label=210;break;
 case 210: 
 var $916;
 /** @type {number} */ var $917=(($tbase_245_i+$916)|0);
 /** @type {number} */ var $918=$917;
 /** @type {number} */ var $919=((($908)-($916))|0);
 HEAP32[((12160)>>2)]=$918;
 HEAP32[((12148)>>2)]=$919;
 /** @type {number} */ var $920=$919|1;
 /** @type {number} */ var $_sum_i12_i=((($916)+(4))|0);
 /** @type {number} */ var $921=(($tbase_245_i+$_sum_i12_i)|0);
 /** @type {number} */ var $922=$921;
 HEAP32[(($922)>>2)]=$920;
 /** @type {number} */ var $_sum2_i_i=((($tsize_244_i)-(36))|0);
 /** @type {number} */ var $923=(($tbase_245_i+$_sum2_i_i)|0);
 /** @type {number} */ var $924=$923;
 HEAP32[(($924)>>2)]=40;
 /** @type {number} */ var $925=HEAP32[((12080)>>2)];
 HEAP32[((12164)>>2)]=$925;
 label=338;break;
 case 211: 
 var $sp_073_i;
 /** @type {number} */ var $926=(($sp_073_i)|0);
 /** @type {number} */ var $927=HEAP32[(($926)>>2)];
 /** @type {number} */ var $928=(($sp_073_i+4)|0);
 /** @type {number} */ var $929=HEAP32[(($928)>>2)];
 /** @type {number} */ var $930=(($927+$929)|0);
 /** @type {number} */ var $931=($tbase_245_i|0)==($930|0);
 if($931){label=213;break;}else{label=212;break;}
 case 212: 
 /** @type {number} */ var $933=(($sp_073_i+8)|0);
 /** @type {number} */ var $934=HEAP32[(($933)>>2)];
 /** @type {number} */ var $935=($934|0)==0;
 if($935){label=218;break;}else{var $sp_073_i=$934;label=211;break;}
 case 213: 
 /** @type {number} */ var $936=(($sp_073_i+12)|0);
 /** @type {number} */ var $937=HEAP32[(($936)>>2)];
 /** @type {number} */ var $938=$937&8;
 /** @type {number} */ var $939=($938|0)==0;
 if($939){label=214;break;}else{label=218;break;}
 case 214: 
 /** @type {number} */ var $941=$891;
 /** @type {number} */ var $942=($941>>>0)>=($927>>>0);
 /** @type {number} */ var $943=($941>>>0)<($tbase_245_i>>>0);
 /** @type {number} */ var $or_cond47_i=$942&$943;
 if($or_cond47_i){label=215;break;}else{label=218;break;}
 case 215: 
 /** @type {number} */ var $945=((($929)+($tsize_244_i))|0);
 HEAP32[(($928)>>2)]=$945;
 /** @type {number} */ var $946=HEAP32[((12160)>>2)];
 /** @type {number} */ var $947=HEAP32[((12148)>>2)];
 /** @type {number} */ var $948=((($947)+($tsize_244_i))|0);
 /** @type {number} */ var $949=$946;
 /** @type {number} */ var $950=(($946+8)|0);
 /** @type {number} */ var $951=$950;
 /** @type {number} */ var $952=$951&7;
 /** @type {number} */ var $953=($952|0)==0;
 if($953){var $957=0;label=217;break;}else{label=216;break;}
 case 216: 
 /** @type {number} */ var $955=(((-$951))|0);
 /** @type {number} */ var $956=$955&7;
 var $957=$956;label=217;break;
 case 217: 
 var $957;
 /** @type {number} */ var $958=(($949+$957)|0);
 /** @type {number} */ var $959=$958;
 /** @type {number} */ var $960=((($948)-($957))|0);
 HEAP32[((12160)>>2)]=$959;
 HEAP32[((12148)>>2)]=$960;
 /** @type {number} */ var $961=$960|1;
 /** @type {number} */ var $_sum_i16_i=((($957)+(4))|0);
 /** @type {number} */ var $962=(($949+$_sum_i16_i)|0);
 /** @type {number} */ var $963=$962;
 HEAP32[(($963)>>2)]=$961;
 /** @type {number} */ var $_sum2_i17_i=((($948)+(4))|0);
 /** @type {number} */ var $964=(($949+$_sum2_i17_i)|0);
 /** @type {number} */ var $965=$964;
 HEAP32[(($965)>>2)]=40;
 /** @type {number} */ var $966=HEAP32[((12080)>>2)];
 HEAP32[((12164)>>2)]=$966;
 label=338;break;
 case 218: 
 /** @type {number} */ var $967=HEAP32[((12152)>>2)];
 /** @type {number} */ var $968=($tbase_245_i>>>0)<($967>>>0);
 if($968){label=219;break;}else{label=220;break;}
 case 219: 
 HEAP32[((12152)>>2)]=$tbase_245_i;
 label=220;break;
 case 220: 
 /** @type {number} */ var $970=(($tbase_245_i+$tsize_244_i)|0);
 var $sp_166_i=12584;label=221;break;
 case 221: 
 var $sp_166_i;
 /** @type {number} */ var $972=(($sp_166_i)|0);
 /** @type {number} */ var $973=HEAP32[(($972)>>2)];
 /** @type {number} */ var $974=($973|0)==($970|0);
 if($974){label=223;break;}else{label=222;break;}
 case 222: 
 /** @type {number} */ var $976=(($sp_166_i+8)|0);
 /** @type {number} */ var $977=HEAP32[(($976)>>2)];
 /** @type {number} */ var $978=($977|0)==0;
 if($978){label=304;break;}else{var $sp_166_i=$977;label=221;break;}
 case 223: 
 /** @type {number} */ var $979=(($sp_166_i+12)|0);
 /** @type {number} */ var $980=HEAP32[(($979)>>2)];
 /** @type {number} */ var $981=$980&8;
 /** @type {number} */ var $982=($981|0)==0;
 if($982){label=224;break;}else{label=304;break;}
 case 224: 
 HEAP32[(($972)>>2)]=$tbase_245_i;
 /** @type {number} */ var $984=(($sp_166_i+4)|0);
 /** @type {number} */ var $985=HEAP32[(($984)>>2)];
 /** @type {number} */ var $986=((($985)+($tsize_244_i))|0);
 HEAP32[(($984)>>2)]=$986;
 /** @type {number} */ var $987=(($tbase_245_i+8)|0);
 /** @type {number} */ var $988=$987;
 /** @type {number} */ var $989=$988&7;
 /** @type {number} */ var $990=($989|0)==0;
 if($990){var $995=0;label=226;break;}else{label=225;break;}
 case 225: 
 /** @type {number} */ var $992=(((-$988))|0);
 /** @type {number} */ var $993=$992&7;
 var $995=$993;label=226;break;
 case 226: 
 var $995;
 /** @type {number} */ var $996=(($tbase_245_i+$995)|0);
 /** @type {number} */ var $_sum102_i=((($tsize_244_i)+(8))|0);
 /** @type {number} */ var $997=(($tbase_245_i+$_sum102_i)|0);
 /** @type {number} */ var $998=$997;
 /** @type {number} */ var $999=$998&7;
 /** @type {number} */ var $1000=($999|0)==0;
 if($1000){var $1005=0;label=228;break;}else{label=227;break;}
 case 227: 
 /** @type {number} */ var $1002=(((-$998))|0);
 /** @type {number} */ var $1003=$1002&7;
 var $1005=$1003;label=228;break;
 case 228: 
 var $1005;
 /** @type {number} */ var $_sum103_i=((($1005)+($tsize_244_i))|0);
 /** @type {number} */ var $1006=(($tbase_245_i+$_sum103_i)|0);
 /** @type {number} */ var $1007=$1006;
 /** @type {number} */ var $1008=$1006;
 /** @type {number} */ var $1009=$996;
 /** @type {number} */ var $1010=((($1008)-($1009))|0);
 /** @type {number} */ var $_sum_i19_i=((($995)+($nb_0))|0);
 /** @type {number} */ var $1011=(($tbase_245_i+$_sum_i19_i)|0);
 /** @type {number} */ var $1012=$1011;
 /** @type {number} */ var $1013=((($1010)-($nb_0))|0);
 /** @type {number} */ var $1014=$nb_0|3;
 /** @type {number} */ var $_sum1_i20_i=((($995)+(4))|0);
 /** @type {number} */ var $1015=(($tbase_245_i+$_sum1_i20_i)|0);
 /** @type {number} */ var $1016=$1015;
 HEAP32[(($1016)>>2)]=$1014;
 /** @type {number} */ var $1017=HEAP32[((12160)>>2)];
 /** @type {number} */ var $1018=($1007|0)==($1017|0);
 if($1018){label=229;break;}else{label=230;break;}
 case 229: 
 /** @type {number} */ var $1020=HEAP32[((12148)>>2)];
 /** @type {number} */ var $1021=((($1020)+($1013))|0);
 HEAP32[((12148)>>2)]=$1021;
 HEAP32[((12160)>>2)]=$1012;
 /** @type {number} */ var $1022=$1021|1;
 /** @type {number} */ var $_sum46_i_i=((($_sum_i19_i)+(4))|0);
 /** @type {number} */ var $1023=(($tbase_245_i+$_sum46_i_i)|0);
 /** @type {number} */ var $1024=$1023;
 HEAP32[(($1024)>>2)]=$1022;
 label=303;break;
 case 230: 
 /** @type {number} */ var $1026=HEAP32[((12156)>>2)];
 /** @type {number} */ var $1027=($1007|0)==($1026|0);
 if($1027){label=231;break;}else{label=232;break;}
 case 231: 
 /** @type {number} */ var $1029=HEAP32[((12144)>>2)];
 /** @type {number} */ var $1030=((($1029)+($1013))|0);
 HEAP32[((12144)>>2)]=$1030;
 HEAP32[((12156)>>2)]=$1012;
 /** @type {number} */ var $1031=$1030|1;
 /** @type {number} */ var $_sum44_i_i=((($_sum_i19_i)+(4))|0);
 /** @type {number} */ var $1032=(($tbase_245_i+$_sum44_i_i)|0);
 /** @type {number} */ var $1033=$1032;
 HEAP32[(($1033)>>2)]=$1031;
 /** @type {number} */ var $_sum45_i_i=((($1030)+($_sum_i19_i))|0);
 /** @type {number} */ var $1034=(($tbase_245_i+$_sum45_i_i)|0);
 /** @type {number} */ var $1035=$1034;
 HEAP32[(($1035)>>2)]=$1030;
 label=303;break;
 case 232: 
 /** @type {number} */ var $_sum2_i21_i=((($tsize_244_i)+(4))|0);
 /** @type {number} */ var $_sum104_i=((($_sum2_i21_i)+($1005))|0);
 /** @type {number} */ var $1037=(($tbase_245_i+$_sum104_i)|0);
 /** @type {number} */ var $1038=$1037;
 /** @type {number} */ var $1039=HEAP32[(($1038)>>2)];
 /** @type {number} */ var $1040=$1039&3;
 /** @type {number} */ var $1041=($1040|0)==1;
 if($1041){label=233;break;}else{var $oldfirst_0_i_i=$1007;var $qsize_0_i_i=$1013;label=280;break;}
 case 233: 
 /** @type {number} */ var $1043=$1039&-8;
 /** @type {number} */ var $1044=$1039>>>3;
 /** @type {number} */ var $1045=($1039>>>0)<256;
 if($1045){label=234;break;}else{label=246;break;}
 case 234: 
 /** @type {number} */ var $_sum3940_i_i=$1005|8;
 /** @type {number} */ var $_sum114_i=((($_sum3940_i_i)+($tsize_244_i))|0);
 /** @type {number} */ var $1047=(($tbase_245_i+$_sum114_i)|0);
 /** @type {number} */ var $1048=$1047;
 /** @type {number} */ var $1049=HEAP32[(($1048)>>2)];
 /** @type {number} */ var $_sum41_i_i=((($tsize_244_i)+(12))|0);
 /** @type {number} */ var $_sum115_i=((($_sum41_i_i)+($1005))|0);
 /** @type {number} */ var $1050=(($tbase_245_i+$_sum115_i)|0);
 /** @type {number} */ var $1051=$1050;
 /** @type {number} */ var $1052=HEAP32[(($1051)>>2)];
 /** @type {number} */ var $1053=$1044<<1;
 /** @type {number} */ var $1054=((12176+($1053<<2))|0);
 /** @type {number} */ var $1055=$1054;
 /** @type {number} */ var $1056=($1049|0)==($1055|0);
 if($1056){label=237;break;}else{label=235;break;}
 case 235: 
 /** @type {number} */ var $1058=$1049;
 /** @type {number} */ var $1059=HEAP32[((12152)>>2)];
 /** @type {number} */ var $1060=($1058>>>0)<($1059>>>0);
 if($1060){label=245;break;}else{label=236;break;}
 case 236: 
 /** @type {number} */ var $1062=(($1049+12)|0);
 /** @type {number} */ var $1063=HEAP32[(($1062)>>2)];
 /** @type {number} */ var $1064=($1063|0)==($1007|0);
 if($1064){label=237;break;}else{label=245;break;}
 case 237: 
 /** @type {number} */ var $1065=($1052|0)==($1049|0);
 if($1065){label=238;break;}else{label=239;break;}
 case 238: 
 /** @type {number} */ var $1067=1<<$1044;
 /** @type {number} */ var $1068=$1067^-1;
 /** @type {number} */ var $1069=HEAP32[((12136)>>2)];
 /** @type {number} */ var $1070=$1069&$1068;
 HEAP32[((12136)>>2)]=$1070;
 label=279;break;
 case 239: 
 /** @type {number} */ var $1072=($1052|0)==($1055|0);
 if($1072){label=240;break;}else{label=241;break;}
 case 240: 
 /** @type {number} */ var $_pre62_i_i=(($1052+8)|0);
 var $_pre_phi63_i_i=$_pre62_i_i;label=243;break;
 case 241: 
 /** @type {number} */ var $1074=$1052;
 /** @type {number} */ var $1075=HEAP32[((12152)>>2)];
 /** @type {number} */ var $1076=($1074>>>0)<($1075>>>0);
 if($1076){label=244;break;}else{label=242;break;}
 case 242: 
 /** @type {number} */ var $1078=(($1052+8)|0);
 /** @type {number} */ var $1079=HEAP32[(($1078)>>2)];
 /** @type {number} */ var $1080=($1079|0)==($1007|0);
 if($1080){var $_pre_phi63_i_i=$1078;label=243;break;}else{label=244;break;}
 case 243: 
 var $_pre_phi63_i_i;
 /** @type {number} */ var $1081=(($1049+12)|0);
 HEAP32[(($1081)>>2)]=$1052;
 HEAP32[(($_pre_phi63_i_i)>>2)]=$1049;
 label=279;break;
 case 244: 
 _abort();
 case 245: 
 _abort();
 case 246: 
 /** @type {number} */ var $1083=$1006;
 /** @type {number} */ var $_sum34_i_i=$1005|24;
 /** @type {number} */ var $_sum105_i=((($_sum34_i_i)+($tsize_244_i))|0);
 /** @type {number} */ var $1084=(($tbase_245_i+$_sum105_i)|0);
 /** @type {number} */ var $1085=$1084;
 /** @type {number} */ var $1086=HEAP32[(($1085)>>2)];
 /** @type {number} */ var $_sum5_i_i=((($tsize_244_i)+(12))|0);
 /** @type {number} */ var $_sum106_i=((($_sum5_i_i)+($1005))|0);
 /** @type {number} */ var $1087=(($tbase_245_i+$_sum106_i)|0);
 /** @type {number} */ var $1088=$1087;
 /** @type {number} */ var $1089=HEAP32[(($1088)>>2)];
 /** @type {number} */ var $1090=($1089|0)==($1083|0);
 if($1090){label=252;break;}else{label=247;break;}
 case 247: 
 /** @type {number} */ var $_sum3637_i_i=$1005|8;
 /** @type {number} */ var $_sum107_i=((($_sum3637_i_i)+($tsize_244_i))|0);
 /** @type {number} */ var $1092=(($tbase_245_i+$_sum107_i)|0);
 /** @type {number} */ var $1093=$1092;
 /** @type {number} */ var $1094=HEAP32[(($1093)>>2)];
 /** @type {number} */ var $1095=$1094;
 /** @type {number} */ var $1096=HEAP32[((12152)>>2)];
 /** @type {number} */ var $1097=($1095>>>0)<($1096>>>0);
 if($1097){label=251;break;}else{label=248;break;}
 case 248: 
 /** @type {number} */ var $1099=(($1094+12)|0);
 /** @type {number} */ var $1100=HEAP32[(($1099)>>2)];
 /** @type {number} */ var $1101=($1100|0)==($1083|0);
 if($1101){label=249;break;}else{label=251;break;}
 case 249: 
 /** @type {number} */ var $1103=(($1089+8)|0);
 /** @type {number} */ var $1104=HEAP32[(($1103)>>2)];
 /** @type {number} */ var $1105=($1104|0)==($1083|0);
 if($1105){label=250;break;}else{label=251;break;}
 case 250: 
 HEAP32[(($1099)>>2)]=$1089;
 HEAP32[(($1103)>>2)]=$1094;
 var $R_1_i_i=$1089;label=259;break;
 case 251: 
 _abort();
 case 252: 
 /** @type {number} */ var $_sum67_i_i=$1005|16;
 /** @type {number} */ var $_sum112_i=((($_sum2_i21_i)+($_sum67_i_i))|0);
 /** @type {number} */ var $1108=(($tbase_245_i+$_sum112_i)|0);
 /** @type {number} */ var $1109=$1108;
 /** @type {number} */ var $1110=HEAP32[(($1109)>>2)];
 /** @type {number} */ var $1111=($1110|0)==0;
 if($1111){label=253;break;}else{var $R_0_i_i=$1110;var $RP_0_i_i=$1109;label=254;break;}
 case 253: 
 /** @type {number} */ var $_sum113_i=((($_sum67_i_i)+($tsize_244_i))|0);
 /** @type {number} */ var $1113=(($tbase_245_i+$_sum113_i)|0);
 /** @type {number} */ var $1114=$1113;
 /** @type {number} */ var $1115=HEAP32[(($1114)>>2)];
 /** @type {number} */ var $1116=($1115|0)==0;
 if($1116){var $R_1_i_i=0;label=259;break;}else{var $R_0_i_i=$1115;var $RP_0_i_i=$1114;label=254;break;}
 case 254: 
 var $RP_0_i_i;
 var $R_0_i_i;
 /** @type {number} */ var $1117=(($R_0_i_i+20)|0);
 /** @type {number} */ var $1118=HEAP32[(($1117)>>2)];
 /** @type {number} */ var $1119=($1118|0)==0;
 if($1119){label=255;break;}else{var $R_0_i_i=$1118;var $RP_0_i_i=$1117;label=254;break;}
 case 255: 
 /** @type {number} */ var $1121=(($R_0_i_i+16)|0);
 /** @type {number} */ var $1122=HEAP32[(($1121)>>2)];
 /** @type {number} */ var $1123=($1122|0)==0;
 if($1123){label=256;break;}else{var $R_0_i_i=$1122;var $RP_0_i_i=$1121;label=254;break;}
 case 256: 
 /** @type {number} */ var $1125=$RP_0_i_i;
 /** @type {number} */ var $1126=HEAP32[((12152)>>2)];
 /** @type {number} */ var $1127=($1125>>>0)<($1126>>>0);
 if($1127){label=258;break;}else{label=257;break;}
 case 257: 
 HEAP32[(($RP_0_i_i)>>2)]=0;
 var $R_1_i_i=$R_0_i_i;label=259;break;
 case 258: 
 _abort();
 case 259: 
 var $R_1_i_i;
 /** @type {number} */ var $1131=($1086|0)==0;
 if($1131){label=279;break;}else{label=260;break;}
 case 260: 
 /** @type {number} */ var $_sum31_i_i=((($tsize_244_i)+(28))|0);
 /** @type {number} */ var $_sum108_i=((($_sum31_i_i)+($1005))|0);
 /** @type {number} */ var $1133=(($tbase_245_i+$_sum108_i)|0);
 /** @type {number} */ var $1134=$1133;
 /** @type {number} */ var $1135=HEAP32[(($1134)>>2)];
 /** @type {number} */ var $1136=((12440+($1135<<2))|0);
 /** @type {number} */ var $1137=HEAP32[(($1136)>>2)];
 /** @type {number} */ var $1138=($1083|0)==($1137|0);
 if($1138){label=261;break;}else{label=263;break;}
 case 261: 
 HEAP32[(($1136)>>2)]=$R_1_i_i;
 /** @type {number} */ var $cond_i_i=($R_1_i_i|0)==0;
 if($cond_i_i){label=262;break;}else{label=269;break;}
 case 262: 
 /** @type {number} */ var $1140=HEAP32[(($1134)>>2)];
 /** @type {number} */ var $1141=1<<$1140;
 /** @type {number} */ var $1142=$1141^-1;
 /** @type {number} */ var $1143=HEAP32[((12140)>>2)];
 /** @type {number} */ var $1144=$1143&$1142;
 HEAP32[((12140)>>2)]=$1144;
 label=279;break;
 case 263: 
 /** @type {number} */ var $1146=$1086;
 /** @type {number} */ var $1147=HEAP32[((12152)>>2)];
 /** @type {number} */ var $1148=($1146>>>0)<($1147>>>0);
 if($1148){label=267;break;}else{label=264;break;}
 case 264: 
 /** @type {number} */ var $1150=(($1086+16)|0);
 /** @type {number} */ var $1151=HEAP32[(($1150)>>2)];
 /** @type {number} */ var $1152=($1151|0)==($1083|0);
 if($1152){label=265;break;}else{label=266;break;}
 case 265: 
 HEAP32[(($1150)>>2)]=$R_1_i_i;
 label=268;break;
 case 266: 
 /** @type {number} */ var $1155=(($1086+20)|0);
 HEAP32[(($1155)>>2)]=$R_1_i_i;
 label=268;break;
 case 267: 
 _abort();
 case 268: 
 /** @type {number} */ var $1158=($R_1_i_i|0)==0;
 if($1158){label=279;break;}else{label=269;break;}
 case 269: 
 /** @type {number} */ var $1160=$R_1_i_i;
 /** @type {number} */ var $1161=HEAP32[((12152)>>2)];
 /** @type {number} */ var $1162=($1160>>>0)<($1161>>>0);
 if($1162){label=278;break;}else{label=270;break;}
 case 270: 
 /** @type {number} */ var $1164=(($R_1_i_i+24)|0);
 HEAP32[(($1164)>>2)]=$1086;
 /** @type {number} */ var $_sum3233_i_i=$1005|16;
 /** @type {number} */ var $_sum109_i=((($_sum3233_i_i)+($tsize_244_i))|0);
 /** @type {number} */ var $1165=(($tbase_245_i+$_sum109_i)|0);
 /** @type {number} */ var $1166=$1165;
 /** @type {number} */ var $1167=HEAP32[(($1166)>>2)];
 /** @type {number} */ var $1168=($1167|0)==0;
 if($1168){label=274;break;}else{label=271;break;}
 case 271: 
 /** @type {number} */ var $1170=$1167;
 /** @type {number} */ var $1171=HEAP32[((12152)>>2)];
 /** @type {number} */ var $1172=($1170>>>0)<($1171>>>0);
 if($1172){label=273;break;}else{label=272;break;}
 case 272: 
 /** @type {number} */ var $1174=(($R_1_i_i+16)|0);
 HEAP32[(($1174)>>2)]=$1167;
 /** @type {number} */ var $1175=(($1167+24)|0);
 HEAP32[(($1175)>>2)]=$R_1_i_i;
 label=274;break;
 case 273: 
 _abort();
 case 274: 
 /** @type {number} */ var $_sum110_i=((($_sum2_i21_i)+($_sum3233_i_i))|0);
 /** @type {number} */ var $1178=(($tbase_245_i+$_sum110_i)|0);
 /** @type {number} */ var $1179=$1178;
 /** @type {number} */ var $1180=HEAP32[(($1179)>>2)];
 /** @type {number} */ var $1181=($1180|0)==0;
 if($1181){label=279;break;}else{label=275;break;}
 case 275: 
 /** @type {number} */ var $1183=$1180;
 /** @type {number} */ var $1184=HEAP32[((12152)>>2)];
 /** @type {number} */ var $1185=($1183>>>0)<($1184>>>0);
 if($1185){label=277;break;}else{label=276;break;}
 case 276: 
 /** @type {number} */ var $1187=(($R_1_i_i+20)|0);
 HEAP32[(($1187)>>2)]=$1180;
 /** @type {number} */ var $1188=(($1180+24)|0);
 HEAP32[(($1188)>>2)]=$R_1_i_i;
 label=279;break;
 case 277: 
 _abort();
 case 278: 
 _abort();
 case 279: 
 /** @type {number} */ var $_sum9_i_i=$1043|$1005;
 /** @type {number} */ var $_sum111_i=((($_sum9_i_i)+($tsize_244_i))|0);
 /** @type {number} */ var $1192=(($tbase_245_i+$_sum111_i)|0);
 /** @type {number} */ var $1193=$1192;
 /** @type {number} */ var $1194=((($1043)+($1013))|0);
 var $oldfirst_0_i_i=$1193;var $qsize_0_i_i=$1194;label=280;break;
 case 280: 
 var $qsize_0_i_i;
 var $oldfirst_0_i_i;
 /** @type {number} */ var $1196=(($oldfirst_0_i_i+4)|0);
 /** @type {number} */ var $1197=HEAP32[(($1196)>>2)];
 /** @type {number} */ var $1198=$1197&-2;
 HEAP32[(($1196)>>2)]=$1198;
 /** @type {number} */ var $1199=$qsize_0_i_i|1;
 /** @type {number} */ var $_sum10_i_i=((($_sum_i19_i)+(4))|0);
 /** @type {number} */ var $1200=(($tbase_245_i+$_sum10_i_i)|0);
 /** @type {number} */ var $1201=$1200;
 HEAP32[(($1201)>>2)]=$1199;
 /** @type {number} */ var $_sum11_i_i=((($qsize_0_i_i)+($_sum_i19_i))|0);
 /** @type {number} */ var $1202=(($tbase_245_i+$_sum11_i_i)|0);
 /** @type {number} */ var $1203=$1202;
 HEAP32[(($1203)>>2)]=$qsize_0_i_i;
 /** @type {number} */ var $1204=$qsize_0_i_i>>>3;
 /** @type {number} */ var $1205=($qsize_0_i_i>>>0)<256;
 if($1205){label=281;break;}else{label=286;break;}
 case 281: 
 /** @type {number} */ var $1207=$1204<<1;
 /** @type {number} */ var $1208=((12176+($1207<<2))|0);
 /** @type {number} */ var $1209=$1208;
 /** @type {number} */ var $1210=HEAP32[((12136)>>2)];
 /** @type {number} */ var $1211=1<<$1204;
 /** @type {number} */ var $1212=$1210&$1211;
 /** @type {number} */ var $1213=($1212|0)==0;
 if($1213){label=282;break;}else{label=283;break;}
 case 282: 
 /** @type {number} */ var $1215=$1210|$1211;
 HEAP32[((12136)>>2)]=$1215;
 /** @type {number} */ var $_sum27_pre_i_i=((($1207)+(2))|0);
 /** @type {number} */ var $_pre_i22_i=((12176+($_sum27_pre_i_i<<2))|0);
 var $F4_0_i_i=$1209;var $_pre_phi_i23_i=$_pre_i22_i;label=285;break;
 case 283: 
 /** @type {number} */ var $_sum30_i_i=((($1207)+(2))|0);
 /** @type {number} */ var $1217=((12176+($_sum30_i_i<<2))|0);
 /** @type {number} */ var $1218=HEAP32[(($1217)>>2)];
 /** @type {number} */ var $1219=$1218;
 /** @type {number} */ var $1220=HEAP32[((12152)>>2)];
 /** @type {number} */ var $1221=($1219>>>0)<($1220>>>0);
 if($1221){label=284;break;}else{var $F4_0_i_i=$1218;var $_pre_phi_i23_i=$1217;label=285;break;}
 case 284: 
 _abort();
 case 285: 
 var $_pre_phi_i23_i;
 var $F4_0_i_i;
 HEAP32[(($_pre_phi_i23_i)>>2)]=$1012;
 /** @type {number} */ var $1224=(($F4_0_i_i+12)|0);
 HEAP32[(($1224)>>2)]=$1012;
 /** @type {number} */ var $_sum28_i_i=((($_sum_i19_i)+(8))|0);
 /** @type {number} */ var $1225=(($tbase_245_i+$_sum28_i_i)|0);
 /** @type {number} */ var $1226=$1225;
 HEAP32[(($1226)>>2)]=$F4_0_i_i;
 /** @type {number} */ var $_sum29_i_i=((($_sum_i19_i)+(12))|0);
 /** @type {number} */ var $1227=(($tbase_245_i+$_sum29_i_i)|0);
 /** @type {number} */ var $1228=$1227;
 HEAP32[(($1228)>>2)]=$1209;
 label=303;break;
 case 286: 
 /** @type {number} */ var $1230=$1011;
 /** @type {number} */ var $1231=$qsize_0_i_i>>>8;
 /** @type {number} */ var $1232=($1231|0)==0;
 if($1232){var $I7_0_i_i=0;label=289;break;}else{label=287;break;}
 case 287: 
 /** @type {number} */ var $1234=($qsize_0_i_i>>>0)>16777215;
 if($1234){var $I7_0_i_i=31;label=289;break;}else{label=288;break;}
 case 288: 
 /** @type {number} */ var $1236=((($1231)+(1048320))|0);
 /** @type {number} */ var $1237=$1236>>>16;
 /** @type {number} */ var $1238=$1237&8;
 /** @type {number} */ var $1239=$1231<<$1238;
 /** @type {number} */ var $1240=((($1239)+(520192))|0);
 /** @type {number} */ var $1241=$1240>>>16;
 /** @type {number} */ var $1242=$1241&4;
 /** @type {number} */ var $1243=$1242|$1238;
 /** @type {number} */ var $1244=$1239<<$1242;
 /** @type {number} */ var $1245=((($1244)+(245760))|0);
 /** @type {number} */ var $1246=$1245>>>16;
 /** @type {number} */ var $1247=$1246&2;
 /** @type {number} */ var $1248=$1243|$1247;
 /** @type {number} */ var $1249=(((14)-($1248))|0);
 /** @type {number} */ var $1250=$1244<<$1247;
 /** @type {number} */ var $1251=$1250>>>15;
 /** @type {number} */ var $1252=((($1249)+($1251))|0);
 /** @type {number} */ var $1253=$1252<<1;
 /** @type {number} */ var $1254=((($1252)+(7))|0);
 /** @type {number} */ var $1255=$qsize_0_i_i>>>($1254>>>0);
 /** @type {number} */ var $1256=$1255&1;
 /** @type {number} */ var $1257=$1256|$1253;
 var $I7_0_i_i=$1257;label=289;break;
 case 289: 
 var $I7_0_i_i;
 /** @type {number} */ var $1259=((12440+($I7_0_i_i<<2))|0);
 /** @type {number} */ var $_sum12_i24_i=((($_sum_i19_i)+(28))|0);
 /** @type {number} */ var $1260=(($tbase_245_i+$_sum12_i24_i)|0);
 /** @type {number} */ var $1261=$1260;
 HEAP32[(($1261)>>2)]=$I7_0_i_i;
 /** @type {number} */ var $_sum13_i_i=((($_sum_i19_i)+(16))|0);
 /** @type {number} */ var $1262=(($tbase_245_i+$_sum13_i_i)|0);
 /** @type {number} */ var $_sum14_i_i=((($_sum_i19_i)+(20))|0);
 /** @type {number} */ var $1263=(($tbase_245_i+$_sum14_i_i)|0);
 /** @type {number} */ var $1264=$1263;
 HEAP32[(($1264)>>2)]=0;
 /** @type {number} */ var $1265=$1262;
 HEAP32[(($1265)>>2)]=0;
 /** @type {number} */ var $1266=HEAP32[((12140)>>2)];
 /** @type {number} */ var $1267=1<<$I7_0_i_i;
 /** @type {number} */ var $1268=$1266&$1267;
 /** @type {number} */ var $1269=($1268|0)==0;
 if($1269){label=290;break;}else{label=291;break;}
 case 290: 
 /** @type {number} */ var $1271=$1266|$1267;
 HEAP32[((12140)>>2)]=$1271;
 HEAP32[(($1259)>>2)]=$1230;
 /** @type {number} */ var $1272=$1259;
 /** @type {number} */ var $_sum15_i_i=((($_sum_i19_i)+(24))|0);
 /** @type {number} */ var $1273=(($tbase_245_i+$_sum15_i_i)|0);
 /** @type {number} */ var $1274=$1273;
 HEAP32[(($1274)>>2)]=$1272;
 /** @type {number} */ var $_sum16_i_i=((($_sum_i19_i)+(12))|0);
 /** @type {number} */ var $1275=(($tbase_245_i+$_sum16_i_i)|0);
 /** @type {number} */ var $1276=$1275;
 HEAP32[(($1276)>>2)]=$1230;
 /** @type {number} */ var $_sum17_i_i=((($_sum_i19_i)+(8))|0);
 /** @type {number} */ var $1277=(($tbase_245_i+$_sum17_i_i)|0);
 /** @type {number} */ var $1278=$1277;
 HEAP32[(($1278)>>2)]=$1230;
 label=303;break;
 case 291: 
 /** @type {number} */ var $1280=HEAP32[(($1259)>>2)];
 /** @type {number} */ var $1281=($I7_0_i_i|0)==31;
 if($1281){var $1286=0;label=293;break;}else{label=292;break;}
 case 292: 
 /** @type {number} */ var $1283=$I7_0_i_i>>>1;
 /** @type {number} */ var $1284=(((25)-($1283))|0);
 var $1286=$1284;label=293;break;
 case 293: 
 var $1286;
 /** @type {number} */ var $1287=(($1280+4)|0);
 /** @type {number} */ var $1288=HEAP32[(($1287)>>2)];
 /** @type {number} */ var $1289=$1288&-8;
 /** @type {number} */ var $1290=($1289|0)==($qsize_0_i_i|0);
 if($1290){var $T_0_lcssa_i26_i=$1280;label=300;break;}else{label=294;break;}
 case 294: 
 /** @type {number} */ var $1291=$qsize_0_i_i<<$1286;
 var $T_056_i_i=$1280;var $K8_057_i_i=$1291;label=296;break;
 case 295: 
 /** @type {number} */ var $1293=$K8_057_i_i<<1;
 /** @type {number} */ var $1294=(($1301+4)|0);
 /** @type {number} */ var $1295=HEAP32[(($1294)>>2)];
 /** @type {number} */ var $1296=$1295&-8;
 /** @type {number} */ var $1297=($1296|0)==($qsize_0_i_i|0);
 if($1297){var $T_0_lcssa_i26_i=$1301;label=300;break;}else{var $T_056_i_i=$1301;var $K8_057_i_i=$1293;label=296;break;}
 case 296: 
 var $K8_057_i_i;
 var $T_056_i_i;
 /** @type {number} */ var $1299=$K8_057_i_i>>>31;
 /** @type {number} */ var $1300=(($T_056_i_i+16+($1299<<2))|0);
 /** @type {number} */ var $1301=HEAP32[(($1300)>>2)];
 /** @type {number} */ var $1302=($1301|0)==0;
 if($1302){label=297;break;}else{label=295;break;}
 case 297: 
 /** @type {number} */ var $1304=$1300;
 /** @type {number} */ var $1305=HEAP32[((12152)>>2)];
 /** @type {number} */ var $1306=($1304>>>0)<($1305>>>0);
 if($1306){label=299;break;}else{label=298;break;}
 case 298: 
 HEAP32[(($1300)>>2)]=$1230;
 /** @type {number} */ var $_sum24_i_i=((($_sum_i19_i)+(24))|0);
 /** @type {number} */ var $1308=(($tbase_245_i+$_sum24_i_i)|0);
 /** @type {number} */ var $1309=$1308;
 HEAP32[(($1309)>>2)]=$T_056_i_i;
 /** @type {number} */ var $_sum25_i_i=((($_sum_i19_i)+(12))|0);
 /** @type {number} */ var $1310=(($tbase_245_i+$_sum25_i_i)|0);
 /** @type {number} */ var $1311=$1310;
 HEAP32[(($1311)>>2)]=$1230;
 /** @type {number} */ var $_sum26_i_i=((($_sum_i19_i)+(8))|0);
 /** @type {number} */ var $1312=(($tbase_245_i+$_sum26_i_i)|0);
 /** @type {number} */ var $1313=$1312;
 HEAP32[(($1313)>>2)]=$1230;
 label=303;break;
 case 299: 
 _abort();
 case 300: 
 var $T_0_lcssa_i26_i;
 /** @type {number} */ var $1315=(($T_0_lcssa_i26_i+8)|0);
 /** @type {number} */ var $1316=HEAP32[(($1315)>>2)];
 /** @type {number} */ var $1317=$T_0_lcssa_i26_i;
 /** @type {number} */ var $1318=HEAP32[((12152)>>2)];
 /** @type {number} */ var $1319=($1317>>>0)>=($1318>>>0);
 /** @type {number} */ var $1320=$1316;
 /** @type {number} */ var $1321=($1320>>>0)>=($1318>>>0);
 /** @type {number} */ var $or_cond_i27_i=$1319&$1321;
 if($or_cond_i27_i){label=301;break;}else{label=302;break;}
 case 301: 
 /** @type {number} */ var $1323=(($1316+12)|0);
 HEAP32[(($1323)>>2)]=$1230;
 HEAP32[(($1315)>>2)]=$1230;
 /** @type {number} */ var $_sum21_i_i=((($_sum_i19_i)+(8))|0);
 /** @type {number} */ var $1324=(($tbase_245_i+$_sum21_i_i)|0);
 /** @type {number} */ var $1325=$1324;
 HEAP32[(($1325)>>2)]=$1316;
 /** @type {number} */ var $_sum22_i_i=((($_sum_i19_i)+(12))|0);
 /** @type {number} */ var $1326=(($tbase_245_i+$_sum22_i_i)|0);
 /** @type {number} */ var $1327=$1326;
 HEAP32[(($1327)>>2)]=$T_0_lcssa_i26_i;
 /** @type {number} */ var $_sum23_i_i=((($_sum_i19_i)+(24))|0);
 /** @type {number} */ var $1328=(($tbase_245_i+$_sum23_i_i)|0);
 /** @type {number} */ var $1329=$1328;
 HEAP32[(($1329)>>2)]=0;
 label=303;break;
 case 302: 
 _abort();
 case 303: 
 /** @type {number} */ var $_sum1819_i_i=$995|8;
 /** @type {number} */ var $1330=(($tbase_245_i+$_sum1819_i_i)|0);
 var $mem_0=$1330;label=341;break;
 case 304: 
 /** @type {number} */ var $1331=$891;
 var $sp_0_i_i_i=12584;label=305;break;
 case 305: 
 var $sp_0_i_i_i;
 /** @type {number} */ var $1333=(($sp_0_i_i_i)|0);
 /** @type {number} */ var $1334=HEAP32[(($1333)>>2)];
 /** @type {number} */ var $1335=($1334>>>0)>($1331>>>0);
 if($1335){label=307;break;}else{label=306;break;}
 case 306: 
 /** @type {number} */ var $1337=(($sp_0_i_i_i+4)|0);
 /** @type {number} */ var $1338=HEAP32[(($1337)>>2)];
 /** @type {number} */ var $1339=(($1334+$1338)|0);
 /** @type {number} */ var $1340=($1339>>>0)>($1331>>>0);
 if($1340){label=308;break;}else{label=307;break;}
 case 307: 
 /** @type {number} */ var $1342=(($sp_0_i_i_i+8)|0);
 /** @type {number} */ var $1343=HEAP32[(($1342)>>2)];
 var $sp_0_i_i_i=$1343;label=305;break;
 case 308: 
 /** @type {number} */ var $_sum_i13_i=((($1338)-(47))|0);
 /** @type {number} */ var $_sum1_i14_i=((($1338)-(39))|0);
 /** @type {number} */ var $1344=(($1334+$_sum1_i14_i)|0);
 /** @type {number} */ var $1345=$1344;
 /** @type {number} */ var $1346=$1345&7;
 /** @type {number} */ var $1347=($1346|0)==0;
 if($1347){var $1352=0;label=310;break;}else{label=309;break;}
 case 309: 
 /** @type {number} */ var $1349=(((-$1345))|0);
 /** @type {number} */ var $1350=$1349&7;
 var $1352=$1350;label=310;break;
 case 310: 
 var $1352;
 /** @type {number} */ var $_sum2_i15_i=((($_sum_i13_i)+($1352))|0);
 /** @type {number} */ var $1353=(($1334+$_sum2_i15_i)|0);
 /** @type {number} */ var $1354=(($891+16)|0);
 /** @type {number} */ var $1355=$1354;
 /** @type {number} */ var $1356=($1353>>>0)<($1355>>>0);
 /** @type {number} */ var $1357=($1356?$1331:$1353);
 /** @type {number} */ var $1358=(($1357+8)|0);
 /** @type {number} */ var $1359=$1358;
 /** @type {number} */ var $1360=((($tsize_244_i)-(40))|0);
 /** @type {number} */ var $1361=(($tbase_245_i+8)|0);
 /** @type {number} */ var $1362=$1361;
 /** @type {number} */ var $1363=$1362&7;
 /** @type {number} */ var $1364=($1363|0)==0;
 if($1364){var $1368=0;label=312;break;}else{label=311;break;}
 case 311: 
 /** @type {number} */ var $1366=(((-$1362))|0);
 /** @type {number} */ var $1367=$1366&7;
 var $1368=$1367;label=312;break;
 case 312: 
 var $1368;
 /** @type {number} */ var $1369=(($tbase_245_i+$1368)|0);
 /** @type {number} */ var $1370=$1369;
 /** @type {number} */ var $1371=((($1360)-($1368))|0);
 HEAP32[((12160)>>2)]=$1370;
 HEAP32[((12148)>>2)]=$1371;
 /** @type {number} */ var $1372=$1371|1;
 /** @type {number} */ var $_sum_i_i_i=((($1368)+(4))|0);
 /** @type {number} */ var $1373=(($tbase_245_i+$_sum_i_i_i)|0);
 /** @type {number} */ var $1374=$1373;
 HEAP32[(($1374)>>2)]=$1372;
 /** @type {number} */ var $_sum2_i_i_i=((($tsize_244_i)-(36))|0);
 /** @type {number} */ var $1375=(($tbase_245_i+$_sum2_i_i_i)|0);
 /** @type {number} */ var $1376=$1375;
 HEAP32[(($1376)>>2)]=40;
 /** @type {number} */ var $1377=HEAP32[((12080)>>2)];
 HEAP32[((12164)>>2)]=$1377;
 /** @type {number} */ var $1378=(($1357+4)|0);
 /** @type {number} */ var $1379=$1378;
 HEAP32[(($1379)>>2)]=27;
 HEAP32[(($1358)>>2)]=HEAP32[((12584)>>2)];HEAP32[((($1358)+(4))>>2)]=HEAP32[((12588)>>2)];HEAP32[((($1358)+(8))>>2)]=HEAP32[((12592)>>2)];HEAP32[((($1358)+(12))>>2)]=HEAP32[((12596)>>2)];
 HEAP32[((12584)>>2)]=$tbase_245_i;
 HEAP32[((12588)>>2)]=$tsize_244_i;
 HEAP32[((12596)>>2)]=0;
 HEAP32[((12592)>>2)]=$1359;
 /** @type {number} */ var $1380=(($1357+28)|0);
 /** @type {number} */ var $1381=$1380;
 HEAP32[(($1381)>>2)]=7;
 /** @type {number} */ var $1382=(($1357+32)|0);
 /** @type {number} */ var $1383=($1382>>>0)<($1339>>>0);
 if($1383){var $1384=$1381;label=313;break;}else{label=314;break;}
 case 313: 
 var $1384;
 /** @type {number} */ var $1385=(($1384+4)|0);
 HEAP32[(($1385)>>2)]=7;
 /** @type {number} */ var $1386=(($1384+8)|0);
 /** @type {number} */ var $1387=$1386;
 /** @type {number} */ var $1388=($1387>>>0)<($1339>>>0);
 if($1388){var $1384=$1385;label=313;break;}else{label=314;break;}
 case 314: 
 /** @type {number} */ var $1389=($1357|0)==($1331|0);
 if($1389){label=338;break;}else{label=315;break;}
 case 315: 
 /** @type {number} */ var $1391=$1357;
 /** @type {number} */ var $1392=$891;
 /** @type {number} */ var $1393=((($1391)-($1392))|0);
 /** @type {number} */ var $1394=(($1331+$1393)|0);
 /** @type {number} */ var $_sum3_i_i=((($1393)+(4))|0);
 /** @type {number} */ var $1395=(($1331+$_sum3_i_i)|0);
 /** @type {number} */ var $1396=$1395;
 /** @type {number} */ var $1397=HEAP32[(($1396)>>2)];
 /** @type {number} */ var $1398=$1397&-2;
 HEAP32[(($1396)>>2)]=$1398;
 /** @type {number} */ var $1399=$1393|1;
 /** @type {number} */ var $1400=(($891+4)|0);
 HEAP32[(($1400)>>2)]=$1399;
 /** @type {number} */ var $1401=$1394;
 HEAP32[(($1401)>>2)]=$1393;
 /** @type {number} */ var $1402=$1393>>>3;
 /** @type {number} */ var $1403=($1393>>>0)<256;
 if($1403){label=316;break;}else{label=321;break;}
 case 316: 
 /** @type {number} */ var $1405=$1402<<1;
 /** @type {number} */ var $1406=((12176+($1405<<2))|0);
 /** @type {number} */ var $1407=$1406;
 /** @type {number} */ var $1408=HEAP32[((12136)>>2)];
 /** @type {number} */ var $1409=1<<$1402;
 /** @type {number} */ var $1410=$1408&$1409;
 /** @type {number} */ var $1411=($1410|0)==0;
 if($1411){label=317;break;}else{label=318;break;}
 case 317: 
 /** @type {number} */ var $1413=$1408|$1409;
 HEAP32[((12136)>>2)]=$1413;
 /** @type {number} */ var $_sum11_pre_i_i=((($1405)+(2))|0);
 /** @type {number} */ var $_pre_i_i=((12176+($_sum11_pre_i_i<<2))|0);
 var $F_0_i_i=$1407;var $_pre_phi_i_i=$_pre_i_i;label=320;break;
 case 318: 
 /** @type {number} */ var $_sum12_i_i=((($1405)+(2))|0);
 /** @type {number} */ var $1415=((12176+($_sum12_i_i<<2))|0);
 /** @type {number} */ var $1416=HEAP32[(($1415)>>2)];
 /** @type {number} */ var $1417=$1416;
 /** @type {number} */ var $1418=HEAP32[((12152)>>2)];
 /** @type {number} */ var $1419=($1417>>>0)<($1418>>>0);
 if($1419){label=319;break;}else{var $F_0_i_i=$1416;var $_pre_phi_i_i=$1415;label=320;break;}
 case 319: 
 _abort();
 case 320: 
 var $_pre_phi_i_i;
 var $F_0_i_i;
 HEAP32[(($_pre_phi_i_i)>>2)]=$891;
 /** @type {number} */ var $1422=(($F_0_i_i+12)|0);
 HEAP32[(($1422)>>2)]=$891;
 /** @type {number} */ var $1423=(($891+8)|0);
 HEAP32[(($1423)>>2)]=$F_0_i_i;
 /** @type {number} */ var $1424=(($891+12)|0);
 HEAP32[(($1424)>>2)]=$1407;
 label=338;break;
 case 321: 
 /** @type {number} */ var $1426=$891;
 /** @type {number} */ var $1427=$1393>>>8;
 /** @type {number} */ var $1428=($1427|0)==0;
 if($1428){var $I1_0_i_i=0;label=324;break;}else{label=322;break;}
 case 322: 
 /** @type {number} */ var $1430=($1393>>>0)>16777215;
 if($1430){var $I1_0_i_i=31;label=324;break;}else{label=323;break;}
 case 323: 
 /** @type {number} */ var $1432=((($1427)+(1048320))|0);
 /** @type {number} */ var $1433=$1432>>>16;
 /** @type {number} */ var $1434=$1433&8;
 /** @type {number} */ var $1435=$1427<<$1434;
 /** @type {number} */ var $1436=((($1435)+(520192))|0);
 /** @type {number} */ var $1437=$1436>>>16;
 /** @type {number} */ var $1438=$1437&4;
 /** @type {number} */ var $1439=$1438|$1434;
 /** @type {number} */ var $1440=$1435<<$1438;
 /** @type {number} */ var $1441=((($1440)+(245760))|0);
 /** @type {number} */ var $1442=$1441>>>16;
 /** @type {number} */ var $1443=$1442&2;
 /** @type {number} */ var $1444=$1439|$1443;
 /** @type {number} */ var $1445=(((14)-($1444))|0);
 /** @type {number} */ var $1446=$1440<<$1443;
 /** @type {number} */ var $1447=$1446>>>15;
 /** @type {number} */ var $1448=((($1445)+($1447))|0);
 /** @type {number} */ var $1449=$1448<<1;
 /** @type {number} */ var $1450=((($1448)+(7))|0);
 /** @type {number} */ var $1451=$1393>>>($1450>>>0);
 /** @type {number} */ var $1452=$1451&1;
 /** @type {number} */ var $1453=$1452|$1449;
 var $I1_0_i_i=$1453;label=324;break;
 case 324: 
 var $I1_0_i_i;
 /** @type {number} */ var $1455=((12440+($I1_0_i_i<<2))|0);
 /** @type {number} */ var $1456=(($891+28)|0);
 /** @type {number} */ var $I1_0_c_i_i=$I1_0_i_i;
 HEAP32[(($1456)>>2)]=$I1_0_c_i_i;
 /** @type {number} */ var $1457=(($891+20)|0);
 HEAP32[(($1457)>>2)]=0;
 /** @type {number} */ var $1458=(($891+16)|0);
 HEAP32[(($1458)>>2)]=0;
 /** @type {number} */ var $1459=HEAP32[((12140)>>2)];
 /** @type {number} */ var $1460=1<<$I1_0_i_i;
 /** @type {number} */ var $1461=$1459&$1460;
 /** @type {number} */ var $1462=($1461|0)==0;
 if($1462){label=325;break;}else{label=326;break;}
 case 325: 
 /** @type {number} */ var $1464=$1459|$1460;
 HEAP32[((12140)>>2)]=$1464;
 HEAP32[(($1455)>>2)]=$1426;
 /** @type {number} */ var $1465=(($891+24)|0);
 /** @type {number} */ var $_c_i_i=$1455;
 HEAP32[(($1465)>>2)]=$_c_i_i;
 /** @type {number} */ var $1466=(($891+12)|0);
 HEAP32[(($1466)>>2)]=$891;
 /** @type {number} */ var $1467=(($891+8)|0);
 HEAP32[(($1467)>>2)]=$891;
 label=338;break;
 case 326: 
 /** @type {number} */ var $1469=HEAP32[(($1455)>>2)];
 /** @type {number} */ var $1470=($I1_0_i_i|0)==31;
 if($1470){var $1475=0;label=328;break;}else{label=327;break;}
 case 327: 
 /** @type {number} */ var $1472=$I1_0_i_i>>>1;
 /** @type {number} */ var $1473=(((25)-($1472))|0);
 var $1475=$1473;label=328;break;
 case 328: 
 var $1475;
 /** @type {number} */ var $1476=(($1469+4)|0);
 /** @type {number} */ var $1477=HEAP32[(($1476)>>2)];
 /** @type {number} */ var $1478=$1477&-8;
 /** @type {number} */ var $1479=($1478|0)==($1393|0);
 if($1479){var $T_0_lcssa_i_i=$1469;label=335;break;}else{label=329;break;}
 case 329: 
 /** @type {number} */ var $1480=$1393<<$1475;
 var $T_015_i_i=$1469;var $K2_016_i_i=$1480;label=331;break;
 case 330: 
 /** @type {number} */ var $1482=$K2_016_i_i<<1;
 /** @type {number} */ var $1483=(($1490+4)|0);
 /** @type {number} */ var $1484=HEAP32[(($1483)>>2)];
 /** @type {number} */ var $1485=$1484&-8;
 /** @type {number} */ var $1486=($1485|0)==($1393|0);
 if($1486){var $T_0_lcssa_i_i=$1490;label=335;break;}else{var $T_015_i_i=$1490;var $K2_016_i_i=$1482;label=331;break;}
 case 331: 
 var $K2_016_i_i;
 var $T_015_i_i;
 /** @type {number} */ var $1488=$K2_016_i_i>>>31;
 /** @type {number} */ var $1489=(($T_015_i_i+16+($1488<<2))|0);
 /** @type {number} */ var $1490=HEAP32[(($1489)>>2)];
 /** @type {number} */ var $1491=($1490|0)==0;
 if($1491){label=332;break;}else{label=330;break;}
 case 332: 
 /** @type {number} */ var $1493=$1489;
 /** @type {number} */ var $1494=HEAP32[((12152)>>2)];
 /** @type {number} */ var $1495=($1493>>>0)<($1494>>>0);
 if($1495){label=334;break;}else{label=333;break;}
 case 333: 
 HEAP32[(($1489)>>2)]=$1426;
 /** @type {number} */ var $1497=(($891+24)|0);
 /** @type {number} */ var $T_0_c8_i_i=$T_015_i_i;
 HEAP32[(($1497)>>2)]=$T_0_c8_i_i;
 /** @type {number} */ var $1498=(($891+12)|0);
 HEAP32[(($1498)>>2)]=$891;
 /** @type {number} */ var $1499=(($891+8)|0);
 HEAP32[(($1499)>>2)]=$891;
 label=338;break;
 case 334: 
 _abort();
 case 335: 
 var $T_0_lcssa_i_i;
 /** @type {number} */ var $1501=(($T_0_lcssa_i_i+8)|0);
 /** @type {number} */ var $1502=HEAP32[(($1501)>>2)];
 /** @type {number} */ var $1503=$T_0_lcssa_i_i;
 /** @type {number} */ var $1504=HEAP32[((12152)>>2)];
 /** @type {number} */ var $1505=($1503>>>0)>=($1504>>>0);
 /** @type {number} */ var $1506=$1502;
 /** @type {number} */ var $1507=($1506>>>0)>=($1504>>>0);
 /** @type {number} */ var $or_cond_i_i=$1505&$1507;
 if($or_cond_i_i){label=336;break;}else{label=337;break;}
 case 336: 
 /** @type {number} */ var $1509=(($1502+12)|0);
 HEAP32[(($1509)>>2)]=$1426;
 HEAP32[(($1501)>>2)]=$1426;
 /** @type {number} */ var $1510=(($891+8)|0);
 /** @type {number} */ var $_c7_i_i=$1502;
 HEAP32[(($1510)>>2)]=$_c7_i_i;
 /** @type {number} */ var $1511=(($891+12)|0);
 /** @type {number} */ var $T_0_c_i_i=$T_0_lcssa_i_i;
 HEAP32[(($1511)>>2)]=$T_0_c_i_i;
 /** @type {number} */ var $1512=(($891+24)|0);
 HEAP32[(($1512)>>2)]=0;
 label=338;break;
 case 337: 
 _abort();
 case 338: 
 /** @type {number} */ var $1513=HEAP32[((12148)>>2)];
 /** @type {number} */ var $1514=($1513>>>0)>($nb_0>>>0);
 if($1514){label=339;break;}else{label=340;break;}
 case 339: 
 /** @type {number} */ var $1516=((($1513)-($nb_0))|0);
 HEAP32[((12148)>>2)]=$1516;
 /** @type {number} */ var $1517=HEAP32[((12160)>>2)];
 /** @type {number} */ var $1518=$1517;
 /** @type {number} */ var $1519=(($1518+$nb_0)|0);
 /** @type {number} */ var $1520=$1519;
 HEAP32[((12160)>>2)]=$1520;
 /** @type {number} */ var $1521=$1516|1;
 /** @type {number} */ var $_sum_i34=((($nb_0)+(4))|0);
 /** @type {number} */ var $1522=(($1518+$_sum_i34)|0);
 /** @type {number} */ var $1523=$1522;
 HEAP32[(($1523)>>2)]=$1521;
 /** @type {number} */ var $1524=$nb_0|3;
 /** @type {number} */ var $1525=(($1517+4)|0);
 HEAP32[(($1525)>>2)]=$1524;
 /** @type {number} */ var $1526=(($1517+8)|0);
 /** @type {number} */ var $1527=$1526;
 var $mem_0=$1527;label=341;break;
 case 340: 
 /** @type {number} */ var $1528=___errno_location();
 HEAP32[(($1528)>>2)]=12;
 var $mem_0=0;label=341;break;
 case 341: 
 var $mem_0;
 return $mem_0;
 }
}
Module["_malloc"] = _malloc;
/**
 * @param {number} $mem
 * @return {number}
 */
function _free($mem){
/** @type {number} */ var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1=($mem|0)==0;
 if($1){label=140;break;}else{label=2;break;}
 case 2: 
 /** @type {number} */ var $3=((($mem)-(8))|0);
 /** @type {number} */ var $4=$3;
 /** @type {number} */ var $5=HEAP32[((12152)>>2)];
 /** @type {number} */ var $6=($3>>>0)<($5>>>0);
 if($6){label=139;break;}else{label=3;break;}
 case 3: 
 /** @type {number} */ var $8=((($mem)-(4))|0);
 /** @type {number} */ var $9=$8;
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=$10&3;
 /** @type {number} */ var $12=($11|0)==1;
 if($12){label=139;break;}else{label=4;break;}
 case 4: 
 /** @type {number} */ var $14=$10&-8;
 /** @type {number} */ var $_sum=((($14)-(8))|0);
 /** @type {number} */ var $15=(($mem+$_sum)|0);
 /** @type {number} */ var $16=$15;
 /** @type {number} */ var $17=$10&1;
 /** @type {number} */ var $18=($17|0)==0;
 if($18){label=5;break;}else{var $p_0=$4;var $psize_0=$14;label=56;break;}
 case 5: 
 /** @type {number} */ var $20=$3;
 /** @type {number} */ var $21=HEAP32[(($20)>>2)];
 /** @type {number} */ var $22=($11|0)==0;
 if($22){label=140;break;}else{label=6;break;}
 case 6: 
 /** @type {number} */ var $_sum3=(((-8)-($21))|0);
 /** @type {number} */ var $24=(($mem+$_sum3)|0);
 /** @type {number} */ var $25=$24;
 /** @type {number} */ var $26=((($21)+($14))|0);
 /** @type {number} */ var $27=($24>>>0)<($5>>>0);
 if($27){label=139;break;}else{label=7;break;}
 case 7: 
 /** @type {number} */ var $29=HEAP32[((12156)>>2)];
 /** @type {number} */ var $30=($25|0)==($29|0);
 if($30){label=54;break;}else{label=8;break;}
 case 8: 
 /** @type {number} */ var $32=$21>>>3;
 /** @type {number} */ var $33=($21>>>0)<256;
 if($33){label=9;break;}else{label=21;break;}
 case 9: 
 /** @type {number} */ var $_sum47=((($_sum3)+(8))|0);
 /** @type {number} */ var $35=(($mem+$_sum47)|0);
 /** @type {number} */ var $36=$35;
 /** @type {number} */ var $37=HEAP32[(($36)>>2)];
 /** @type {number} */ var $_sum48=((($_sum3)+(12))|0);
 /** @type {number} */ var $38=(($mem+$_sum48)|0);
 /** @type {number} */ var $39=$38;
 /** @type {number} */ var $40=HEAP32[(($39)>>2)];
 /** @type {number} */ var $41=$32<<1;
 /** @type {number} */ var $42=((12176+($41<<2))|0);
 /** @type {number} */ var $43=$42;
 /** @type {number} */ var $44=($37|0)==($43|0);
 if($44){label=12;break;}else{label=10;break;}
 case 10: 
 /** @type {number} */ var $46=$37;
 /** @type {number} */ var $47=($46>>>0)<($5>>>0);
 if($47){label=20;break;}else{label=11;break;}
 case 11: 
 /** @type {number} */ var $49=(($37+12)|0);
 /** @type {number} */ var $50=HEAP32[(($49)>>2)];
 /** @type {number} */ var $51=($50|0)==($25|0);
 if($51){label=12;break;}else{label=20;break;}
 case 12: 
 /** @type {number} */ var $52=($40|0)==($37|0);
 if($52){label=13;break;}else{label=14;break;}
 case 13: 
 /** @type {number} */ var $54=1<<$32;
 /** @type {number} */ var $55=$54^-1;
 /** @type {number} */ var $56=HEAP32[((12136)>>2)];
 /** @type {number} */ var $57=$56&$55;
 HEAP32[((12136)>>2)]=$57;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 14: 
 /** @type {number} */ var $59=($40|0)==($43|0);
 if($59){label=15;break;}else{label=16;break;}
 case 15: 
 /** @type {number} */ var $_pre82=(($40+8)|0);
 var $_pre_phi83=$_pre82;label=18;break;
 case 16: 
 /** @type {number} */ var $61=$40;
 /** @type {number} */ var $62=($61>>>0)<($5>>>0);
 if($62){label=19;break;}else{label=17;break;}
 case 17: 
 /** @type {number} */ var $64=(($40+8)|0);
 /** @type {number} */ var $65=HEAP32[(($64)>>2)];
 /** @type {number} */ var $66=($65|0)==($25|0);
 if($66){var $_pre_phi83=$64;label=18;break;}else{label=19;break;}
 case 18: 
 var $_pre_phi83;
 /** @type {number} */ var $67=(($37+12)|0);
 HEAP32[(($67)>>2)]=$40;
 HEAP32[(($_pre_phi83)>>2)]=$37;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 19: 
 _abort();
 case 20: 
 _abort();
 case 21: 
 /** @type {number} */ var $69=$24;
 /** @type {number} */ var $_sum37=((($_sum3)+(24))|0);
 /** @type {number} */ var $70=(($mem+$_sum37)|0);
 /** @type {number} */ var $71=$70;
 /** @type {number} */ var $72=HEAP32[(($71)>>2)];
 /** @type {number} */ var $_sum38=((($_sum3)+(12))|0);
 /** @type {number} */ var $73=(($mem+$_sum38)|0);
 /** @type {number} */ var $74=$73;
 /** @type {number} */ var $75=HEAP32[(($74)>>2)];
 /** @type {number} */ var $76=($75|0)==($69|0);
 if($76){label=27;break;}else{label=22;break;}
 case 22: 
 /** @type {number} */ var $_sum44=((($_sum3)+(8))|0);
 /** @type {number} */ var $78=(($mem+$_sum44)|0);
 /** @type {number} */ var $79=$78;
 /** @type {number} */ var $80=HEAP32[(($79)>>2)];
 /** @type {number} */ var $81=$80;
 /** @type {number} */ var $82=($81>>>0)<($5>>>0);
 if($82){label=26;break;}else{label=23;break;}
 case 23: 
 /** @type {number} */ var $84=(($80+12)|0);
 /** @type {number} */ var $85=HEAP32[(($84)>>2)];
 /** @type {number} */ var $86=($85|0)==($69|0);
 if($86){label=24;break;}else{label=26;break;}
 case 24: 
 /** @type {number} */ var $88=(($75+8)|0);
 /** @type {number} */ var $89=HEAP32[(($88)>>2)];
 /** @type {number} */ var $90=($89|0)==($69|0);
 if($90){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP32[(($84)>>2)]=$75;
 HEAP32[(($88)>>2)]=$80;
 var $R_1=$75;label=34;break;
 case 26: 
 _abort();
 case 27: 
 /** @type {number} */ var $_sum40=((($_sum3)+(20))|0);
 /** @type {number} */ var $93=(($mem+$_sum40)|0);
 /** @type {number} */ var $94=$93;
 /** @type {number} */ var $95=HEAP32[(($94)>>2)];
 /** @type {number} */ var $96=($95|0)==0;
 if($96){label=28;break;}else{var $R_0=$95;var $RP_0=$94;label=29;break;}
 case 28: 
 /** @type {number} */ var $_sum39=((($_sum3)+(16))|0);
 /** @type {number} */ var $98=(($mem+$_sum39)|0);
 /** @type {number} */ var $99=$98;
 /** @type {number} */ var $100=HEAP32[(($99)>>2)];
 /** @type {number} */ var $101=($100|0)==0;
 if($101){var $R_1=0;label=34;break;}else{var $R_0=$100;var $RP_0=$99;label=29;break;}
 case 29: 
 var $RP_0;
 var $R_0;
 /** @type {number} */ var $102=(($R_0+20)|0);
 /** @type {number} */ var $103=HEAP32[(($102)>>2)];
 /** @type {number} */ var $104=($103|0)==0;
 if($104){label=30;break;}else{var $R_0=$103;var $RP_0=$102;label=29;break;}
 case 30: 
 /** @type {number} */ var $106=(($R_0+16)|0);
 /** @type {number} */ var $107=HEAP32[(($106)>>2)];
 /** @type {number} */ var $108=($107|0)==0;
 if($108){label=31;break;}else{var $R_0=$107;var $RP_0=$106;label=29;break;}
 case 31: 
 /** @type {number} */ var $110=$RP_0;
 /** @type {number} */ var $111=($110>>>0)<($5>>>0);
 if($111){label=33;break;}else{label=32;break;}
 case 32: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=34;break;
 case 33: 
 _abort();
 case 34: 
 var $R_1;
 /** @type {number} */ var $115=($72|0)==0;
 if($115){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=35;break;}
 case 35: 
 /** @type {number} */ var $_sum41=((($_sum3)+(28))|0);
 /** @type {number} */ var $117=(($mem+$_sum41)|0);
 /** @type {number} */ var $118=$117;
 /** @type {number} */ var $119=HEAP32[(($118)>>2)];
 /** @type {number} */ var $120=((12440+($119<<2))|0);
 /** @type {number} */ var $121=HEAP32[(($120)>>2)];
 /** @type {number} */ var $122=($69|0)==($121|0);
 if($122){label=36;break;}else{label=38;break;}
 case 36: 
 HEAP32[(($120)>>2)]=$R_1;
 /** @type {number} */ var $cond=($R_1|0)==0;
 if($cond){label=37;break;}else{label=44;break;}
 case 37: 
 /** @type {number} */ var $124=HEAP32[(($118)>>2)];
 /** @type {number} */ var $125=1<<$124;
 /** @type {number} */ var $126=$125^-1;
 /** @type {number} */ var $127=HEAP32[((12140)>>2)];
 /** @type {number} */ var $128=$127&$126;
 HEAP32[((12140)>>2)]=$128;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 38: 
 /** @type {number} */ var $130=$72;
 /** @type {number} */ var $131=HEAP32[((12152)>>2)];
 /** @type {number} */ var $132=($130>>>0)<($131>>>0);
 if($132){label=42;break;}else{label=39;break;}
 case 39: 
 /** @type {number} */ var $134=(($72+16)|0);
 /** @type {number} */ var $135=HEAP32[(($134)>>2)];
 /** @type {number} */ var $136=($135|0)==($69|0);
 if($136){label=40;break;}else{label=41;break;}
 case 40: 
 HEAP32[(($134)>>2)]=$R_1;
 label=43;break;
 case 41: 
 /** @type {number} */ var $139=(($72+20)|0);
 HEAP32[(($139)>>2)]=$R_1;
 label=43;break;
 case 42: 
 _abort();
 case 43: 
 /** @type {number} */ var $142=($R_1|0)==0;
 if($142){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=44;break;}
 case 44: 
 /** @type {number} */ var $144=$R_1;
 /** @type {number} */ var $145=HEAP32[((12152)>>2)];
 /** @type {number} */ var $146=($144>>>0)<($145>>>0);
 if($146){label=53;break;}else{label=45;break;}
 case 45: 
 /** @type {number} */ var $148=(($R_1+24)|0);
 HEAP32[(($148)>>2)]=$72;
 /** @type {number} */ var $_sum42=((($_sum3)+(16))|0);
 /** @type {number} */ var $149=(($mem+$_sum42)|0);
 /** @type {number} */ var $150=$149;
 /** @type {number} */ var $151=HEAP32[(($150)>>2)];
 /** @type {number} */ var $152=($151|0)==0;
 if($152){label=49;break;}else{label=46;break;}
 case 46: 
 /** @type {number} */ var $154=$151;
 /** @type {number} */ var $155=HEAP32[((12152)>>2)];
 /** @type {number} */ var $156=($154>>>0)<($155>>>0);
 if($156){label=48;break;}else{label=47;break;}
 case 47: 
 /** @type {number} */ var $158=(($R_1+16)|0);
 HEAP32[(($158)>>2)]=$151;
 /** @type {number} */ var $159=(($151+24)|0);
 HEAP32[(($159)>>2)]=$R_1;
 label=49;break;
 case 48: 
 _abort();
 case 49: 
 /** @type {number} */ var $_sum43=((($_sum3)+(20))|0);
 /** @type {number} */ var $162=(($mem+$_sum43)|0);
 /** @type {number} */ var $163=$162;
 /** @type {number} */ var $164=HEAP32[(($163)>>2)];
 /** @type {number} */ var $165=($164|0)==0;
 if($165){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=50;break;}
 case 50: 
 /** @type {number} */ var $167=$164;
 /** @type {number} */ var $168=HEAP32[((12152)>>2)];
 /** @type {number} */ var $169=($167>>>0)<($168>>>0);
 if($169){label=52;break;}else{label=51;break;}
 case 51: 
 /** @type {number} */ var $171=(($R_1+20)|0);
 HEAP32[(($171)>>2)]=$164;
 /** @type {number} */ var $172=(($164+24)|0);
 HEAP32[(($172)>>2)]=$R_1;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 52: 
 _abort();
 case 53: 
 _abort();
 case 54: 
 /** @type {number} */ var $_sum4=((($14)-(4))|0);
 /** @type {number} */ var $176=(($mem+$_sum4)|0);
 /** @type {number} */ var $177=$176;
 /** @type {number} */ var $178=HEAP32[(($177)>>2)];
 /** @type {number} */ var $179=$178&3;
 /** @type {number} */ var $180=($179|0)==3;
 if($180){label=55;break;}else{var $p_0=$25;var $psize_0=$26;label=56;break;}
 case 55: 
 HEAP32[((12144)>>2)]=$26;
 /** @type {number} */ var $182=HEAP32[(($177)>>2)];
 /** @type {number} */ var $183=$182&-2;
 HEAP32[(($177)>>2)]=$183;
 /** @type {number} */ var $184=$26|1;
 /** @type {number} */ var $_sum35=((($_sum3)+(4))|0);
 /** @type {number} */ var $185=(($mem+$_sum35)|0);
 /** @type {number} */ var $186=$185;
 HEAP32[(($186)>>2)]=$184;
 /** @type {number} */ var $187=$15;
 HEAP32[(($187)>>2)]=$26;
 label=140;break;
 case 56: 
 var $psize_0;
 var $p_0;
 /** @type {number} */ var $189=$p_0;
 /** @type {number} */ var $190=($189>>>0)<($15>>>0);
 if($190){label=57;break;}else{label=139;break;}
 case 57: 
 /** @type {number} */ var $_sum34=((($14)-(4))|0);
 /** @type {number} */ var $192=(($mem+$_sum34)|0);
 /** @type {number} */ var $193=$192;
 /** @type {number} */ var $194=HEAP32[(($193)>>2)];
 /** @type {number} */ var $195=$194&1;
 /** @type {number} */ var $phitmp=($195|0)==0;
 if($phitmp){label=139;break;}else{label=58;break;}
 case 58: 
 /** @type {number} */ var $197=$194&2;
 /** @type {number} */ var $198=($197|0)==0;
 if($198){label=59;break;}else{label=112;break;}
 case 59: 
 /** @type {number} */ var $200=HEAP32[((12160)>>2)];
 /** @type {number} */ var $201=($16|0)==($200|0);
 if($201){label=60;break;}else{label=62;break;}
 case 60: 
 /** @type {number} */ var $203=HEAP32[((12148)>>2)];
 /** @type {number} */ var $204=((($203)+($psize_0))|0);
 HEAP32[((12148)>>2)]=$204;
 HEAP32[((12160)>>2)]=$p_0;
 /** @type {number} */ var $205=$204|1;
 /** @type {number} */ var $206=(($p_0+4)|0);
 HEAP32[(($206)>>2)]=$205;
 /** @type {number} */ var $207=HEAP32[((12156)>>2)];
 /** @type {number} */ var $208=($p_0|0)==($207|0);
 if($208){label=61;break;}else{label=140;break;}
 case 61: 
 HEAP32[((12156)>>2)]=0;
 HEAP32[((12144)>>2)]=0;
 label=140;break;
 case 62: 
 /** @type {number} */ var $211=HEAP32[((12156)>>2)];
 /** @type {number} */ var $212=($16|0)==($211|0);
 if($212){label=63;break;}else{label=64;break;}
 case 63: 
 /** @type {number} */ var $214=HEAP32[((12144)>>2)];
 /** @type {number} */ var $215=((($214)+($psize_0))|0);
 HEAP32[((12144)>>2)]=$215;
 HEAP32[((12156)>>2)]=$p_0;
 /** @type {number} */ var $216=$215|1;
 /** @type {number} */ var $217=(($p_0+4)|0);
 HEAP32[(($217)>>2)]=$216;
 /** @type {number} */ var $218=(($189+$215)|0);
 /** @type {number} */ var $219=$218;
 HEAP32[(($219)>>2)]=$215;
 label=140;break;
 case 64: 
 /** @type {number} */ var $221=$194&-8;
 /** @type {number} */ var $222=((($221)+($psize_0))|0);
 /** @type {number} */ var $223=$194>>>3;
 /** @type {number} */ var $224=($194>>>0)<256;
 if($224){label=65;break;}else{label=77;break;}
 case 65: 
 /** @type {number} */ var $226=(($mem+$14)|0);
 /** @type {number} */ var $227=$226;
 /** @type {number} */ var $228=HEAP32[(($227)>>2)];
 /** @type {number} */ var $_sum2829=$14|4;
 /** @type {number} */ var $229=(($mem+$_sum2829)|0);
 /** @type {number} */ var $230=$229;
 /** @type {number} */ var $231=HEAP32[(($230)>>2)];
 /** @type {number} */ var $232=$223<<1;
 /** @type {number} */ var $233=((12176+($232<<2))|0);
 /** @type {number} */ var $234=$233;
 /** @type {number} */ var $235=($228|0)==($234|0);
 if($235){label=68;break;}else{label=66;break;}
 case 66: 
 /** @type {number} */ var $237=$228;
 /** @type {number} */ var $238=HEAP32[((12152)>>2)];
 /** @type {number} */ var $239=($237>>>0)<($238>>>0);
 if($239){label=76;break;}else{label=67;break;}
 case 67: 
 /** @type {number} */ var $241=(($228+12)|0);
 /** @type {number} */ var $242=HEAP32[(($241)>>2)];
 /** @type {number} */ var $243=($242|0)==($16|0);
 if($243){label=68;break;}else{label=76;break;}
 case 68: 
 /** @type {number} */ var $244=($231|0)==($228|0);
 if($244){label=69;break;}else{label=70;break;}
 case 69: 
 /** @type {number} */ var $246=1<<$223;
 /** @type {number} */ var $247=$246^-1;
 /** @type {number} */ var $248=HEAP32[((12136)>>2)];
 /** @type {number} */ var $249=$248&$247;
 HEAP32[((12136)>>2)]=$249;
 label=110;break;
 case 70: 
 /** @type {number} */ var $251=($231|0)==($234|0);
 if($251){label=71;break;}else{label=72;break;}
 case 71: 
 /** @type {number} */ var $_pre80=(($231+8)|0);
 var $_pre_phi81=$_pre80;label=74;break;
 case 72: 
 /** @type {number} */ var $253=$231;
 /** @type {number} */ var $254=HEAP32[((12152)>>2)];
 /** @type {number} */ var $255=($253>>>0)<($254>>>0);
 if($255){label=75;break;}else{label=73;break;}
 case 73: 
 /** @type {number} */ var $257=(($231+8)|0);
 /** @type {number} */ var $258=HEAP32[(($257)>>2)];
 /** @type {number} */ var $259=($258|0)==($16|0);
 if($259){var $_pre_phi81=$257;label=74;break;}else{label=75;break;}
 case 74: 
 var $_pre_phi81;
 /** @type {number} */ var $260=(($228+12)|0);
 HEAP32[(($260)>>2)]=$231;
 HEAP32[(($_pre_phi81)>>2)]=$228;
 label=110;break;
 case 75: 
 _abort();
 case 76: 
 _abort();
 case 77: 
 /** @type {number} */ var $262=$15;
 /** @type {number} */ var $_sum6=((($14)+(16))|0);
 /** @type {number} */ var $263=(($mem+$_sum6)|0);
 /** @type {number} */ var $264=$263;
 /** @type {number} */ var $265=HEAP32[(($264)>>2)];
 /** @type {number} */ var $_sum78=$14|4;
 /** @type {number} */ var $266=(($mem+$_sum78)|0);
 /** @type {number} */ var $267=$266;
 /** @type {number} */ var $268=HEAP32[(($267)>>2)];
 /** @type {number} */ var $269=($268|0)==($262|0);
 if($269){label=83;break;}else{label=78;break;}
 case 78: 
 /** @type {number} */ var $271=(($mem+$14)|0);
 /** @type {number} */ var $272=$271;
 /** @type {number} */ var $273=HEAP32[(($272)>>2)];
 /** @type {number} */ var $274=$273;
 /** @type {number} */ var $275=HEAP32[((12152)>>2)];
 /** @type {number} */ var $276=($274>>>0)<($275>>>0);
 if($276){label=82;break;}else{label=79;break;}
 case 79: 
 /** @type {number} */ var $278=(($273+12)|0);
 /** @type {number} */ var $279=HEAP32[(($278)>>2)];
 /** @type {number} */ var $280=($279|0)==($262|0);
 if($280){label=80;break;}else{label=82;break;}
 case 80: 
 /** @type {number} */ var $282=(($268+8)|0);
 /** @type {number} */ var $283=HEAP32[(($282)>>2)];
 /** @type {number} */ var $284=($283|0)==($262|0);
 if($284){label=81;break;}else{label=82;break;}
 case 81: 
 HEAP32[(($278)>>2)]=$268;
 HEAP32[(($282)>>2)]=$273;
 var $R7_1=$268;label=90;break;
 case 82: 
 _abort();
 case 83: 
 /** @type {number} */ var $_sum10=((($14)+(12))|0);
 /** @type {number} */ var $287=(($mem+$_sum10)|0);
 /** @type {number} */ var $288=$287;
 /** @type {number} */ var $289=HEAP32[(($288)>>2)];
 /** @type {number} */ var $290=($289|0)==0;
 if($290){label=84;break;}else{var $R7_0=$289;var $RP9_0=$288;label=85;break;}
 case 84: 
 /** @type {number} */ var $_sum9=((($14)+(8))|0);
 /** @type {number} */ var $292=(($mem+$_sum9)|0);
 /** @type {number} */ var $293=$292;
 /** @type {number} */ var $294=HEAP32[(($293)>>2)];
 /** @type {number} */ var $295=($294|0)==0;
 if($295){var $R7_1=0;label=90;break;}else{var $R7_0=$294;var $RP9_0=$293;label=85;break;}
 case 85: 
 var $RP9_0;
 var $R7_0;
 /** @type {number} */ var $296=(($R7_0+20)|0);
 /** @type {number} */ var $297=HEAP32[(($296)>>2)];
 /** @type {number} */ var $298=($297|0)==0;
 if($298){label=86;break;}else{var $R7_0=$297;var $RP9_0=$296;label=85;break;}
 case 86: 
 /** @type {number} */ var $300=(($R7_0+16)|0);
 /** @type {number} */ var $301=HEAP32[(($300)>>2)];
 /** @type {number} */ var $302=($301|0)==0;
 if($302){label=87;break;}else{var $R7_0=$301;var $RP9_0=$300;label=85;break;}
 case 87: 
 /** @type {number} */ var $304=$RP9_0;
 /** @type {number} */ var $305=HEAP32[((12152)>>2)];
 /** @type {number} */ var $306=($304>>>0)<($305>>>0);
 if($306){label=89;break;}else{label=88;break;}
 case 88: 
 HEAP32[(($RP9_0)>>2)]=0;
 var $R7_1=$R7_0;label=90;break;
 case 89: 
 _abort();
 case 90: 
 var $R7_1;
 /** @type {number} */ var $310=($265|0)==0;
 if($310){label=110;break;}else{label=91;break;}
 case 91: 
 /** @type {number} */ var $_sum21=((($14)+(20))|0);
 /** @type {number} */ var $312=(($mem+$_sum21)|0);
 /** @type {number} */ var $313=$312;
 /** @type {number} */ var $314=HEAP32[(($313)>>2)];
 /** @type {number} */ var $315=((12440+($314<<2))|0);
 /** @type {number} */ var $316=HEAP32[(($315)>>2)];
 /** @type {number} */ var $317=($262|0)==($316|0);
 if($317){label=92;break;}else{label=94;break;}
 case 92: 
 HEAP32[(($315)>>2)]=$R7_1;
 /** @type {number} */ var $cond69=($R7_1|0)==0;
 if($cond69){label=93;break;}else{label=100;break;}
 case 93: 
 /** @type {number} */ var $319=HEAP32[(($313)>>2)];
 /** @type {number} */ var $320=1<<$319;
 /** @type {number} */ var $321=$320^-1;
 /** @type {number} */ var $322=HEAP32[((12140)>>2)];
 /** @type {number} */ var $323=$322&$321;
 HEAP32[((12140)>>2)]=$323;
 label=110;break;
 case 94: 
 /** @type {number} */ var $325=$265;
 /** @type {number} */ var $326=HEAP32[((12152)>>2)];
 /** @type {number} */ var $327=($325>>>0)<($326>>>0);
 if($327){label=98;break;}else{label=95;break;}
 case 95: 
 /** @type {number} */ var $329=(($265+16)|0);
 /** @type {number} */ var $330=HEAP32[(($329)>>2)];
 /** @type {number} */ var $331=($330|0)==($262|0);
 if($331){label=96;break;}else{label=97;break;}
 case 96: 
 HEAP32[(($329)>>2)]=$R7_1;
 label=99;break;
 case 97: 
 /** @type {number} */ var $334=(($265+20)|0);
 HEAP32[(($334)>>2)]=$R7_1;
 label=99;break;
 case 98: 
 _abort();
 case 99: 
 /** @type {number} */ var $337=($R7_1|0)==0;
 if($337){label=110;break;}else{label=100;break;}
 case 100: 
 /** @type {number} */ var $339=$R7_1;
 /** @type {number} */ var $340=HEAP32[((12152)>>2)];
 /** @type {number} */ var $341=($339>>>0)<($340>>>0);
 if($341){label=109;break;}else{label=101;break;}
 case 101: 
 /** @type {number} */ var $343=(($R7_1+24)|0);
 HEAP32[(($343)>>2)]=$265;
 /** @type {number} */ var $_sum22=((($14)+(8))|0);
 /** @type {number} */ var $344=(($mem+$_sum22)|0);
 /** @type {number} */ var $345=$344;
 /** @type {number} */ var $346=HEAP32[(($345)>>2)];
 /** @type {number} */ var $347=($346|0)==0;
 if($347){label=105;break;}else{label=102;break;}
 case 102: 
 /** @type {number} */ var $349=$346;
 /** @type {number} */ var $350=HEAP32[((12152)>>2)];
 /** @type {number} */ var $351=($349>>>0)<($350>>>0);
 if($351){label=104;break;}else{label=103;break;}
 case 103: 
 /** @type {number} */ var $353=(($R7_1+16)|0);
 HEAP32[(($353)>>2)]=$346;
 /** @type {number} */ var $354=(($346+24)|0);
 HEAP32[(($354)>>2)]=$R7_1;
 label=105;break;
 case 104: 
 _abort();
 case 105: 
 /** @type {number} */ var $_sum23=((($14)+(12))|0);
 /** @type {number} */ var $357=(($mem+$_sum23)|0);
 /** @type {number} */ var $358=$357;
 /** @type {number} */ var $359=HEAP32[(($358)>>2)];
 /** @type {number} */ var $360=($359|0)==0;
 if($360){label=110;break;}else{label=106;break;}
 case 106: 
 /** @type {number} */ var $362=$359;
 /** @type {number} */ var $363=HEAP32[((12152)>>2)];
 /** @type {number} */ var $364=($362>>>0)<($363>>>0);
 if($364){label=108;break;}else{label=107;break;}
 case 107: 
 /** @type {number} */ var $366=(($R7_1+20)|0);
 HEAP32[(($366)>>2)]=$359;
 /** @type {number} */ var $367=(($359+24)|0);
 HEAP32[(($367)>>2)]=$R7_1;
 label=110;break;
 case 108: 
 _abort();
 case 109: 
 _abort();
 case 110: 
 /** @type {number} */ var $371=$222|1;
 /** @type {number} */ var $372=(($p_0+4)|0);
 HEAP32[(($372)>>2)]=$371;
 /** @type {number} */ var $373=(($189+$222)|0);
 /** @type {number} */ var $374=$373;
 HEAP32[(($374)>>2)]=$222;
 /** @type {number} */ var $375=HEAP32[((12156)>>2)];
 /** @type {number} */ var $376=($p_0|0)==($375|0);
 if($376){label=111;break;}else{var $psize_1=$222;label=113;break;}
 case 111: 
 HEAP32[((12144)>>2)]=$222;
 label=140;break;
 case 112: 
 /** @type {number} */ var $379=$194&-2;
 HEAP32[(($193)>>2)]=$379;
 /** @type {number} */ var $380=$psize_0|1;
 /** @type {number} */ var $381=(($p_0+4)|0);
 HEAP32[(($381)>>2)]=$380;
 /** @type {number} */ var $382=(($189+$psize_0)|0);
 /** @type {number} */ var $383=$382;
 HEAP32[(($383)>>2)]=$psize_0;
 var $psize_1=$psize_0;label=113;break;
 case 113: 
 var $psize_1;
 /** @type {number} */ var $385=$psize_1>>>3;
 /** @type {number} */ var $386=($psize_1>>>0)<256;
 if($386){label=114;break;}else{label=119;break;}
 case 114: 
 /** @type {number} */ var $388=$385<<1;
 /** @type {number} */ var $389=((12176+($388<<2))|0);
 /** @type {number} */ var $390=$389;
 /** @type {number} */ var $391=HEAP32[((12136)>>2)];
 /** @type {number} */ var $392=1<<$385;
 /** @type {number} */ var $393=$391&$392;
 /** @type {number} */ var $394=($393|0)==0;
 if($394){label=115;break;}else{label=116;break;}
 case 115: 
 /** @type {number} */ var $396=$391|$392;
 HEAP32[((12136)>>2)]=$396;
 /** @type {number} */ var $_sum19_pre=((($388)+(2))|0);
 /** @type {number} */ var $_pre=((12176+($_sum19_pre<<2))|0);
 var $F16_0=$390;var $_pre_phi=$_pre;label=118;break;
 case 116: 
 /** @type {number} */ var $_sum20=((($388)+(2))|0);
 /** @type {number} */ var $398=((12176+($_sum20<<2))|0);
 /** @type {number} */ var $399=HEAP32[(($398)>>2)];
 /** @type {number} */ var $400=$399;
 /** @type {number} */ var $401=HEAP32[((12152)>>2)];
 /** @type {number} */ var $402=($400>>>0)<($401>>>0);
 if($402){label=117;break;}else{var $F16_0=$399;var $_pre_phi=$398;label=118;break;}
 case 117: 
 _abort();
 case 118: 
 var $_pre_phi;
 var $F16_0;
 HEAP32[(($_pre_phi)>>2)]=$p_0;
 /** @type {number} */ var $405=(($F16_0+12)|0);
 HEAP32[(($405)>>2)]=$p_0;
 /** @type {number} */ var $406=(($p_0+8)|0);
 HEAP32[(($406)>>2)]=$F16_0;
 /** @type {number} */ var $407=(($p_0+12)|0);
 HEAP32[(($407)>>2)]=$390;
 label=140;break;
 case 119: 
 /** @type {number} */ var $409=$p_0;
 /** @type {number} */ var $410=$psize_1>>>8;
 /** @type {number} */ var $411=($410|0)==0;
 if($411){var $I18_0=0;label=122;break;}else{label=120;break;}
 case 120: 
 /** @type {number} */ var $413=($psize_1>>>0)>16777215;
 if($413){var $I18_0=31;label=122;break;}else{label=121;break;}
 case 121: 
 /** @type {number} */ var $415=((($410)+(1048320))|0);
 /** @type {number} */ var $416=$415>>>16;
 /** @type {number} */ var $417=$416&8;
 /** @type {number} */ var $418=$410<<$417;
 /** @type {number} */ var $419=((($418)+(520192))|0);
 /** @type {number} */ var $420=$419>>>16;
 /** @type {number} */ var $421=$420&4;
 /** @type {number} */ var $422=$421|$417;
 /** @type {number} */ var $423=$418<<$421;
 /** @type {number} */ var $424=((($423)+(245760))|0);
 /** @type {number} */ var $425=$424>>>16;
 /** @type {number} */ var $426=$425&2;
 /** @type {number} */ var $427=$422|$426;
 /** @type {number} */ var $428=(((14)-($427))|0);
 /** @type {number} */ var $429=$423<<$426;
 /** @type {number} */ var $430=$429>>>15;
 /** @type {number} */ var $431=((($428)+($430))|0);
 /** @type {number} */ var $432=$431<<1;
 /** @type {number} */ var $433=((($431)+(7))|0);
 /** @type {number} */ var $434=$psize_1>>>($433>>>0);
 /** @type {number} */ var $435=$434&1;
 /** @type {number} */ var $436=$435|$432;
 var $I18_0=$436;label=122;break;
 case 122: 
 var $I18_0;
 /** @type {number} */ var $438=((12440+($I18_0<<2))|0);
 /** @type {number} */ var $439=(($p_0+28)|0);
 /** @type {number} */ var $I18_0_c=$I18_0;
 HEAP32[(($439)>>2)]=$I18_0_c;
 /** @type {number} */ var $440=(($p_0+20)|0);
 HEAP32[(($440)>>2)]=0;
 /** @type {number} */ var $441=(($p_0+16)|0);
 HEAP32[(($441)>>2)]=0;
 /** @type {number} */ var $442=HEAP32[((12140)>>2)];
 /** @type {number} */ var $443=1<<$I18_0;
 /** @type {number} */ var $444=$442&$443;
 /** @type {number} */ var $445=($444|0)==0;
 if($445){label=123;break;}else{label=124;break;}
 case 123: 
 /** @type {number} */ var $447=$442|$443;
 HEAP32[((12140)>>2)]=$447;
 HEAP32[(($438)>>2)]=$409;
 /** @type {number} */ var $448=(($p_0+24)|0);
 /** @type {number} */ var $_c=$438;
 HEAP32[(($448)>>2)]=$_c;
 /** @type {number} */ var $449=(($p_0+12)|0);
 HEAP32[(($449)>>2)]=$p_0;
 /** @type {number} */ var $450=(($p_0+8)|0);
 HEAP32[(($450)>>2)]=$p_0;
 label=136;break;
 case 124: 
 /** @type {number} */ var $452=HEAP32[(($438)>>2)];
 /** @type {number} */ var $453=($I18_0|0)==31;
 if($453){var $458=0;label=126;break;}else{label=125;break;}
 case 125: 
 /** @type {number} */ var $455=$I18_0>>>1;
 /** @type {number} */ var $456=(((25)-($455))|0);
 var $458=$456;label=126;break;
 case 126: 
 var $458;
 /** @type {number} */ var $459=(($452+4)|0);
 /** @type {number} */ var $460=HEAP32[(($459)>>2)];
 /** @type {number} */ var $461=$460&-8;
 /** @type {number} */ var $462=($461|0)==($psize_1|0);
 if($462){var $T_0_lcssa=$452;label=133;break;}else{label=127;break;}
 case 127: 
 /** @type {number} */ var $463=$psize_1<<$458;
 var $T_072=$452;var $K19_073=$463;label=129;break;
 case 128: 
 /** @type {number} */ var $465=$K19_073<<1;
 /** @type {number} */ var $466=(($473+4)|0);
 /** @type {number} */ var $467=HEAP32[(($466)>>2)];
 /** @type {number} */ var $468=$467&-8;
 /** @type {number} */ var $469=($468|0)==($psize_1|0);
 if($469){var $T_0_lcssa=$473;label=133;break;}else{var $T_072=$473;var $K19_073=$465;label=129;break;}
 case 129: 
 var $K19_073;
 var $T_072;
 /** @type {number} */ var $471=$K19_073>>>31;
 /** @type {number} */ var $472=(($T_072+16+($471<<2))|0);
 /** @type {number} */ var $473=HEAP32[(($472)>>2)];
 /** @type {number} */ var $474=($473|0)==0;
 if($474){label=130;break;}else{label=128;break;}
 case 130: 
 /** @type {number} */ var $476=$472;
 /** @type {number} */ var $477=HEAP32[((12152)>>2)];
 /** @type {number} */ var $478=($476>>>0)<($477>>>0);
 if($478){label=132;break;}else{label=131;break;}
 case 131: 
 HEAP32[(($472)>>2)]=$409;
 /** @type {number} */ var $480=(($p_0+24)|0);
 /** @type {number} */ var $T_0_c16=$T_072;
 HEAP32[(($480)>>2)]=$T_0_c16;
 /** @type {number} */ var $481=(($p_0+12)|0);
 HEAP32[(($481)>>2)]=$p_0;
 /** @type {number} */ var $482=(($p_0+8)|0);
 HEAP32[(($482)>>2)]=$p_0;
 label=136;break;
 case 132: 
 _abort();
 case 133: 
 var $T_0_lcssa;
 /** @type {number} */ var $484=(($T_0_lcssa+8)|0);
 /** @type {number} */ var $485=HEAP32[(($484)>>2)];
 /** @type {number} */ var $486=$T_0_lcssa;
 /** @type {number} */ var $487=HEAP32[((12152)>>2)];
 /** @type {number} */ var $488=($486>>>0)>=($487>>>0);
 /** @type {number} */ var $489=$485;
 /** @type {number} */ var $490=($489>>>0)>=($487>>>0);
 /** @type {number} */ var $or_cond=$488&$490;
 if($or_cond){label=134;break;}else{label=135;break;}
 case 134: 
 /** @type {number} */ var $492=(($485+12)|0);
 HEAP32[(($492)>>2)]=$409;
 HEAP32[(($484)>>2)]=$409;
 /** @type {number} */ var $493=(($p_0+8)|0);
 /** @type {number} */ var $_c15=$485;
 HEAP32[(($493)>>2)]=$_c15;
 /** @type {number} */ var $494=(($p_0+12)|0);
 /** @type {number} */ var $T_0_c=$T_0_lcssa;
 HEAP32[(($494)>>2)]=$T_0_c;
 /** @type {number} */ var $495=(($p_0+24)|0);
 HEAP32[(($495)>>2)]=0;
 label=136;break;
 case 135: 
 _abort();
 case 136: 
 /** @type {number} */ var $497=HEAP32[((12168)>>2)];
 /** @type {number} */ var $498=((($497)-(1))|0);
 HEAP32[((12168)>>2)]=$498;
 /** @type {number} */ var $499=($498|0)==0;
 if($499){var $sp_0_in_i=12592;label=137;break;}else{label=140;break;}
 case 137: 
 var $sp_0_in_i;
 /** @type {number} */ var $sp_0_i=HEAP32[(($sp_0_in_i)>>2)];
 /** @type {number} */ var $500=($sp_0_i|0)==0;
 /** @type {number} */ var $501=(($sp_0_i+8)|0);
 if($500){label=138;break;}else{var $sp_0_in_i=$501;label=137;break;}
 case 138: 
 HEAP32[((12168)>>2)]=-1;
 label=140;break;
 case 139: 
 _abort();
 case 140: 
 return;
 }
}
Module["_free"] = _free;
/**
 * @param {number} $oldmem
 * @param {number} $bytes
 * @return {number}
 */
function _realloc($oldmem,$bytes){
/** @type {number} */ var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1=($oldmem|0)==0;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 /** @type {number} */ var $3=_malloc($bytes);
 var $mem_0=$3;label=11;break;
 case 3: 
 /** @type {number} */ var $5=($bytes>>>0)>4294967231;
 if($5){label=4;break;}else{label=5;break;}
 case 4: 
 /** @type {number} */ var $7=___errno_location();
 HEAP32[(($7)>>2)]=12;
 var $mem_0=0;label=11;break;
 case 5: 
 /** @type {number} */ var $9=($bytes>>>0)<11;
 if($9){var $14=16;label=7;break;}else{label=6;break;}
 case 6: 
 /** @type {number} */ var $11=((($bytes)+(11))|0);
 /** @type {number} */ var $12=$11&-8;
 var $14=$12;label=7;break;
 case 7: 
 var $14;
 /** @type {number} */ var $15=((($oldmem)-(8))|0);
 /** @type {number} */ var $16=$15;
 /** @type {number} */ var $17=_try_realloc_chunk($16,$14);
 /** @type {number} */ var $18=($17|0)==0;
 if($18){label=9;break;}else{label=8;break;}
 case 8: 
 /** @type {number} */ var $20=(($17+8)|0);
 /** @type {number} */ var $21=$20;
 var $mem_0=$21;label=11;break;
 case 9: 
 /** @type {number} */ var $23=_malloc($bytes);
 /** @type {number} */ var $24=($23|0)==0;
 if($24){var $mem_0=0;label=11;break;}else{label=10;break;}
 case 10: 
 /** @type {number} */ var $26=((($oldmem)-(4))|0);
 /** @type {number} */ var $27=$26;
 /** @type {number} */ var $28=HEAP32[(($27)>>2)];
 /** @type {number} */ var $29=$28&-8;
 /** @type {number} */ var $30=$28&3;
 /** @type {number} */ var $31=($30|0)==0;
 /** @type {number} */ var $32=($31?8:4);
 /** @type {number} */ var $33=((($29)-($32))|0);
 /** @type {number} */ var $34=($33>>>0)<($bytes>>>0);
 /** @type {number} */ var $35=($34?$33:$bytes);
 (_memcpy($23, $oldmem, $35)|0);
 _free($oldmem);
 var $mem_0=$23;label=11;break;
 case 11: 
 var $mem_0;
 return $mem_0;
 }
}
Module["_realloc"] = _realloc;
/**
 * @param {number} $string
 * @param {number} $endPtr
 * @return {number}
 */
function _strtod($string,$endPtr){
/** @type {number} */ var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $p_0=$string;label=2;break;
 case 2: 
 var $p_0;
 /** @type {number} */ var $2=HEAP8[($p_0)];
 /** @type {number} */ var $3=(($2<<24)>>24);
 /** @type {number} */ var $4=_isspace($3);
 /** @type {number} */ var $5=($4|0)==0;
 /** @type {number} */ var $6=(($p_0+1)|0);
 if($5){label=3;break;}else{var $p_0=$6;label=2;break;}
 case 3: 
 /** @type {number} */ var $8=HEAP8[($p_0)];
 if((($8<<24)>>24)==45){ label=4;break;}else if((($8<<24)>>24)==43){ label=5;break;}else{var $p_2=$p_0;var $sign_0=0;label=6;break;}
 case 4: 
 var $p_2=$6;var $sign_0=1;label=6;break;
 case 5: 
 var $p_2=$6;var $sign_0=0;label=6;break;
 case 6: 
 var $sign_0;
 var $p_2;
 var $decPt_0=-1;var $mantSize_0=0;var $p_3=$p_2;label=7;break;
 case 7: 
 var $p_3;
 var $mantSize_0;
 var $decPt_0;
 /** @type {number} */ var $13=HEAP8[($p_3)];
 /** @type {number} */ var $14=(($13<<24)>>24);
 /** @type {number} */ var $isdigittmp=((($14)-(48))|0);
 /** @type {number} */ var $isdigit=($isdigittmp>>>0)<10;
 if($isdigit){var $decPt_1=$decPt_0;label=9;break;}else{label=8;break;}
 case 8: 
 /** @type {number} */ var $16=(($13<<24)>>24)!=46;
 /** @type {number} */ var $17=($decPt_0|0)>-1;
 /** @type {number} */ var $or_cond=$16|$17;
 if($or_cond){label=10;break;}else{var $decPt_1=$mantSize_0;label=9;break;}
 case 9: 
 var $decPt_1;
 /** @type {number} */ var $19=(($p_3+1)|0);
 /** @type {number} */ var $20=((($mantSize_0)+(1))|0);
 var $decPt_0=$decPt_1;var $mantSize_0=$20;var $p_3=$19;label=7;break;
 case 10: 
 /** @type {number} */ var $22=(((-$mantSize_0))|0);
 /** @type {number} */ var $23=(($p_3+$22)|0);
 /** @type {number} */ var $24=($decPt_0|0)<0;
 /** @type {number} */ var $not_=$24^1;
 /** @type {number} */ var $25=(($not_<<31)>>31);
 /** @type {number} */ var $mantSize_1=((($25)+($mantSize_0))|0);
 /** @type {number} */ var $decPt_2=($24?$mantSize_0:$decPt_0);
 /** @type {number} */ var $26=($mantSize_1|0)>18;
 /** @type {number} */ var $27=(((-$mantSize_1))|0);
 /** @type {number} */ var $fracExp_0_p=($26?-18:$27);
 /** @type {number} */ var $fracExp_0=((($fracExp_0_p)+($decPt_2))|0);
 /** @type {number} */ var $mantSize_2=($26?18:$mantSize_1);
 /** @type {number} */ var $28=($mantSize_2|0)==0;
 if($28){var $p_11=$string;var $fraction_0=0;label=37;break;}else{label=11;break;}
 case 11: 
 /** @type {number} */ var $29=($mantSize_2|0)>9;
 if($29){var $p_423=$23;var $mantSize_324=$mantSize_2;var $frac1_025=0;label=15;break;}else{label=13;break;}
 case 12: 
 /** @type {number} */ var $phitmp=($40|0);
 /** @type {number} */ var $phitmp30=($phitmp)*(1000000000);
 var $frac1_0_lcssa37=$phitmp30;var $mantSize_3_lcssa38=9;var $p_4_lcssa39=$p_5;label=14;break;
 case 13: 
 /** @type {number} */ var $30=($mantSize_2|0)>0;
 if($30){var $frac1_0_lcssa37=0;var $mantSize_3_lcssa38=$mantSize_2;var $p_4_lcssa39=$23;label=14;break;}else{var $frac2_0_lcssa=0;var $frac1_0_lcssa36=0;label=22;break;}
 case 14: 
 var $p_4_lcssa39;
 var $mantSize_3_lcssa38;
 var $frac1_0_lcssa37;
 var $p_616=$p_4_lcssa39;var $mantSize_417=$mantSize_3_lcssa38;var $frac2_018=0;label=18;break;
 case 15: 
 var $frac1_025;
 var $mantSize_324;
 var $p_423;
 /** @type {number} */ var $31=HEAP8[($p_423)];
 /** @type {number} */ var $32=(($p_423+1)|0);
 /** @type {number} */ var $33=(($31<<24)>>24)==46;
 if($33){label=16;break;}else{var $c_0_in=$31;var $p_5=$32;label=17;break;}
 case 16: 
 /** @type {number} */ var $35=HEAP8[($32)];
 /** @type {number} */ var $36=(($p_423+2)|0);
 var $c_0_in=$35;var $p_5=$36;label=17;break;
 case 17: 
 var $p_5;
 var $c_0_in;
 /** @type {number} */ var $c_0=(($c_0_in<<24)>>24);
 /** @type {number} */ var $38=((($frac1_025)*(10))&-1);
 /** @type {number} */ var $39=((($38)-(48))|0);
 /** @type {number} */ var $40=((($39)+($c_0))|0);
 /** @type {number} */ var $41=((($mantSize_324)-(1))|0);
 /** @type {number} */ var $42=($41|0)>9;
 if($42){var $p_423=$p_5;var $mantSize_324=$41;var $frac1_025=$40;label=15;break;}else{label=12;break;}
 case 18: 
 var $frac2_018;
 var $mantSize_417;
 var $p_616;
 /** @type {number} */ var $44=HEAP8[($p_616)];
 /** @type {number} */ var $45=(($p_616+1)|0);
 /** @type {number} */ var $46=(($44<<24)>>24)==46;
 if($46){label=19;break;}else{var $c_1_in=$44;var $p_7=$45;label=20;break;}
 case 19: 
 /** @type {number} */ var $48=HEAP8[($45)];
 /** @type {number} */ var $49=(($p_616+2)|0);
 var $c_1_in=$48;var $p_7=$49;label=20;break;
 case 20: 
 var $p_7;
 var $c_1_in;
 /** @type {number} */ var $c_1=(($c_1_in<<24)>>24);
 /** @type {number} */ var $51=((($frac2_018)*(10))&-1);
 /** @type {number} */ var $52=((($51)-(48))|0);
 /** @type {number} */ var $53=((($52)+($c_1))|0);
 /** @type {number} */ var $54=((($mantSize_417)-(1))|0);
 /** @type {number} */ var $55=($54|0)>0;
 if($55){var $p_616=$p_7;var $mantSize_417=$54;var $frac2_018=$53;label=18;break;}else{label=21;break;}
 case 21: 
 /** @type {number} */ var $phitmp31=($53|0);
 var $frac2_0_lcssa=$phitmp31;var $frac1_0_lcssa36=$frac1_0_lcssa37;label=22;break;
 case 22: 
 var $frac1_0_lcssa36;
 var $frac2_0_lcssa;
 /** @type {number} */ var $57=($frac1_0_lcssa36)+($frac2_0_lcssa);
 if((($13<<24)>>24)==69|(($13<<24)>>24)==101){ label=23;break;}else{var $exp_1=0;var $p_10=$p_3;var $expSign_1=0;label=28;break;}
 case 23: 
 /** @type {number} */ var $59=(($p_3+1)|0);
 /** @type {number} */ var $60=HEAP8[($59)];
 if((($60<<24)>>24)==45){ label=24;break;}else if((($60<<24)>>24)==43){ label=25;break;}else{var $p_9_ph=$59;var $expSign_0_ph=0;label=26;break;}
 case 24: 
 /** @type {number} */ var $62=(($p_3+2)|0);
 var $p_9_ph=$62;var $expSign_0_ph=1;label=26;break;
 case 25: 
 /** @type {number} */ var $64=(($p_3+2)|0);
 var $p_9_ph=$64;var $expSign_0_ph=0;label=26;break;
 case 26: 
 var $expSign_0_ph;
 var $p_9_ph;
 /** @type {number} */ var $65=HEAP8[($p_9_ph)];
 /** @type {number} */ var $66=(($65<<24)>>24);
 /** @type {number} */ var $isdigittmp28=((($66)-(48))|0);
 /** @type {number} */ var $isdigit39=($isdigittmp28>>>0)<10;
 if($isdigit39){var $p_910=$p_9_ph;var $exp_011=0;var $67=$66;label=27;break;}else{var $exp_1=0;var $p_10=$p_9_ph;var $expSign_1=$expSign_0_ph;label=28;break;}
 case 27: 
 var $67;
 var $exp_011;
 var $p_910;
 /** @type {number} */ var $68=((($exp_011)*(10))&-1);
 /** @type {number} */ var $69=((($68)-(48))|0);
 /** @type {number} */ var $70=((($69)+($67))|0);
 /** @type {number} */ var $71=(($p_910+1)|0);
 /** @type {number} */ var $72=HEAP8[($71)];
 /** @type {number} */ var $73=(($72<<24)>>24);
 /** @type {number} */ var $isdigittmp2=((($73)-(48))|0);
 /** @type {number} */ var $isdigit3=($isdigittmp2>>>0)<10;
 if($isdigit3){var $p_910=$71;var $exp_011=$70;var $67=$73;label=27;break;}else{var $exp_1=$70;var $p_10=$71;var $expSign_1=$expSign_0_ph;label=28;break;}
 case 28: 
 var $expSign_1;
 var $p_10;
 var $exp_1;
 /** @type {number} */ var $74=($expSign_1|0)==0;
 /** @type {number} */ var $75=(((-$exp_1))|0);
 /** @type {number} */ var $exp_2_p=($74?$exp_1:$75);
 /** @type {number} */ var $exp_2=((($fracExp_0)+($exp_2_p))|0);
 /** @type {number} */ var $76=($exp_2|0)<0;
 /** @type {number} */ var $77=(((-$exp_2))|0);
 /** @type {number} */ var $exp_3=($76?$77:$exp_2);
 /** @type {number} */ var $78=($exp_3|0)>511;
 if($78){label=29;break;}else{label=30;break;}
 case 29: 
 /** @type {number} */ var $79=___errno_location();
 HEAP32[(($79)>>2)]=34;
 var $dblExp_04=1;var $d_05=328;var $exp_56=511;label=31;break;
 case 30: 
 /** @type {number} */ var $80=($exp_3|0)==0;
 if($80){var $dblExp_0_lcssa=1;label=34;break;}else{var $dblExp_04=1;var $d_05=328;var $exp_56=$exp_3;label=31;break;}
 case 31: 
 var $exp_56;
 var $d_05;
 var $dblExp_04;
 /** @type {number} */ var $81=$exp_56&1;
 /** @type {number} */ var $82=($81|0)==0;
 if($82){var $dblExp_1=$dblExp_04;label=33;break;}else{label=32;break;}
 case 32: 
 /** @type {number} */ var $84=HEAPF64[(($d_05)>>3)];
 /** @type {number} */ var $85=($dblExp_04)*($84);
 var $dblExp_1=$85;label=33;break;
 case 33: 
 var $dblExp_1;
 /** @type {number} */ var $87=$exp_56>>1;
 /** @type {number} */ var $88=(($d_05+8)|0);
 /** @type {number} */ var $89=($87|0)==0;
 if($89){var $dblExp_0_lcssa=$dblExp_1;label=34;break;}else{var $dblExp_04=$dblExp_1;var $d_05=$88;var $exp_56=$87;label=31;break;}
 case 34: 
 var $dblExp_0_lcssa;
 /** @type {number} */ var $90=($exp_2|0)>-1;
 if($90){label=36;break;}else{label=35;break;}
 case 35: 
 /** @type {number} */ var $92=($57)/($dblExp_0_lcssa);
 var $p_11=$p_10;var $fraction_0=$92;label=37;break;
 case 36: 
 /** @type {number} */ var $94=($57)*($dblExp_0_lcssa);
 var $p_11=$p_10;var $fraction_0=$94;label=37;break;
 case 37: 
 var $fraction_0;
 var $p_11;
 /** @type {number} */ var $96=($endPtr|0)==0;
 if($96){label=39;break;}else{label=38;break;}
 case 38: 
 HEAP32[(($endPtr)>>2)]=$p_11;
 label=39;break;
 case 39: 
 /** @type {number} */ var $99=($sign_0|0)==0;
 if($99){var $_0=$fraction_0;label=41;break;}else{label=40;break;}
 case 40: 
 /** @type {number} */ var $101=((-.0))-($fraction_0);
 var $_0=$101;label=41;break;
 case 41: 
 var $_0;
 return $_0;
 }
}
/**
 * @param {number} $p
 * @param {number} $nb
 * @return {number}
 */
function _try_realloc_chunk($p,$nb){
/** @type {number} */ var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1=(($p+4)|0);
 /** @type {number} */ var $2=HEAP32[(($1)>>2)];
 /** @type {number} */ var $3=$2&-8;
 /** @type {number} */ var $4=$p;
 /** @type {number} */ var $5=(($4+$3)|0);
 /** @type {number} */ var $6=$5;
 /** @type {number} */ var $7=HEAP32[((12152)>>2)];
 /** @type {number} */ var $8=$2&3;
 /** @type {number} */ var $notlhs=($4>>>0)>=($7>>>0);
 /** @type {number} */ var $notrhs=($8|0)!=1;
 /** @type {number} */ var $or_cond_not=$notrhs&$notlhs;
 /** @type {number} */ var $9=($4>>>0)<($5>>>0);
 /** @type {number} */ var $or_cond36=$or_cond_not&$9;
 if($or_cond36){label=2;break;}else{label=71;break;}
 case 2: 
 /** @type {number} */ var $_sum3334=$3|4;
 /** @type {number} */ var $11=(($4+$_sum3334)|0);
 /** @type {number} */ var $12=$11;
 /** @type {number} */ var $13=HEAP32[(($12)>>2)];
 /** @type {number} */ var $14=$13&1;
 /** @type {number} */ var $phitmp=($14|0)==0;
 if($phitmp){label=71;break;}else{label=3;break;}
 case 3: 
 /** @type {number} */ var $16=($8|0)==0;
 if($16){label=4;break;}else{label=8;break;}
 case 4: 
 /** @type {number} */ var $18=($nb>>>0)<256;
 if($18){var $newp_0=0;label=72;break;}else{label=5;break;}
 case 5: 
 /** @type {number} */ var $20=((($nb)+(4))|0);
 /** @type {number} */ var $21=($3>>>0)<($20>>>0);
 if($21){label=7;break;}else{label=6;break;}
 case 6: 
 /** @type {number} */ var $23=((($3)-($nb))|0);
 /** @type {number} */ var $24=HEAP32[((12072)>>2)];
 /** @type {number} */ var $25=$24<<1;
 /** @type {number} */ var $26=($23>>>0)>($25>>>0);
 if($26){label=7;break;}else{var $newp_0=$p;label=72;break;}
 case 7: 
 var $newp_0=0;label=72;break;
 case 8: 
 /** @type {number} */ var $29=($3>>>0)<($nb>>>0);
 if($29){label=11;break;}else{label=9;break;}
 case 9: 
 /** @type {number} */ var $31=((($3)-($nb))|0);
 /** @type {number} */ var $32=($31>>>0)>15;
 if($32){label=10;break;}else{var $newp_0=$p;label=72;break;}
 case 10: 
 /** @type {number} */ var $34=(($4+$nb)|0);
 /** @type {number} */ var $35=$34;
 /** @type {number} */ var $36=$2&1;
 /** @type {number} */ var $37=$36|$nb;
 /** @type {number} */ var $38=$37|2;
 HEAP32[(($1)>>2)]=$38;
 /** @type {number} */ var $_sum29=((($nb)+(4))|0);
 /** @type {number} */ var $39=(($4+$_sum29)|0);
 /** @type {number} */ var $40=$39;
 /** @type {number} */ var $41=$31|3;
 HEAP32[(($40)>>2)]=$41;
 /** @type {number} */ var $42=HEAP32[(($12)>>2)];
 /** @type {number} */ var $43=$42|1;
 HEAP32[(($12)>>2)]=$43;
 _dispose_chunk($35,$31);
 var $newp_0=$p;label=72;break;
 case 11: 
 /** @type {number} */ var $45=HEAP32[((12160)>>2)];
 /** @type {number} */ var $46=($6|0)==($45|0);
 if($46){label=12;break;}else{label=14;break;}
 case 12: 
 /** @type {number} */ var $48=HEAP32[((12148)>>2)];
 /** @type {number} */ var $49=((($48)+($3))|0);
 /** @type {number} */ var $50=($49>>>0)>($nb>>>0);
 if($50){label=13;break;}else{var $newp_0=0;label=72;break;}
 case 13: 
 /** @type {number} */ var $52=((($49)-($nb))|0);
 /** @type {number} */ var $53=(($4+$nb)|0);
 /** @type {number} */ var $54=$53;
 /** @type {number} */ var $55=$2&1;
 /** @type {number} */ var $56=$55|$nb;
 /** @type {number} */ var $57=$56|2;
 HEAP32[(($1)>>2)]=$57;
 /** @type {number} */ var $_sum28=((($nb)+(4))|0);
 /** @type {number} */ var $58=(($4+$_sum28)|0);
 /** @type {number} */ var $59=$58;
 /** @type {number} */ var $60=$52|1;
 HEAP32[(($59)>>2)]=$60;
 HEAP32[((12160)>>2)]=$54;
 HEAP32[((12148)>>2)]=$52;
 var $newp_0=$p;label=72;break;
 case 14: 
 /** @type {number} */ var $62=HEAP32[((12156)>>2)];
 /** @type {number} */ var $63=($6|0)==($62|0);
 if($63){label=15;break;}else{label=20;break;}
 case 15: 
 /** @type {number} */ var $65=HEAP32[((12144)>>2)];
 /** @type {number} */ var $66=((($65)+($3))|0);
 /** @type {number} */ var $67=($66>>>0)<($nb>>>0);
 if($67){var $newp_0=0;label=72;break;}else{label=16;break;}
 case 16: 
 /** @type {number} */ var $69=((($66)-($nb))|0);
 /** @type {number} */ var $70=($69>>>0)>15;
 if($70){label=17;break;}else{label=18;break;}
 case 17: 
 /** @type {number} */ var $72=(($4+$nb)|0);
 /** @type {number} */ var $73=$72;
 /** @type {number} */ var $74=(($4+$66)|0);
 /** @type {number} */ var $75=$2&1;
 /** @type {number} */ var $76=$75|$nb;
 /** @type {number} */ var $77=$76|2;
 HEAP32[(($1)>>2)]=$77;
 /** @type {number} */ var $_sum25=((($nb)+(4))|0);
 /** @type {number} */ var $78=(($4+$_sum25)|0);
 /** @type {number} */ var $79=$78;
 /** @type {number} */ var $80=$69|1;
 HEAP32[(($79)>>2)]=$80;
 /** @type {number} */ var $81=$74;
 HEAP32[(($81)>>2)]=$69;
 /** @type {number} */ var $_sum26=((($66)+(4))|0);
 /** @type {number} */ var $82=(($4+$_sum26)|0);
 /** @type {number} */ var $83=$82;
 /** @type {number} */ var $84=HEAP32[(($83)>>2)];
 /** @type {number} */ var $85=$84&-2;
 HEAP32[(($83)>>2)]=$85;
 var $storemerge=$73;var $storemerge27=$69;label=19;break;
 case 18: 
 /** @type {number} */ var $87=$2&1;
 /** @type {number} */ var $88=$87|$66;
 /** @type {number} */ var $89=$88|2;
 HEAP32[(($1)>>2)]=$89;
 /** @type {number} */ var $_sum23=((($66)+(4))|0);
 /** @type {number} */ var $90=(($4+$_sum23)|0);
 /** @type {number} */ var $91=$90;
 /** @type {number} */ var $92=HEAP32[(($91)>>2)];
 /** @type {number} */ var $93=$92|1;
 HEAP32[(($91)>>2)]=$93;
 var $storemerge=0;var $storemerge27=0;label=19;break;
 case 19: 
 var $storemerge27;
 var $storemerge;
 HEAP32[((12144)>>2)]=$storemerge27;
 HEAP32[((12156)>>2)]=$storemerge;
 var $newp_0=$p;label=72;break;
 case 20: 
 /** @type {number} */ var $96=$13&2;
 /** @type {number} */ var $97=($96|0)==0;
 if($97){label=21;break;}else{var $newp_0=0;label=72;break;}
 case 21: 
 /** @type {number} */ var $99=$13&-8;
 /** @type {number} */ var $100=((($99)+($3))|0);
 /** @type {number} */ var $101=($100>>>0)<($nb>>>0);
 if($101){var $newp_0=0;label=72;break;}else{label=22;break;}
 case 22: 
 /** @type {number} */ var $103=((($100)-($nb))|0);
 /** @type {number} */ var $104=$13>>>3;
 /** @type {number} */ var $105=($13>>>0)<256;
 if($105){label=23;break;}else{label=35;break;}
 case 23: 
 /** @type {number} */ var $_sum17=((($3)+(8))|0);
 /** @type {number} */ var $107=(($4+$_sum17)|0);
 /** @type {number} */ var $108=$107;
 /** @type {number} */ var $109=HEAP32[(($108)>>2)];
 /** @type {number} */ var $_sum18=((($3)+(12))|0);
 /** @type {number} */ var $110=(($4+$_sum18)|0);
 /** @type {number} */ var $111=$110;
 /** @type {number} */ var $112=HEAP32[(($111)>>2)];
 /** @type {number} */ var $113=$104<<1;
 /** @type {number} */ var $114=((12176+($113<<2))|0);
 /** @type {number} */ var $115=$114;
 /** @type {number} */ var $116=($109|0)==($115|0);
 if($116){label=26;break;}else{label=24;break;}
 case 24: 
 /** @type {number} */ var $118=$109;
 /** @type {number} */ var $119=($118>>>0)<($7>>>0);
 if($119){label=34;break;}else{label=25;break;}
 case 25: 
 /** @type {number} */ var $121=(($109+12)|0);
 /** @type {number} */ var $122=HEAP32[(($121)>>2)];
 /** @type {number} */ var $123=($122|0)==($6|0);
 if($123){label=26;break;}else{label=34;break;}
 case 26: 
 /** @type {number} */ var $124=($112|0)==($109|0);
 if($124){label=27;break;}else{label=28;break;}
 case 27: 
 /** @type {number} */ var $126=1<<$104;
 /** @type {number} */ var $127=$126^-1;
 /** @type {number} */ var $128=HEAP32[((12136)>>2)];
 /** @type {number} */ var $129=$128&$127;
 HEAP32[((12136)>>2)]=$129;
 label=68;break;
 case 28: 
 /** @type {number} */ var $131=($112|0)==($115|0);
 if($131){label=29;break;}else{label=30;break;}
 case 29: 
 /** @type {number} */ var $_pre=(($112+8)|0);
 var $_pre_phi=$_pre;label=32;break;
 case 30: 
 /** @type {number} */ var $133=$112;
 /** @type {number} */ var $134=($133>>>0)<($7>>>0);
 if($134){label=33;break;}else{label=31;break;}
 case 31: 
 /** @type {number} */ var $136=(($112+8)|0);
 /** @type {number} */ var $137=HEAP32[(($136)>>2)];
 /** @type {number} */ var $138=($137|0)==($6|0);
 if($138){var $_pre_phi=$136;label=32;break;}else{label=33;break;}
 case 32: 
 var $_pre_phi;
 /** @type {number} */ var $139=(($109+12)|0);
 HEAP32[(($139)>>2)]=$112;
 HEAP32[(($_pre_phi)>>2)]=$109;
 label=68;break;
 case 33: 
 _abort();
 case 34: 
 _abort();
 case 35: 
 /** @type {number} */ var $141=$5;
 /** @type {number} */ var $_sum=((($3)+(24))|0);
 /** @type {number} */ var $142=(($4+$_sum)|0);
 /** @type {number} */ var $143=$142;
 /** @type {number} */ var $144=HEAP32[(($143)>>2)];
 /** @type {number} */ var $_sum2=((($3)+(12))|0);
 /** @type {number} */ var $145=(($4+$_sum2)|0);
 /** @type {number} */ var $146=$145;
 /** @type {number} */ var $147=HEAP32[(($146)>>2)];
 /** @type {number} */ var $148=($147|0)==($141|0);
 if($148){label=41;break;}else{label=36;break;}
 case 36: 
 /** @type {number} */ var $_sum14=((($3)+(8))|0);
 /** @type {number} */ var $150=(($4+$_sum14)|0);
 /** @type {number} */ var $151=$150;
 /** @type {number} */ var $152=HEAP32[(($151)>>2)];
 /** @type {number} */ var $153=$152;
 /** @type {number} */ var $154=($153>>>0)<($7>>>0);
 if($154){label=40;break;}else{label=37;break;}
 case 37: 
 /** @type {number} */ var $156=(($152+12)|0);
 /** @type {number} */ var $157=HEAP32[(($156)>>2)];
 /** @type {number} */ var $158=($157|0)==($141|0);
 if($158){label=38;break;}else{label=40;break;}
 case 38: 
 /** @type {number} */ var $160=(($147+8)|0);
 /** @type {number} */ var $161=HEAP32[(($160)>>2)];
 /** @type {number} */ var $162=($161|0)==($141|0);
 if($162){label=39;break;}else{label=40;break;}
 case 39: 
 HEAP32[(($156)>>2)]=$147;
 HEAP32[(($160)>>2)]=$152;
 var $R_1=$147;label=48;break;
 case 40: 
 _abort();
 case 41: 
 /** @type {number} */ var $_sum4=((($3)+(20))|0);
 /** @type {number} */ var $165=(($4+$_sum4)|0);
 /** @type {number} */ var $166=$165;
 /** @type {number} */ var $167=HEAP32[(($166)>>2)];
 /** @type {number} */ var $168=($167|0)==0;
 if($168){label=42;break;}else{var $R_0=$167;var $RP_0=$166;label=43;break;}
 case 42: 
 /** @type {number} */ var $_sum3=((($3)+(16))|0);
 /** @type {number} */ var $170=(($4+$_sum3)|0);
 /** @type {number} */ var $171=$170;
 /** @type {number} */ var $172=HEAP32[(($171)>>2)];
 /** @type {number} */ var $173=($172|0)==0;
 if($173){var $R_1=0;label=48;break;}else{var $R_0=$172;var $RP_0=$171;label=43;break;}
 case 43: 
 var $RP_0;
 var $R_0;
 /** @type {number} */ var $174=(($R_0+20)|0);
 /** @type {number} */ var $175=HEAP32[(($174)>>2)];
 /** @type {number} */ var $176=($175|0)==0;
 if($176){label=44;break;}else{var $R_0=$175;var $RP_0=$174;label=43;break;}
 case 44: 
 /** @type {number} */ var $178=(($R_0+16)|0);
 /** @type {number} */ var $179=HEAP32[(($178)>>2)];
 /** @type {number} */ var $180=($179|0)==0;
 if($180){label=45;break;}else{var $R_0=$179;var $RP_0=$178;label=43;break;}
 case 45: 
 /** @type {number} */ var $182=$RP_0;
 /** @type {number} */ var $183=($182>>>0)<($7>>>0);
 if($183){label=47;break;}else{label=46;break;}
 case 46: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=48;break;
 case 47: 
 _abort();
 case 48: 
 var $R_1;
 /** @type {number} */ var $187=($144|0)==0;
 if($187){label=68;break;}else{label=49;break;}
 case 49: 
 /** @type {number} */ var $_sum11=((($3)+(28))|0);
 /** @type {number} */ var $189=(($4+$_sum11)|0);
 /** @type {number} */ var $190=$189;
 /** @type {number} */ var $191=HEAP32[(($190)>>2)];
 /** @type {number} */ var $192=((12440+($191<<2))|0);
 /** @type {number} */ var $193=HEAP32[(($192)>>2)];
 /** @type {number} */ var $194=($141|0)==($193|0);
 if($194){label=50;break;}else{label=52;break;}
 case 50: 
 HEAP32[(($192)>>2)]=$R_1;
 /** @type {number} */ var $cond=($R_1|0)==0;
 if($cond){label=51;break;}else{label=58;break;}
 case 51: 
 /** @type {number} */ var $196=HEAP32[(($190)>>2)];
 /** @type {number} */ var $197=1<<$196;
 /** @type {number} */ var $198=$197^-1;
 /** @type {number} */ var $199=HEAP32[((12140)>>2)];
 /** @type {number} */ var $200=$199&$198;
 HEAP32[((12140)>>2)]=$200;
 label=68;break;
 case 52: 
 /** @type {number} */ var $202=$144;
 /** @type {number} */ var $203=HEAP32[((12152)>>2)];
 /** @type {number} */ var $204=($202>>>0)<($203>>>0);
 if($204){label=56;break;}else{label=53;break;}
 case 53: 
 /** @type {number} */ var $206=(($144+16)|0);
 /** @type {number} */ var $207=HEAP32[(($206)>>2)];
 /** @type {number} */ var $208=($207|0)==($141|0);
 if($208){label=54;break;}else{label=55;break;}
 case 54: 
 HEAP32[(($206)>>2)]=$R_1;
 label=57;break;
 case 55: 
 /** @type {number} */ var $211=(($144+20)|0);
 HEAP32[(($211)>>2)]=$R_1;
 label=57;break;
 case 56: 
 _abort();
 case 57: 
 /** @type {number} */ var $214=($R_1|0)==0;
 if($214){label=68;break;}else{label=58;break;}
 case 58: 
 /** @type {number} */ var $216=$R_1;
 /** @type {number} */ var $217=HEAP32[((12152)>>2)];
 /** @type {number} */ var $218=($216>>>0)<($217>>>0);
 if($218){label=67;break;}else{label=59;break;}
 case 59: 
 /** @type {number} */ var $220=(($R_1+24)|0);
 HEAP32[(($220)>>2)]=$144;
 /** @type {number} */ var $_sum12=((($3)+(16))|0);
 /** @type {number} */ var $221=(($4+$_sum12)|0);
 /** @type {number} */ var $222=$221;
 /** @type {number} */ var $223=HEAP32[(($222)>>2)];
 /** @type {number} */ var $224=($223|0)==0;
 if($224){label=63;break;}else{label=60;break;}
 case 60: 
 /** @type {number} */ var $226=$223;
 /** @type {number} */ var $227=HEAP32[((12152)>>2)];
 /** @type {number} */ var $228=($226>>>0)<($227>>>0);
 if($228){label=62;break;}else{label=61;break;}
 case 61: 
 /** @type {number} */ var $230=(($R_1+16)|0);
 HEAP32[(($230)>>2)]=$223;
 /** @type {number} */ var $231=(($223+24)|0);
 HEAP32[(($231)>>2)]=$R_1;
 label=63;break;
 case 62: 
 _abort();
 case 63: 
 /** @type {number} */ var $_sum13=((($3)+(20))|0);
 /** @type {number} */ var $234=(($4+$_sum13)|0);
 /** @type {number} */ var $235=$234;
 /** @type {number} */ var $236=HEAP32[(($235)>>2)];
 /** @type {number} */ var $237=($236|0)==0;
 if($237){label=68;break;}else{label=64;break;}
 case 64: 
 /** @type {number} */ var $239=$236;
 /** @type {number} */ var $240=HEAP32[((12152)>>2)];
 /** @type {number} */ var $241=($239>>>0)<($240>>>0);
 if($241){label=66;break;}else{label=65;break;}
 case 65: 
 /** @type {number} */ var $243=(($R_1+20)|0);
 HEAP32[(($243)>>2)]=$236;
 /** @type {number} */ var $244=(($236+24)|0);
 HEAP32[(($244)>>2)]=$R_1;
 label=68;break;
 case 66: 
 _abort();
 case 67: 
 _abort();
 case 68: 
 /** @type {number} */ var $248=($103>>>0)<16;
 if($248){label=69;break;}else{label=70;break;}
 case 69: 
 /** @type {number} */ var $250=HEAP32[(($1)>>2)];
 /** @type {number} */ var $251=$250&1;
 /** @type {number} */ var $252=$100|$251;
 /** @type {number} */ var $253=$252|2;
 HEAP32[(($1)>>2)]=$253;
 /** @type {number} */ var $_sum910=$100|4;
 /** @type {number} */ var $254=(($4+$_sum910)|0);
 /** @type {number} */ var $255=$254;
 /** @type {number} */ var $256=HEAP32[(($255)>>2)];
 /** @type {number} */ var $257=$256|1;
 HEAP32[(($255)>>2)]=$257;
 var $newp_0=$p;label=72;break;
 case 70: 
 /** @type {number} */ var $259=(($4+$nb)|0);
 /** @type {number} */ var $260=$259;
 /** @type {number} */ var $261=HEAP32[(($1)>>2)];
 /** @type {number} */ var $262=$261&1;
 /** @type {number} */ var $263=$262|$nb;
 /** @type {number} */ var $264=$263|2;
 HEAP32[(($1)>>2)]=$264;
 /** @type {number} */ var $_sum5=((($nb)+(4))|0);
 /** @type {number} */ var $265=(($4+$_sum5)|0);
 /** @type {number} */ var $266=$265;
 /** @type {number} */ var $267=$103|3;
 HEAP32[(($266)>>2)]=$267;
 /** @type {number} */ var $_sum78=$100|4;
 /** @type {number} */ var $268=(($4+$_sum78)|0);
 /** @type {number} */ var $269=$268;
 /** @type {number} */ var $270=HEAP32[(($269)>>2)];
 /** @type {number} */ var $271=$270|1;
 HEAP32[(($269)>>2)]=$271;
 _dispose_chunk($260,$103);
 var $newp_0=$p;label=72;break;
 case 71: 
 _abort();
 case 72: 
 var $newp_0;
 return $newp_0;
 }
}
/**
 * @param {number} $p
 * @param {number} $psize
 * @return {number}
 */
function _dispose_chunk($p,$psize){
/** @type {number} */ var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 /** @type {number} */ var $1=$p;
 /** @type {number} */ var $2=(($1+$psize)|0);
 /** @type {number} */ var $3=$2;
 /** @type {number} */ var $4=(($p+4)|0);
 /** @type {number} */ var $5=HEAP32[(($4)>>2)];
 /** @type {number} */ var $6=$5&1;
 /** @type {number} */ var $7=($6|0)==0;
 if($7){label=2;break;}else{var $_0=$p;var $_02=$psize;label=54;break;}
 case 2: 
 /** @type {number} */ var $9=(($p)|0);
 /** @type {number} */ var $10=HEAP32[(($9)>>2)];
 /** @type {number} */ var $11=$5&3;
 /** @type {number} */ var $12=($11|0)==0;
 if($12){label=134;break;}else{label=3;break;}
 case 3: 
 /** @type {number} */ var $14=(((-$10))|0);
 /** @type {number} */ var $15=(($1+$14)|0);
 /** @type {number} */ var $16=$15;
 /** @type {number} */ var $17=((($10)+($psize))|0);
 /** @type {number} */ var $18=HEAP32[((12152)>>2)];
 /** @type {number} */ var $19=($15>>>0)<($18>>>0);
 if($19){label=53;break;}else{label=4;break;}
 case 4: 
 /** @type {number} */ var $21=HEAP32[((12156)>>2)];
 /** @type {number} */ var $22=($16|0)==($21|0);
 if($22){label=51;break;}else{label=5;break;}
 case 5: 
 /** @type {number} */ var $24=$10>>>3;
 /** @type {number} */ var $25=($10>>>0)<256;
 if($25){label=6;break;}else{label=18;break;}
 case 6: 
 /** @type {number} */ var $_sum35=(((8)-($10))|0);
 /** @type {number} */ var $27=(($1+$_sum35)|0);
 /** @type {number} */ var $28=$27;
 /** @type {number} */ var $29=HEAP32[(($28)>>2)];
 /** @type {number} */ var $_sum36=(((12)-($10))|0);
 /** @type {number} */ var $30=(($1+$_sum36)|0);
 /** @type {number} */ var $31=$30;
 /** @type {number} */ var $32=HEAP32[(($31)>>2)];
 /** @type {number} */ var $33=$24<<1;
 /** @type {number} */ var $34=((12176+($33<<2))|0);
 /** @type {number} */ var $35=$34;
 /** @type {number} */ var $36=($29|0)==($35|0);
 if($36){label=9;break;}else{label=7;break;}
 case 7: 
 /** @type {number} */ var $38=$29;
 /** @type {number} */ var $39=($38>>>0)<($18>>>0);
 if($39){label=17;break;}else{label=8;break;}
 case 8: 
 /** @type {number} */ var $41=(($29+12)|0);
 /** @type {number} */ var $42=HEAP32[(($41)>>2)];
 /** @type {number} */ var $43=($42|0)==($16|0);
 if($43){label=9;break;}else{label=17;break;}
 case 9: 
 /** @type {number} */ var $44=($32|0)==($29|0);
 if($44){label=10;break;}else{label=11;break;}
 case 10: 
 /** @type {number} */ var $46=1<<$24;
 /** @type {number} */ var $47=$46^-1;
 /** @type {number} */ var $48=HEAP32[((12136)>>2)];
 /** @type {number} */ var $49=$48&$47;
 HEAP32[((12136)>>2)]=$49;
 var $_0=$16;var $_02=$17;label=54;break;
 case 11: 
 /** @type {number} */ var $51=($32|0)==($35|0);
 if($51){label=12;break;}else{label=13;break;}
 case 12: 
 /** @type {number} */ var $_pre65=(($32+8)|0);
 var $_pre_phi66=$_pre65;label=15;break;
 case 13: 
 /** @type {number} */ var $53=$32;
 /** @type {number} */ var $54=($53>>>0)<($18>>>0);
 if($54){label=16;break;}else{label=14;break;}
 case 14: 
 /** @type {number} */ var $56=(($32+8)|0);
 /** @type {number} */ var $57=HEAP32[(($56)>>2)];
 /** @type {number} */ var $58=($57|0)==($16|0);
 if($58){var $_pre_phi66=$56;label=15;break;}else{label=16;break;}
 case 15: 
 var $_pre_phi66;
 /** @type {number} */ var $59=(($29+12)|0);
 HEAP32[(($59)>>2)]=$32;
 HEAP32[(($_pre_phi66)>>2)]=$29;
 var $_0=$16;var $_02=$17;label=54;break;
 case 16: 
 _abort();
 case 17: 
 _abort();
 case 18: 
 /** @type {number} */ var $61=$15;
 /** @type {number} */ var $_sum26=(((24)-($10))|0);
 /** @type {number} */ var $62=(($1+$_sum26)|0);
 /** @type {number} */ var $63=$62;
 /** @type {number} */ var $64=HEAP32[(($63)>>2)];
 /** @type {number} */ var $_sum27=(((12)-($10))|0);
 /** @type {number} */ var $65=(($1+$_sum27)|0);
 /** @type {number} */ var $66=$65;
 /** @type {number} */ var $67=HEAP32[(($66)>>2)];
 /** @type {number} */ var $68=($67|0)==($61|0);
 if($68){label=24;break;}else{label=19;break;}
 case 19: 
 /** @type {number} */ var $_sum33=(((8)-($10))|0);
 /** @type {number} */ var $70=(($1+$_sum33)|0);
 /** @type {number} */ var $71=$70;
 /** @type {number} */ var $72=HEAP32[(($71)>>2)];
 /** @type {number} */ var $73=$72;
 /** @type {number} */ var $74=($73>>>0)<($18>>>0);
 if($74){label=23;break;}else{label=20;break;}
 case 20: 
 /** @type {number} */ var $76=(($72+12)|0);
 /** @type {number} */ var $77=HEAP32[(($76)>>2)];
 /** @type {number} */ var $78=($77|0)==($61|0);
 if($78){label=21;break;}else{label=23;break;}
 case 21: 
 /** @type {number} */ var $80=(($67+8)|0);
 /** @type {number} */ var $81=HEAP32[(($80)>>2)];
 /** @type {number} */ var $82=($81|0)==($61|0);
 if($82){label=22;break;}else{label=23;break;}
 case 22: 
 HEAP32[(($76)>>2)]=$67;
 HEAP32[(($80)>>2)]=$72;
 var $R_1=$67;label=31;break;
 case 23: 
 _abort();
 case 24: 
 /** @type {number} */ var $_sum28=(((16)-($10))|0);
 /** @type {number} */ var $_sum29=((($_sum28)+(4))|0);
 /** @type {number} */ var $85=(($1+$_sum29)|0);
 /** @type {number} */ var $86=$85;
 /** @type {number} */ var $87=HEAP32[(($86)>>2)];
 /** @type {number} */ var $88=($87|0)==0;
 if($88){label=25;break;}else{var $R_0=$87;var $RP_0=$86;label=26;break;}
 case 25: 
 /** @type {number} */ var $90=(($1+$_sum28)|0);
 /** @type {number} */ var $91=$90;
 /** @type {number} */ var $92=HEAP32[(($91)>>2)];
 /** @type {number} */ var $93=($92|0)==0;
 if($93){var $R_1=0;label=31;break;}else{var $R_0=$92;var $RP_0=$91;label=26;break;}
 case 26: 
 var $RP_0;
 var $R_0;
 /** @type {number} */ var $94=(($R_0+20)|0);
 /** @type {number} */ var $95=HEAP32[(($94)>>2)];
 /** @type {number} */ var $96=($95|0)==0;
 if($96){label=27;break;}else{var $R_0=$95;var $RP_0=$94;label=26;break;}
 case 27: 
 /** @type {number} */ var $98=(($R_0+16)|0);
 /** @type {number} */ var $99=HEAP32[(($98)>>2)];
 /** @type {number} */ var $100=($99|0)==0;
 if($100){label=28;break;}else{var $R_0=$99;var $RP_0=$98;label=26;break;}
 case 28: 
 /** @type {number} */ var $102=$RP_0;
 /** @type {number} */ var $103=($102>>>0)<($18>>>0);
 if($103){label=30;break;}else{label=29;break;}
 case 29: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=31;break;
 case 30: 
 _abort();
 case 31: 
 var $R_1;
 /** @type {number} */ var $107=($64|0)==0;
 if($107){var $_0=$16;var $_02=$17;label=54;break;}else{label=32;break;}
 case 32: 
 /** @type {number} */ var $_sum30=(((28)-($10))|0);
 /** @type {number} */ var $109=(($1+$_sum30)|0);
 /** @type {number} */ var $110=$109;
 /** @type {number} */ var $111=HEAP32[(($110)>>2)];
 /** @type {number} */ var $112=((12440+($111<<2))|0);
 /** @type {number} */ var $113=HEAP32[(($112)>>2)];
 /** @type {number} */ var $114=($61|0)==($113|0);
 if($114){label=33;break;}else{label=35;break;}
 case 33: 
 HEAP32[(($112)>>2)]=$R_1;
 /** @type {number} */ var $cond=($R_1|0)==0;
 if($cond){label=34;break;}else{label=41;break;}
 case 34: 
 /** @type {number} */ var $116=HEAP32[(($110)>>2)];
 /** @type {number} */ var $117=1<<$116;
 /** @type {number} */ var $118=$117^-1;
 /** @type {number} */ var $119=HEAP32[((12140)>>2)];
 /** @type {number} */ var $120=$119&$118;
 HEAP32[((12140)>>2)]=$120;
 var $_0=$16;var $_02=$17;label=54;break;
 case 35: 
 /** @type {number} */ var $122=$64;
 /** @type {number} */ var $123=HEAP32[((12152)>>2)];
 /** @type {number} */ var $124=($122>>>0)<($123>>>0);
 if($124){label=39;break;}else{label=36;break;}
 case 36: 
 /** @type {number} */ var $126=(($64+16)|0);
 /** @type {number} */ var $127=HEAP32[(($126)>>2)];
 /** @type {number} */ var $128=($127|0)==($61|0);
 if($128){label=37;break;}else{label=38;break;}
 case 37: 
 HEAP32[(($126)>>2)]=$R_1;
 label=40;break;
 case 38: 
 /** @type {number} */ var $131=(($64+20)|0);
 HEAP32[(($131)>>2)]=$R_1;
 label=40;break;
 case 39: 
 _abort();
 case 40: 
 /** @type {number} */ var $134=($R_1|0)==0;
 if($134){var $_0=$16;var $_02=$17;label=54;break;}else{label=41;break;}
 case 41: 
 /** @type {number} */ var $136=$R_1;
 /** @type {number} */ var $137=HEAP32[((12152)>>2)];
 /** @type {number} */ var $138=($136>>>0)<($137>>>0);
 if($138){label=50;break;}else{label=42;break;}
 case 42: 
 /** @type {number} */ var $140=(($R_1+24)|0);
 HEAP32[(($140)>>2)]=$64;
 /** @type {number} */ var $_sum31=(((16)-($10))|0);
 /** @type {number} */ var $141=(($1+$_sum31)|0);
 /** @type {number} */ var $142=$141;
 /** @type {number} */ var $143=HEAP32[(($142)>>2)];
 /** @type {number} */ var $144=($143|0)==0;
 if($144){label=46;break;}else{label=43;break;}
 case 43: 
 /** @type {number} */ var $146=$143;
 /** @type {number} */ var $147=HEAP32[((12152)>>2)];
 /** @type {number} */ var $148=($146>>>0)<($147>>>0);
 if($148){label=45;break;}else{label=44;break;}
 case 44: 
 /** @type {number} */ var $150=(($R_1+16)|0);
 HEAP32[(($150)>>2)]=$143;
 /** @type {number} */ var $151=(($143+24)|0);
 HEAP32[(($151)>>2)]=$R_1;
 label=46;break;
 case 45: 
 _abort();
 case 46: 
 /** @type {number} */ var $_sum32=((($_sum31)+(4))|0);
 /** @type {number} */ var $154=(($1+$_sum32)|0);
 /** @type {number} */ var $155=$154;
 /** @type {number} */ var $156=HEAP32[(($155)>>2)];
 /** @type {number} */ var $157=($156|0)==0;
 if($157){var $_0=$16;var $_02=$17;label=54;break;}else{label=47;break;}
 case 47: 
 /** @type {number} */ var $159=$156;
 /** @type {number} */ var $160=HEAP32[((12152)>>2)];
 /** @type {number} */ var $161=($159>>>0)<($160>>>0);
 if($161){label=49;break;}else{label=48;break;}
 case 48: 
 /** @type {number} */ var $163=(($R_1+20)|0);
 HEAP32[(($163)>>2)]=$156;
 /** @type {number} */ var $164=(($156+24)|0);
 HEAP32[(($164)>>2)]=$R_1;
 var $_0=$16;var $_02=$17;label=54;break;
 case 49: 
 _abort();
 case 50: 
 _abort();
 case 51: 
 /** @type {number} */ var $_sum=((($psize)+(4))|0);
 /** @type {number} */ var $168=(($1+$_sum)|0);
 /** @type {number} */ var $169=$168;
 /** @type {number} */ var $170=HEAP32[(($169)>>2)];
 /** @type {number} */ var $171=$170&3;
 /** @type {number} */ var $172=($171|0)==3;
 if($172){label=52;break;}else{var $_0=$16;var $_02=$17;label=54;break;}
 case 52: 
 HEAP32[((12144)>>2)]=$17;
 /** @type {number} */ var $174=HEAP32[(($169)>>2)];
 /** @type {number} */ var $175=$174&-2;
 HEAP32[(($169)>>2)]=$175;
 /** @type {number} */ var $176=$17|1;
 /** @type {number} */ var $_sum24=(((4)-($10))|0);
 /** @type {number} */ var $177=(($1+$_sum24)|0);
 /** @type {number} */ var $178=$177;
 HEAP32[(($178)>>2)]=$176;
 /** @type {number} */ var $179=$2;
 HEAP32[(($179)>>2)]=$17;
 label=134;break;
 case 53: 
 _abort();
 case 54: 
 var $_02;
 var $_0;
 /** @type {number} */ var $182=HEAP32[((12152)>>2)];
 /** @type {number} */ var $183=($2>>>0)<($182>>>0);
 if($183){label=133;break;}else{label=55;break;}
 case 55: 
 /** @type {number} */ var $_sum1=((($psize)+(4))|0);
 /** @type {number} */ var $185=(($1+$_sum1)|0);
 /** @type {number} */ var $186=$185;
 /** @type {number} */ var $187=HEAP32[(($186)>>2)];
 /** @type {number} */ var $188=$187&2;
 /** @type {number} */ var $189=($188|0)==0;
 if($189){label=56;break;}else{label=109;break;}
 case 56: 
 /** @type {number} */ var $191=HEAP32[((12160)>>2)];
 /** @type {number} */ var $192=($3|0)==($191|0);
 if($192){label=57;break;}else{label=59;break;}
 case 57: 
 /** @type {number} */ var $194=HEAP32[((12148)>>2)];
 /** @type {number} */ var $195=((($194)+($_02))|0);
 HEAP32[((12148)>>2)]=$195;
 HEAP32[((12160)>>2)]=$_0;
 /** @type {number} */ var $196=$195|1;
 /** @type {number} */ var $197=(($_0+4)|0);
 HEAP32[(($197)>>2)]=$196;
 /** @type {number} */ var $198=HEAP32[((12156)>>2)];
 /** @type {number} */ var $199=($_0|0)==($198|0);
 if($199){label=58;break;}else{label=134;break;}
 case 58: 
 HEAP32[((12156)>>2)]=0;
 HEAP32[((12144)>>2)]=0;
 label=134;break;
 case 59: 
 /** @type {number} */ var $202=HEAP32[((12156)>>2)];
 /** @type {number} */ var $203=($3|0)==($202|0);
 if($203){label=60;break;}else{label=61;break;}
 case 60: 
 /** @type {number} */ var $205=HEAP32[((12144)>>2)];
 /** @type {number} */ var $206=((($205)+($_02))|0);
 HEAP32[((12144)>>2)]=$206;
 HEAP32[((12156)>>2)]=$_0;
 /** @type {number} */ var $207=$206|1;
 /** @type {number} */ var $208=(($_0+4)|0);
 HEAP32[(($208)>>2)]=$207;
 /** @type {number} */ var $209=$_0;
 /** @type {number} */ var $210=(($209+$206)|0);
 /** @type {number} */ var $211=$210;
 HEAP32[(($211)>>2)]=$206;
 label=134;break;
 case 61: 
 /** @type {number} */ var $213=$187&-8;
 /** @type {number} */ var $214=((($213)+($_02))|0);
 /** @type {number} */ var $215=$187>>>3;
 /** @type {number} */ var $216=($187>>>0)<256;
 if($216){label=62;break;}else{label=74;break;}
 case 62: 
 /** @type {number} */ var $_sum20=((($psize)+(8))|0);
 /** @type {number} */ var $218=(($1+$_sum20)|0);
 /** @type {number} */ var $219=$218;
 /** @type {number} */ var $220=HEAP32[(($219)>>2)];
 /** @type {number} */ var $_sum21=((($psize)+(12))|0);
 /** @type {number} */ var $221=(($1+$_sum21)|0);
 /** @type {number} */ var $222=$221;
 /** @type {number} */ var $223=HEAP32[(($222)>>2)];
 /** @type {number} */ var $224=$215<<1;
 /** @type {number} */ var $225=((12176+($224<<2))|0);
 /** @type {number} */ var $226=$225;
 /** @type {number} */ var $227=($220|0)==($226|0);
 if($227){label=65;break;}else{label=63;break;}
 case 63: 
 /** @type {number} */ var $229=$220;
 /** @type {number} */ var $230=($229>>>0)<($182>>>0);
 if($230){label=73;break;}else{label=64;break;}
 case 64: 
 /** @type {number} */ var $232=(($220+12)|0);
 /** @type {number} */ var $233=HEAP32[(($232)>>2)];
 /** @type {number} */ var $234=($233|0)==($3|0);
 if($234){label=65;break;}else{label=73;break;}
 case 65: 
 /** @type {number} */ var $235=($223|0)==($220|0);
 if($235){label=66;break;}else{label=67;break;}
 case 66: 
 /** @type {number} */ var $237=1<<$215;
 /** @type {number} */ var $238=$237^-1;
 /** @type {number} */ var $239=HEAP32[((12136)>>2)];
 /** @type {number} */ var $240=$239&$238;
 HEAP32[((12136)>>2)]=$240;
 label=107;break;
 case 67: 
 /** @type {number} */ var $242=($223|0)==($226|0);
 if($242){label=68;break;}else{label=69;break;}
 case 68: 
 /** @type {number} */ var $_pre63=(($223+8)|0);
 var $_pre_phi64=$_pre63;label=71;break;
 case 69: 
 /** @type {number} */ var $244=$223;
 /** @type {number} */ var $245=($244>>>0)<($182>>>0);
 if($245){label=72;break;}else{label=70;break;}
 case 70: 
 /** @type {number} */ var $247=(($223+8)|0);
 /** @type {number} */ var $248=HEAP32[(($247)>>2)];
 /** @type {number} */ var $249=($248|0)==($3|0);
 if($249){var $_pre_phi64=$247;label=71;break;}else{label=72;break;}
 case 71: 
 var $_pre_phi64;
 /** @type {number} */ var $250=(($220+12)|0);
 HEAP32[(($250)>>2)]=$223;
 HEAP32[(($_pre_phi64)>>2)]=$220;
 label=107;break;
 case 72: 
 _abort();
 case 73: 
 _abort();
 case 74: 
 /** @type {number} */ var $252=$2;
 /** @type {number} */ var $_sum2=((($psize)+(24))|0);
 /** @type {number} */ var $253=(($1+$_sum2)|0);
 /** @type {number} */ var $254=$253;
 /** @type {number} */ var $255=HEAP32[(($254)>>2)];
 /** @type {number} */ var $_sum3=((($psize)+(12))|0);
 /** @type {number} */ var $256=(($1+$_sum3)|0);
 /** @type {number} */ var $257=$256;
 /** @type {number} */ var $258=HEAP32[(($257)>>2)];
 /** @type {number} */ var $259=($258|0)==($252|0);
 if($259){label=80;break;}else{label=75;break;}
 case 75: 
 /** @type {number} */ var $_sum18=((($psize)+(8))|0);
 /** @type {number} */ var $261=(($1+$_sum18)|0);
 /** @type {number} */ var $262=$261;
 /** @type {number} */ var $263=HEAP32[(($262)>>2)];
 /** @type {number} */ var $264=$263;
 /** @type {number} */ var $265=($264>>>0)<($182>>>0);
 if($265){label=79;break;}else{label=76;break;}
 case 76: 
 /** @type {number} */ var $267=(($263+12)|0);
 /** @type {number} */ var $268=HEAP32[(($267)>>2)];
 /** @type {number} */ var $269=($268|0)==($252|0);
 if($269){label=77;break;}else{label=79;break;}
 case 77: 
 /** @type {number} */ var $271=(($258+8)|0);
 /** @type {number} */ var $272=HEAP32[(($271)>>2)];
 /** @type {number} */ var $273=($272|0)==($252|0);
 if($273){label=78;break;}else{label=79;break;}
 case 78: 
 HEAP32[(($267)>>2)]=$258;
 HEAP32[(($271)>>2)]=$263;
 var $R7_1=$258;label=87;break;
 case 79: 
 _abort();
 case 80: 
 /** @type {number} */ var $_sum5=((($psize)+(20))|0);
 /** @type {number} */ var $276=(($1+$_sum5)|0);
 /** @type {number} */ var $277=$276;
 /** @type {number} */ var $278=HEAP32[(($277)>>2)];
 /** @type {number} */ var $279=($278|0)==0;
 if($279){label=81;break;}else{var $R7_0=$278;var $RP9_0=$277;label=82;break;}
 case 81: 
 /** @type {number} */ var $_sum4=((($psize)+(16))|0);
 /** @type {number} */ var $281=(($1+$_sum4)|0);
 /** @type {number} */ var $282=$281;
 /** @type {number} */ var $283=HEAP32[(($282)>>2)];
 /** @type {number} */ var $284=($283|0)==0;
 if($284){var $R7_1=0;label=87;break;}else{var $R7_0=$283;var $RP9_0=$282;label=82;break;}
 case 82: 
 var $RP9_0;
 var $R7_0;
 /** @type {number} */ var $285=(($R7_0+20)|0);
 /** @type {number} */ var $286=HEAP32[(($285)>>2)];
 /** @type {number} */ var $287=($286|0)==0;
 if($287){label=83;break;}else{var $R7_0=$286;var $RP9_0=$285;label=82;break;}
 case 83: 
 /** @type {number} */ var $289=(($R7_0+16)|0);
 /** @type {number} */ var $290=HEAP32[(($289)>>2)];
 /** @type {number} */ var $291=($290|0)==0;
 if($291){label=84;break;}else{var $R7_0=$290;var $RP9_0=$289;label=82;break;}
 case 84: 
 /** @type {number} */ var $293=$RP9_0;
 /** @type {number} */ var $294=($293>>>0)<($182>>>0);
 if($294){label=86;break;}else{label=85;break;}
 case 85: 
 HEAP32[(($RP9_0)>>2)]=0;
 var $R7_1=$R7_0;label=87;break;
 case 86: 
 _abort();
 case 87: 
 var $R7_1;
 /** @type {number} */ var $298=($255|0)==0;
 if($298){label=107;break;}else{label=88;break;}
 case 88: 
 /** @type {number} */ var $_sum15=((($psize)+(28))|0);
 /** @type {number} */ var $300=(($1+$_sum15)|0);
 /** @type {number} */ var $301=$300;
 /** @type {number} */ var $302=HEAP32[(($301)>>2)];
 /** @type {number} */ var $303=((12440+($302<<2))|0);
 /** @type {number} */ var $304=HEAP32[(($303)>>2)];
 /** @type {number} */ var $305=($252|0)==($304|0);
 if($305){label=89;break;}else{label=91;break;}
 case 89: 
 HEAP32[(($303)>>2)]=$R7_1;
 /** @type {number} */ var $cond53=($R7_1|0)==0;
 if($cond53){label=90;break;}else{label=97;break;}
 case 90: 
 /** @type {number} */ var $307=HEAP32[(($301)>>2)];
 /** @type {number} */ var $308=1<<$307;
 /** @type {number} */ var $309=$308^-1;
 /** @type {number} */ var $310=HEAP32[((12140)>>2)];
 /** @type {number} */ var $311=$310&$309;
 HEAP32[((12140)>>2)]=$311;
 label=107;break;
 case 91: 
 /** @type {number} */ var $313=$255;
 /** @type {number} */ var $314=HEAP32[((12152)>>2)];
 /** @type {number} */ var $315=($313>>>0)<($314>>>0);
 if($315){label=95;break;}else{label=92;break;}
 case 92: 
 /** @type {number} */ var $317=(($255+16)|0);
 /** @type {number} */ var $318=HEAP32[(($317)>>2)];
 /** @type {number} */ var $319=($318|0)==($252|0);
 if($319){label=93;break;}else{label=94;break;}
 case 93: 
 HEAP32[(($317)>>2)]=$R7_1;
 label=96;break;
 case 94: 
 /** @type {number} */ var $322=(($255+20)|0);
 HEAP32[(($322)>>2)]=$R7_1;
 label=96;break;
 case 95: 
 _abort();
 case 96: 
 /** @type {number} */ var $325=($R7_1|0)==0;
 if($325){label=107;break;}else{label=97;break;}
 case 97: 
 /** @type {number} */ var $327=$R7_1;
 /** @type {number} */ var $328=HEAP32[((12152)>>2)];
 /** @type {number} */ var $329=($327>>>0)<($328>>>0);
 if($329){label=106;break;}else{label=98;break;}
 case 98: 
 /** @type {number} */ var $331=(($R7_1+24)|0);
 HEAP32[(($331)>>2)]=$255;
 /** @type {number} */ var $_sum16=((($psize)+(16))|0);
 /** @type {number} */ var $332=(($1+$_sum16)|0);
 /** @type {number} */ var $333=$332;
 /** @type {number} */ var $334=HEAP32[(($333)>>2)];
 /** @type {number} */ var $335=($334|0)==0;
 if($335){label=102;break;}else{label=99;break;}
 case 99: 
 /** @type {number} */ var $337=$334;
 /** @type {number} */ var $338=HEAP32[((12152)>>2)];
 /** @type {number} */ var $339=($337>>>0)<($338>>>0);
 if($339){label=101;break;}else{label=100;break;}
 case 100: 
 /** @type {number} */ var $341=(($R7_1+16)|0);
 HEAP32[(($341)>>2)]=$334;
 /** @type {number} */ var $342=(($334+24)|0);
 HEAP32[(($342)>>2)]=$R7_1;
 label=102;break;
 case 101: 
 _abort();
 case 102: 
 /** @type {number} */ var $_sum17=((($psize)+(20))|0);
 /** @type {number} */ var $345=(($1+$_sum17)|0);
 /** @type {number} */ var $346=$345;
 /** @type {number} */ var $347=HEAP32[(($346)>>2)];
 /** @type {number} */ var $348=($347|0)==0;
 if($348){label=107;break;}else{label=103;break;}
 case 103: 
 /** @type {number} */ var $350=$347;
 /** @type {number} */ var $351=HEAP32[((12152)>>2)];
 /** @type {number} */ var $352=($350>>>0)<($351>>>0);
 if($352){label=105;break;}else{label=104;break;}
 case 104: 
 /** @type {number} */ var $354=(($R7_1+20)|0);
 HEAP32[(($354)>>2)]=$347;
 /** @type {number} */ var $355=(($347+24)|0);
 HEAP32[(($355)>>2)]=$R7_1;
 label=107;break;
 case 105: 
 _abort();
 case 106: 
 _abort();
 case 107: 
 /** @type {number} */ var $359=$214|1;
 /** @type {number} */ var $360=(($_0+4)|0);
 HEAP32[(($360)>>2)]=$359;
 /** @type {number} */ var $361=$_0;
 /** @type {number} */ var $362=(($361+$214)|0);
 /** @type {number} */ var $363=$362;
 HEAP32[(($363)>>2)]=$214;
 /** @type {number} */ var $364=HEAP32[((12156)>>2)];
 /** @type {number} */ var $365=($_0|0)==($364|0);
 if($365){label=108;break;}else{var $_1=$214;label=110;break;}
 case 108: 
 HEAP32[((12144)>>2)]=$214;
 label=134;break;
 case 109: 
 /** @type {number} */ var $368=$187&-2;
 HEAP32[(($186)>>2)]=$368;
 /** @type {number} */ var $369=$_02|1;
 /** @type {number} */ var $370=(($_0+4)|0);
 HEAP32[(($370)>>2)]=$369;
 /** @type {number} */ var $371=$_0;
 /** @type {number} */ var $372=(($371+$_02)|0);
 /** @type {number} */ var $373=$372;
 HEAP32[(($373)>>2)]=$_02;
 var $_1=$_02;label=110;break;
 case 110: 
 var $_1;
 /** @type {number} */ var $375=$_1>>>3;
 /** @type {number} */ var $376=($_1>>>0)<256;
 if($376){label=111;break;}else{label=116;break;}
 case 111: 
 /** @type {number} */ var $378=$375<<1;
 /** @type {number} */ var $379=((12176+($378<<2))|0);
 /** @type {number} */ var $380=$379;
 /** @type {number} */ var $381=HEAP32[((12136)>>2)];
 /** @type {number} */ var $382=1<<$375;
 /** @type {number} */ var $383=$381&$382;
 /** @type {number} */ var $384=($383|0)==0;
 if($384){label=112;break;}else{label=113;break;}
 case 112: 
 /** @type {number} */ var $386=$381|$382;
 HEAP32[((12136)>>2)]=$386;
 /** @type {number} */ var $_sum13_pre=((($378)+(2))|0);
 /** @type {number} */ var $_pre=((12176+($_sum13_pre<<2))|0);
 var $F16_0=$380;var $_pre_phi=$_pre;label=115;break;
 case 113: 
 /** @type {number} */ var $_sum14=((($378)+(2))|0);
 /** @type {number} */ var $388=((12176+($_sum14<<2))|0);
 /** @type {number} */ var $389=HEAP32[(($388)>>2)];
 /** @type {number} */ var $390=$389;
 /** @type {number} */ var $391=HEAP32[((12152)>>2)];
 /** @type {number} */ var $392=($390>>>0)<($391>>>0);
 if($392){label=114;break;}else{var $F16_0=$389;var $_pre_phi=$388;label=115;break;}
 case 114: 
 _abort();
 case 115: 
 var $_pre_phi;
 var $F16_0;
 HEAP32[(($_pre_phi)>>2)]=$_0;
 /** @type {number} */ var $395=(($F16_0+12)|0);
 HEAP32[(($395)>>2)]=$_0;
 /** @type {number} */ var $396=(($_0+8)|0);
 HEAP32[(($396)>>2)]=$F16_0;
 /** @type {number} */ var $397=(($_0+12)|0);
 HEAP32[(($397)>>2)]=$380;
 label=134;break;
 case 116: 
 /** @type {number} */ var $399=$_0;
 /** @type {number} */ var $400=$_1>>>8;
 /** @type {number} */ var $401=($400|0)==0;
 if($401){var $I19_0=0;label=119;break;}else{label=117;break;}
 case 117: 
 /** @type {number} */ var $403=($_1>>>0)>16777215;
 if($403){var $I19_0=31;label=119;break;}else{label=118;break;}
 case 118: 
 /** @type {number} */ var $405=((($400)+(1048320))|0);
 /** @type {number} */ var $406=$405>>>16;
 /** @type {number} */ var $407=$406&8;
 /** @type {number} */ var $408=$400<<$407;
 /** @type {number} */ var $409=((($408)+(520192))|0);
 /** @type {number} */ var $410=$409>>>16;
 /** @type {number} */ var $411=$410&4;
 /** @type {number} */ var $412=$411|$407;
 /** @type {number} */ var $413=$408<<$411;
 /** @type {number} */ var $414=((($413)+(245760))|0);
 /** @type {number} */ var $415=$414>>>16;
 /** @type {number} */ var $416=$415&2;
 /** @type {number} */ var $417=$412|$416;
 /** @type {number} */ var $418=(((14)-($417))|0);
 /** @type {number} */ var $419=$413<<$416;
 /** @type {number} */ var $420=$419>>>15;
 /** @type {number} */ var $421=((($418)+($420))|0);
 /** @type {number} */ var $422=$421<<1;
 /** @type {number} */ var $423=((($421)+(7))|0);
 /** @type {number} */ var $424=$_1>>>($423>>>0);
 /** @type {number} */ var $425=$424&1;
 /** @type {number} */ var $426=$425|$422;
 var $I19_0=$426;label=119;break;
 case 119: 
 var $I19_0;
 /** @type {number} */ var $428=((12440+($I19_0<<2))|0);
 /** @type {number} */ var $429=(($_0+28)|0);
 /** @type {number} */ var $I19_0_c=$I19_0;
 HEAP32[(($429)>>2)]=$I19_0_c;
 /** @type {number} */ var $430=(($_0+20)|0);
 HEAP32[(($430)>>2)]=0;
 /** @type {number} */ var $431=(($_0+16)|0);
 HEAP32[(($431)>>2)]=0;
 /** @type {number} */ var $432=HEAP32[((12140)>>2)];
 /** @type {number} */ var $433=1<<$I19_0;
 /** @type {number} */ var $434=$432&$433;
 /** @type {number} */ var $435=($434|0)==0;
 if($435){label=120;break;}else{label=121;break;}
 case 120: 
 /** @type {number} */ var $437=$432|$433;
 HEAP32[((12140)>>2)]=$437;
 HEAP32[(($428)>>2)]=$399;
 /** @type {number} */ var $438=(($_0+24)|0);
 /** @type {number} */ var $_c=$428;
 HEAP32[(($438)>>2)]=$_c;
 /** @type {number} */ var $439=(($_0+12)|0);
 HEAP32[(($439)>>2)]=$_0;
 /** @type {number} */ var $440=(($_0+8)|0);
 HEAP32[(($440)>>2)]=$_0;
 label=134;break;
 case 121: 
 /** @type {number} */ var $442=HEAP32[(($428)>>2)];
 /** @type {number} */ var $443=($I19_0|0)==31;
 if($443){var $448=0;label=123;break;}else{label=122;break;}
 case 122: 
 /** @type {number} */ var $445=$I19_0>>>1;
 /** @type {number} */ var $446=(((25)-($445))|0);
 var $448=$446;label=123;break;
 case 123: 
 var $448;
 /** @type {number} */ var $449=(($442+4)|0);
 /** @type {number} */ var $450=HEAP32[(($449)>>2)];
 /** @type {number} */ var $451=$450&-8;
 /** @type {number} */ var $452=($451|0)==($_1|0);
 if($452){var $T_0_lcssa=$442;label=130;break;}else{label=124;break;}
 case 124: 
 /** @type {number} */ var $453=$_1<<$448;
 var $T_056=$442;var $K20_057=$453;label=126;break;
 case 125: 
 /** @type {number} */ var $455=$K20_057<<1;
 /** @type {number} */ var $456=(($463+4)|0);
 /** @type {number} */ var $457=HEAP32[(($456)>>2)];
 /** @type {number} */ var $458=$457&-8;
 /** @type {number} */ var $459=($458|0)==($_1|0);
 if($459){var $T_0_lcssa=$463;label=130;break;}else{var $T_056=$463;var $K20_057=$455;label=126;break;}
 case 126: 
 var $K20_057;
 var $T_056;
 /** @type {number} */ var $461=$K20_057>>>31;
 /** @type {number} */ var $462=(($T_056+16+($461<<2))|0);
 /** @type {number} */ var $463=HEAP32[(($462)>>2)];
 /** @type {number} */ var $464=($463|0)==0;
 if($464){label=127;break;}else{label=125;break;}
 case 127: 
 /** @type {number} */ var $466=$462;
 /** @type {number} */ var $467=HEAP32[((12152)>>2)];
 /** @type {number} */ var $468=($466>>>0)<($467>>>0);
 if($468){label=129;break;}else{label=128;break;}
 case 128: 
 HEAP32[(($462)>>2)]=$399;
 /** @type {number} */ var $470=(($_0+24)|0);
 /** @type {number} */ var $T_0_c10=$T_056;
 HEAP32[(($470)>>2)]=$T_0_c10;
 /** @type {number} */ var $471=(($_0+12)|0);
 HEAP32[(($471)>>2)]=$_0;
 /** @type {number} */ var $472=(($_0+8)|0);
 HEAP32[(($472)>>2)]=$_0;
 label=134;break;
 case 129: 
 _abort();
 case 130: 
 var $T_0_lcssa;
 /** @type {number} */ var $474=(($T_0_lcssa+8)|0);
 /** @type {number} */ var $475=HEAP32[(($474)>>2)];
 /** @type {number} */ var $476=$T_0_lcssa;
 /** @type {number} */ var $477=HEAP32[((12152)>>2)];
 /** @type {number} */ var $478=($476>>>0)>=($477>>>0);
 /** @type {number} */ var $479=$475;
 /** @type {number} */ var $480=($479>>>0)>=($477>>>0);
 /** @type {number} */ var $or_cond=$478&$480;
 if($or_cond){label=131;break;}else{label=132;break;}
 case 131: 
 /** @type {number} */ var $482=(($475+12)|0);
 HEAP32[(($482)>>2)]=$399;
 HEAP32[(($474)>>2)]=$399;
 /** @type {number} */ var $483=(($_0+8)|0);
 /** @type {number} */ var $_c9=$475;
 HEAP32[(($483)>>2)]=$_c9;
 /** @type {number} */ var $484=(($_0+12)|0);
 /** @type {number} */ var $T_0_c=$T_0_lcssa;
 HEAP32[(($484)>>2)]=$T_0_c;
 /** @type {number} */ var $485=(($_0+24)|0);
 HEAP32[(($485)>>2)]=0;
 label=134;break;
 case 132: 
 _abort();
 case 133: 
 _abort();
 case 134: 
 return;
 }
}
// EMSCRIPTEN_END_FUNCS
// EMSCRIPTEN_END_FUNCS
// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;
// === Auto-generated postamble setup entry stuff ===
if (memoryInitializer) {
  function applyData(data) {
    HEAPU8.set(data, STATIC_BASE);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    applyData(Module['readBinary'](memoryInitializer));
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      applyData(data);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;
var initialStackTop;
var preloadStartTime = null;
var calledMain = false;
dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}
Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');
  args = args || [];
  if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
    Module.printErr('preload time: ' + (Date.now() - preloadStartTime) + ' ms');
  }
  ensureInitRuntime();
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);
  initialStackTop = STACKTOP;
  try {
    var ret = Module['_main'](argc, argv, 0);
    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}
function run(args) {
  args = args || Module['arguments'];
  if (preloadStartTime === null) preloadStartTime = Date.now();
  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }
  preRun();
  if (runDependencies > 0) {
    // a preRun added a dependency, run will be called later
    return;
  }
  function doRun() {
    ensureInitRuntime();
    preMain();
    Module['calledRun'] = true;
    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }
    postRun();
  }
  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;
function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;
  // exit the runtime
  exitRuntime();
  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371
  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;
function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }
  ABORT = true;
  EXITSTATUS = 1;
  throw 'abort() at ' + stackTrace();
}
Module['abort'] = Module.abort = abort;
// {{PRE_RUN_ADDITIONS}}
if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}
// shouldRunNow refers to calling main(), not run().
var shouldRunNow = false;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}
run();
// {{POST_RUN_ADDITIONS}}
// {{MODULE_ADDITIONS}}
//@ sourceMappingURL=raw.js.map// This file is appended to the end of build/liblua.js

// WEBLUA API =================================================================
// 
// Written by Philip Horger
// Based on https://github.com/replit/jsrepl/blob/master/extern/lua/entry_point.js
// 
// ============================================================================

this['Lua'] = {
    isInitialized: false,
    state: null,
    tmp_id: 0,
    default_source_name: 'stdin',
    preallocated_strings: {
        '__handle': null,
        '__index': null,
    },
    js_string_to_lua: function(str) {
        ret = intArrayFromString(str);
        return ret;
    },
    lua_string_to_js: function(int8_array) {
        var buffer = [];
        for (var i = 0; i < int8_array.length; i++) {
            buffer.push(String.fromCharCode(int8_array[i]));
        }
        return buffer.join('');
    },
    set_js_string_to_lua: function(f) {
        this.js_string_to_lua = f;
    },
    set_lua_string_to_js: function(f) {
        this.lua_string_to_js = f;
    },
    initialize: function (source_name, stdout, stderr) {
        if (this.isInitialized) throw new Error('Lua already initialized');
        this.default_source_name = source_name || this.default_source_name;
        this.stdout = stdout || this.stdout;
        this.stderr = stderr || this.stderr;
        run();
        this.state = _luaL_newstate();
        _luaL_openlibs(this.state);
        for (var key in this.preallocated_strings) {
            this.preallocated_strings[key] = this.allocate_string(key);
        }
        this.isInitialized = true;
    },
    require_initialization: function(){
        if (!this.isInitialized) throw new Error('Lua not yet initialized');
    },
    parse: function (command, source_name) {
        // Put new function, from buffer, at the top of the stack
        this.require_initialization();
        var command_array = this.js_string_to_lua(command);
        var commandPtr = allocate(command_array, 'i8', 0); // ALLOC_NORMAL
        var namePtr    = this.allocate_string(source_name);
        var parseFailed = _luaL_loadbufferx(
            this.state, commandPtr, command_array.length - 1, namePtr
        );
        if (parseFailed) {
            this.report_error("Parsing failure");
        }
        _free(commandPtr);
        _free(namePtr);
        return !parseFailed;
    },
    eval: function (command, source_name, source) {
        source_name = source_name || this.default_source_name;
        source      = source      || command;
        return this.exec("return "+command, source_name, source);
    },
    exec: function (command, source_name, source) {
        this.require_initialization();
        source_name = source_name || this.default_source_name;
        source      = source      || command;

        if (this.parse(command, source_name)) {
            // Parse success, now try calling func at top of stack
            var callFailed = _lua_pcallk(this.state, 0, -1, 0);
            if (callFailed) {
                this.report_error("Evaluation failure");
            } else {
                return this.get_stack_args();
            }
        } else {
            this.report_error("Parsing failure");
        }
    },
    inject: function (object, name, final_location, metatable) {
        name = name || this.get_tmp_name();
        this.pushStack(object);
        if (metatable) {
            this.pushStack(metatable);
            _lua_setmetatable(this.state, -2);
        }
        var strptr = this.allocate_string(name);
        _lua_setglobal(this.state, strptr);
        _free(strptr);
        if (final_location) {
            this.exec(final_location + " = " + name + "\n" + name + " = nil");
        }
        return (final_location || name);
    },
    cache: function (evalstring) {
        if (!(evalstring in this.cache['items'])) {
            this.cache['items'][evalstring] = this.eval(evalstring)
        }
        return this.cache['items'][evalstring];
    },
    call: function (evalstring, args) {
        var func = this.cache(evalstring)[0];
        return func.apply(null, args);
    },
    allocate_string: function(str) {
        var arr = this.js_string_to_lua(str);
        return allocate(arr, 'i8', 0);  // ALLOC_NORMAL
    },
    inspect: function(index) {
        var type = _lua_type(this.state, index);
        var ptr = _lua_typename(this.state, type);
        var typename = Pointer_stringify(ptr)
        var address = _lua_topointer(this.state, index);
        return {
            'type': type,
            'typename': typename,
            'address': address,
            'addrstr': address.toString(16),
        }
    },
    peekStack: function(index, source) {
        this.require_initialization();
        var ret;
        var type = _lua_type(this.state, index);
        switch (type) {
            case -1: // LUA_TNONE
            case 0:  // LUA_TNIL
                ret = null;
                break;
            case 1:  // LUA_TBOOLEAN
                var result = _lua_toboolean(this.state, index);
                ret = result ? true : false;
                break;
            case 3:  // LUA_TNUMBER
                ret = _lua_tonumberx(this.state, index);
                break;
            case 4:  // LUA_TSTRING
                var ptr = _lua_tolstring(this.state, index, 0);
                var len = _lua_rawlen(this.state, index);
                ret = this.lua_string_to_js(HEAPU8.subarray(ptr, ptr+len));
                break;
            case 5:  // LUA_TTABLE
                var is_array = true;
                var max_key = 0;

                // Check for handle
                _lua_pushstring(this.state, this.preallocated_strings['__handle']);
                _lua_rawget(this.state, index-1);
                var handle = this.popStack();
                if (handle) {
                    // Return original value
                    var ptr = this.preallocated_strings["__index"];
                    var success = _luaL_getmetafield(
                        this.state,
                        index,
                        ptr
                    );
                    var __indexfunc = this.popStack();
                    var source = __indexfunc.source;
                    return source;
                }

                ret = {};
                // Populate with values
                _lua_pushnil(this.state);
                _lua_pushnil(this.state);
                while (_lua_next(this.state, index-2)) {
                    var value = this.popStack();
                    var key = this.peekStack(-1);
                    ret[key] = value;

                    if (is_array && typeof key === "number") {
                        if (key > max_key)
                            max_key = key;
                    } else {
                        is_array = false;
                    }
                }
                this.popStack(); // Clear out leftover key
                if (is_array) {
                    newret = [];
                    for (var i = 1; i <= max_key; i++) {
                        if (ret[i] === undefined) {
                            // Abort
                            is_array = false;
                            break;
                        }
                        newret.push(ret[i]);
                    }
                    if (is_array) // not aborted
                        ret = newret;
                }
                break;
            case 6:  // LUA_TFUNCTION
                var self = this;
                var address = _lua_topointer(this.state, index);

                if (_lua_iscfunction(this.state, index)) {
                    var func = FUNCTION_TABLE[address];
                    if (func.unwrapped) {
                        return func.unwrapped;
                    }
                }

                // Don't allocate this stuff for wrapped funcs
                var name = this.get_tmp_name();
                var aname = this.allocate_string(name);

                _lua_pushvalue(this.state, index); // For non-destructive pop
                _lua_setglobal(this.state, aname);
                _free(aname);
                ret = function () {
                    var orig_top = _lua_gettop(self.state);

                    // Push function to stack
                    var aname = self.allocate_string(name);
                    _lua_getglobal(self.state, aname);
                    _free(aname);

                    // Convert arguments to Lua
                    for (var i = 0; i < arguments.length; i++) {
                        self.pushStack(arguments[i])
                    }

                    // Call
                    var failure = _lua_pcallk(self.state, arguments.length, -1, 0) // LUA_MULTRET
                    if (failure) {
                        self.report_error("Failure calling Lua function");
                    }
                    var num_args = _lua_gettop(self.state) - orig_top ;
                    return self.get_stack_args(num_args);
                }
                source = source || "";
                ret.toString = function() { 
                    return "Lua function " + source + ": " + name + " at " + address;
                };
                ret.source = source;
                ret.name = name;
                ret.address = address;
                break;
            default: // Other Lua type
                var inspection = this.inspect(index);
                ret = inspection.typename + " (typecode "+type+"): 0x" + inspection.addrstr;
        }
        return ret;
    },
    popStack: function(source) {
        var ret = this.peekStack(-1, source);
        _lua_settop(this.state, -2);
        return ret;
    },
    pushStack: function(object) {
        if (object === null) {
            object = undefined;
        }
        switch(typeof object) {
            case "undefined" :
                _lua_pushnil(this.state);
                return 1;
            case "boolean" :
                _lua_pushboolean(this.state, object);
                return 1;
            case "number" :
                _lua_pushnumber(this.state, object);
                return 1;
            case "string" :
                var strptr = this.allocate_string(object);
                _lua_pushstring(this.state, strptr);
                _free(strptr);
                return 1;
            case "function" :
                var self = this;
                var wrapper = function (state) {
                    var result = object.apply(self, self.get_stack_args());
                    if (result == undefined || result == null) {
                        result = [];
                    }
                    if (!( typeof result == 'object' && typeof result.length == "number")) {
                        throw new Error("Expected array return type from JS function");
                    }
                    for (var i = 0; i < result.length; i++) {
                        self.pushStack(result[i]);
                    }
                    return result.length;
                }
                wrapper.unwrapped = object;
                var pointer = Runtime.addFunction(wrapper);
                _lua_pushcclosure(this.state, pointer, 0);
                return 1;
            case "object" :
                if (object.length === undefined) {
                    // Object
                    _lua_createtable(this.state, 0, 0);
                    if (object['__handle']) {
                        // Handled object
                        var source = object;
                        var metatable = {
                            '__index': function (table, key) {
                                return [source[key]];
                            },
                            '__newindex': function (table, key, value) {
                                source[key] = value;
                                return [];
                            },
                        }
                        metatable['__index'].source = source;

                        this.pushStack(metatable);
                        _lua_setmetatable(this.state, -2);

                        object = {'__handle': object.toString()};
                    }
                    for (var k in object) {
                        this.pushStack(k);
                        this.pushStack(object[k]);
                        _lua_rawset(this.state, -3);
                    }
                } else {
                    // Array
                    _lua_createtable(this.state, object.length, 0);
                    for (var k in object) {
                        k = 1*k;
                        this.pushStack(k+1)
                        this.pushStack(object[k]);
                        _lua_rawset(this.state, -3);
                    }
                }
                return 1;
            default:
                throw new Error("Cannot push object to stack: " + object);
        }
    },
    get_stack_args: function(num_args) {
        num_args = (num_args === undefined) ? _lua_gettop(this.state) : num_args;
        var args = [];
        for (var i = 0; i < num_args; i++) {
            args.push(this.popStack());
        }
        return args.reverse();
    },
    anon_lua_object: function (object) {
        // Create anonymous Lua object or literal from JS object
        if (object == undefined || object == null) {
            return "nil";
        }
        switch (typeof object) {
            case "string":
                return '"' + object.replace('"','\\"') + '"';
            case "function":
            case "object":
                return this.inject(object);
            default:
                return object.toString();
        }
    },
    get_tmp_name: function() {
        return "_weblua_tmp_" + this.tmp_id++;
    },
    cleanup_tmp: function(name) {
        if (name == "_weblua_tmp_" + (this.tmp_id-1)) {
            // Latest tmp_id, can safely decrement
            tmp_id--;
        }
        // Set global to nil
        _lua_pushnil(this.state);
        var strptr = this.allocate_string(name);
        _lua_setglobal(this.state, strptr);
        _free(strptr);
    },
    stdout: function (str) {console.log("stdout: " +str)},
    stderr: function (str) {console.log("stderr: " +str)},
    report_error: function(defaultMessage) {
        if (this.isInitialized) {
            var errorMessage = this.popStack();
            if (!(errorMessage && errorMessage.length)) errorMessage = defaultMessage;
            this.stderr(errorMessage);
        } else {
            this.stderr(defaultMessage);
        }
        _lua_settop(this.state, 0);
    }
}
// Public functions
this['Lua']['initialize'] = this['Lua'].initialize;
this['Lua']['stdout'] = this['Lua'].stdout;
this['Lua']['stderr'] = this['Lua'].stderr;
this['Lua']['eval'] = this['Lua'].eval;
this['Lua']['exec'] = this['Lua'].exec;
this['Lua']['anon_lua_object'] = this['Lua'].anon_lua_object;
this['Lua']['inject'] = this['Lua'].inject;
this['Lua']['cache'] = this['Lua'].cache;
this['Lua']['set_js_string_to_lua'] = this['Lua'].set_js_string_to_lua;
this['Lua']['set_lua_string_to_js'] = this['Lua'].set_lua_string_to_js;

Lua.cache['items'] = {};
Lua.cache['clear'] = function (evalstring) { delete Lua.cache['items'][evalstring] }
